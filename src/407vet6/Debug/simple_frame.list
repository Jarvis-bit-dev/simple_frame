
simple_frame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009508  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08009698  08009698  0000a698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c70  08009c70  0000b1e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009c70  08009c70  0000ac70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c78  08009c78  0000b1e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c78  08009c78  0000ac78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009c7c  08009c7c  0000ac7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  08009c80  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1e0  2**0
                  CONTENTS
 10 .bss          00001164  200001e0  200001e0  0000b1e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001344  20001344  0000b1e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb24  00000000  00000000  0000b210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027fd  00000000  00000000  00019d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e58  00000000  00000000  0001c538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b08  00000000  00000000  0001d390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229d5  00000000  00000000  0001de98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011a0b  00000000  00000000  0004086d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd774  00000000  00000000  00052278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f9ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005318  00000000  00000000  0011fa30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00124d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009680 	.word	0x08009680

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009680 	.word	0x08009680

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001040:	b480      	push	{r7}
 8001042:	b085      	sub	sp, #20
 8001044:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	4b17      	ldr	r3, [pc, #92]	@ (80010a8 <MX_GPIO_Init+0x68>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a16      	ldr	r2, [pc, #88]	@ (80010a8 <MX_GPIO_Init+0x68>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <MX_GPIO_Init+0x68>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	60fb      	str	r3, [r7, #12]
 8001060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <MX_GPIO_Init+0x68>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <MX_GPIO_Init+0x68>)
 800106c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <MX_GPIO_Init+0x68>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <MX_GPIO_Init+0x68>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a08      	ldr	r2, [pc, #32]	@ (80010a8 <MX_GPIO_Init+0x68>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <MX_GPIO_Init+0x68>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]

}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1 , 0xffff);
 80010b4:	1d39      	adds	r1, r7, #4
 80010b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010ba:	2201      	movs	r2, #1
 80010bc:	4803      	ldr	r0, [pc, #12]	@ (80010cc <__io_putchar+0x20>)
 80010be:	f001 ff39 	bl	8002f34 <HAL_UART_Transmit>
    return ch;
 80010c2:	687b      	ldr	r3, [r7, #4]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000694 	.word	0x20000694

080010d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d4:	f000 fb80 	bl	80017d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d8:	f000 f826 	bl	8001128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010dc:	f7ff ffb0 	bl	8001040 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010e0:	f000 faa6 	bl	8001630 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80010e4:	f000 f9f2 	bl	80014cc <MX_TIM6_Init>
  MX_TIM7_Init();
 80010e8:	f000 fa26 	bl	8001538 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80010ec:	480a      	ldr	r0, [pc, #40]	@ (8001118 <main+0x48>)
 80010ee:	f001 fc0d 	bl	800290c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80010f2:	480a      	ldr	r0, [pc, #40]	@ (800111c <main+0x4c>)
 80010f4:	f001 fc0a 	bl	800290c <HAL_TIM_Base_Start_IT>
  sf_entry();
 80010f8:	f002 ff9c 	bl	8004034 <sf_entry>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sf_loop();
 80010fc:	f002 ffc3 	bl	8004086 <sf_loop>
	  extern uint8_t g_flag_shell_received;
	  extern void shell_process_input(char *input);
	  extern uint8_t RxProBuf[1024];
	  if(1 == g_flag_shell_received)
 8001100:	4b07      	ldr	r3, [pc, #28]	@ (8001120 <main+0x50>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b01      	cmp	r3, #1
 8001106:	d1f9      	bne.n	80010fc <main+0x2c>
	  {
		  //解析
		  g_flag_shell_received = 0;
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <main+0x50>)
 800110a:	2200      	movs	r2, #0
 800110c:	701a      	strb	r2, [r3, #0]
		  shell_process_input(RxProBuf);
 800110e:	4805      	ldr	r0, [pc, #20]	@ (8001124 <main+0x54>)
 8001110:	f003 f904 	bl	800431c <shell_process_input>
  {
 8001114:	e7f2      	b.n	80010fc <main+0x2c>
 8001116:	bf00      	nop
 8001118:	20000200 	.word	0x20000200
 800111c:	20000248 	.word	0x20000248
 8001120:	20000690 	.word	0x20000690
 8001124:	20000290 	.word	0x20000290

08001128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b094      	sub	sp, #80	@ 0x50
 800112c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112e:	f107 0320 	add.w	r3, r7, #32
 8001132:	2230      	movs	r2, #48	@ 0x30
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f005 f96e 	bl	8006418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	4b28      	ldr	r3, [pc, #160]	@ (80011f4 <SystemClock_Config+0xcc>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001154:	4a27      	ldr	r2, [pc, #156]	@ (80011f4 <SystemClock_Config+0xcc>)
 8001156:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800115a:	6413      	str	r3, [r2, #64]	@ 0x40
 800115c:	4b25      	ldr	r3, [pc, #148]	@ (80011f4 <SystemClock_Config+0xcc>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001160:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <SystemClock_Config+0xd0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a21      	ldr	r2, [pc, #132]	@ (80011f8 <SystemClock_Config+0xd0>)
 8001172:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b1f      	ldr	r3, [pc, #124]	@ (80011f8 <SystemClock_Config+0xd0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001184:	2301      	movs	r3, #1
 8001186:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001188:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800118c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118e:	2302      	movs	r3, #2
 8001190:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001192:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001196:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001198:	2304      	movs	r3, #4
 800119a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800119c:	23a8      	movs	r3, #168	@ 0xa8
 800119e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011a4:	2304      	movs	r3, #4
 80011a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 0320 	add.w	r3, r7, #32
 80011ac:	4618      	mov	r0, r3
 80011ae:	f000 fec5 	bl	8001f3c <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011b8:	f000 f820 	bl	80011fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011bc:	230f      	movs	r3, #15
 80011be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c0:	2302      	movs	r3, #2
 80011c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	2105      	movs	r1, #5
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 f926 	bl	800242c <HAL_RCC_ClockConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011e6:	f000 f809 	bl	80011fc <Error_Handler>
  }
}
 80011ea:	bf00      	nop
 80011ec:	3750      	adds	r7, #80	@ 0x50
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40007000 	.word	0x40007000

080011fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001200:	b672      	cpsid	i
}
 8001202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <Error_Handler+0x8>

08001208 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001208:	b480      	push	{r7}
 800120a:	b083      	sub	sp, #12
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	607b      	str	r3, [r7, #4]
 8001212:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <HAL_MspInit+0x4c>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	4a0f      	ldr	r2, [pc, #60]	@ (8001254 <HAL_MspInit+0x4c>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121c:	6453      	str	r3, [r2, #68]	@ 0x44
 800121e:	4b0d      	ldr	r3, [pc, #52]	@ (8001254 <HAL_MspInit+0x4c>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	603b      	str	r3, [r7, #0]
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <HAL_MspInit+0x4c>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	4a08      	ldr	r2, [pc, #32]	@ (8001254 <HAL_MspInit+0x4c>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001238:	6413      	str	r3, [r2, #64]	@ 0x40
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_MspInit+0x4c>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001242:	603b      	str	r3, [r7, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800

08001258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800125c:	bf00      	nop
 800125e:	e7fd      	b.n	800125c <NMI_Handler+0x4>

08001260 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <HardFault_Handler+0x4>

08001268 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <MemManage_Handler+0x4>

08001270 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <BusFault_Handler+0x4>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <UsageFault_Handler+0x4>

08001280 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr

080012aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012ae:	f000 fae5 	bl	800187c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  task_system_tick_inc();
 80012b2:	f002 ff27 	bl	8004104 <task_system_tick_inc>

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
	...

080012bc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012c0:	4802      	ldr	r0, [pc, #8]	@ (80012cc <USART1_IRQHandler+0x10>)
 80012c2:	f001 ff1f 	bl	8003104 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000694 	.word	0x20000694

080012d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80012d4:	4802      	ldr	r0, [pc, #8]	@ (80012e0 <TIM6_DAC_IRQHandler+0x10>)
 80012d6:	f001 fb89 	bl	80029ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000200 	.word	0x20000200

080012e4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80012e8:	4802      	ldr	r0, [pc, #8]	@ (80012f4 <TIM7_IRQHandler+0x10>)
 80012ea:	f001 fb7f 	bl	80029ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000248 	.word	0x20000248

080012f8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	//1S
    if (htim == (&htim6))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a05      	ldr	r2, [pc, #20]	@ (8001318 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d102      	bne.n	800130e <HAL_TIM_PeriodElapsedCallback+0x16>
    {
  	  task_execute(TASK_REALTIME);
 8001308:	2000      	movs	r0, #0
 800130a:	f002 ff93 	bl	8004234 <task_execute>
    }
    //1ms
    if (htim == (&htim7))
    {
    }
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000200 	.word	0x20000200

0800131c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return 1;
 8001320:	2301      	movs	r3, #1
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <_kill>:

int _kill(int pid, int sig)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001336:	f005 f943 	bl	80065c0 <__errno>
 800133a:	4603      	mov	r3, r0
 800133c:	2216      	movs	r2, #22
 800133e:	601a      	str	r2, [r3, #0]
  return -1;
 8001340:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001344:	4618      	mov	r0, r3
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <_exit>:

void _exit (int status)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffe7 	bl	800132c <_kill>
  while (1) {}    /* Make sure we hang here */
 800135e:	bf00      	nop
 8001360:	e7fd      	b.n	800135e <_exit+0x12>

08001362 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	e00a      	b.n	800138a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001374:	f3af 8000 	nop.w
 8001378:	4601      	mov	r1, r0
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	1c5a      	adds	r2, r3, #1
 800137e:	60ba      	str	r2, [r7, #8]
 8001380:	b2ca      	uxtb	r2, r1
 8001382:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	3301      	adds	r3, #1
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	697a      	ldr	r2, [r7, #20]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	429a      	cmp	r2, r3
 8001390:	dbf0      	blt.n	8001374 <_read+0x12>
  }

  return len;
 8001392:	687b      	ldr	r3, [r7, #4]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a8:	2300      	movs	r3, #0
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	e009      	b.n	80013c2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	60ba      	str	r2, [r7, #8]
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fe78 	bl	80010ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	3301      	adds	r3, #1
 80013c0:	617b      	str	r3, [r7, #20]
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	dbf1      	blt.n	80013ae <_write+0x12>
  }
  return len;
 80013ca:	687b      	ldr	r3, [r7, #4]
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <_close>:

int _close(int file)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013fc:	605a      	str	r2, [r3, #4]
  return 0;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <_isatty>:

int _isatty(int file)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001414:	2301      	movs	r3, #1
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001422:	b480      	push	{r7}
 8001424:	b085      	sub	sp, #20
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001444:	4a14      	ldr	r2, [pc, #80]	@ (8001498 <_sbrk+0x5c>)
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <_sbrk+0x60>)
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001450:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d102      	bne.n	800145e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <_sbrk+0x64>)
 800145a:	4a12      	ldr	r2, [pc, #72]	@ (80014a4 <_sbrk+0x68>)
 800145c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <_sbrk+0x64>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4413      	add	r3, r2
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	429a      	cmp	r2, r3
 800146a:	d207      	bcs.n	800147c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800146c:	f005 f8a8 	bl	80065c0 <__errno>
 8001470:	4603      	mov	r3, r0
 8001472:	220c      	movs	r2, #12
 8001474:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
 800147a:	e009      	b.n	8001490 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800147c:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001482:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <_sbrk+0x64>)
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	4a05      	ldr	r2, [pc, #20]	@ (80014a0 <_sbrk+0x64>)
 800148c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800148e:	68fb      	ldr	r3, [r7, #12]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20020000 	.word	0x20020000
 800149c:	00000400 	.word	0x00000400
 80014a0:	200001fc 	.word	0x200001fc
 80014a4:	20001348 	.word	0x20001348

080014a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <SystemInit+0x20>)
 80014ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014b2:	4a05      	ldr	r2, [pc, #20]	@ (80014c8 <SystemInit+0x20>)
 80014b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d2:	463b      	mov	r3, r7
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <MX_TIM6_Init+0x64>)
 80014dc:	4a15      	ldr	r2, [pc, #84]	@ (8001534 <MX_TIM6_Init+0x68>)
 80014de:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 80014e0:	4b13      	ldr	r3, [pc, #76]	@ (8001530 <MX_TIM6_Init+0x64>)
 80014e2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80014e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e8:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <MX_TIM6_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 80014ee:	4b10      	ldr	r3, [pc, #64]	@ (8001530 <MX_TIM6_Init+0x64>)
 80014f0:	f242 720f 	movw	r2, #9999	@ 0x270f
 80014f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <MX_TIM6_Init+0x64>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014fc:	480c      	ldr	r0, [pc, #48]	@ (8001530 <MX_TIM6_Init+0x64>)
 80014fe:	f001 f9b5 	bl	800286c <HAL_TIM_Base_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001508:	f7ff fe78 	bl	80011fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_TIM6_Init+0x64>)
 800151a:	f001 fc2b 	bl	8002d74 <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001524:	f7ff fe6a 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000200 	.word	0x20000200
 8001534:	40001000 	.word	0x40001000

08001538 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153e:	463b      	mov	r3, r7
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <MX_TIM7_Init+0x64>)
 8001548:	4a15      	ldr	r2, [pc, #84]	@ (80015a0 <MX_TIM7_Init+0x68>)
 800154a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84-1;
 800154c:	4b13      	ldr	r3, [pc, #76]	@ (800159c <MX_TIM7_Init+0x64>)
 800154e:	2253      	movs	r2, #83	@ 0x53
 8001550:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001552:	4b12      	ldr	r3, [pc, #72]	@ (800159c <MX_TIM7_Init+0x64>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8001558:	4b10      	ldr	r3, [pc, #64]	@ (800159c <MX_TIM7_Init+0x64>)
 800155a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800155e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001560:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <MX_TIM7_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001566:	480d      	ldr	r0, [pc, #52]	@ (800159c <MX_TIM7_Init+0x64>)
 8001568:	f001 f980 	bl	800286c <HAL_TIM_Base_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001572:	f7ff fe43 	bl	80011fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800157e:	463b      	mov	r3, r7
 8001580:	4619      	mov	r1, r3
 8001582:	4806      	ldr	r0, [pc, #24]	@ (800159c <MX_TIM7_Init+0x64>)
 8001584:	f001 fbf6 	bl	8002d74 <HAL_TIMEx_MasterConfigSynchronization>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800158e:	f7ff fe35 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000248 	.word	0x20000248
 80015a0:	40001400 	.word	0x40001400

080015a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001624 <HAL_TIM_Base_MspInit+0x80>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d116      	bne.n	80015e4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001628 <HAL_TIM_Base_MspInit+0x84>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015be:	4a1a      	ldr	r2, [pc, #104]	@ (8001628 <HAL_TIM_Base_MspInit+0x84>)
 80015c0:	f043 0310 	orr.w	r3, r3, #16
 80015c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015c6:	4b18      	ldr	r3, [pc, #96]	@ (8001628 <HAL_TIM_Base_MspInit+0x84>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2036      	movs	r0, #54	@ 0x36
 80015d8:	f000 fa4b 	bl	8001a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015dc:	2036      	movs	r0, #54	@ 0x36
 80015de:	f000 fa64 	bl	8001aaa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80015e2:	e01a      	b.n	800161a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a10      	ldr	r2, [pc, #64]	@ (800162c <HAL_TIM_Base_MspInit+0x88>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d115      	bne.n	800161a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <HAL_TIM_Base_MspInit+0x84>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001628 <HAL_TIM_Base_MspInit+0x84>)
 80015f8:	f043 0320 	orr.w	r3, r3, #32
 80015fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001628 <HAL_TIM_Base_MspInit+0x84>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001602:	f003 0320 	and.w	r3, r3, #32
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800160a:	2200      	movs	r2, #0
 800160c:	2100      	movs	r1, #0
 800160e:	2037      	movs	r0, #55	@ 0x37
 8001610:	f000 fa2f 	bl	8001a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001614:	2037      	movs	r0, #55	@ 0x37
 8001616:	f000 fa48 	bl	8001aaa <HAL_NVIC_EnableIRQ>
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40001000 	.word	0x40001000
 8001628:	40023800 	.word	0x40023800
 800162c:	40001400 	.word	0x40001400

08001630 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001634:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <MX_USART1_UART_Init+0x68>)
 8001636:	4a19      	ldr	r2, [pc, #100]	@ (800169c <MX_USART1_UART_Init+0x6c>)
 8001638:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800163a:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <MX_USART1_UART_Init+0x68>)
 800163c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001640:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <MX_USART1_UART_Init+0x68>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b13      	ldr	r3, [pc, #76]	@ (8001698 <MX_USART1_UART_Init+0x68>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800164e:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <MX_USART1_UART_Init+0x68>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <MX_USART1_UART_Init+0x68>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <MX_USART1_UART_Init+0x68>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <MX_USART1_UART_Init+0x68>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001666:	480c      	ldr	r0, [pc, #48]	@ (8001698 <MX_USART1_UART_Init+0x68>)
 8001668:	f001 fc14 	bl	8002e94 <HAL_UART_Init>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001672:	f7ff fdc3 	bl	80011fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8001676:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <MX_USART1_UART_Init+0x68>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68da      	ldr	r2, [r3, #12]
 800167c:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <MX_USART1_UART_Init+0x68>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f042 0210 	orr.w	r2, r2, #16
 8001684:	60da      	str	r2, [r3, #12]
  HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxProBuf, 1024);
 8001686:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800168a:	4905      	ldr	r1, [pc, #20]	@ (80016a0 <MX_USART1_UART_Init+0x70>)
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <MX_USART1_UART_Init+0x68>)
 800168e:	f001 fcdc 	bl	800304a <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END USART1_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000694 	.word	0x20000694
 800169c:	40011000 	.word	0x40011000
 80016a0:	20000290 	.word	0x20000290

080016a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	@ 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001738 <HAL_UART_MspInit+0x94>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d134      	bne.n	8001730 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
 80016ca:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <HAL_UART_MspInit+0x98>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	4a1b      	ldr	r2, [pc, #108]	@ (800173c <HAL_UART_MspInit+0x98>)
 80016d0:	f043 0310 	orr.w	r3, r3, #16
 80016d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80016d6:	4b19      	ldr	r3, [pc, #100]	@ (800173c <HAL_UART_MspInit+0x98>)
 80016d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	613b      	str	r3, [r7, #16]
 80016e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	4b15      	ldr	r3, [pc, #84]	@ (800173c <HAL_UART_MspInit+0x98>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a14      	ldr	r2, [pc, #80]	@ (800173c <HAL_UART_MspInit+0x98>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b12      	ldr	r3, [pc, #72]	@ (800173c <HAL_UART_MspInit+0x98>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016fe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001702:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001710:	2307      	movs	r3, #7
 8001712:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	4809      	ldr	r0, [pc, #36]	@ (8001740 <HAL_UART_MspInit+0x9c>)
 800171c:	f000 fa72 	bl	8001c04 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	2025      	movs	r0, #37	@ 0x25
 8001726:	f000 f9a4 	bl	8001a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800172a:	2025      	movs	r0, #37	@ 0x25
 800172c:	f000 f9bd 	bl	8001aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001730:	bf00      	nop
 8001732:	3728      	adds	r7, #40	@ 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40011000 	.word	0x40011000
 800173c:	40023800 	.word	0x40023800
 8001740:	40020000 	.word	0x40020000

08001744 <HAL_UARTEx_RxEventCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	460b      	mov	r3, r1
 800174e:	807b      	strh	r3, [r7, #2]
    if (huart->Instance == USART1) {
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a07      	ldr	r2, [pc, #28]	@ (8001774 <HAL_UARTEx_RxEventCallback+0x30>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d108      	bne.n	800176c <HAL_UARTEx_RxEventCallback+0x28>

     /*
      *  逻辑处理
      */
    g_flag_shell_received = 1;
 800175a:	4b07      	ldr	r3, [pc, #28]	@ (8001778 <HAL_UARTEx_RxEventCallback+0x34>)
 800175c:	2201      	movs	r2, #1
 800175e:	701a      	strb	r2, [r3, #0]
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxProBuf, 1024);
 8001760:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001764:	4905      	ldr	r1, [pc, #20]	@ (800177c <HAL_UARTEx_RxEventCallback+0x38>)
 8001766:	4806      	ldr	r0, [pc, #24]	@ (8001780 <HAL_UARTEx_RxEventCallback+0x3c>)
 8001768:	f001 fc6f 	bl	800304a <HAL_UARTEx_ReceiveToIdle_IT>
 }
}
 800176c:	bf00      	nop
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40011000 	.word	0x40011000
 8001778:	20000690 	.word	0x20000690
 800177c:	20000290 	.word	0x20000290
 8001780:	20000694 	.word	0x20000694

08001784 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001784:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001788:	f7ff fe8e 	bl	80014a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800178c:	480c      	ldr	r0, [pc, #48]	@ (80017c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800178e:	490d      	ldr	r1, [pc, #52]	@ (80017c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001790:	4a0d      	ldr	r2, [pc, #52]	@ (80017c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a4:	4c0a      	ldr	r4, [pc, #40]	@ (80017d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017b2:	f004 ff0b 	bl	80065cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017b6:	f7ff fc8b 	bl	80010d0 <main>
  bx  lr    
 80017ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80017bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80017c8:	08009c80 	.word	0x08009c80
  ldr r2, =_sbss
 80017cc:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80017d0:	20001344 	.word	0x20001344

080017d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC_IRQHandler>
	...

080017d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001818 <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001818 <HAL_Init+0x40>)
 80017e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001818 <HAL_Init+0x40>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001818 <HAL_Init+0x40>)
 80017ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <HAL_Init+0x40>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a07      	ldr	r2, [pc, #28]	@ (8001818 <HAL_Init+0x40>)
 80017fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f000 f92b 	bl	8001a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001806:	200f      	movs	r0, #15
 8001808:	f000 f808 	bl	800181c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180c:	f7ff fcfc 	bl	8001208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40023c00 	.word	0x40023c00

0800181c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001824:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <HAL_InitTick+0x54>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <HAL_InitTick+0x58>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f943 	bl	8001ac6 <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e00e      	b.n	8001868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d80a      	bhi.n	8001866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f000 f90b 	bl	8001a72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800185c:	4a06      	ldr	r2, [pc, #24]	@ (8001878 <HAL_InitTick+0x5c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000000 	.word	0x20000000
 8001874:	20000008 	.word	0x20000008
 8001878:	20000004 	.word	0x20000004

0800187c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_IncTick+0x20>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <HAL_IncTick+0x24>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a04      	ldr	r2, [pc, #16]	@ (80018a0 <HAL_IncTick+0x24>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	20000008 	.word	0x20000008
 80018a0:	200006dc 	.word	0x200006dc

080018a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;
 80018a8:	4b03      	ldr	r3, [pc, #12]	@ (80018b8 <HAL_GetTick+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	200006dc 	.word	0x200006dc

080018bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018d8:	4013      	ands	r3, r2
 80018da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ee:	4a04      	ldr	r2, [pc, #16]	@ (8001900 <__NVIC_SetPriorityGrouping+0x44>)
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	60d3      	str	r3, [r2, #12]
}
 80018f4:	bf00      	nop
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001908:	4b04      	ldr	r3, [pc, #16]	@ (800191c <__NVIC_GetPriorityGrouping+0x18>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	0a1b      	lsrs	r3, r3, #8
 800190e:	f003 0307 	and.w	r3, r3, #7
}
 8001912:	4618      	mov	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192e:	2b00      	cmp	r3, #0
 8001930:	db0b      	blt.n	800194a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	f003 021f 	and.w	r2, r3, #31
 8001938:	4907      	ldr	r1, [pc, #28]	@ (8001958 <__NVIC_EnableIRQ+0x38>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	2001      	movs	r0, #1
 8001942:	fa00 f202 	lsl.w	r2, r0, r2
 8001946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e100 	.word	0xe000e100

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	@ (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	@ (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	@ 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	@ 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a28:	d301      	bcc.n	8001a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00f      	b.n	8001a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a58 <SysTick_Config+0x40>)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a36:	210f      	movs	r1, #15
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295
 8001a3c:	f7ff ff8e 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a40:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <SysTick_Config+0x40>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a46:	4b04      	ldr	r3, [pc, #16]	@ (8001a58 <SysTick_Config+0x40>)
 8001a48:	2207      	movs	r2, #7
 8001a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	e000e010 	.word	0xe000e010

08001a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f7ff ff29 	bl	80018bc <__NVIC_SetPriorityGrouping>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b086      	sub	sp, #24
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4603      	mov	r3, r0
 8001a7a:	60b9      	str	r1, [r7, #8]
 8001a7c:	607a      	str	r2, [r7, #4]
 8001a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a84:	f7ff ff3e 	bl	8001904 <__NVIC_GetPriorityGrouping>
 8001a88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	68b9      	ldr	r1, [r7, #8]
 8001a8e:	6978      	ldr	r0, [r7, #20]
 8001a90:	f7ff ff8e 	bl	80019b0 <NVIC_EncodePriority>
 8001a94:	4602      	mov	r2, r0
 8001a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff ff5d 	bl	800195c <__NVIC_SetPriority>
}
 8001aa2:	bf00      	nop
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff31 	bl	8001920 <__NVIC_EnableIRQ>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff ffa2 	bl	8001a18 <SysTick_Config>
 8001ad4:	4603      	mov	r3, r0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b084      	sub	sp, #16
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001aec:	f7ff feda 	bl	80018a4 <HAL_GetTick>
 8001af0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d008      	beq.n	8001b10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2280      	movs	r2, #128	@ 0x80
 8001b02:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e052      	b.n	8001bb6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0216 	bic.w	r2, r2, #22
 8001b1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d103      	bne.n	8001b40 <HAL_DMA_Abort+0x62>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0208 	bic.w	r2, r2, #8
 8001b4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b60:	e013      	b.n	8001b8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b62:	f7ff fe9f 	bl	80018a4 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b05      	cmp	r3, #5
 8001b6e:	d90c      	bls.n	8001b8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2220      	movs	r2, #32
 8001b74:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2203      	movs	r2, #3
 8001b7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	e015      	b.n	8001bb6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1e4      	bne.n	8001b62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b9c:	223f      	movs	r2, #63	@ 0x3f
 8001b9e:	409a      	lsls	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d004      	beq.n	8001bdc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2280      	movs	r2, #128	@ 0x80
 8001bd6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e00c      	b.n	8001bf6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2205      	movs	r2, #5
 8001be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f022 0201 	bic.w	r2, r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	@ 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	e16b      	b.n	8001ef8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c20:	2201      	movs	r2, #1
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c34:	693a      	ldr	r2, [r7, #16]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	f040 815a 	bne.w	8001ef2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d005      	beq.n	8001c56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d130      	bne.n	8001cb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	2203      	movs	r2, #3
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	68da      	ldr	r2, [r3, #12]
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 0201 	and.w	r2, r3, #1
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d017      	beq.n	8001cf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	2203      	movs	r2, #3
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	43db      	mvns	r3, r3
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d123      	bne.n	8001d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	08da      	lsrs	r2, r3, #3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3208      	adds	r2, #8
 8001d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f003 0307 	and.w	r3, r3, #7
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	220f      	movs	r2, #15
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	691a      	ldr	r2, [r3, #16]
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	08da      	lsrs	r2, r3, #3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3208      	adds	r2, #8
 8001d42:	69b9      	ldr	r1, [r7, #24]
 8001d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	2203      	movs	r2, #3
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 0203 	and.w	r2, r3, #3
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	f000 80b4 	beq.w	8001ef2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b60      	ldr	r3, [pc, #384]	@ (8001f10 <HAL_GPIO_Init+0x30c>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d92:	4a5f      	ldr	r2, [pc, #380]	@ (8001f10 <HAL_GPIO_Init+0x30c>)
 8001d94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001f10 <HAL_GPIO_Init+0x30c>)
 8001d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001da6:	4a5b      	ldr	r2, [pc, #364]	@ (8001f14 <HAL_GPIO_Init+0x310>)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	3302      	adds	r3, #2
 8001dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0303 	and.w	r3, r3, #3
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	220f      	movs	r2, #15
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a52      	ldr	r2, [pc, #328]	@ (8001f18 <HAL_GPIO_Init+0x314>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d02b      	beq.n	8001e2a <HAL_GPIO_Init+0x226>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a51      	ldr	r2, [pc, #324]	@ (8001f1c <HAL_GPIO_Init+0x318>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d025      	beq.n	8001e26 <HAL_GPIO_Init+0x222>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a50      	ldr	r2, [pc, #320]	@ (8001f20 <HAL_GPIO_Init+0x31c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d01f      	beq.n	8001e22 <HAL_GPIO_Init+0x21e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4f      	ldr	r2, [pc, #316]	@ (8001f24 <HAL_GPIO_Init+0x320>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d019      	beq.n	8001e1e <HAL_GPIO_Init+0x21a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4e      	ldr	r2, [pc, #312]	@ (8001f28 <HAL_GPIO_Init+0x324>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d013      	beq.n	8001e1a <HAL_GPIO_Init+0x216>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4d      	ldr	r2, [pc, #308]	@ (8001f2c <HAL_GPIO_Init+0x328>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d00d      	beq.n	8001e16 <HAL_GPIO_Init+0x212>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4c      	ldr	r2, [pc, #304]	@ (8001f30 <HAL_GPIO_Init+0x32c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d007      	beq.n	8001e12 <HAL_GPIO_Init+0x20e>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4b      	ldr	r2, [pc, #300]	@ (8001f34 <HAL_GPIO_Init+0x330>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d101      	bne.n	8001e0e <HAL_GPIO_Init+0x20a>
 8001e0a:	2307      	movs	r3, #7
 8001e0c:	e00e      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e0e:	2308      	movs	r3, #8
 8001e10:	e00c      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e12:	2306      	movs	r3, #6
 8001e14:	e00a      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e16:	2305      	movs	r3, #5
 8001e18:	e008      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e1a:	2304      	movs	r3, #4
 8001e1c:	e006      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e004      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e22:	2302      	movs	r3, #2
 8001e24:	e002      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e26:	2301      	movs	r3, #1
 8001e28:	e000      	b.n	8001e2c <HAL_GPIO_Init+0x228>
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	f002 0203 	and.w	r2, r2, #3
 8001e32:	0092      	lsls	r2, r2, #2
 8001e34:	4093      	lsls	r3, r2
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e3c:	4935      	ldr	r1, [pc, #212]	@ (8001f14 <HAL_GPIO_Init+0x310>)
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	089b      	lsrs	r3, r3, #2
 8001e42:	3302      	adds	r3, #2
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f38 <HAL_GPIO_Init+0x334>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e6e:	4a32      	ldr	r2, [pc, #200]	@ (8001f38 <HAL_GPIO_Init+0x334>)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e74:	4b30      	ldr	r3, [pc, #192]	@ (8001f38 <HAL_GPIO_Init+0x334>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e98:	4a27      	ldr	r2, [pc, #156]	@ (8001f38 <HAL_GPIO_Init+0x334>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e9e:	4b26      	ldr	r3, [pc, #152]	@ (8001f38 <HAL_GPIO_Init+0x334>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f38 <HAL_GPIO_Init+0x334>)
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <HAL_GPIO_Init+0x334>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001eec:	4a12      	ldr	r2, [pc, #72]	@ (8001f38 <HAL_GPIO_Init+0x334>)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	61fb      	str	r3, [r7, #28]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	2b0f      	cmp	r3, #15
 8001efc:	f67f ae90 	bls.w	8001c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f00:	bf00      	nop
 8001f02:	bf00      	nop
 8001f04:	3724      	adds	r7, #36	@ 0x24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	40013800 	.word	0x40013800
 8001f18:	40020000 	.word	0x40020000
 8001f1c:	40020400 	.word	0x40020400
 8001f20:	40020800 	.word	0x40020800
 8001f24:	40020c00 	.word	0x40020c00
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40021400 	.word	0x40021400
 8001f30:	40021800 	.word	0x40021800
 8001f34:	40021c00 	.word	0x40021c00
 8001f38:	40013c00 	.word	0x40013c00

08001f3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d101      	bne.n	8001f4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e267      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d075      	beq.n	8002046 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f5a:	4b88      	ldr	r3, [pc, #544]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 030c 	and.w	r3, r3, #12
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	d00c      	beq.n	8001f80 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f66:	4b85      	ldr	r3, [pc, #532]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001f6e:	2b08      	cmp	r3, #8
 8001f70:	d112      	bne.n	8001f98 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f72:	4b82      	ldr	r3, [pc, #520]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f7a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f7e:	d10b      	bne.n	8001f98 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f80:	4b7e      	ldr	r3, [pc, #504]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d05b      	beq.n	8002044 <HAL_RCC_OscConfig+0x108>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d157      	bne.n	8002044 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e242      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fa0:	d106      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x74>
 8001fa2:	4b76      	ldr	r3, [pc, #472]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a75      	ldr	r2, [pc, #468]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8001fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fac:	6013      	str	r3, [r2, #0]
 8001fae:	e01d      	b.n	8001fec <HAL_RCC_OscConfig+0xb0>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fb8:	d10c      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x98>
 8001fba:	4b70      	ldr	r3, [pc, #448]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a6f      	ldr	r2, [pc, #444]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8001fc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	4b6d      	ldr	r3, [pc, #436]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a6c      	ldr	r2, [pc, #432]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8001fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e00b      	b.n	8001fec <HAL_RCC_OscConfig+0xb0>
 8001fd4:	4b69      	ldr	r3, [pc, #420]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a68      	ldr	r2, [pc, #416]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8001fda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b66      	ldr	r3, [pc, #408]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a65      	ldr	r2, [pc, #404]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8001fe6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d013      	beq.n	800201c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff4:	f7ff fc56 	bl	80018a4 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ffc:	f7ff fc52 	bl	80018a4 <HAL_GetTick>
 8002000:	4602      	mov	r2, r0
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b64      	cmp	r3, #100	@ 0x64
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e207      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b5b      	ldr	r3, [pc, #364]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0f0      	beq.n	8001ffc <HAL_RCC_OscConfig+0xc0>
 800201a:	e014      	b.n	8002046 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff fc42 	bl	80018a4 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff fc3e 	bl	80018a4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	@ 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e1f3      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002036:	4b51      	ldr	r3, [pc, #324]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0xe8>
 8002042:	e000      	b.n	8002046 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002044:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d063      	beq.n	800211a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002052:	4b4a      	ldr	r3, [pc, #296]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	f003 030c 	and.w	r3, r3, #12
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800205e:	4b47      	ldr	r3, [pc, #284]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002066:	2b08      	cmp	r3, #8
 8002068:	d11c      	bne.n	80020a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800206a:	4b44      	ldr	r3, [pc, #272]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d116      	bne.n	80020a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002076:	4b41      	ldr	r3, [pc, #260]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d005      	beq.n	800208e <HAL_RCC_OscConfig+0x152>
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	2b01      	cmp	r3, #1
 8002088:	d001      	beq.n	800208e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e1c7      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208e:	4b3b      	ldr	r3, [pc, #236]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4937      	ldr	r1, [pc, #220]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020a2:	e03a      	b.n	800211a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d020      	beq.n	80020ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020ac:	4b34      	ldr	r3, [pc, #208]	@ (8002180 <HAL_RCC_OscConfig+0x244>)
 80020ae:	2201      	movs	r2, #1
 80020b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b2:	f7ff fbf7 	bl	80018a4 <HAL_GetTick>
 80020b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b8:	e008      	b.n	80020cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020ba:	f7ff fbf3 	bl	80018a4 <HAL_GetTick>
 80020be:	4602      	mov	r2, r0
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e1a8      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020cc:	4b2b      	ldr	r3, [pc, #172]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0f0      	beq.n	80020ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d8:	4b28      	ldr	r3, [pc, #160]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4925      	ldr	r1, [pc, #148]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	600b      	str	r3, [r1, #0]
 80020ec:	e015      	b.n	800211a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ee:	4b24      	ldr	r3, [pc, #144]	@ (8002180 <HAL_RCC_OscConfig+0x244>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7ff fbd6 	bl	80018a4 <HAL_GetTick>
 80020f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fa:	e008      	b.n	800210e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020fc:	f7ff fbd2 	bl	80018a4 <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d901      	bls.n	800210e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e187      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210e:	4b1b      	ldr	r3, [pc, #108]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d1f0      	bne.n	80020fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	2b00      	cmp	r3, #0
 8002124:	d036      	beq.n	8002194 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	695b      	ldr	r3, [r3, #20]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d016      	beq.n	800215c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212e:	4b15      	ldr	r3, [pc, #84]	@ (8002184 <HAL_RCC_OscConfig+0x248>)
 8002130:	2201      	movs	r2, #1
 8002132:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002134:	f7ff fbb6 	bl	80018a4 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800213c:	f7ff fbb2 	bl	80018a4 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e167      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214e:	4b0b      	ldr	r3, [pc, #44]	@ (800217c <HAL_RCC_OscConfig+0x240>)
 8002150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x200>
 800215a:	e01b      	b.n	8002194 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800215c:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <HAL_RCC_OscConfig+0x248>)
 800215e:	2200      	movs	r2, #0
 8002160:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002162:	f7ff fb9f 	bl	80018a4 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002168:	e00e      	b.n	8002188 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216a:	f7ff fb9b 	bl	80018a4 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d907      	bls.n	8002188 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e150      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
 800217c:	40023800 	.word	0x40023800
 8002180:	42470000 	.word	0x42470000
 8002184:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002188:	4b88      	ldr	r3, [pc, #544]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 800218a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1ea      	bne.n	800216a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	f000 8097 	beq.w	80022d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a2:	2300      	movs	r3, #0
 80021a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a6:	4b81      	ldr	r3, [pc, #516]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d10f      	bne.n	80021d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	4b7d      	ldr	r3, [pc, #500]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 80021b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ba:	4a7c      	ldr	r2, [pc, #496]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80021c2:	4b7a      	ldr	r3, [pc, #488]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ce:	2301      	movs	r3, #1
 80021d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d2:	4b77      	ldr	r3, [pc, #476]	@ (80023b0 <HAL_RCC_OscConfig+0x474>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d118      	bne.n	8002210 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021de:	4b74      	ldr	r3, [pc, #464]	@ (80023b0 <HAL_RCC_OscConfig+0x474>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a73      	ldr	r2, [pc, #460]	@ (80023b0 <HAL_RCC_OscConfig+0x474>)
 80021e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ea:	f7ff fb5b 	bl	80018a4 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f2:	f7ff fb57 	bl	80018a4 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e10c      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	4b6a      	ldr	r3, [pc, #424]	@ (80023b0 <HAL_RCC_OscConfig+0x474>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d106      	bne.n	8002226 <HAL_RCC_OscConfig+0x2ea>
 8002218:	4b64      	ldr	r3, [pc, #400]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 800221a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800221c:	4a63      	ldr	r2, [pc, #396]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6713      	str	r3, [r2, #112]	@ 0x70
 8002224:	e01c      	b.n	8002260 <HAL_RCC_OscConfig+0x324>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	2b05      	cmp	r3, #5
 800222c:	d10c      	bne.n	8002248 <HAL_RCC_OscConfig+0x30c>
 800222e:	4b5f      	ldr	r3, [pc, #380]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 8002230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002232:	4a5e      	ldr	r2, [pc, #376]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 8002234:	f043 0304 	orr.w	r3, r3, #4
 8002238:	6713      	str	r3, [r2, #112]	@ 0x70
 800223a:	4b5c      	ldr	r3, [pc, #368]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 800223c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800223e:	4a5b      	ldr	r2, [pc, #364]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6713      	str	r3, [r2, #112]	@ 0x70
 8002246:	e00b      	b.n	8002260 <HAL_RCC_OscConfig+0x324>
 8002248:	4b58      	ldr	r3, [pc, #352]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 800224a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800224c:	4a57      	ldr	r2, [pc, #348]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 800224e:	f023 0301 	bic.w	r3, r3, #1
 8002252:	6713      	str	r3, [r2, #112]	@ 0x70
 8002254:	4b55      	ldr	r3, [pc, #340]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002258:	4a54      	ldr	r2, [pc, #336]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 800225a:	f023 0304 	bic.w	r3, r3, #4
 800225e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d015      	beq.n	8002294 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002268:	f7ff fb1c 	bl	80018a4 <HAL_GetTick>
 800226c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226e:	e00a      	b.n	8002286 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002270:	f7ff fb18 	bl	80018a4 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e0cb      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002286:	4b49      	ldr	r3, [pc, #292]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 8002288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0ee      	beq.n	8002270 <HAL_RCC_OscConfig+0x334>
 8002292:	e014      	b.n	80022be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002294:	f7ff fb06 	bl	80018a4 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800229a:	e00a      	b.n	80022b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800229c:	f7ff fb02 	bl	80018a4 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e0b5      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b2:	4b3e      	ldr	r3, [pc, #248]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 80022b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1ee      	bne.n	800229c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022be:	7dfb      	ldrb	r3, [r7, #23]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d105      	bne.n	80022d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c4:	4b39      	ldr	r3, [pc, #228]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 80022c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022c8:	4a38      	ldr	r2, [pc, #224]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 80022ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80a1 	beq.w	800241c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022da:	4b34      	ldr	r3, [pc, #208]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 030c 	and.w	r3, r3, #12
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d05c      	beq.n	80023a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d141      	bne.n	8002372 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ee:	4b31      	ldr	r3, [pc, #196]	@ (80023b4 <HAL_RCC_OscConfig+0x478>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f4:	f7ff fad6 	bl	80018a4 <HAL_GetTick>
 80022f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fc:	f7ff fad2 	bl	80018a4 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e087      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230e:	4b27      	ldr	r3, [pc, #156]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	69da      	ldr	r2, [r3, #28]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	431a      	orrs	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002328:	019b      	lsls	r3, r3, #6
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002330:	085b      	lsrs	r3, r3, #1
 8002332:	3b01      	subs	r3, #1
 8002334:	041b      	lsls	r3, r3, #16
 8002336:	431a      	orrs	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800233c:	061b      	lsls	r3, r3, #24
 800233e:	491b      	ldr	r1, [pc, #108]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002344:	4b1b      	ldr	r3, [pc, #108]	@ (80023b4 <HAL_RCC_OscConfig+0x478>)
 8002346:	2201      	movs	r2, #1
 8002348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234a:	f7ff faab 	bl	80018a4 <HAL_GetTick>
 800234e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002352:	f7ff faa7 	bl	80018a4 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e05c      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002364:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0x416>
 8002370:	e054      	b.n	800241c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002372:	4b10      	ldr	r3, [pc, #64]	@ (80023b4 <HAL_RCC_OscConfig+0x478>)
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002378:	f7ff fa94 	bl	80018a4 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002380:	f7ff fa90 	bl	80018a4 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e045      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <HAL_RCC_OscConfig+0x470>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d1f0      	bne.n	8002380 <HAL_RCC_OscConfig+0x444>
 800239e:	e03d      	b.n	800241c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d107      	bne.n	80023b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e038      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40007000 	.word	0x40007000
 80023b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023b8:	4b1b      	ldr	r3, [pc, #108]	@ (8002428 <HAL_RCC_OscConfig+0x4ec>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d028      	beq.n	8002418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d121      	bne.n	8002418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023de:	429a      	cmp	r2, r3
 80023e0:	d11a      	bne.n	8002418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80023e8:	4013      	ands	r3, r2
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80023ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d111      	bne.n	8002418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fe:	085b      	lsrs	r3, r3, #1
 8002400:	3b01      	subs	r3, #1
 8002402:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002404:	429a      	cmp	r2, r3
 8002406:	d107      	bne.n	8002418 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002412:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40023800 	.word	0x40023800

0800242c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b084      	sub	sp, #16
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0cc      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002440:	4b68      	ldr	r3, [pc, #416]	@ (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d90c      	bls.n	8002468 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b65      	ldr	r3, [pc, #404]	@ (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002456:	4b63      	ldr	r3, [pc, #396]	@ (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0307 	and.w	r3, r3, #7
 800245e:	683a      	ldr	r2, [r7, #0]
 8002460:	429a      	cmp	r2, r3
 8002462:	d001      	beq.n	8002468 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0b8      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d020      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	2b00      	cmp	r3, #0
 800247e:	d005      	beq.n	800248c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002480:	4b59      	ldr	r3, [pc, #356]	@ (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	4a58      	ldr	r2, [pc, #352]	@ (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800248a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0308 	and.w	r3, r3, #8
 8002494:	2b00      	cmp	r3, #0
 8002496:	d005      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002498:	4b53      	ldr	r3, [pc, #332]	@ (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4a52      	ldr	r2, [pc, #328]	@ (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a4:	4b50      	ldr	r3, [pc, #320]	@ (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	494d      	ldr	r1, [pc, #308]	@ (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d044      	beq.n	800254c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b47      	ldr	r3, [pc, #284]	@ (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d119      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e07f      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d003      	beq.n	80024ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d107      	bne.n	80024fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ea:	4b3f      	ldr	r3, [pc, #252]	@ (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e06f      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024fa:	4b3b      	ldr	r3, [pc, #236]	@ (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d101      	bne.n	800250a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e067      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800250a:	4b37      	ldr	r3, [pc, #220]	@ (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f023 0203 	bic.w	r2, r3, #3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	4934      	ldr	r1, [pc, #208]	@ (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	4313      	orrs	r3, r2
 800251a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800251c:	f7ff f9c2 	bl	80018a4 <HAL_GetTick>
 8002520:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002522:	e00a      	b.n	800253a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002524:	f7ff f9be 	bl	80018a4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e04f      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253a:	4b2b      	ldr	r3, [pc, #172]	@ (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 020c 	and.w	r2, r3, #12
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	429a      	cmp	r2, r3
 800254a:	d1eb      	bne.n	8002524 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800254c:	4b25      	ldr	r3, [pc, #148]	@ (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d20c      	bcs.n	8002574 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b22      	ldr	r3, [pc, #136]	@ (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002562:	4b20      	ldr	r3, [pc, #128]	@ (80025e4 <HAL_RCC_ClockConfig+0x1b8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0307 	and.w	r3, r3, #7
 800256a:	683a      	ldr	r2, [r7, #0]
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e032      	b.n	80025da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002580:	4b19      	ldr	r3, [pc, #100]	@ (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	4916      	ldr	r1, [pc, #88]	@ (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	4313      	orrs	r3, r2
 8002590:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d009      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800259e:	4b12      	ldr	r3, [pc, #72]	@ (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	00db      	lsls	r3, r3, #3
 80025ac:	490e      	ldr	r1, [pc, #56]	@ (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025b2:	f000 f821 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80025b6:	4602      	mov	r2, r0
 80025b8:	4b0b      	ldr	r3, [pc, #44]	@ (80025e8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	f003 030f 	and.w	r3, r3, #15
 80025c2:	490a      	ldr	r1, [pc, #40]	@ (80025ec <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	5ccb      	ldrb	r3, [r1, r3]
 80025c6:	fa22 f303 	lsr.w	r3, r2, r3
 80025ca:	4a09      	ldr	r2, [pc, #36]	@ (80025f0 <HAL_RCC_ClockConfig+0x1c4>)
 80025cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80025ce:	4b09      	ldr	r3, [pc, #36]	@ (80025f4 <HAL_RCC_ClockConfig+0x1c8>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff f922 	bl	800181c <HAL_InitTick>

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023c00 	.word	0x40023c00
 80025e8:	40023800 	.word	0x40023800
 80025ec:	080097b8 	.word	0x080097b8
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000004 	.word	0x20000004

080025f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025fc:	b094      	sub	sp, #80	@ 0x50
 80025fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002604:	2300      	movs	r3, #0
 8002606:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800260c:	2300      	movs	r3, #0
 800260e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002610:	4b79      	ldr	r3, [pc, #484]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f003 030c 	and.w	r3, r3, #12
 8002618:	2b08      	cmp	r3, #8
 800261a:	d00d      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x40>
 800261c:	2b08      	cmp	r3, #8
 800261e:	f200 80e1 	bhi.w	80027e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_RCC_GetSysClockFreq+0x34>
 8002626:	2b04      	cmp	r3, #4
 8002628:	d003      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x3a>
 800262a:	e0db      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800262c:	4b73      	ldr	r3, [pc, #460]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x204>)
 800262e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002630:	e0db      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002632:	4b73      	ldr	r3, [pc, #460]	@ (8002800 <HAL_RCC_GetSysClockFreq+0x208>)
 8002634:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002636:	e0d8      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002638:	4b6f      	ldr	r3, [pc, #444]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002640:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002642:	4b6d      	ldr	r3, [pc, #436]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d063      	beq.n	8002716 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264e:	4b6a      	ldr	r3, [pc, #424]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	099b      	lsrs	r3, r3, #6
 8002654:	2200      	movs	r2, #0
 8002656:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002658:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800265a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800265c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002660:	633b      	str	r3, [r7, #48]	@ 0x30
 8002662:	2300      	movs	r3, #0
 8002664:	637b      	str	r3, [r7, #52]	@ 0x34
 8002666:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800266a:	4622      	mov	r2, r4
 800266c:	462b      	mov	r3, r5
 800266e:	f04f 0000 	mov.w	r0, #0
 8002672:	f04f 0100 	mov.w	r1, #0
 8002676:	0159      	lsls	r1, r3, #5
 8002678:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800267c:	0150      	lsls	r0, r2, #5
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4621      	mov	r1, r4
 8002684:	1a51      	subs	r1, r2, r1
 8002686:	6139      	str	r1, [r7, #16]
 8002688:	4629      	mov	r1, r5
 800268a:	eb63 0301 	sbc.w	r3, r3, r1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800269c:	4659      	mov	r1, fp
 800269e:	018b      	lsls	r3, r1, #6
 80026a0:	4651      	mov	r1, sl
 80026a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026a6:	4651      	mov	r1, sl
 80026a8:	018a      	lsls	r2, r1, #6
 80026aa:	4651      	mov	r1, sl
 80026ac:	ebb2 0801 	subs.w	r8, r2, r1
 80026b0:	4659      	mov	r1, fp
 80026b2:	eb63 0901 	sbc.w	r9, r3, r1
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026ca:	4690      	mov	r8, r2
 80026cc:	4699      	mov	r9, r3
 80026ce:	4623      	mov	r3, r4
 80026d0:	eb18 0303 	adds.w	r3, r8, r3
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	462b      	mov	r3, r5
 80026d8:	eb49 0303 	adc.w	r3, r9, r3
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026ea:	4629      	mov	r1, r5
 80026ec:	024b      	lsls	r3, r1, #9
 80026ee:	4621      	mov	r1, r4
 80026f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026f4:	4621      	mov	r1, r4
 80026f6:	024a      	lsls	r2, r1, #9
 80026f8:	4610      	mov	r0, r2
 80026fa:	4619      	mov	r1, r3
 80026fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80026fe:	2200      	movs	r2, #0
 8002700:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002702:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002704:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002708:	f7fe face 	bl	8000ca8 <__aeabi_uldivmod>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4613      	mov	r3, r2
 8002712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002714:	e058      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002716:	4b38      	ldr	r3, [pc, #224]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	099b      	lsrs	r3, r3, #6
 800271c:	2200      	movs	r2, #0
 800271e:	4618      	mov	r0, r3
 8002720:	4611      	mov	r1, r2
 8002722:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002726:	623b      	str	r3, [r7, #32]
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
 800272c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002730:	4642      	mov	r2, r8
 8002732:	464b      	mov	r3, r9
 8002734:	f04f 0000 	mov.w	r0, #0
 8002738:	f04f 0100 	mov.w	r1, #0
 800273c:	0159      	lsls	r1, r3, #5
 800273e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002742:	0150      	lsls	r0, r2, #5
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4641      	mov	r1, r8
 800274a:	ebb2 0a01 	subs.w	sl, r2, r1
 800274e:	4649      	mov	r1, r9
 8002750:	eb63 0b01 	sbc.w	fp, r3, r1
 8002754:	f04f 0200 	mov.w	r2, #0
 8002758:	f04f 0300 	mov.w	r3, #0
 800275c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002760:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002764:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002768:	ebb2 040a 	subs.w	r4, r2, sl
 800276c:	eb63 050b 	sbc.w	r5, r3, fp
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	00eb      	lsls	r3, r5, #3
 800277a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800277e:	00e2      	lsls	r2, r4, #3
 8002780:	4614      	mov	r4, r2
 8002782:	461d      	mov	r5, r3
 8002784:	4643      	mov	r3, r8
 8002786:	18e3      	adds	r3, r4, r3
 8002788:	603b      	str	r3, [r7, #0]
 800278a:	464b      	mov	r3, r9
 800278c:	eb45 0303 	adc.w	r3, r5, r3
 8002790:	607b      	str	r3, [r7, #4]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800279e:	4629      	mov	r1, r5
 80027a0:	028b      	lsls	r3, r1, #10
 80027a2:	4621      	mov	r1, r4
 80027a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a8:	4621      	mov	r1, r4
 80027aa:	028a      	lsls	r2, r1, #10
 80027ac:	4610      	mov	r0, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027b2:	2200      	movs	r2, #0
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	61fa      	str	r2, [r7, #28]
 80027b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027bc:	f7fe fa74 	bl	8000ca8 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4613      	mov	r3, r2
 80027c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80027c8:	4b0b      	ldr	r3, [pc, #44]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	0c1b      	lsrs	r3, r3, #16
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	3301      	adds	r3, #1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80027d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027e2:	e002      	b.n	80027ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027e4:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x204>)
 80027e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3750      	adds	r7, #80	@ 0x50
 80027f0:	46bd      	mov	sp, r7
 80027f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	00f42400 	.word	0x00f42400
 8002800:	007a1200 	.word	0x007a1200

08002804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b03      	ldr	r3, [pc, #12]	@ (8002818 <HAL_RCC_GetHCLKFreq+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000000 	.word	0x20000000

0800281c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002820:	f7ff fff0 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b05      	ldr	r3, [pc, #20]	@ (800283c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	0a9b      	lsrs	r3, r3, #10
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4903      	ldr	r1, [pc, #12]	@ (8002840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002838:	4618      	mov	r0, r3
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40023800 	.word	0x40023800
 8002840:	080097c8 	.word	0x080097c8

08002844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002848:	f7ff ffdc 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	@ (8002864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0b5b      	lsrs	r3, r3, #13
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	@ (8002868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	080097c8 	.word	0x080097c8

0800286c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e041      	b.n	8002902 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d106      	bne.n	8002898 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fe fe86 	bl	80015a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	3304      	adds	r3, #4
 80028a8:	4619      	mov	r1, r3
 80028aa:	4610      	mov	r0, r2
 80028ac:	f000 f9b6 	bl	8002c1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800290c:	b480      	push	{r7}
 800290e:	b085      	sub	sp, #20
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d001      	beq.n	8002924 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e04e      	b.n	80029c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2202      	movs	r2, #2
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a23      	ldr	r2, [pc, #140]	@ (80029d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d022      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x80>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800294e:	d01d      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x80>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a1f      	ldr	r2, [pc, #124]	@ (80029d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d018      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x80>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a1e      	ldr	r2, [pc, #120]	@ (80029d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d013      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x80>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1c      	ldr	r2, [pc, #112]	@ (80029dc <HAL_TIM_Base_Start_IT+0xd0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00e      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x80>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1b      	ldr	r2, [pc, #108]	@ (80029e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d009      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x80>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a19      	ldr	r2, [pc, #100]	@ (80029e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d004      	beq.n	800298c <HAL_TIM_Base_Start_IT+0x80>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a18      	ldr	r2, [pc, #96]	@ (80029e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d111      	bne.n	80029b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2b06      	cmp	r3, #6
 800299c:	d010      	beq.n	80029c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681a      	ldr	r2, [r3, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f042 0201 	orr.w	r2, r2, #1
 80029ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ae:	e007      	b.n	80029c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3714      	adds	r7, #20
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	40010000 	.word	0x40010000
 80029d4:	40000400 	.word	0x40000400
 80029d8:	40000800 	.word	0x40000800
 80029dc:	40000c00 	.word	0x40000c00
 80029e0:	40010400 	.word	0x40010400
 80029e4:	40014000 	.word	0x40014000
 80029e8:	40001800 	.word	0x40001800

080029ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d020      	beq.n	8002a50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f003 0302 	and.w	r3, r3, #2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d01b      	beq.n	8002a50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f06f 0202 	mvn.w	r2, #2
 8002a20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f003 0303 	and.w	r3, r3, #3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f8d2 	bl	8002be0 <HAL_TIM_IC_CaptureCallback>
 8002a3c:	e005      	b.n	8002a4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f8c4 	bl	8002bcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f8d5 	bl	8002bf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f003 0304 	and.w	r3, r3, #4
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d020      	beq.n	8002a9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f003 0304 	and.w	r3, r3, #4
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d01b      	beq.n	8002a9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0204 	mvn.w	r2, #4
 8002a6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2202      	movs	r2, #2
 8002a72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f8ac 	bl	8002be0 <HAL_TIM_IC_CaptureCallback>
 8002a88:	e005      	b.n	8002a96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 f89e 	bl	8002bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 f8af 	bl	8002bf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	f003 0308 	and.w	r3, r3, #8
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d020      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d01b      	beq.n	8002ae8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f06f 0208 	mvn.w	r2, #8
 8002ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2204      	movs	r2, #4
 8002abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d003      	beq.n	8002ad6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f886 	bl	8002be0 <HAL_TIM_IC_CaptureCallback>
 8002ad4:	e005      	b.n	8002ae2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 f878 	bl	8002bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f889 	bl	8002bf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f003 0310 	and.w	r3, r3, #16
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d020      	beq.n	8002b34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f003 0310 	and.w	r3, r3, #16
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01b      	beq.n	8002b34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0210 	mvn.w	r2, #16
 8002b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2208      	movs	r2, #8
 8002b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69db      	ldr	r3, [r3, #28]
 8002b12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d003      	beq.n	8002b22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f860 	bl	8002be0 <HAL_TIM_IC_CaptureCallback>
 8002b20:	e005      	b.n	8002b2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f852 	bl	8002bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 f863 	bl	8002bf4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d00c      	beq.n	8002b58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d007      	beq.n	8002b58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0201 	mvn.w	r2, #1
 8002b50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f7fe fbd0 	bl	80012f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00c      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 f982 	bl	8002e80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00c      	beq.n	8002ba0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f834 	bl	8002c08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00c      	beq.n	8002bc4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f003 0320 	and.w	r3, r3, #32
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d007      	beq.n	8002bc4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0220 	mvn.w	r2, #32
 8002bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f954 	bl	8002e6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a46      	ldr	r2, [pc, #280]	@ (8002d48 <TIM_Base_SetConfig+0x12c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d013      	beq.n	8002c5c <TIM_Base_SetConfig+0x40>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c3a:	d00f      	beq.n	8002c5c <TIM_Base_SetConfig+0x40>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	4a43      	ldr	r2, [pc, #268]	@ (8002d4c <TIM_Base_SetConfig+0x130>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d00b      	beq.n	8002c5c <TIM_Base_SetConfig+0x40>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a42      	ldr	r2, [pc, #264]	@ (8002d50 <TIM_Base_SetConfig+0x134>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d007      	beq.n	8002c5c <TIM_Base_SetConfig+0x40>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a41      	ldr	r2, [pc, #260]	@ (8002d54 <TIM_Base_SetConfig+0x138>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d003      	beq.n	8002c5c <TIM_Base_SetConfig+0x40>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a40      	ldr	r2, [pc, #256]	@ (8002d58 <TIM_Base_SetConfig+0x13c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d108      	bne.n	8002c6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a35      	ldr	r2, [pc, #212]	@ (8002d48 <TIM_Base_SetConfig+0x12c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d02b      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c7c:	d027      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a32      	ldr	r2, [pc, #200]	@ (8002d4c <TIM_Base_SetConfig+0x130>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d023      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a31      	ldr	r2, [pc, #196]	@ (8002d50 <TIM_Base_SetConfig+0x134>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d01f      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a30      	ldr	r2, [pc, #192]	@ (8002d54 <TIM_Base_SetConfig+0x138>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01b      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a2f      	ldr	r2, [pc, #188]	@ (8002d58 <TIM_Base_SetConfig+0x13c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d017      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a2e      	ldr	r2, [pc, #184]	@ (8002d5c <TIM_Base_SetConfig+0x140>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a2d      	ldr	r2, [pc, #180]	@ (8002d60 <TIM_Base_SetConfig+0x144>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d00f      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a2c      	ldr	r2, [pc, #176]	@ (8002d64 <TIM_Base_SetConfig+0x148>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00b      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a2b      	ldr	r2, [pc, #172]	@ (8002d68 <TIM_Base_SetConfig+0x14c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8002d6c <TIM_Base_SetConfig+0x150>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d003      	beq.n	8002cce <TIM_Base_SetConfig+0xb2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a29      	ldr	r2, [pc, #164]	@ (8002d70 <TIM_Base_SetConfig+0x154>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d108      	bne.n	8002ce0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a10      	ldr	r2, [pc, #64]	@ (8002d48 <TIM_Base_SetConfig+0x12c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d003      	beq.n	8002d14 <TIM_Base_SetConfig+0xf8>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a12      	ldr	r2, [pc, #72]	@ (8002d58 <TIM_Base_SetConfig+0x13c>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d103      	bne.n	8002d1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d105      	bne.n	8002d3a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	f023 0201 	bic.w	r2, r3, #1
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	611a      	str	r2, [r3, #16]
  }
}
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40010000 	.word	0x40010000
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800
 8002d54:	40000c00 	.word	0x40000c00
 8002d58:	40010400 	.word	0x40010400
 8002d5c:	40014000 	.word	0x40014000
 8002d60:	40014400 	.word	0x40014400
 8002d64:	40014800 	.word	0x40014800
 8002d68:	40001800 	.word	0x40001800
 8002d6c:	40001c00 	.word	0x40001c00
 8002d70:	40002000 	.word	0x40002000

08002d74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e05a      	b.n	8002e42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2202      	movs	r2, #2
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002db2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68fa      	ldr	r2, [r7, #12]
 8002dc4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a21      	ldr	r2, [pc, #132]	@ (8002e50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d022      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd8:	d01d      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1d      	ldr	r2, [pc, #116]	@ (8002e54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d018      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1b      	ldr	r2, [pc, #108]	@ (8002e58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a1a      	ldr	r2, [pc, #104]	@ (8002e5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00e      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a18      	ldr	r2, [pc, #96]	@ (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d009      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a17      	ldr	r2, [pc, #92]	@ (8002e64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d004      	beq.n	8002e16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a15      	ldr	r2, [pc, #84]	@ (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d10c      	bne.n	8002e30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	68ba      	ldr	r2, [r7, #8]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	40010000 	.word	0x40010000
 8002e54:	40000400 	.word	0x40000400
 8002e58:	40000800 	.word	0x40000800
 8002e5c:	40000c00 	.word	0x40000c00
 8002e60:	40010400 	.word	0x40010400
 8002e64:	40014000 	.word	0x40014000
 8002e68:	40001800 	.word	0x40001800

08002e6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e042      	b.n	8002f2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fe fbf2 	bl	80016a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2224      	movs	r2, #36	@ 0x24
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ed6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fdf3 	bl	8003ac4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002eec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002efc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	@ 0x28
 8002f38:	af02      	add	r7, sp, #8
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	4613      	mov	r3, r2
 8002f42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f44:	2300      	movs	r3, #0
 8002f46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	2b20      	cmp	r3, #32
 8002f52:	d175      	bne.n	8003040 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <HAL_UART_Transmit+0x2c>
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e06e      	b.n	8003042 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2221      	movs	r2, #33	@ 0x21
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f72:	f7fe fc97 	bl	80018a4 <HAL_GetTick>
 8002f76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	88fa      	ldrh	r2, [r7, #6]
 8002f7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	88fa      	ldrh	r2, [r7, #6]
 8002f82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f8c:	d108      	bne.n	8002fa0 <HAL_UART_Transmit+0x6c>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d104      	bne.n	8002fa0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	61bb      	str	r3, [r7, #24]
 8002f9e:	e003      	b.n	8002fa8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002fa8:	e02e      	b.n	8003008 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2180      	movs	r1, #128	@ 0x80
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 fb55 	bl	8003664 <UART_WaitOnFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2220      	movs	r2, #32
 8002fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e03a      	b.n	8003042 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10b      	bne.n	8002fea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	881b      	ldrh	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fe0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	61bb      	str	r3, [r7, #24]
 8002fe8:	e007      	b.n	8002ffa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	781a      	ldrb	r2, [r3, #0]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3b01      	subs	r3, #1
 8003002:	b29a      	uxth	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800300c:	b29b      	uxth	r3, r3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1cb      	bne.n	8002faa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	2200      	movs	r2, #0
 800301a:	2140      	movs	r1, #64	@ 0x40
 800301c:	68f8      	ldr	r0, [r7, #12]
 800301e:	f000 fb21 	bl	8003664 <UART_WaitOnFlagUntilTimeout>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e006      	b.n	8003042 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	e000      	b.n	8003042 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003040:	2302      	movs	r3, #2
  }
}
 8003042:	4618      	mov	r0, r3
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b08c      	sub	sp, #48	@ 0x30
 800304e:	af00      	add	r7, sp, #0
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	4613      	mov	r3, r2
 8003056:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b20      	cmp	r3, #32
 8003062:	d14a      	bne.n	80030fa <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800306a:	88fb      	ldrh	r3, [r7, #6]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e043      	b.n	80030fc <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2201      	movs	r2, #1
 8003078:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	461a      	mov	r2, r3
 8003084:	68b9      	ldr	r1, [r7, #8]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fb45 	bl	8003716 <UART_Start_Receive_IT>
 800308c:	4603      	mov	r3, r0
 800308e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003092:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003096:	2b00      	cmp	r3, #0
 8003098:	d12c      	bne.n	80030f4 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d125      	bne.n	80030ee <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	330c      	adds	r3, #12
 80030be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	e853 3f00 	ldrex	r3, [r3]
 80030c6:	617b      	str	r3, [r7, #20]
   return(result);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	f043 0310 	orr.w	r3, r3, #16
 80030ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	330c      	adds	r3, #12
 80030d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80030da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030dc:	6a39      	ldr	r1, [r7, #32]
 80030de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030e0:	e841 2300 	strex	r3, r2, [r1]
 80030e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e5      	bne.n	80030b8 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80030ec:	e002      	b.n	80030f4 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80030f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80030f8:	e000      	b.n	80030fc <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80030fa:	2302      	movs	r3, #2
  }
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3730      	adds	r7, #48	@ 0x30
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b0ba      	sub	sp, #232	@ 0xe8
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800312a:	2300      	movs	r3, #0
 800312c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003130:	2300      	movs	r3, #0
 8003132:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800313a:	f003 030f 	and.w	r3, r3, #15
 800313e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003142:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10f      	bne.n	800316a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800314a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b00      	cmp	r3, #0
 8003154:	d009      	beq.n	800316a <HAL_UART_IRQHandler+0x66>
 8003156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 fbf0 	bl	8003948 <UART_Receive_IT>
      return;
 8003168:	e25b      	b.n	8003622 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800316a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 80de 	beq.w	8003330 <HAL_UART_IRQHandler+0x22c>
 8003174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d106      	bne.n	800318e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003184:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80d1 	beq.w	8003330 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800318e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00b      	beq.n	80031b2 <HAL_UART_IRQHandler+0xae>
 800319a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800319e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031aa:	f043 0201 	orr.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031b6:	f003 0304 	and.w	r3, r3, #4
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00b      	beq.n	80031d6 <HAL_UART_IRQHandler+0xd2>
 80031be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d005      	beq.n	80031d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031ce:	f043 0202 	orr.w	r2, r3, #2
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031da:	f003 0302 	and.w	r3, r3, #2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00b      	beq.n	80031fa <HAL_UART_IRQHandler+0xf6>
 80031e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f2:	f043 0204 	orr.w	r2, r3, #4
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d011      	beq.n	800322a <HAL_UART_IRQHandler+0x126>
 8003206:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800320a:	f003 0320 	and.w	r3, r3, #32
 800320e:	2b00      	cmp	r3, #0
 8003210:	d105      	bne.n	800321e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d005      	beq.n	800322a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003222:	f043 0208 	orr.w	r2, r3, #8
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 81f2 	beq.w	8003618 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003238:	f003 0320 	and.w	r3, r3, #32
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_UART_IRQHandler+0x14e>
 8003240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003244:	f003 0320 	and.w	r3, r3, #32
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fb7b 	bl	8003948 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800325c:	2b40      	cmp	r3, #64	@ 0x40
 800325e:	bf0c      	ite	eq
 8003260:	2301      	moveq	r3, #1
 8003262:	2300      	movne	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800326e:	f003 0308 	and.w	r3, r3, #8
 8003272:	2b00      	cmp	r3, #0
 8003274:	d103      	bne.n	800327e <HAL_UART_IRQHandler+0x17a>
 8003276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800327a:	2b00      	cmp	r3, #0
 800327c:	d04f      	beq.n	800331e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f000 fa83 	bl	800378a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328e:	2b40      	cmp	r3, #64	@ 0x40
 8003290:	d141      	bne.n	8003316 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	3314      	adds	r3, #20
 8003298:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800329c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80032a0:	e853 3f00 	ldrex	r3, [r3]
 80032a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80032a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80032ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80032b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	3314      	adds	r3, #20
 80032ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80032be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80032c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80032ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80032ce:	e841 2300 	strex	r3, r2, [r1]
 80032d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80032d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1d9      	bne.n	8003292 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d013      	beq.n	800330e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ea:	4a7e      	ldr	r2, [pc, #504]	@ (80034e4 <HAL_UART_IRQHandler+0x3e0>)
 80032ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fe fc63 	bl	8001bbe <HAL_DMA_Abort_IT>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d016      	beq.n	800332c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003308:	4610      	mov	r0, r2
 800330a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330c:	e00e      	b.n	800332c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 f99e 	bl	8003650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003314:	e00a      	b.n	800332c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f99a 	bl	8003650 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331c:	e006      	b.n	800332c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f996 	bl	8003650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800332a:	e175      	b.n	8003618 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800332c:	bf00      	nop
    return;
 800332e:	e173      	b.n	8003618 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003334:	2b01      	cmp	r3, #1
 8003336:	f040 814f 	bne.w	80035d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800333a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800333e:	f003 0310 	and.w	r3, r3, #16
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 8148 	beq.w	80035d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8141 	beq.w	80035d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	60bb      	str	r3, [r7, #8]
 800336a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003376:	2b40      	cmp	r3, #64	@ 0x40
 8003378:	f040 80b6 	bne.w	80034e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003388:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 8145 	beq.w	800361c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003396:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800339a:	429a      	cmp	r2, r3
 800339c:	f080 813e 	bcs.w	800361c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80033a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033b2:	f000 8088 	beq.w	80034c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	330c      	adds	r3, #12
 80033bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80033cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80033d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	330c      	adds	r3, #12
 80033de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80033e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80033e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80033ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80033f2:	e841 2300 	strex	r3, r2, [r1]
 80033f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80033fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1d9      	bne.n	80033b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	3314      	adds	r3, #20
 8003408:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800340c:	e853 3f00 	ldrex	r3, [r3]
 8003410:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003412:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003414:	f023 0301 	bic.w	r3, r3, #1
 8003418:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	3314      	adds	r3, #20
 8003422:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003426:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800342a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800342e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003432:	e841 2300 	strex	r3, r2, [r1]
 8003436:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003438:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1e1      	bne.n	8003402 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3314      	adds	r3, #20
 8003444:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003446:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003448:	e853 3f00 	ldrex	r3, [r3]
 800344c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800344e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003450:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003454:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3314      	adds	r3, #20
 800345e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003462:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003464:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003466:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003468:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800346a:	e841 2300 	strex	r3, r2, [r1]
 800346e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003470:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1e3      	bne.n	800343e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800348e:	e853 3f00 	ldrex	r3, [r3]
 8003492:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003496:	f023 0310 	bic.w	r3, r3, #16
 800349a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	330c      	adds	r3, #12
 80034a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80034a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80034aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80034b0:	e841 2300 	strex	r3, r2, [r1]
 80034b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80034b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e3      	bne.n	8003484 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fe fb0c 	bl	8001ade <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2202      	movs	r2, #2
 80034ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	b29b      	uxth	r3, r3
 80034da:	4619      	mov	r1, r3
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f7fe f931 	bl	8001744 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034e2:	e09b      	b.n	800361c <HAL_UART_IRQHandler+0x518>
 80034e4:	08003851 	.word	0x08003851
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 808e 	beq.w	8003620 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003504:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 8089 	beq.w	8003620 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	330c      	adds	r3, #12
 8003514:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003518:	e853 3f00 	ldrex	r3, [r3]
 800351c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800351e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003520:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003524:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	330c      	adds	r3, #12
 800352e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003532:	647a      	str	r2, [r7, #68]	@ 0x44
 8003534:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003536:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003538:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800353a:	e841 2300 	strex	r3, r2, [r1]
 800353e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1e3      	bne.n	800350e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	3314      	adds	r3, #20
 800354c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800354e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003550:	e853 3f00 	ldrex	r3, [r3]
 8003554:	623b      	str	r3, [r7, #32]
   return(result);
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	f023 0301 	bic.w	r3, r3, #1
 800355c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3314      	adds	r3, #20
 8003566:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800356a:	633a      	str	r2, [r7, #48]	@ 0x30
 800356c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003570:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1e3      	bne.n	8003546 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2220      	movs	r2, #32
 8003582:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	330c      	adds	r3, #12
 8003592:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	e853 3f00 	ldrex	r3, [r3]
 800359a:	60fb      	str	r3, [r7, #12]
   return(result);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0310 	bic.w	r3, r3, #16
 80035a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	330c      	adds	r3, #12
 80035ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80035b0:	61fa      	str	r2, [r7, #28]
 80035b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b4:	69b9      	ldr	r1, [r7, #24]
 80035b6:	69fa      	ldr	r2, [r7, #28]
 80035b8:	e841 2300 	strex	r3, r2, [r1]
 80035bc:	617b      	str	r3, [r7, #20]
   return(result);
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e3      	bne.n	800358c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035ce:	4619      	mov	r1, r3
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7fe f8b7 	bl	8001744 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035d6:	e023      	b.n	8003620 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d009      	beq.n	80035f8 <HAL_UART_IRQHandler+0x4f4>
 80035e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f941 	bl	8003878 <UART_Transmit_IT>
    return;
 80035f6:	e014      	b.n	8003622 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00e      	beq.n	8003622 <HAL_UART_IRQHandler+0x51e>
 8003604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800360c:	2b00      	cmp	r3, #0
 800360e:	d008      	beq.n	8003622 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f981 	bl	8003918 <UART_EndTransmit_IT>
    return;
 8003616:	e004      	b.n	8003622 <HAL_UART_IRQHandler+0x51e>
    return;
 8003618:	bf00      	nop
 800361a:	e002      	b.n	8003622 <HAL_UART_IRQHandler+0x51e>
      return;
 800361c:	bf00      	nop
 800361e:	e000      	b.n	8003622 <HAL_UART_IRQHandler+0x51e>
      return;
 8003620:	bf00      	nop
  }
}
 8003622:	37e8      	adds	r7, #232	@ 0xe8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	4613      	mov	r3, r2
 8003672:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003674:	e03b      	b.n	80036ee <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367c:	d037      	beq.n	80036ee <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367e:	f7fe f911 	bl	80018a4 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	6a3a      	ldr	r2, [r7, #32]
 800368a:	429a      	cmp	r2, r3
 800368c:	d302      	bcc.n	8003694 <UART_WaitOnFlagUntilTimeout+0x30>
 800368e:	6a3b      	ldr	r3, [r7, #32]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e03a      	b.n	800370e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d023      	beq.n	80036ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b80      	cmp	r3, #128	@ 0x80
 80036aa:	d020      	beq.n	80036ee <UART_WaitOnFlagUntilTimeout+0x8a>
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	2b40      	cmp	r3, #64	@ 0x40
 80036b0:	d01d      	beq.n	80036ee <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0308 	and.w	r3, r3, #8
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d116      	bne.n	80036ee <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f000 f857 	bl	800378a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2208      	movs	r2, #8
 80036e0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e00f      	b.n	800370e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4013      	ands	r3, r2
 80036f8:	68ba      	ldr	r2, [r7, #8]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	bf0c      	ite	eq
 80036fe:	2301      	moveq	r3, #1
 8003700:	2300      	movne	r3, #0
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	429a      	cmp	r2, r3
 800370a:	d0b4      	beq.n	8003676 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	4613      	mov	r3, r2
 8003722:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	88fa      	ldrh	r2, [r7, #6]
 800372e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2222      	movs	r2, #34	@ 0x22
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d007      	beq.n	800375c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800375a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0220 	orr.w	r2, r2, #32
 800377a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800378a:	b480      	push	{r7}
 800378c:	b095      	sub	sp, #84	@ 0x54
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	330c      	adds	r3, #12
 8003798:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	330c      	adds	r3, #12
 80037b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037b2:	643a      	str	r2, [r7, #64]	@ 0x40
 80037b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037ba:	e841 2300 	strex	r3, r2, [r1]
 80037be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1e5      	bne.n	8003792 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3314      	adds	r3, #20
 80037cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	e853 3f00 	ldrex	r3, [r3]
 80037d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	f023 0301 	bic.w	r3, r3, #1
 80037dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3314      	adds	r3, #20
 80037e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037ee:	e841 2300 	strex	r3, r2, [r1]
 80037f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1e5      	bne.n	80037c6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d119      	bne.n	8003836 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	330c      	adds	r3, #12
 8003808:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	e853 3f00 	ldrex	r3, [r3]
 8003810:	60bb      	str	r3, [r7, #8]
   return(result);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f023 0310 	bic.w	r3, r3, #16
 8003818:	647b      	str	r3, [r7, #68]	@ 0x44
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	330c      	adds	r3, #12
 8003820:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003822:	61ba      	str	r2, [r7, #24]
 8003824:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003826:	6979      	ldr	r1, [r7, #20]
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	613b      	str	r3, [r7, #16]
   return(result);
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1e5      	bne.n	8003802 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003844:	bf00      	nop
 8003846:	3754      	adds	r7, #84	@ 0x54
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800385c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f7ff fef0 	bl	8003650 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003870:	bf00      	nop
 8003872:	3710      	adds	r7, #16
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b21      	cmp	r3, #33	@ 0x21
 800388a:	d13e      	bne.n	800390a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003894:	d114      	bne.n	80038c0 <UART_Transmit_IT+0x48>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d110      	bne.n	80038c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	621a      	str	r2, [r3, #32]
 80038be:	e008      	b.n	80038d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	1c59      	adds	r1, r3, #1
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	6211      	str	r1, [r2, #32]
 80038ca:	781a      	ldrb	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29b      	uxth	r3, r3
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	4619      	mov	r1, r3
 80038e0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10f      	bne.n	8003906 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003904:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003906:	2300      	movs	r3, #0
 8003908:	e000      	b.n	800390c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800390a:	2302      	movs	r3, #2
  }
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800392e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2220      	movs	r2, #32
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff fe75 	bl	8003628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3708      	adds	r7, #8
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08c      	sub	sp, #48	@ 0x30
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b22      	cmp	r3, #34	@ 0x22
 800395a:	f040 80ae 	bne.w	8003aba <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003966:	d117      	bne.n	8003998 <UART_Receive_IT+0x50>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d113      	bne.n	8003998 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003970:	2300      	movs	r3, #0
 8003972:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003978:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	b29b      	uxth	r3, r3
 8003982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003986:	b29a      	uxth	r2, r3
 8003988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800398a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003990:	1c9a      	adds	r2, r3, #2
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	629a      	str	r2, [r3, #40]	@ 0x28
 8003996:	e026      	b.n	80039e6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039aa:	d007      	beq.n	80039bc <UART_Receive_IT+0x74>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10a      	bne.n	80039ca <UART_Receive_IT+0x82>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d106      	bne.n	80039ca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	e008      	b.n	80039dc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039da:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e0:	1c5a      	adds	r2, r3, #1
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	4619      	mov	r1, r3
 80039f4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d15d      	bne.n	8003ab6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0220 	bic.w	r2, r2, #32
 8003a08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	695a      	ldr	r2, [r3, #20]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0201 	bic.w	r2, r2, #1
 8003a28:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2220      	movs	r2, #32
 8003a2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2200      	movs	r2, #0
 8003a36:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d135      	bne.n	8003aac <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	330c      	adds	r3, #12
 8003a4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	613b      	str	r3, [r7, #16]
   return(result);
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	f023 0310 	bic.w	r3, r3, #16
 8003a5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	330c      	adds	r3, #12
 8003a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a66:	623a      	str	r2, [r7, #32]
 8003a68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	69f9      	ldr	r1, [r7, #28]
 8003a6c:	6a3a      	ldr	r2, [r7, #32]
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e5      	bne.n	8003a46 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b10      	cmp	r3, #16
 8003a86:	d10a      	bne.n	8003a9e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	60fb      	str	r3, [r7, #12]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	60fb      	str	r3, [r7, #12]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7fd fe4d 	bl	8001744 <HAL_UARTEx_RxEventCallback>
 8003aaa:	e002      	b.n	8003ab2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff fdc5 	bl	800363c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	e002      	b.n	8003abc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	e000      	b.n	8003abc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003aba:	2302      	movs	r3, #2
  }
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3730      	adds	r7, #48	@ 0x30
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac8:	b0c0      	sub	sp, #256	@ 0x100
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae0:	68d9      	ldr	r1, [r3, #12]
 8003ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	ea40 0301 	orr.w	r3, r0, r1
 8003aec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	431a      	orrs	r2, r3
 8003b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b08:	69db      	ldr	r3, [r3, #28]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003b1c:	f021 010c 	bic.w	r1, r1, #12
 8003b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003b2a:	430b      	orrs	r3, r1
 8003b2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b3e:	6999      	ldr	r1, [r3, #24]
 8003b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	ea40 0301 	orr.w	r3, r0, r1
 8003b4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4b8f      	ldr	r3, [pc, #572]	@ (8003d90 <UART_SetConfig+0x2cc>)
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d005      	beq.n	8003b64 <UART_SetConfig+0xa0>
 8003b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4b8d      	ldr	r3, [pc, #564]	@ (8003d94 <UART_SetConfig+0x2d0>)
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d104      	bne.n	8003b6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003b64:	f7fe fe6e 	bl	8002844 <HAL_RCC_GetPCLK2Freq>
 8003b68:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003b6c:	e003      	b.n	8003b76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b6e:	f7fe fe55 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8003b72:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b7a:	69db      	ldr	r3, [r3, #28]
 8003b7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b80:	f040 810c 	bne.w	8003d9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b8e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b96:	4622      	mov	r2, r4
 8003b98:	462b      	mov	r3, r5
 8003b9a:	1891      	adds	r1, r2, r2
 8003b9c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b9e:	415b      	adcs	r3, r3
 8003ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ba2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ba6:	4621      	mov	r1, r4
 8003ba8:	eb12 0801 	adds.w	r8, r2, r1
 8003bac:	4629      	mov	r1, r5
 8003bae:	eb43 0901 	adc.w	r9, r3, r1
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bc6:	4690      	mov	r8, r2
 8003bc8:	4699      	mov	r9, r3
 8003bca:	4623      	mov	r3, r4
 8003bcc:	eb18 0303 	adds.w	r3, r8, r3
 8003bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003bd4:	462b      	mov	r3, r5
 8003bd6:	eb49 0303 	adc.w	r3, r9, r3
 8003bda:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003bea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003bee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	18db      	adds	r3, r3, r3
 8003bf6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	eb42 0303 	adc.w	r3, r2, r3
 8003bfe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003c04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003c08:	f7fd f84e 	bl	8000ca8 <__aeabi_uldivmod>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	460b      	mov	r3, r1
 8003c10:	4b61      	ldr	r3, [pc, #388]	@ (8003d98 <UART_SetConfig+0x2d4>)
 8003c12:	fba3 2302 	umull	r2, r3, r3, r2
 8003c16:	095b      	lsrs	r3, r3, #5
 8003c18:	011c      	lsls	r4, r3, #4
 8003c1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c24:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003c28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003c2c:	4642      	mov	r2, r8
 8003c2e:	464b      	mov	r3, r9
 8003c30:	1891      	adds	r1, r2, r2
 8003c32:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003c34:	415b      	adcs	r3, r3
 8003c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	eb12 0a01 	adds.w	sl, r2, r1
 8003c42:	4649      	mov	r1, r9
 8003c44:	eb43 0b01 	adc.w	fp, r3, r1
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003c54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003c58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c5c:	4692      	mov	sl, r2
 8003c5e:	469b      	mov	fp, r3
 8003c60:	4643      	mov	r3, r8
 8003c62:	eb1a 0303 	adds.w	r3, sl, r3
 8003c66:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c6a:	464b      	mov	r3, r9
 8003c6c:	eb4b 0303 	adc.w	r3, fp, r3
 8003c70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c80:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	18db      	adds	r3, r3, r3
 8003c8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c8e:	4613      	mov	r3, r2
 8003c90:	eb42 0303 	adc.w	r3, r2, r3
 8003c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c9e:	f7fd f803 	bl	8000ca8 <__aeabi_uldivmod>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8003d98 <UART_SetConfig+0x2d4>)
 8003caa:	fba3 2301 	umull	r2, r3, r3, r1
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	2264      	movs	r2, #100	@ 0x64
 8003cb2:	fb02 f303 	mul.w	r3, r2, r3
 8003cb6:	1acb      	subs	r3, r1, r3
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003cbe:	4b36      	ldr	r3, [pc, #216]	@ (8003d98 <UART_SetConfig+0x2d4>)
 8003cc0:	fba3 2302 	umull	r2, r3, r3, r2
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003ccc:	441c      	add	r4, r3
 8003cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cd8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003cdc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	464b      	mov	r3, r9
 8003ce4:	1891      	adds	r1, r2, r2
 8003ce6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003ce8:	415b      	adcs	r3, r3
 8003cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	1851      	adds	r1, r2, r1
 8003cf4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	414b      	adcs	r3, r1
 8003cfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003d08:	4659      	mov	r1, fp
 8003d0a:	00cb      	lsls	r3, r1, #3
 8003d0c:	4651      	mov	r1, sl
 8003d0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d12:	4651      	mov	r1, sl
 8003d14:	00ca      	lsls	r2, r1, #3
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	4642      	mov	r2, r8
 8003d1e:	189b      	adds	r3, r3, r2
 8003d20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d24:	464b      	mov	r3, r9
 8003d26:	460a      	mov	r2, r1
 8003d28:	eb42 0303 	adc.w	r3, r2, r3
 8003d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d3c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003d40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d44:	460b      	mov	r3, r1
 8003d46:	18db      	adds	r3, r3, r3
 8003d48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	eb42 0303 	adc.w	r3, r2, r3
 8003d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003d5a:	f7fc ffa5 	bl	8000ca8 <__aeabi_uldivmod>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	4b0d      	ldr	r3, [pc, #52]	@ (8003d98 <UART_SetConfig+0x2d4>)
 8003d64:	fba3 1302 	umull	r1, r3, r3, r2
 8003d68:	095b      	lsrs	r3, r3, #5
 8003d6a:	2164      	movs	r1, #100	@ 0x64
 8003d6c:	fb01 f303 	mul.w	r3, r1, r3
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	3332      	adds	r3, #50	@ 0x32
 8003d76:	4a08      	ldr	r2, [pc, #32]	@ (8003d98 <UART_SetConfig+0x2d4>)
 8003d78:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7c:	095b      	lsrs	r3, r3, #5
 8003d7e:	f003 0207 	and.w	r2, r3, #7
 8003d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4422      	add	r2, r4
 8003d8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d8c:	e106      	b.n	8003f9c <UART_SetConfig+0x4d8>
 8003d8e:	bf00      	nop
 8003d90:	40011000 	.word	0x40011000
 8003d94:	40011400 	.word	0x40011400
 8003d98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003da0:	2200      	movs	r2, #0
 8003da2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003da6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003daa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003dae:	4642      	mov	r2, r8
 8003db0:	464b      	mov	r3, r9
 8003db2:	1891      	adds	r1, r2, r2
 8003db4:	6239      	str	r1, [r7, #32]
 8003db6:	415b      	adcs	r3, r3
 8003db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dbe:	4641      	mov	r1, r8
 8003dc0:	1854      	adds	r4, r2, r1
 8003dc2:	4649      	mov	r1, r9
 8003dc4:	eb43 0501 	adc.w	r5, r3, r1
 8003dc8:	f04f 0200 	mov.w	r2, #0
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	00eb      	lsls	r3, r5, #3
 8003dd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dd6:	00e2      	lsls	r2, r4, #3
 8003dd8:	4614      	mov	r4, r2
 8003dda:	461d      	mov	r5, r3
 8003ddc:	4643      	mov	r3, r8
 8003dde:	18e3      	adds	r3, r4, r3
 8003de0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003de4:	464b      	mov	r3, r9
 8003de6:	eb45 0303 	adc.w	r3, r5, r3
 8003dea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dfa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	f04f 0300 	mov.w	r3, #0
 8003e06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003e0a:	4629      	mov	r1, r5
 8003e0c:	008b      	lsls	r3, r1, #2
 8003e0e:	4621      	mov	r1, r4
 8003e10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e14:	4621      	mov	r1, r4
 8003e16:	008a      	lsls	r2, r1, #2
 8003e18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003e1c:	f7fc ff44 	bl	8000ca8 <__aeabi_uldivmod>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4b60      	ldr	r3, [pc, #384]	@ (8003fa8 <UART_SetConfig+0x4e4>)
 8003e26:	fba3 2302 	umull	r2, r3, r3, r2
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	011c      	lsls	r4, r3, #4
 8003e2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e32:	2200      	movs	r2, #0
 8003e34:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e38:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003e40:	4642      	mov	r2, r8
 8003e42:	464b      	mov	r3, r9
 8003e44:	1891      	adds	r1, r2, r2
 8003e46:	61b9      	str	r1, [r7, #24]
 8003e48:	415b      	adcs	r3, r3
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e50:	4641      	mov	r1, r8
 8003e52:	1851      	adds	r1, r2, r1
 8003e54:	6139      	str	r1, [r7, #16]
 8003e56:	4649      	mov	r1, r9
 8003e58:	414b      	adcs	r3, r1
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	f04f 0200 	mov.w	r2, #0
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e68:	4659      	mov	r1, fp
 8003e6a:	00cb      	lsls	r3, r1, #3
 8003e6c:	4651      	mov	r1, sl
 8003e6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e72:	4651      	mov	r1, sl
 8003e74:	00ca      	lsls	r2, r1, #3
 8003e76:	4610      	mov	r0, r2
 8003e78:	4619      	mov	r1, r3
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	4642      	mov	r2, r8
 8003e7e:	189b      	adds	r3, r3, r2
 8003e80:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e84:	464b      	mov	r3, r9
 8003e86:	460a      	mov	r2, r1
 8003e88:	eb42 0303 	adc.w	r3, r2, r3
 8003e8c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	f04f 0300 	mov.w	r3, #0
 8003ea4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003ea8:	4649      	mov	r1, r9
 8003eaa:	008b      	lsls	r3, r1, #2
 8003eac:	4641      	mov	r1, r8
 8003eae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003eb2:	4641      	mov	r1, r8
 8003eb4:	008a      	lsls	r2, r1, #2
 8003eb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003eba:	f7fc fef5 	bl	8000ca8 <__aeabi_uldivmod>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4611      	mov	r1, r2
 8003ec4:	4b38      	ldr	r3, [pc, #224]	@ (8003fa8 <UART_SetConfig+0x4e4>)
 8003ec6:	fba3 2301 	umull	r2, r3, r3, r1
 8003eca:	095b      	lsrs	r3, r3, #5
 8003ecc:	2264      	movs	r2, #100	@ 0x64
 8003ece:	fb02 f303 	mul.w	r3, r2, r3
 8003ed2:	1acb      	subs	r3, r1, r3
 8003ed4:	011b      	lsls	r3, r3, #4
 8003ed6:	3332      	adds	r3, #50	@ 0x32
 8003ed8:	4a33      	ldr	r2, [pc, #204]	@ (8003fa8 <UART_SetConfig+0x4e4>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	095b      	lsrs	r3, r3, #5
 8003ee0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003ee4:	441c      	add	r4, r3
 8003ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003eea:	2200      	movs	r2, #0
 8003eec:	673b      	str	r3, [r7, #112]	@ 0x70
 8003eee:	677a      	str	r2, [r7, #116]	@ 0x74
 8003ef0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003ef4:	4642      	mov	r2, r8
 8003ef6:	464b      	mov	r3, r9
 8003ef8:	1891      	adds	r1, r2, r2
 8003efa:	60b9      	str	r1, [r7, #8]
 8003efc:	415b      	adcs	r3, r3
 8003efe:	60fb      	str	r3, [r7, #12]
 8003f00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f04:	4641      	mov	r1, r8
 8003f06:	1851      	adds	r1, r2, r1
 8003f08:	6039      	str	r1, [r7, #0]
 8003f0a:	4649      	mov	r1, r9
 8003f0c:	414b      	adcs	r3, r1
 8003f0e:	607b      	str	r3, [r7, #4]
 8003f10:	f04f 0200 	mov.w	r2, #0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003f1c:	4659      	mov	r1, fp
 8003f1e:	00cb      	lsls	r3, r1, #3
 8003f20:	4651      	mov	r1, sl
 8003f22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f26:	4651      	mov	r1, sl
 8003f28:	00ca      	lsls	r2, r1, #3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4642      	mov	r2, r8
 8003f32:	189b      	adds	r3, r3, r2
 8003f34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f36:	464b      	mov	r3, r9
 8003f38:	460a      	mov	r2, r1
 8003f3a:	eb42 0303 	adc.w	r3, r2, r3
 8003f3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	f04f 0300 	mov.w	r3, #0
 8003f54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003f58:	4649      	mov	r1, r9
 8003f5a:	008b      	lsls	r3, r1, #2
 8003f5c:	4641      	mov	r1, r8
 8003f5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f62:	4641      	mov	r1, r8
 8003f64:	008a      	lsls	r2, r1, #2
 8003f66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003f6a:	f7fc fe9d 	bl	8000ca8 <__aeabi_uldivmod>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	460b      	mov	r3, r1
 8003f72:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa8 <UART_SetConfig+0x4e4>)
 8003f74:	fba3 1302 	umull	r1, r3, r3, r2
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	2164      	movs	r1, #100	@ 0x64
 8003f7c:	fb01 f303 	mul.w	r3, r1, r3
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	011b      	lsls	r3, r3, #4
 8003f84:	3332      	adds	r3, #50	@ 0x32
 8003f86:	4a08      	ldr	r2, [pc, #32]	@ (8003fa8 <UART_SetConfig+0x4e4>)
 8003f88:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	f003 020f 	and.w	r2, r3, #15
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4422      	add	r2, r4
 8003f9a:	609a      	str	r2, [r3, #8]
}
 8003f9c:	bf00      	nop
 8003f9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fa8:	51eb851f 	.word	0x51eb851f

08003fac <sf_test>:
#include "stdio.h"
#include <stdarg.h>
#include "var_register.h"
/*******************************************/
int aa=10;
static void sf_test(void *arg){
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
	 int *cnt = (int *)arg;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]
	printf("this is test:%d\r\n",*cnt);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4803      	ldr	r0, [pc, #12]	@ (8003fcc <sf_test+0x20>)
 8003fc0:	f002 f892 	bl	80060e8 <iprintf>
}
 8003fc4:	bf00      	nop
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	08009698 	.word	0x08009698

08003fd0 <sf_hardware_init>:

int motor_speed = 1500;
float motor_voltage = 24.5f;
uint32_t system_flags = 0xAABBCCDD;
uint8_t enabled = 1;
static uint8_t sf_hardware_init(){
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0

	//使用串口1 实现  空闲中断接收的功能
	 VAR_REGISTER(motor_speed, VAR_TYPE_INT);
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	4906      	ldr	r1, [pc, #24]	@ (8003ff0 <sf_hardware_init+0x20>)
 8003fd8:	4806      	ldr	r0, [pc, #24]	@ (8003ff4 <sf_hardware_init+0x24>)
 8003fda:	f000 fa1b 	bl	8004414 <register_var>
	    VAR_REGISTER(motor_voltage, VAR_TYPE_FLOAT);
 8003fde:	2202      	movs	r2, #2
 8003fe0:	4905      	ldr	r1, [pc, #20]	@ (8003ff8 <sf_hardware_init+0x28>)
 8003fe2:	4806      	ldr	r0, [pc, #24]	@ (8003ffc <sf_hardware_init+0x2c>)
 8003fe4:	f000 fa16 	bl	8004414 <register_var>
	return 0;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000010 	.word	0x20000010
 8003ff4:	080096ac 	.word	0x080096ac
 8003ff8:	20000014 	.word	0x20000014
 8003ffc:	080096b8 	.word	0x080096b8

08004000 <sf_software_init>:



static uint8_t sf_software_init(){
 8004000:	b580      	push	{r7, lr}
 8004002:	b082      	sub	sp, #8
 8004004:	af02      	add	r7, sp, #8
	task_system_init();
 8004006:	f000 f847 	bl	8004098 <task_system_init>
	task_add(0,sf_test,&aa,1000,1000,5);
 800400a:	2305      	movs	r3, #5
 800400c:	9301      	str	r3, [sp, #4]
 800400e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004018:	4a04      	ldr	r2, [pc, #16]	@ (800402c <sf_software_init+0x2c>)
 800401a:	4905      	ldr	r1, [pc, #20]	@ (8004030 <sf_software_init+0x30>)
 800401c:	2000      	movs	r0, #0
 800401e:	f000 f8b9 	bl	8004194 <task_add>
	return 0;
 8004022:	2300      	movs	r3, #0
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	2000000c 	.word	0x2000000c
 8004030:	08003fad 	.word	0x08003fad

08004034 <sf_entry>:


void sf_entry(void){
 8004034:	b580      	push	{r7, lr}
 8004036:	af00      	add	r7, sp, #0
	 sf_hardware_init();
 8004038:	f7ff ffca 	bl	8003fd0 <sf_hardware_init>
	 sf_software_init();
 800403c:	f7ff ffe0 	bl	8004000 <sf_software_init>
 }
 8004040:	bf00      	nop
 8004042:	bd80      	pop	{r7, pc}

08004044 <sf_run>:
 *
 * @return void
 *
 * @note
 */
static void sf_run(int count,...){
 8004044:	b40f      	push	{r0, r1, r2, r3}
 8004046:	b580      	push	{r7, lr}
 8004048:	b082      	sub	sp, #8
 800404a:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, count);
 800404c:	f107 0314 	add.w	r3, r7, #20
 8004050:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < count; i++) {
 8004052:	2300      	movs	r3, #0
 8004054:	607b      	str	r3, [r7, #4]
 8004056:	e00a      	b.n	800406e <sf_run+0x2a>
		task_execute(va_arg(args, int));
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	1d1a      	adds	r2, r3, #4
 800405c:	603a      	str	r2, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	4618      	mov	r0, r3
 8004064:	f000 f8e6 	bl	8004234 <task_execute>
	for(int i = 0; i < count; i++) {
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	3301      	adds	r3, #1
 800406c:	607b      	str	r3, [r7, #4]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	429a      	cmp	r2, r3
 8004074:	dbf0      	blt.n	8004058 <sf_run+0x14>
	}
	va_end(args);
}
 8004076:	bf00      	nop
 8004078:	bf00      	nop
 800407a:	3708      	adds	r7, #8
 800407c:	46bd      	mov	sp, r7
 800407e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004082:	b004      	add	sp, #16
 8004084:	4770      	bx	lr

08004086 <sf_loop>:
void sf_loop(){
 8004086:	b580      	push	{r7, lr}
 8004088:	af00      	add	r7, sp, #0
	sf_run(2,
 800408a:	2204      	movs	r2, #4
 800408c:	2102      	movs	r1, #2
 800408e:	2002      	movs	r0, #2
 8004090:	f7ff ffd8 	bl	8004044 <sf_run>
		   TASK_COMM_PROTOCOL,
		   TASK_CONTROL_LOOP);
}
 8004094:	bf00      	nop
 8004096:	bd80      	pop	{r7, pc}

08004098 <task_system_init>:
#include "stddef.h"
static volatile uint32_t sys_tick = 0;
static task_list_t task_lists[MAX_TASK_LISTS];
static task_node_t task_pool[MAX_TASK_NUM];

void task_system_init(void) {
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_TASK_NUM; i++) {
 800409e:	2300      	movs	r3, #0
 80040a0:	607b      	str	r3, [r7, #4]
 80040a2:	e00f      	b.n	80040c4 <task_system_init+0x2c>
        task_pool[i].used = 0;
 80040a4:	4a14      	ldr	r2, [pc, #80]	@ (80040f8 <task_system_init+0x60>)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	015b      	lsls	r3, r3, #5
 80040aa:	4413      	add	r3, r2
 80040ac:	2200      	movs	r2, #0
 80040ae:	701a      	strb	r2, [r3, #0]
        task_pool[i].next = NULL;
 80040b0:	4a11      	ldr	r2, [pc, #68]	@ (80040f8 <task_system_init+0x60>)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	015b      	lsls	r3, r3, #5
 80040b6:	4413      	add	r3, r2
 80040b8:	331c      	adds	r3, #28
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_TASK_NUM; i++) {
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	3301      	adds	r3, #1
 80040c2:	607b      	str	r3, [r7, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80040c8:	ddec      	ble.n	80040a4 <task_system_init+0xc>
    }
    for (int i = 0; i < MAX_TASK_LISTS; i++) {
 80040ca:	2300      	movs	r3, #0
 80040cc:	603b      	str	r3, [r7, #0]
 80040ce:	e007      	b.n	80040e0 <task_system_init+0x48>
        task_lists[i].head = NULL;
 80040d0:	4a0a      	ldr	r2, [pc, #40]	@ (80040fc <task_system_init+0x64>)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2100      	movs	r1, #0
 80040d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < MAX_TASK_LISTS; i++) {
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	603b      	str	r3, [r7, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	ddf4      	ble.n	80040d0 <task_system_init+0x38>
    }
    sys_tick = 0;
 80040e6:	4b06      	ldr	r3, [pc, #24]	@ (8004100 <task_system_init+0x68>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	200006f4 	.word	0x200006f4
 80040fc:	200006e4 	.word	0x200006e4
 8004100:	200006e0 	.word	0x200006e0

08004104 <task_system_tick_inc>:

void task_system_tick_inc(void) {
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
    sys_tick++;
 8004108:	4b04      	ldr	r3, [pc, #16]	@ (800411c <task_system_tick_inc+0x18>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	3301      	adds	r3, #1
 800410e:	4a03      	ldr	r2, [pc, #12]	@ (800411c <task_system_tick_inc+0x18>)
 8004110:	6013      	str	r3, [r2, #0]
}
 8004112:	bf00      	nop
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	200006e0 	.word	0x200006e0

08004120 <task_system_get_tick>:

uint32_t task_system_get_tick(void) {
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
    return sys_tick;
 8004124:	4b03      	ldr	r3, [pc, #12]	@ (8004134 <task_system_get_tick+0x14>)
 8004126:	681b      	ldr	r3, [r3, #0]
}
 8004128:	4618      	mov	r0, r3
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	200006e0 	.word	0x200006e0

08004138 <alloc_task_node>:

static task_node_t* alloc_task_node(void) {
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_TASK_NUM; i++) {
 800413e:	2300      	movs	r3, #0
 8004140:	607b      	str	r3, [r7, #4]
 8004142:	e01b      	b.n	800417c <alloc_task_node+0x44>
        if (!task_pool[i].used) {
 8004144:	4a12      	ldr	r2, [pc, #72]	@ (8004190 <alloc_task_node+0x58>)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	015b      	lsls	r3, r3, #5
 800414a:	4413      	add	r3, r2
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d111      	bne.n	8004176 <alloc_task_node+0x3e>
            task_pool[i].used = 1;
 8004152:	4a0f      	ldr	r2, [pc, #60]	@ (8004190 <alloc_task_node+0x58>)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	015b      	lsls	r3, r3, #5
 8004158:	4413      	add	r3, r2
 800415a:	2201      	movs	r2, #1
 800415c:	701a      	strb	r2, [r3, #0]
            task_pool[i].next = NULL;
 800415e:	4a0c      	ldr	r2, [pc, #48]	@ (8004190 <alloc_task_node+0x58>)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	015b      	lsls	r3, r3, #5
 8004164:	4413      	add	r3, r2
 8004166:	331c      	adds	r3, #28
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]
            return &task_pool[i];
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	015b      	lsls	r3, r3, #5
 8004170:	4a07      	ldr	r2, [pc, #28]	@ (8004190 <alloc_task_node+0x58>)
 8004172:	4413      	add	r3, r2
 8004174:	e006      	b.n	8004184 <alloc_task_node+0x4c>
    for (int i = 0; i < MAX_TASK_NUM; i++) {
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3301      	adds	r3, #1
 800417a:	607b      	str	r3, [r7, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b3f      	cmp	r3, #63	@ 0x3f
 8004180:	dde0      	ble.n	8004144 <alloc_task_node+0xc>
        }
    }
    return NULL;
 8004182:	2300      	movs	r3, #0
}
 8004184:	4618      	mov	r0, r3
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr
 8004190:	200006f4 	.word	0x200006f4

08004194 <task_add>:

int task_add(uint8_t list_id, task_func_t cb, void *arg, uint32_t delay, uint32_t period, uint32_t run_count) {
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	60b9      	str	r1, [r7, #8]
 800419c:	607a      	str	r2, [r7, #4]
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	4603      	mov	r3, r0
 80041a2:	73fb      	strb	r3, [r7, #15]
    if (list_id >= MAX_TASK_LISTS || cb == NULL)
 80041a4:	7bfb      	ldrb	r3, [r7, #15]
 80041a6:	2b03      	cmp	r3, #3
 80041a8:	d802      	bhi.n	80041b0 <task_add+0x1c>
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <task_add+0x20>
        return 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	e02a      	b.n	800420a <task_add+0x76>

    task_node_t *node = alloc_task_node();
 80041b4:	f7ff ffc0 	bl	8004138 <alloc_task_node>
 80041b8:	6178      	str	r0, [r7, #20]
    if (!node) return 0;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <task_add+0x30>
 80041c0:	2300      	movs	r3, #0
 80041c2:	e022      	b.n	800420a <task_add+0x76>

    uint32_t now = task_system_get_tick();
 80041c4:	f7ff ffac 	bl	8004120 <task_system_get_tick>
 80041c8:	6138      	str	r0, [r7, #16]

    node->start_tick = now;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	605a      	str	r2, [r3, #4]
    node->next_run_tick = now + delay;
 80041d0:	693a      	ldr	r2, [r7, #16]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	441a      	add	r2, r3
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	609a      	str	r2, [r3, #8]
    node->period = period;
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	6a3a      	ldr	r2, [r7, #32]
 80041de:	60da      	str	r2, [r3, #12]
    node->remaining_count = run_count;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e4:	611a      	str	r2, [r3, #16]
    node->callback = cb;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	615a      	str	r2, [r3, #20]
    node->arg = arg;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	619a      	str	r2, [r3, #24]

    node->next = task_lists[list_id].head;
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
 80041f4:	4a07      	ldr	r2, [pc, #28]	@ (8004214 <task_add+0x80>)
 80041f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	61da      	str	r2, [r3, #28]
    task_lists[list_id].head = node;
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	4904      	ldr	r1, [pc, #16]	@ (8004214 <task_add+0x80>)
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 1;
 8004208:	2301      	movs	r3, #1
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	200006e4 	.word	0x200006e4

08004218 <tick_elapsed>:
    }
    return 0;
}

// 溢出安全比较
static inline int32_t tick_elapsed(uint32_t now, uint32_t target) {
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
    return (int32_t)(now - target);
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	1ad3      	subs	r3, r2, r3
}
 8004228:	4618      	mov	r0, r3
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <task_execute>:

void task_execute(uint8_t list_id) {
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	71fb      	strb	r3, [r7, #7]
    if (list_id >= MAX_TASK_LISTS)
 800423e:	79fb      	ldrb	r3, [r7, #7]
 8004240:	2b03      	cmp	r3, #3
 8004242:	d837      	bhi.n	80042b4 <task_execute+0x80>
        return;

    uint32_t now = task_system_get_tick();
 8004244:	f7ff ff6c 	bl	8004120 <task_system_get_tick>
 8004248:	60b8      	str	r0, [r7, #8]
    task_node_t *node = task_lists[list_id].head;
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	4a1b      	ldr	r2, [pc, #108]	@ (80042bc <task_execute+0x88>)
 800424e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004252:	60fb      	str	r3, [r7, #12]

    while (node) {
 8004254:	e02a      	b.n	80042ac <task_execute+0x78>
        if (node->used && node->remaining_count != 0) {
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d023      	beq.n	80042a6 <task_execute+0x72>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d01f      	beq.n	80042a6 <task_execute+0x72>
            if (tick_elapsed(now, node->next_run_tick) >= 0) {
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	4619      	mov	r1, r3
 800426c:	68b8      	ldr	r0, [r7, #8]
 800426e:	f7ff ffd3 	bl	8004218 <tick_elapsed>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	db16      	blt.n	80042a6 <task_execute+0x72>
                node->callback(node->arg);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	68fa      	ldr	r2, [r7, #12]
 800427e:	6992      	ldr	r2, [r2, #24]
 8004280:	4610      	mov	r0, r2
 8004282:	4798      	blx	r3
                if (node->remaining_count != 0xFFFFFFFF) {
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428c:	d004      	beq.n	8004298 <task_execute+0x64>
                    node->remaining_count--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	1e5a      	subs	r2, r3, #1
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	611a      	str	r2, [r3, #16]
                }
                node->next_run_tick += node->period;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	689a      	ldr	r2, [r3, #8]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	441a      	add	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	609a      	str	r2, [r3, #8]
            }
        }
        node = node->next;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	60fb      	str	r3, [r7, #12]
    while (node) {
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1d1      	bne.n	8004256 <task_execute+0x22>
 80042b2:	e000      	b.n	80042b6 <task_execute+0x82>
        return;
 80042b4:	bf00      	nop
    }
}
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	200006e4 	.word	0x200006e4

080042c0 <trim_whitespace>:
#include "function_register.h"


#define CMD_MAX_ARGS 4

static void trim_whitespace(char *str) {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
    char *end;
    while (*str == ' ') str++;
 80042c8:	e002      	b.n	80042d0 <trim_whitespace+0x10>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3301      	adds	r3, #1
 80042ce:	607b      	str	r3, [r7, #4]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b20      	cmp	r3, #32
 80042d6:	d0f8      	beq.n	80042ca <trim_whitespace+0xa>
    end = str + strlen(str) - 1;
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f7fb ffd9 	bl	8000290 <strlen>
 80042de:	4603      	mov	r3, r0
 80042e0:	3b01      	subs	r3, #1
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	4413      	add	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
    while (end > str && (*end == '\r' || *end == '\n' || *end == ' ')) *end-- = '\0';
 80042e8:	e004      	b.n	80042f4 <trim_whitespace+0x34>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	1e5a      	subs	r2, r3, #1
 80042ee:	60fa      	str	r2, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	701a      	strb	r2, [r3, #0]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d90b      	bls.n	8004314 <trim_whitespace+0x54>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	2b0d      	cmp	r3, #13
 8004302:	d0f2      	beq.n	80042ea <trim_whitespace+0x2a>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	781b      	ldrb	r3, [r3, #0]
 8004308:	2b0a      	cmp	r3, #10
 800430a:	d0ee      	beq.n	80042ea <trim_whitespace+0x2a>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b20      	cmp	r3, #32
 8004312:	d0ea      	beq.n	80042ea <trim_whitespace+0x2a>
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <shell_process_input>:
void shell_process_input(const char *input) {
 800431c:	b580      	push	{r7, lr}
 800431e:	b0a8      	sub	sp, #160	@ 0xa0
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
    char buffer[128];
    strncpy(buffer, input, sizeof(buffer));
 8004324:	f107 0318 	add.w	r3, r7, #24
 8004328:	2280      	movs	r2, #128	@ 0x80
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4618      	mov	r0, r3
 800432e:	f002 f88d 	bl	800644c <strncpy>
    buffer[sizeof(buffer)-1] = '\0';
 8004332:	2300      	movs	r3, #0
 8004334:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    trim_whitespace(buffer);
 8004338:	f107 0318 	add.w	r3, r7, #24
 800433c:	4618      	mov	r0, r3
 800433e:	f7ff ffbf 	bl	80042c0 <trim_whitespace>

    char *argv[CMD_MAX_ARGS] = {0};
 8004342:	f107 0308 	add.w	r3, r7, #8
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	605a      	str	r2, [r3, #4]
 800434c:	609a      	str	r2, [r3, #8]
 800434e:	60da      	str	r2, [r3, #12]
    int argc = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    char *token = strtok(buffer, " ");
 8004356:	f107 0318 	add.w	r3, r7, #24
 800435a:	4929      	ldr	r1, [pc, #164]	@ (8004400 <shell_process_input+0xe4>)
 800435c:	4618      	mov	r0, r3
 800435e:	f002 f889 	bl	8006474 <strtok>
 8004362:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    while (token && argc < CMD_MAX_ARGS) {
 8004366:	e011      	b.n	800438c <shell_process_input+0x70>
        argv[argc++] = token;
 8004368:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	33a0      	adds	r3, #160	@ 0xa0
 8004376:	443b      	add	r3, r7
 8004378:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800437c:	f843 2c98 	str.w	r2, [r3, #-152]
        token = strtok(NULL, " ");
 8004380:	491f      	ldr	r1, [pc, #124]	@ (8004400 <shell_process_input+0xe4>)
 8004382:	2000      	movs	r0, #0
 8004384:	f002 f876 	bl	8006474 <strtok>
 8004388:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    while (token && argc < CMD_MAX_ARGS) {
 800438c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <shell_process_input+0x80>
 8004394:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004398:	2b03      	cmp	r3, #3
 800439a:	dde5      	ble.n	8004368 <shell_process_input+0x4c>
    }

    if (argc == 0) return;
 800439c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d028      	beq.n	80043f6 <shell_process_input+0xda>

    if (strcmp(argv[0], "get") == 0 && argc == 2) {
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4917      	ldr	r1, [pc, #92]	@ (8004404 <shell_process_input+0xe8>)
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fb ff11 	bl	80001d0 <strcmp>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d108      	bne.n	80043c6 <shell_process_input+0xaa>
 80043b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d104      	bne.n	80043c6 <shell_process_input+0xaa>
    	shell_handle_get_command(argv[1]);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 f890 	bl	80044e4 <shell_handle_get_command>
 80043c4:	e018      	b.n	80043f8 <shell_process_input+0xdc>
    } else if (strcmp(argv[0], "set") == 0 && argc == 3) {
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	490f      	ldr	r1, [pc, #60]	@ (8004408 <shell_process_input+0xec>)
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fb ff00 	bl	80001d0 <strcmp>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d103      	bne.n	80043de <shell_process_input+0xc2>
 80043d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043da:	2b03      	cmp	r3, #3
 80043dc:	d00c      	beq.n	80043f8 <shell_process_input+0xdc>
    } else if (strcmp(argv[0], "list") == 0) {
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	490a      	ldr	r1, [pc, #40]	@ (800440c <shell_process_input+0xf0>)
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7fb fef4 	bl	80001d0 <strcmp>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d004      	beq.n	80043f8 <shell_process_input+0xdc>
    } else {
        printf("Unknown command or wrong args\n");
 80043ee:	4808      	ldr	r0, [pc, #32]	@ (8004410 <shell_process_input+0xf4>)
 80043f0:	f001 fee2 	bl	80061b8 <puts>
 80043f4:	e000      	b.n	80043f8 <shell_process_input+0xdc>
    if (argc == 0) return;
 80043f6:	bf00      	nop
    }
}
 80043f8:	37a0      	adds	r7, #160	@ 0xa0
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	080096c8 	.word	0x080096c8
 8004404:	080096cc 	.word	0x080096cc
 8004408:	080096d0 	.word	0x080096d0
 800440c:	080096d4 	.word	0x080096d4
 8004410:	080096dc 	.word	0x080096dc

08004414 <register_var>:
#include <string.h>
#include <stdlib.h>
static var_entry_t var_table[MAX_VAR_ENTRIES];
static int var_table_count = 0;

int register_var(const char *name, void *addr, var_type_t type) {
 8004414:	b480      	push	{r7}
 8004416:	b089      	sub	sp, #36	@ 0x24
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	4613      	mov	r3, r2
 8004420:	71fb      	strb	r3, [r7, #7]
    if (var_table_count >= MAX_VAR_ENTRIES) return -1;
 8004422:	4b16      	ldr	r3, [pc, #88]	@ (800447c <register_var+0x68>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b3f      	cmp	r3, #63	@ 0x3f
 8004428:	dd02      	ble.n	8004430 <register_var+0x1c>
 800442a:	f04f 33ff 	mov.w	r3, #4294967295
 800442e:	e01f      	b.n	8004470 <register_var+0x5c>

    var_table[var_table_count++] = (var_entry_t){
 8004430:	4b12      	ldr	r3, [pc, #72]	@ (800447c <register_var+0x68>)
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	1c53      	adds	r3, r2, #1
 8004436:	4911      	ldr	r1, [pc, #68]	@ (800447c <register_var+0x68>)
 8004438:	600b      	str	r3, [r1, #0]
 800443a:	4911      	ldr	r1, [pc, #68]	@ (8004480 <register_var+0x6c>)
 800443c:	4613      	mov	r3, r2
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	4413      	add	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	68f9      	ldr	r1, [r7, #12]
 8004448:	6019      	str	r1, [r3, #0]
 800444a:	490d      	ldr	r1, [pc, #52]	@ (8004480 <register_var+0x6c>)
 800444c:	4613      	mov	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	3304      	adds	r3, #4
 8004458:	68b9      	ldr	r1, [r7, #8]
 800445a:	6019      	str	r1, [r3, #0]
 800445c:	4908      	ldr	r1, [pc, #32]	@ (8004480 <register_var+0x6c>)
 800445e:	4613      	mov	r3, r2
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	3308      	adds	r3, #8
 800446a:	79fa      	ldrb	r2, [r7, #7]
 800446c:	701a      	strb	r2, [r3, #0]
        .name = name,
        .addr = addr,
        .type = type
    };
    return 0;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3724      	adds	r7, #36	@ 0x24
 8004474:	46bd      	mov	sp, r7
 8004476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447a:	4770      	bx	lr
 800447c:	200011f4 	.word	0x200011f4
 8004480:	20000ef4 	.word	0x20000ef4

08004484 <find_var>:

static var_entry_t *find_var(const char *name) {
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < var_table_count; ++i) {
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
 8004490:	e019      	b.n	80044c6 <find_var+0x42>
        if (strcmp(var_table[i].name, name) == 0) {
 8004492:	4912      	ldr	r1, [pc, #72]	@ (80044dc <find_var+0x58>)
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	4613      	mov	r3, r2
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	4413      	add	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	440b      	add	r3, r1
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	6879      	ldr	r1, [r7, #4]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f7fb fe93 	bl	80001d0 <strcmp>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d107      	bne.n	80044c0 <find_var+0x3c>
            return &var_table[i];
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	4613      	mov	r3, r2
 80044b4:	005b      	lsls	r3, r3, #1
 80044b6:	4413      	add	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4a08      	ldr	r2, [pc, #32]	@ (80044dc <find_var+0x58>)
 80044bc:	4413      	add	r3, r2
 80044be:	e008      	b.n	80044d2 <find_var+0x4e>
    for (int i = 0; i < var_table_count; ++i) {
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3301      	adds	r3, #1
 80044c4:	60fb      	str	r3, [r7, #12]
 80044c6:	4b06      	ldr	r3, [pc, #24]	@ (80044e0 <find_var+0x5c>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	dbe0      	blt.n	8004492 <find_var+0xe>
        }
    }
    return NULL;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	20000ef4 	.word	0x20000ef4
 80044e0:	200011f4 	.word	0x200011f4

080044e4 <shell_handle_get_command>:

void shell_handle_get_command(const char *input) {
 80044e4:	b590      	push	{r4, r7, lr}
 80044e6:	b095      	sub	sp, #84	@ 0x54
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
    char var_name[64];
    if (sscanf(input, "get %63s", var_name) != 1) {
 80044ec:	f107 030c 	add.w	r3, r7, #12
 80044f0:	461a      	mov	r2, r3
 80044f2:	4921      	ldr	r1, [pc, #132]	@ (8004578 <shell_handle_get_command+0x94>)
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f001 fe89 	bl	800620c <siscanf>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d003      	beq.n	8004508 <shell_handle_get_command+0x24>
        printf("Usage: get var_name\n");
 8004500:	481e      	ldr	r0, [pc, #120]	@ (800457c <shell_handle_get_command+0x98>)
 8004502:	f001 fe59 	bl	80061b8 <puts>
        return;
 8004506:	e033      	b.n	8004570 <shell_handle_get_command+0x8c>
    }

    var_entry_t *var = find_var(var_name);
 8004508:	f107 030c 	add.w	r3, r7, #12
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff ffb9 	bl	8004484 <find_var>
 8004512:	64f8      	str	r0, [r7, #76]	@ 0x4c
    if (!var) {
 8004514:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004516:	2b00      	cmp	r3, #0
 8004518:	d106      	bne.n	8004528 <shell_handle_get_command+0x44>
        printf("Variable '%s' not found\n", var_name);
 800451a:	f107 030c 	add.w	r3, r7, #12
 800451e:	4619      	mov	r1, r3
 8004520:	4817      	ldr	r0, [pc, #92]	@ (8004580 <shell_handle_get_command+0x9c>)
 8004522:	f001 fde1 	bl	80060e8 <iprintf>
        return;
 8004526:	e023      	b.n	8004570 <shell_handle_get_command+0x8c>
    }

    switch (var->type) {
 8004528:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800452a:	7a1b      	ldrb	r3, [r3, #8]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <shell_handle_get_command+0x52>
 8004530:	2b02      	cmp	r3, #2
 8004532:	d00a      	beq.n	800454a <shell_handle_get_command+0x66>
 8004534:	e018      	b.n	8004568 <shell_handle_get_command+0x84>
        case VAR_TYPE_INT:
            printf("%s = %d\n", var->name, *(int *)var->addr);
 8004536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004538:	6819      	ldr	r1, [r3, #0]
 800453a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	4810      	ldr	r0, [pc, #64]	@ (8004584 <shell_handle_get_command+0xa0>)
 8004544:	f001 fdd0 	bl	80060e8 <iprintf>
            break;
 8004548:	e012      	b.n	8004570 <shell_handle_get_command+0x8c>
        case VAR_TYPE_FLOAT:
            printf("%s = %f\n", var->name, *(float *)var->addr);
 800454a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800454c:	681c      	ldr	r4, [r3, #0]
 800454e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f7fc f807 	bl	8000568 <__aeabi_f2d>
 800455a:	4602      	mov	r2, r0
 800455c:	460b      	mov	r3, r1
 800455e:	4621      	mov	r1, r4
 8004560:	4809      	ldr	r0, [pc, #36]	@ (8004588 <shell_handle_get_command+0xa4>)
 8004562:	f001 fdc1 	bl	80060e8 <iprintf>
            break;
 8004566:	e003      	b.n	8004570 <shell_handle_get_command+0x8c>
        default:
            printf("Unknown type\n");
 8004568:	4808      	ldr	r0, [pc, #32]	@ (800458c <shell_handle_get_command+0xa8>)
 800456a:	f001 fe25 	bl	80061b8 <puts>
            break;
 800456e:	bf00      	nop
    }
}
 8004570:	3754      	adds	r7, #84	@ 0x54
 8004572:	46bd      	mov	sp, r7
 8004574:	bd90      	pop	{r4, r7, pc}
 8004576:	bf00      	nop
 8004578:	080096fc 	.word	0x080096fc
 800457c:	08009708 	.word	0x08009708
 8004580:	0800971c 	.word	0x0800971c
 8004584:	08009738 	.word	0x08009738
 8004588:	08009744 	.word	0x08009744
 800458c:	08009750 	.word	0x08009750

08004590 <sulp>:
 8004590:	b570      	push	{r4, r5, r6, lr}
 8004592:	4604      	mov	r4, r0
 8004594:	460d      	mov	r5, r1
 8004596:	ec45 4b10 	vmov	d0, r4, r5
 800459a:	4616      	mov	r6, r2
 800459c:	f003 fe88 	bl	80082b0 <__ulp>
 80045a0:	ec51 0b10 	vmov	r0, r1, d0
 80045a4:	b17e      	cbz	r6, 80045c6 <sulp+0x36>
 80045a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80045aa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	dd09      	ble.n	80045c6 <sulp+0x36>
 80045b2:	051b      	lsls	r3, r3, #20
 80045b4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80045b8:	2400      	movs	r4, #0
 80045ba:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80045be:	4622      	mov	r2, r4
 80045c0:	462b      	mov	r3, r5
 80045c2:	f7fc f829 	bl	8000618 <__aeabi_dmul>
 80045c6:	ec41 0b10 	vmov	d0, r0, r1
 80045ca:	bd70      	pop	{r4, r5, r6, pc}
 80045cc:	0000      	movs	r0, r0
	...

080045d0 <_strtod_l>:
 80045d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045d4:	b09f      	sub	sp, #124	@ 0x7c
 80045d6:	460c      	mov	r4, r1
 80045d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80045da:	2200      	movs	r2, #0
 80045dc:	921a      	str	r2, [sp, #104]	@ 0x68
 80045de:	9005      	str	r0, [sp, #20]
 80045e0:	f04f 0a00 	mov.w	sl, #0
 80045e4:	f04f 0b00 	mov.w	fp, #0
 80045e8:	460a      	mov	r2, r1
 80045ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80045ec:	7811      	ldrb	r1, [r2, #0]
 80045ee:	292b      	cmp	r1, #43	@ 0x2b
 80045f0:	d04a      	beq.n	8004688 <_strtod_l+0xb8>
 80045f2:	d838      	bhi.n	8004666 <_strtod_l+0x96>
 80045f4:	290d      	cmp	r1, #13
 80045f6:	d832      	bhi.n	800465e <_strtod_l+0x8e>
 80045f8:	2908      	cmp	r1, #8
 80045fa:	d832      	bhi.n	8004662 <_strtod_l+0x92>
 80045fc:	2900      	cmp	r1, #0
 80045fe:	d03b      	beq.n	8004678 <_strtod_l+0xa8>
 8004600:	2200      	movs	r2, #0
 8004602:	920e      	str	r2, [sp, #56]	@ 0x38
 8004604:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8004606:	782a      	ldrb	r2, [r5, #0]
 8004608:	2a30      	cmp	r2, #48	@ 0x30
 800460a:	f040 80b2 	bne.w	8004772 <_strtod_l+0x1a2>
 800460e:	786a      	ldrb	r2, [r5, #1]
 8004610:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004614:	2a58      	cmp	r2, #88	@ 0x58
 8004616:	d16e      	bne.n	80046f6 <_strtod_l+0x126>
 8004618:	9302      	str	r3, [sp, #8]
 800461a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800461c:	9301      	str	r3, [sp, #4]
 800461e:	ab1a      	add	r3, sp, #104	@ 0x68
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	4a8f      	ldr	r2, [pc, #572]	@ (8004860 <_strtod_l+0x290>)
 8004624:	9805      	ldr	r0, [sp, #20]
 8004626:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004628:	a919      	add	r1, sp, #100	@ 0x64
 800462a:	f002 ff3b 	bl	80074a4 <__gethex>
 800462e:	f010 060f 	ands.w	r6, r0, #15
 8004632:	4604      	mov	r4, r0
 8004634:	d005      	beq.n	8004642 <_strtod_l+0x72>
 8004636:	2e06      	cmp	r6, #6
 8004638:	d128      	bne.n	800468c <_strtod_l+0xbc>
 800463a:	3501      	adds	r5, #1
 800463c:	2300      	movs	r3, #0
 800463e:	9519      	str	r5, [sp, #100]	@ 0x64
 8004640:	930e      	str	r3, [sp, #56]	@ 0x38
 8004642:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004644:	2b00      	cmp	r3, #0
 8004646:	f040 858e 	bne.w	8005166 <_strtod_l+0xb96>
 800464a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800464c:	b1cb      	cbz	r3, 8004682 <_strtod_l+0xb2>
 800464e:	4652      	mov	r2, sl
 8004650:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8004654:	ec43 2b10 	vmov	d0, r2, r3
 8004658:	b01f      	add	sp, #124	@ 0x7c
 800465a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800465e:	2920      	cmp	r1, #32
 8004660:	d1ce      	bne.n	8004600 <_strtod_l+0x30>
 8004662:	3201      	adds	r2, #1
 8004664:	e7c1      	b.n	80045ea <_strtod_l+0x1a>
 8004666:	292d      	cmp	r1, #45	@ 0x2d
 8004668:	d1ca      	bne.n	8004600 <_strtod_l+0x30>
 800466a:	2101      	movs	r1, #1
 800466c:	910e      	str	r1, [sp, #56]	@ 0x38
 800466e:	1c51      	adds	r1, r2, #1
 8004670:	9119      	str	r1, [sp, #100]	@ 0x64
 8004672:	7852      	ldrb	r2, [r2, #1]
 8004674:	2a00      	cmp	r2, #0
 8004676:	d1c5      	bne.n	8004604 <_strtod_l+0x34>
 8004678:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800467a:	9419      	str	r4, [sp, #100]	@ 0x64
 800467c:	2b00      	cmp	r3, #0
 800467e:	f040 8570 	bne.w	8005162 <_strtod_l+0xb92>
 8004682:	4652      	mov	r2, sl
 8004684:	465b      	mov	r3, fp
 8004686:	e7e5      	b.n	8004654 <_strtod_l+0x84>
 8004688:	2100      	movs	r1, #0
 800468a:	e7ef      	b.n	800466c <_strtod_l+0x9c>
 800468c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800468e:	b13a      	cbz	r2, 80046a0 <_strtod_l+0xd0>
 8004690:	2135      	movs	r1, #53	@ 0x35
 8004692:	a81c      	add	r0, sp, #112	@ 0x70
 8004694:	f003 ff06 	bl	80084a4 <__copybits>
 8004698:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800469a:	9805      	ldr	r0, [sp, #20]
 800469c:	f003 fadc 	bl	8007c58 <_Bfree>
 80046a0:	3e01      	subs	r6, #1
 80046a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80046a4:	2e04      	cmp	r6, #4
 80046a6:	d806      	bhi.n	80046b6 <_strtod_l+0xe6>
 80046a8:	e8df f006 	tbb	[pc, r6]
 80046ac:	201d0314 	.word	0x201d0314
 80046b0:	14          	.byte	0x14
 80046b1:	00          	.byte	0x00
 80046b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80046b6:	05e1      	lsls	r1, r4, #23
 80046b8:	bf48      	it	mi
 80046ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80046be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80046c2:	0d1b      	lsrs	r3, r3, #20
 80046c4:	051b      	lsls	r3, r3, #20
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1bb      	bne.n	8004642 <_strtod_l+0x72>
 80046ca:	f001 ff79 	bl	80065c0 <__errno>
 80046ce:	2322      	movs	r3, #34	@ 0x22
 80046d0:	6003      	str	r3, [r0, #0]
 80046d2:	e7b6      	b.n	8004642 <_strtod_l+0x72>
 80046d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80046d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80046dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80046e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80046e4:	e7e7      	b.n	80046b6 <_strtod_l+0xe6>
 80046e6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8004868 <_strtod_l+0x298>
 80046ea:	e7e4      	b.n	80046b6 <_strtod_l+0xe6>
 80046ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80046f0:	f04f 3aff 	mov.w	sl, #4294967295
 80046f4:	e7df      	b.n	80046b6 <_strtod_l+0xe6>
 80046f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80046fc:	785b      	ldrb	r3, [r3, #1]
 80046fe:	2b30      	cmp	r3, #48	@ 0x30
 8004700:	d0f9      	beq.n	80046f6 <_strtod_l+0x126>
 8004702:	2b00      	cmp	r3, #0
 8004704:	d09d      	beq.n	8004642 <_strtod_l+0x72>
 8004706:	2301      	movs	r3, #1
 8004708:	2700      	movs	r7, #0
 800470a:	9308      	str	r3, [sp, #32]
 800470c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800470e:	930c      	str	r3, [sp, #48]	@ 0x30
 8004710:	970b      	str	r7, [sp, #44]	@ 0x2c
 8004712:	46b9      	mov	r9, r7
 8004714:	220a      	movs	r2, #10
 8004716:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8004718:	7805      	ldrb	r5, [r0, #0]
 800471a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800471e:	b2d9      	uxtb	r1, r3
 8004720:	2909      	cmp	r1, #9
 8004722:	d928      	bls.n	8004776 <_strtod_l+0x1a6>
 8004724:	494f      	ldr	r1, [pc, #316]	@ (8004864 <_strtod_l+0x294>)
 8004726:	2201      	movs	r2, #1
 8004728:	f001 fe7e 	bl	8006428 <strncmp>
 800472c:	2800      	cmp	r0, #0
 800472e:	d032      	beq.n	8004796 <_strtod_l+0x1c6>
 8004730:	2000      	movs	r0, #0
 8004732:	462a      	mov	r2, r5
 8004734:	900a      	str	r0, [sp, #40]	@ 0x28
 8004736:	464d      	mov	r5, r9
 8004738:	4603      	mov	r3, r0
 800473a:	2a65      	cmp	r2, #101	@ 0x65
 800473c:	d001      	beq.n	8004742 <_strtod_l+0x172>
 800473e:	2a45      	cmp	r2, #69	@ 0x45
 8004740:	d114      	bne.n	800476c <_strtod_l+0x19c>
 8004742:	b91d      	cbnz	r5, 800474c <_strtod_l+0x17c>
 8004744:	9a08      	ldr	r2, [sp, #32]
 8004746:	4302      	orrs	r2, r0
 8004748:	d096      	beq.n	8004678 <_strtod_l+0xa8>
 800474a:	2500      	movs	r5, #0
 800474c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800474e:	1c62      	adds	r2, r4, #1
 8004750:	9219      	str	r2, [sp, #100]	@ 0x64
 8004752:	7862      	ldrb	r2, [r4, #1]
 8004754:	2a2b      	cmp	r2, #43	@ 0x2b
 8004756:	d07a      	beq.n	800484e <_strtod_l+0x27e>
 8004758:	2a2d      	cmp	r2, #45	@ 0x2d
 800475a:	d07e      	beq.n	800485a <_strtod_l+0x28a>
 800475c:	f04f 0c00 	mov.w	ip, #0
 8004760:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004764:	2909      	cmp	r1, #9
 8004766:	f240 8085 	bls.w	8004874 <_strtod_l+0x2a4>
 800476a:	9419      	str	r4, [sp, #100]	@ 0x64
 800476c:	f04f 0800 	mov.w	r8, #0
 8004770:	e0a5      	b.n	80048be <_strtod_l+0x2ee>
 8004772:	2300      	movs	r3, #0
 8004774:	e7c8      	b.n	8004708 <_strtod_l+0x138>
 8004776:	f1b9 0f08 	cmp.w	r9, #8
 800477a:	bfd8      	it	le
 800477c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800477e:	f100 0001 	add.w	r0, r0, #1
 8004782:	bfda      	itte	le
 8004784:	fb02 3301 	mlale	r3, r2, r1, r3
 8004788:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800478a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800478e:	f109 0901 	add.w	r9, r9, #1
 8004792:	9019      	str	r0, [sp, #100]	@ 0x64
 8004794:	e7bf      	b.n	8004716 <_strtod_l+0x146>
 8004796:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	9219      	str	r2, [sp, #100]	@ 0x64
 800479c:	785a      	ldrb	r2, [r3, #1]
 800479e:	f1b9 0f00 	cmp.w	r9, #0
 80047a2:	d03b      	beq.n	800481c <_strtod_l+0x24c>
 80047a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80047a6:	464d      	mov	r5, r9
 80047a8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80047ac:	2b09      	cmp	r3, #9
 80047ae:	d912      	bls.n	80047d6 <_strtod_l+0x206>
 80047b0:	2301      	movs	r3, #1
 80047b2:	e7c2      	b.n	800473a <_strtod_l+0x16a>
 80047b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80047ba:	785a      	ldrb	r2, [r3, #1]
 80047bc:	3001      	adds	r0, #1
 80047be:	2a30      	cmp	r2, #48	@ 0x30
 80047c0:	d0f8      	beq.n	80047b4 <_strtod_l+0x1e4>
 80047c2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	f200 84d2 	bhi.w	8005170 <_strtod_l+0xba0>
 80047cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80047ce:	900a      	str	r0, [sp, #40]	@ 0x28
 80047d0:	2000      	movs	r0, #0
 80047d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80047d4:	4605      	mov	r5, r0
 80047d6:	3a30      	subs	r2, #48	@ 0x30
 80047d8:	f100 0301 	add.w	r3, r0, #1
 80047dc:	d018      	beq.n	8004810 <_strtod_l+0x240>
 80047de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80047e0:	4419      	add	r1, r3
 80047e2:	910a      	str	r1, [sp, #40]	@ 0x28
 80047e4:	462e      	mov	r6, r5
 80047e6:	f04f 0e0a 	mov.w	lr, #10
 80047ea:	1c71      	adds	r1, r6, #1
 80047ec:	eba1 0c05 	sub.w	ip, r1, r5
 80047f0:	4563      	cmp	r3, ip
 80047f2:	dc15      	bgt.n	8004820 <_strtod_l+0x250>
 80047f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80047f8:	182b      	adds	r3, r5, r0
 80047fa:	2b08      	cmp	r3, #8
 80047fc:	f105 0501 	add.w	r5, r5, #1
 8004800:	4405      	add	r5, r0
 8004802:	dc1a      	bgt.n	800483a <_strtod_l+0x26a>
 8004804:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004806:	230a      	movs	r3, #10
 8004808:	fb03 2301 	mla	r3, r3, r1, r2
 800480c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800480e:	2300      	movs	r3, #0
 8004810:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004812:	1c51      	adds	r1, r2, #1
 8004814:	9119      	str	r1, [sp, #100]	@ 0x64
 8004816:	7852      	ldrb	r2, [r2, #1]
 8004818:	4618      	mov	r0, r3
 800481a:	e7c5      	b.n	80047a8 <_strtod_l+0x1d8>
 800481c:	4648      	mov	r0, r9
 800481e:	e7ce      	b.n	80047be <_strtod_l+0x1ee>
 8004820:	2e08      	cmp	r6, #8
 8004822:	dc05      	bgt.n	8004830 <_strtod_l+0x260>
 8004824:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004826:	fb0e f606 	mul.w	r6, lr, r6
 800482a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800482c:	460e      	mov	r6, r1
 800482e:	e7dc      	b.n	80047ea <_strtod_l+0x21a>
 8004830:	2910      	cmp	r1, #16
 8004832:	bfd8      	it	le
 8004834:	fb0e f707 	mulle.w	r7, lr, r7
 8004838:	e7f8      	b.n	800482c <_strtod_l+0x25c>
 800483a:	2b0f      	cmp	r3, #15
 800483c:	bfdc      	itt	le
 800483e:	230a      	movle	r3, #10
 8004840:	fb03 2707 	mlale	r7, r3, r7, r2
 8004844:	e7e3      	b.n	800480e <_strtod_l+0x23e>
 8004846:	2300      	movs	r3, #0
 8004848:	930a      	str	r3, [sp, #40]	@ 0x28
 800484a:	2301      	movs	r3, #1
 800484c:	e77a      	b.n	8004744 <_strtod_l+0x174>
 800484e:	f04f 0c00 	mov.w	ip, #0
 8004852:	1ca2      	adds	r2, r4, #2
 8004854:	9219      	str	r2, [sp, #100]	@ 0x64
 8004856:	78a2      	ldrb	r2, [r4, #2]
 8004858:	e782      	b.n	8004760 <_strtod_l+0x190>
 800485a:	f04f 0c01 	mov.w	ip, #1
 800485e:	e7f8      	b.n	8004852 <_strtod_l+0x282>
 8004860:	08009a30 	.word	0x08009a30
 8004864:	080097d0 	.word	0x080097d0
 8004868:	7ff00000 	.word	0x7ff00000
 800486c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800486e:	1c51      	adds	r1, r2, #1
 8004870:	9119      	str	r1, [sp, #100]	@ 0x64
 8004872:	7852      	ldrb	r2, [r2, #1]
 8004874:	2a30      	cmp	r2, #48	@ 0x30
 8004876:	d0f9      	beq.n	800486c <_strtod_l+0x29c>
 8004878:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800487c:	2908      	cmp	r1, #8
 800487e:	f63f af75 	bhi.w	800476c <_strtod_l+0x19c>
 8004882:	3a30      	subs	r2, #48	@ 0x30
 8004884:	9209      	str	r2, [sp, #36]	@ 0x24
 8004886:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004888:	920f      	str	r2, [sp, #60]	@ 0x3c
 800488a:	f04f 080a 	mov.w	r8, #10
 800488e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004890:	1c56      	adds	r6, r2, #1
 8004892:	9619      	str	r6, [sp, #100]	@ 0x64
 8004894:	7852      	ldrb	r2, [r2, #1]
 8004896:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800489a:	f1be 0f09 	cmp.w	lr, #9
 800489e:	d939      	bls.n	8004914 <_strtod_l+0x344>
 80048a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80048a2:	1a76      	subs	r6, r6, r1
 80048a4:	2e08      	cmp	r6, #8
 80048a6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80048aa:	dc03      	bgt.n	80048b4 <_strtod_l+0x2e4>
 80048ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80048ae:	4588      	cmp	r8, r1
 80048b0:	bfa8      	it	ge
 80048b2:	4688      	movge	r8, r1
 80048b4:	f1bc 0f00 	cmp.w	ip, #0
 80048b8:	d001      	beq.n	80048be <_strtod_l+0x2ee>
 80048ba:	f1c8 0800 	rsb	r8, r8, #0
 80048be:	2d00      	cmp	r5, #0
 80048c0:	d14e      	bne.n	8004960 <_strtod_l+0x390>
 80048c2:	9908      	ldr	r1, [sp, #32]
 80048c4:	4308      	orrs	r0, r1
 80048c6:	f47f aebc 	bne.w	8004642 <_strtod_l+0x72>
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	f47f aed4 	bne.w	8004678 <_strtod_l+0xa8>
 80048d0:	2a69      	cmp	r2, #105	@ 0x69
 80048d2:	d028      	beq.n	8004926 <_strtod_l+0x356>
 80048d4:	dc25      	bgt.n	8004922 <_strtod_l+0x352>
 80048d6:	2a49      	cmp	r2, #73	@ 0x49
 80048d8:	d025      	beq.n	8004926 <_strtod_l+0x356>
 80048da:	2a4e      	cmp	r2, #78	@ 0x4e
 80048dc:	f47f aecc 	bne.w	8004678 <_strtod_l+0xa8>
 80048e0:	499a      	ldr	r1, [pc, #616]	@ (8004b4c <_strtod_l+0x57c>)
 80048e2:	a819      	add	r0, sp, #100	@ 0x64
 80048e4:	f003 f800 	bl	80078e8 <__match>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	f43f aec5 	beq.w	8004678 <_strtod_l+0xa8>
 80048ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	2b28      	cmp	r3, #40	@ 0x28
 80048f4:	d12e      	bne.n	8004954 <_strtod_l+0x384>
 80048f6:	4996      	ldr	r1, [pc, #600]	@ (8004b50 <_strtod_l+0x580>)
 80048f8:	aa1c      	add	r2, sp, #112	@ 0x70
 80048fa:	a819      	add	r0, sp, #100	@ 0x64
 80048fc:	f003 f808 	bl	8007910 <__hexnan>
 8004900:	2805      	cmp	r0, #5
 8004902:	d127      	bne.n	8004954 <_strtod_l+0x384>
 8004904:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8004906:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800490a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800490e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8004912:	e696      	b.n	8004642 <_strtod_l+0x72>
 8004914:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004916:	fb08 2101 	mla	r1, r8, r1, r2
 800491a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800491e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004920:	e7b5      	b.n	800488e <_strtod_l+0x2be>
 8004922:	2a6e      	cmp	r2, #110	@ 0x6e
 8004924:	e7da      	b.n	80048dc <_strtod_l+0x30c>
 8004926:	498b      	ldr	r1, [pc, #556]	@ (8004b54 <_strtod_l+0x584>)
 8004928:	a819      	add	r0, sp, #100	@ 0x64
 800492a:	f002 ffdd 	bl	80078e8 <__match>
 800492e:	2800      	cmp	r0, #0
 8004930:	f43f aea2 	beq.w	8004678 <_strtod_l+0xa8>
 8004934:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004936:	4988      	ldr	r1, [pc, #544]	@ (8004b58 <_strtod_l+0x588>)
 8004938:	3b01      	subs	r3, #1
 800493a:	a819      	add	r0, sp, #100	@ 0x64
 800493c:	9319      	str	r3, [sp, #100]	@ 0x64
 800493e:	f002 ffd3 	bl	80078e8 <__match>
 8004942:	b910      	cbnz	r0, 800494a <_strtod_l+0x37a>
 8004944:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004946:	3301      	adds	r3, #1
 8004948:	9319      	str	r3, [sp, #100]	@ 0x64
 800494a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8004b68 <_strtod_l+0x598>
 800494e:	f04f 0a00 	mov.w	sl, #0
 8004952:	e676      	b.n	8004642 <_strtod_l+0x72>
 8004954:	4881      	ldr	r0, [pc, #516]	@ (8004b5c <_strtod_l+0x58c>)
 8004956:	f001 fe6f 	bl	8006638 <nan>
 800495a:	ec5b ab10 	vmov	sl, fp, d0
 800495e:	e670      	b.n	8004642 <_strtod_l+0x72>
 8004960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004962:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004964:	eba8 0303 	sub.w	r3, r8, r3
 8004968:	f1b9 0f00 	cmp.w	r9, #0
 800496c:	bf08      	it	eq
 800496e:	46a9      	moveq	r9, r5
 8004970:	2d10      	cmp	r5, #16
 8004972:	9309      	str	r3, [sp, #36]	@ 0x24
 8004974:	462c      	mov	r4, r5
 8004976:	bfa8      	it	ge
 8004978:	2410      	movge	r4, #16
 800497a:	f7fb fdd3 	bl	8000524 <__aeabi_ui2d>
 800497e:	2d09      	cmp	r5, #9
 8004980:	4682      	mov	sl, r0
 8004982:	468b      	mov	fp, r1
 8004984:	dc13      	bgt.n	80049ae <_strtod_l+0x3de>
 8004986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004988:	2b00      	cmp	r3, #0
 800498a:	f43f ae5a 	beq.w	8004642 <_strtod_l+0x72>
 800498e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004990:	dd78      	ble.n	8004a84 <_strtod_l+0x4b4>
 8004992:	2b16      	cmp	r3, #22
 8004994:	dc5f      	bgt.n	8004a56 <_strtod_l+0x486>
 8004996:	4972      	ldr	r1, [pc, #456]	@ (8004b60 <_strtod_l+0x590>)
 8004998:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800499c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049a0:	4652      	mov	r2, sl
 80049a2:	465b      	mov	r3, fp
 80049a4:	f7fb fe38 	bl	8000618 <__aeabi_dmul>
 80049a8:	4682      	mov	sl, r0
 80049aa:	468b      	mov	fp, r1
 80049ac:	e649      	b.n	8004642 <_strtod_l+0x72>
 80049ae:	4b6c      	ldr	r3, [pc, #432]	@ (8004b60 <_strtod_l+0x590>)
 80049b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80049b8:	f7fb fe2e 	bl	8000618 <__aeabi_dmul>
 80049bc:	4682      	mov	sl, r0
 80049be:	4638      	mov	r0, r7
 80049c0:	468b      	mov	fp, r1
 80049c2:	f7fb fdaf 	bl	8000524 <__aeabi_ui2d>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4650      	mov	r0, sl
 80049cc:	4659      	mov	r1, fp
 80049ce:	f7fb fc6d 	bl	80002ac <__adddf3>
 80049d2:	2d0f      	cmp	r5, #15
 80049d4:	4682      	mov	sl, r0
 80049d6:	468b      	mov	fp, r1
 80049d8:	ddd5      	ble.n	8004986 <_strtod_l+0x3b6>
 80049da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049dc:	1b2c      	subs	r4, r5, r4
 80049de:	441c      	add	r4, r3
 80049e0:	2c00      	cmp	r4, #0
 80049e2:	f340 8093 	ble.w	8004b0c <_strtod_l+0x53c>
 80049e6:	f014 030f 	ands.w	r3, r4, #15
 80049ea:	d00a      	beq.n	8004a02 <_strtod_l+0x432>
 80049ec:	495c      	ldr	r1, [pc, #368]	@ (8004b60 <_strtod_l+0x590>)
 80049ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80049f2:	4652      	mov	r2, sl
 80049f4:	465b      	mov	r3, fp
 80049f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049fa:	f7fb fe0d 	bl	8000618 <__aeabi_dmul>
 80049fe:	4682      	mov	sl, r0
 8004a00:	468b      	mov	fp, r1
 8004a02:	f034 040f 	bics.w	r4, r4, #15
 8004a06:	d073      	beq.n	8004af0 <_strtod_l+0x520>
 8004a08:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8004a0c:	dd49      	ble.n	8004aa2 <_strtod_l+0x4d2>
 8004a0e:	2400      	movs	r4, #0
 8004a10:	46a0      	mov	r8, r4
 8004a12:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004a14:	46a1      	mov	r9, r4
 8004a16:	9a05      	ldr	r2, [sp, #20]
 8004a18:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8004b68 <_strtod_l+0x598>
 8004a1c:	2322      	movs	r3, #34	@ 0x22
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	f04f 0a00 	mov.w	sl, #0
 8004a24:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	f43f ae0b 	beq.w	8004642 <_strtod_l+0x72>
 8004a2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004a2e:	9805      	ldr	r0, [sp, #20]
 8004a30:	f003 f912 	bl	8007c58 <_Bfree>
 8004a34:	9805      	ldr	r0, [sp, #20]
 8004a36:	4649      	mov	r1, r9
 8004a38:	f003 f90e 	bl	8007c58 <_Bfree>
 8004a3c:	9805      	ldr	r0, [sp, #20]
 8004a3e:	4641      	mov	r1, r8
 8004a40:	f003 f90a 	bl	8007c58 <_Bfree>
 8004a44:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004a46:	9805      	ldr	r0, [sp, #20]
 8004a48:	f003 f906 	bl	8007c58 <_Bfree>
 8004a4c:	9805      	ldr	r0, [sp, #20]
 8004a4e:	4621      	mov	r1, r4
 8004a50:	f003 f902 	bl	8007c58 <_Bfree>
 8004a54:	e5f5      	b.n	8004642 <_strtod_l+0x72>
 8004a56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a58:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	dbbc      	blt.n	80049da <_strtod_l+0x40a>
 8004a60:	4c3f      	ldr	r4, [pc, #252]	@ (8004b60 <_strtod_l+0x590>)
 8004a62:	f1c5 050f 	rsb	r5, r5, #15
 8004a66:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004a6a:	4652      	mov	r2, sl
 8004a6c:	465b      	mov	r3, fp
 8004a6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a72:	f7fb fdd1 	bl	8000618 <__aeabi_dmul>
 8004a76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a78:	1b5d      	subs	r5, r3, r5
 8004a7a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004a7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004a82:	e78f      	b.n	80049a4 <_strtod_l+0x3d4>
 8004a84:	3316      	adds	r3, #22
 8004a86:	dba8      	blt.n	80049da <_strtod_l+0x40a>
 8004a88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a8a:	eba3 0808 	sub.w	r8, r3, r8
 8004a8e:	4b34      	ldr	r3, [pc, #208]	@ (8004b60 <_strtod_l+0x590>)
 8004a90:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8004a94:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004a98:	4650      	mov	r0, sl
 8004a9a:	4659      	mov	r1, fp
 8004a9c:	f7fb fee6 	bl	800086c <__aeabi_ddiv>
 8004aa0:	e782      	b.n	80049a8 <_strtod_l+0x3d8>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	4f2f      	ldr	r7, [pc, #188]	@ (8004b64 <_strtod_l+0x594>)
 8004aa6:	1124      	asrs	r4, r4, #4
 8004aa8:	4650      	mov	r0, sl
 8004aaa:	4659      	mov	r1, fp
 8004aac:	461e      	mov	r6, r3
 8004aae:	2c01      	cmp	r4, #1
 8004ab0:	dc21      	bgt.n	8004af6 <_strtod_l+0x526>
 8004ab2:	b10b      	cbz	r3, 8004ab8 <_strtod_l+0x4e8>
 8004ab4:	4682      	mov	sl, r0
 8004ab6:	468b      	mov	fp, r1
 8004ab8:	492a      	ldr	r1, [pc, #168]	@ (8004b64 <_strtod_l+0x594>)
 8004aba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8004abe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004ac2:	4652      	mov	r2, sl
 8004ac4:	465b      	mov	r3, fp
 8004ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004aca:	f7fb fda5 	bl	8000618 <__aeabi_dmul>
 8004ace:	4b26      	ldr	r3, [pc, #152]	@ (8004b68 <_strtod_l+0x598>)
 8004ad0:	460a      	mov	r2, r1
 8004ad2:	400b      	ands	r3, r1
 8004ad4:	4925      	ldr	r1, [pc, #148]	@ (8004b6c <_strtod_l+0x59c>)
 8004ad6:	428b      	cmp	r3, r1
 8004ad8:	4682      	mov	sl, r0
 8004ada:	d898      	bhi.n	8004a0e <_strtod_l+0x43e>
 8004adc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8004ae0:	428b      	cmp	r3, r1
 8004ae2:	bf86      	itte	hi
 8004ae4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8004b70 <_strtod_l+0x5a0>
 8004ae8:	f04f 3aff 	movhi.w	sl, #4294967295
 8004aec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8004af0:	2300      	movs	r3, #0
 8004af2:	9308      	str	r3, [sp, #32]
 8004af4:	e076      	b.n	8004be4 <_strtod_l+0x614>
 8004af6:	07e2      	lsls	r2, r4, #31
 8004af8:	d504      	bpl.n	8004b04 <_strtod_l+0x534>
 8004afa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004afe:	f7fb fd8b 	bl	8000618 <__aeabi_dmul>
 8004b02:	2301      	movs	r3, #1
 8004b04:	3601      	adds	r6, #1
 8004b06:	1064      	asrs	r4, r4, #1
 8004b08:	3708      	adds	r7, #8
 8004b0a:	e7d0      	b.n	8004aae <_strtod_l+0x4de>
 8004b0c:	d0f0      	beq.n	8004af0 <_strtod_l+0x520>
 8004b0e:	4264      	negs	r4, r4
 8004b10:	f014 020f 	ands.w	r2, r4, #15
 8004b14:	d00a      	beq.n	8004b2c <_strtod_l+0x55c>
 8004b16:	4b12      	ldr	r3, [pc, #72]	@ (8004b60 <_strtod_l+0x590>)
 8004b18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b1c:	4650      	mov	r0, sl
 8004b1e:	4659      	mov	r1, fp
 8004b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b24:	f7fb fea2 	bl	800086c <__aeabi_ddiv>
 8004b28:	4682      	mov	sl, r0
 8004b2a:	468b      	mov	fp, r1
 8004b2c:	1124      	asrs	r4, r4, #4
 8004b2e:	d0df      	beq.n	8004af0 <_strtod_l+0x520>
 8004b30:	2c1f      	cmp	r4, #31
 8004b32:	dd1f      	ble.n	8004b74 <_strtod_l+0x5a4>
 8004b34:	2400      	movs	r4, #0
 8004b36:	46a0      	mov	r8, r4
 8004b38:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004b3a:	46a1      	mov	r9, r4
 8004b3c:	9a05      	ldr	r2, [sp, #20]
 8004b3e:	2322      	movs	r3, #34	@ 0x22
 8004b40:	f04f 0a00 	mov.w	sl, #0
 8004b44:	f04f 0b00 	mov.w	fp, #0
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	e76b      	b.n	8004a24 <_strtod_l+0x454>
 8004b4c:	080097df 	.word	0x080097df
 8004b50:	08009a1c 	.word	0x08009a1c
 8004b54:	080097d7 	.word	0x080097d7
 8004b58:	080098c1 	.word	0x080098c1
 8004b5c:	080098bd 	.word	0x080098bd
 8004b60:	08009ba8 	.word	0x08009ba8
 8004b64:	08009b80 	.word	0x08009b80
 8004b68:	7ff00000 	.word	0x7ff00000
 8004b6c:	7ca00000 	.word	0x7ca00000
 8004b70:	7fefffff 	.word	0x7fefffff
 8004b74:	f014 0310 	ands.w	r3, r4, #16
 8004b78:	bf18      	it	ne
 8004b7a:	236a      	movne	r3, #106	@ 0x6a
 8004b7c:	4ea9      	ldr	r6, [pc, #676]	@ (8004e24 <_strtod_l+0x854>)
 8004b7e:	9308      	str	r3, [sp, #32]
 8004b80:	4650      	mov	r0, sl
 8004b82:	4659      	mov	r1, fp
 8004b84:	2300      	movs	r3, #0
 8004b86:	07e7      	lsls	r7, r4, #31
 8004b88:	d504      	bpl.n	8004b94 <_strtod_l+0x5c4>
 8004b8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b8e:	f7fb fd43 	bl	8000618 <__aeabi_dmul>
 8004b92:	2301      	movs	r3, #1
 8004b94:	1064      	asrs	r4, r4, #1
 8004b96:	f106 0608 	add.w	r6, r6, #8
 8004b9a:	d1f4      	bne.n	8004b86 <_strtod_l+0x5b6>
 8004b9c:	b10b      	cbz	r3, 8004ba2 <_strtod_l+0x5d2>
 8004b9e:	4682      	mov	sl, r0
 8004ba0:	468b      	mov	fp, r1
 8004ba2:	9b08      	ldr	r3, [sp, #32]
 8004ba4:	b1b3      	cbz	r3, 8004bd4 <_strtod_l+0x604>
 8004ba6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004baa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	4659      	mov	r1, fp
 8004bb2:	dd0f      	ble.n	8004bd4 <_strtod_l+0x604>
 8004bb4:	2b1f      	cmp	r3, #31
 8004bb6:	dd56      	ble.n	8004c66 <_strtod_l+0x696>
 8004bb8:	2b34      	cmp	r3, #52	@ 0x34
 8004bba:	bfde      	ittt	le
 8004bbc:	f04f 33ff 	movle.w	r3, #4294967295
 8004bc0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8004bc4:	4093      	lslle	r3, r2
 8004bc6:	f04f 0a00 	mov.w	sl, #0
 8004bca:	bfcc      	ite	gt
 8004bcc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8004bd0:	ea03 0b01 	andle.w	fp, r3, r1
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	4650      	mov	r0, sl
 8004bda:	4659      	mov	r1, fp
 8004bdc:	f7fb ff84 	bl	8000ae8 <__aeabi_dcmpeq>
 8004be0:	2800      	cmp	r0, #0
 8004be2:	d1a7      	bne.n	8004b34 <_strtod_l+0x564>
 8004be4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004bea:	9805      	ldr	r0, [sp, #20]
 8004bec:	462b      	mov	r3, r5
 8004bee:	464a      	mov	r2, r9
 8004bf0:	f003 f89a 	bl	8007d28 <__s2b>
 8004bf4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004bf6:	2800      	cmp	r0, #0
 8004bf8:	f43f af09 	beq.w	8004a0e <_strtod_l+0x43e>
 8004bfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bfe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c00:	2a00      	cmp	r2, #0
 8004c02:	eba3 0308 	sub.w	r3, r3, r8
 8004c06:	bfa8      	it	ge
 8004c08:	2300      	movge	r3, #0
 8004c0a:	9312      	str	r3, [sp, #72]	@ 0x48
 8004c0c:	2400      	movs	r4, #0
 8004c0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004c12:	9316      	str	r3, [sp, #88]	@ 0x58
 8004c14:	46a0      	mov	r8, r4
 8004c16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c18:	9805      	ldr	r0, [sp, #20]
 8004c1a:	6859      	ldr	r1, [r3, #4]
 8004c1c:	f002 ffdc 	bl	8007bd8 <_Balloc>
 8004c20:	4681      	mov	r9, r0
 8004c22:	2800      	cmp	r0, #0
 8004c24:	f43f aef7 	beq.w	8004a16 <_strtod_l+0x446>
 8004c28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	3202      	adds	r2, #2
 8004c2e:	f103 010c 	add.w	r1, r3, #12
 8004c32:	0092      	lsls	r2, r2, #2
 8004c34:	300c      	adds	r0, #12
 8004c36:	f001 fcf0 	bl	800661a <memcpy>
 8004c3a:	ec4b ab10 	vmov	d0, sl, fp
 8004c3e:	9805      	ldr	r0, [sp, #20]
 8004c40:	aa1c      	add	r2, sp, #112	@ 0x70
 8004c42:	a91b      	add	r1, sp, #108	@ 0x6c
 8004c44:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8004c48:	f003 fba2 	bl	8008390 <__d2b>
 8004c4c:	901a      	str	r0, [sp, #104]	@ 0x68
 8004c4e:	2800      	cmp	r0, #0
 8004c50:	f43f aee1 	beq.w	8004a16 <_strtod_l+0x446>
 8004c54:	9805      	ldr	r0, [sp, #20]
 8004c56:	2101      	movs	r1, #1
 8004c58:	f003 f8fc 	bl	8007e54 <__i2b>
 8004c5c:	4680      	mov	r8, r0
 8004c5e:	b948      	cbnz	r0, 8004c74 <_strtod_l+0x6a4>
 8004c60:	f04f 0800 	mov.w	r8, #0
 8004c64:	e6d7      	b.n	8004a16 <_strtod_l+0x446>
 8004c66:	f04f 32ff 	mov.w	r2, #4294967295
 8004c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c6e:	ea03 0a0a 	and.w	sl, r3, sl
 8004c72:	e7af      	b.n	8004bd4 <_strtod_l+0x604>
 8004c74:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8004c76:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004c78:	2d00      	cmp	r5, #0
 8004c7a:	bfab      	itete	ge
 8004c7c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8004c7e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8004c80:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8004c82:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8004c84:	bfac      	ite	ge
 8004c86:	18ef      	addge	r7, r5, r3
 8004c88:	1b5e      	sublt	r6, r3, r5
 8004c8a:	9b08      	ldr	r3, [sp, #32]
 8004c8c:	1aed      	subs	r5, r5, r3
 8004c8e:	4415      	add	r5, r2
 8004c90:	4b65      	ldr	r3, [pc, #404]	@ (8004e28 <_strtod_l+0x858>)
 8004c92:	3d01      	subs	r5, #1
 8004c94:	429d      	cmp	r5, r3
 8004c96:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8004c9a:	da50      	bge.n	8004d3e <_strtod_l+0x76e>
 8004c9c:	1b5b      	subs	r3, r3, r5
 8004c9e:	2b1f      	cmp	r3, #31
 8004ca0:	eba2 0203 	sub.w	r2, r2, r3
 8004ca4:	f04f 0101 	mov.w	r1, #1
 8004ca8:	dc3d      	bgt.n	8004d26 <_strtod_l+0x756>
 8004caa:	fa01 f303 	lsl.w	r3, r1, r3
 8004cae:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	9310      	str	r3, [sp, #64]	@ 0x40
 8004cb4:	18bd      	adds	r5, r7, r2
 8004cb6:	9b08      	ldr	r3, [sp, #32]
 8004cb8:	42af      	cmp	r7, r5
 8004cba:	4416      	add	r6, r2
 8004cbc:	441e      	add	r6, r3
 8004cbe:	463b      	mov	r3, r7
 8004cc0:	bfa8      	it	ge
 8004cc2:	462b      	movge	r3, r5
 8004cc4:	42b3      	cmp	r3, r6
 8004cc6:	bfa8      	it	ge
 8004cc8:	4633      	movge	r3, r6
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	bfc2      	ittt	gt
 8004cce:	1aed      	subgt	r5, r5, r3
 8004cd0:	1af6      	subgt	r6, r6, r3
 8004cd2:	1aff      	subgt	r7, r7, r3
 8004cd4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	dd16      	ble.n	8004d08 <_strtod_l+0x738>
 8004cda:	4641      	mov	r1, r8
 8004cdc:	9805      	ldr	r0, [sp, #20]
 8004cde:	461a      	mov	r2, r3
 8004ce0:	f003 f970 	bl	8007fc4 <__pow5mult>
 8004ce4:	4680      	mov	r8, r0
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	d0ba      	beq.n	8004c60 <_strtod_l+0x690>
 8004cea:	4601      	mov	r1, r0
 8004cec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004cee:	9805      	ldr	r0, [sp, #20]
 8004cf0:	f003 f8c6 	bl	8007e80 <__multiply>
 8004cf4:	900a      	str	r0, [sp, #40]	@ 0x28
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	f43f ae8d 	beq.w	8004a16 <_strtod_l+0x446>
 8004cfc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004cfe:	9805      	ldr	r0, [sp, #20]
 8004d00:	f002 ffaa 	bl	8007c58 <_Bfree>
 8004d04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d06:	931a      	str	r3, [sp, #104]	@ 0x68
 8004d08:	2d00      	cmp	r5, #0
 8004d0a:	dc1d      	bgt.n	8004d48 <_strtod_l+0x778>
 8004d0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	dd23      	ble.n	8004d5a <_strtod_l+0x78a>
 8004d12:	4649      	mov	r1, r9
 8004d14:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8004d16:	9805      	ldr	r0, [sp, #20]
 8004d18:	f003 f954 	bl	8007fc4 <__pow5mult>
 8004d1c:	4681      	mov	r9, r0
 8004d1e:	b9e0      	cbnz	r0, 8004d5a <_strtod_l+0x78a>
 8004d20:	f04f 0900 	mov.w	r9, #0
 8004d24:	e677      	b.n	8004a16 <_strtod_l+0x446>
 8004d26:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8004d2a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8004d2e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8004d32:	35e2      	adds	r5, #226	@ 0xe2
 8004d34:	fa01 f305 	lsl.w	r3, r1, r5
 8004d38:	9310      	str	r3, [sp, #64]	@ 0x40
 8004d3a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8004d3c:	e7ba      	b.n	8004cb4 <_strtod_l+0x6e4>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	9310      	str	r3, [sp, #64]	@ 0x40
 8004d42:	2301      	movs	r3, #1
 8004d44:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004d46:	e7b5      	b.n	8004cb4 <_strtod_l+0x6e4>
 8004d48:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004d4a:	9805      	ldr	r0, [sp, #20]
 8004d4c:	462a      	mov	r2, r5
 8004d4e:	f003 f993 	bl	8008078 <__lshift>
 8004d52:	901a      	str	r0, [sp, #104]	@ 0x68
 8004d54:	2800      	cmp	r0, #0
 8004d56:	d1d9      	bne.n	8004d0c <_strtod_l+0x73c>
 8004d58:	e65d      	b.n	8004a16 <_strtod_l+0x446>
 8004d5a:	2e00      	cmp	r6, #0
 8004d5c:	dd07      	ble.n	8004d6e <_strtod_l+0x79e>
 8004d5e:	4649      	mov	r1, r9
 8004d60:	9805      	ldr	r0, [sp, #20]
 8004d62:	4632      	mov	r2, r6
 8004d64:	f003 f988 	bl	8008078 <__lshift>
 8004d68:	4681      	mov	r9, r0
 8004d6a:	2800      	cmp	r0, #0
 8004d6c:	d0d8      	beq.n	8004d20 <_strtod_l+0x750>
 8004d6e:	2f00      	cmp	r7, #0
 8004d70:	dd08      	ble.n	8004d84 <_strtod_l+0x7b4>
 8004d72:	4641      	mov	r1, r8
 8004d74:	9805      	ldr	r0, [sp, #20]
 8004d76:	463a      	mov	r2, r7
 8004d78:	f003 f97e 	bl	8008078 <__lshift>
 8004d7c:	4680      	mov	r8, r0
 8004d7e:	2800      	cmp	r0, #0
 8004d80:	f43f ae49 	beq.w	8004a16 <_strtod_l+0x446>
 8004d84:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004d86:	9805      	ldr	r0, [sp, #20]
 8004d88:	464a      	mov	r2, r9
 8004d8a:	f003 f9fd 	bl	8008188 <__mdiff>
 8004d8e:	4604      	mov	r4, r0
 8004d90:	2800      	cmp	r0, #0
 8004d92:	f43f ae40 	beq.w	8004a16 <_strtod_l+0x446>
 8004d96:	68c3      	ldr	r3, [r0, #12]
 8004d98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60c3      	str	r3, [r0, #12]
 8004d9e:	4641      	mov	r1, r8
 8004da0:	f003 f9d6 	bl	8008150 <__mcmp>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	da45      	bge.n	8004e34 <_strtod_l+0x864>
 8004da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004daa:	ea53 030a 	orrs.w	r3, r3, sl
 8004dae:	d16b      	bne.n	8004e88 <_strtod_l+0x8b8>
 8004db0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d167      	bne.n	8004e88 <_strtod_l+0x8b8>
 8004db8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004dbc:	0d1b      	lsrs	r3, r3, #20
 8004dbe:	051b      	lsls	r3, r3, #20
 8004dc0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004dc4:	d960      	bls.n	8004e88 <_strtod_l+0x8b8>
 8004dc6:	6963      	ldr	r3, [r4, #20]
 8004dc8:	b913      	cbnz	r3, 8004dd0 <_strtod_l+0x800>
 8004dca:	6923      	ldr	r3, [r4, #16]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	dd5b      	ble.n	8004e88 <_strtod_l+0x8b8>
 8004dd0:	4621      	mov	r1, r4
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	9805      	ldr	r0, [sp, #20]
 8004dd6:	f003 f94f 	bl	8008078 <__lshift>
 8004dda:	4641      	mov	r1, r8
 8004ddc:	4604      	mov	r4, r0
 8004dde:	f003 f9b7 	bl	8008150 <__mcmp>
 8004de2:	2800      	cmp	r0, #0
 8004de4:	dd50      	ble.n	8004e88 <_strtod_l+0x8b8>
 8004de6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004dea:	9a08      	ldr	r2, [sp, #32]
 8004dec:	0d1b      	lsrs	r3, r3, #20
 8004dee:	051b      	lsls	r3, r3, #20
 8004df0:	2a00      	cmp	r2, #0
 8004df2:	d06a      	beq.n	8004eca <_strtod_l+0x8fa>
 8004df4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004df8:	d867      	bhi.n	8004eca <_strtod_l+0x8fa>
 8004dfa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8004dfe:	f67f ae9d 	bls.w	8004b3c <_strtod_l+0x56c>
 8004e02:	4b0a      	ldr	r3, [pc, #40]	@ (8004e2c <_strtod_l+0x85c>)
 8004e04:	4650      	mov	r0, sl
 8004e06:	4659      	mov	r1, fp
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f7fb fc05 	bl	8000618 <__aeabi_dmul>
 8004e0e:	4b08      	ldr	r3, [pc, #32]	@ (8004e30 <_strtod_l+0x860>)
 8004e10:	400b      	ands	r3, r1
 8004e12:	4682      	mov	sl, r0
 8004e14:	468b      	mov	fp, r1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f47f ae08 	bne.w	8004a2c <_strtod_l+0x45c>
 8004e1c:	9a05      	ldr	r2, [sp, #20]
 8004e1e:	2322      	movs	r3, #34	@ 0x22
 8004e20:	6013      	str	r3, [r2, #0]
 8004e22:	e603      	b.n	8004a2c <_strtod_l+0x45c>
 8004e24:	08009a48 	.word	0x08009a48
 8004e28:	fffffc02 	.word	0xfffffc02
 8004e2c:	39500000 	.word	0x39500000
 8004e30:	7ff00000 	.word	0x7ff00000
 8004e34:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8004e38:	d165      	bne.n	8004f06 <_strtod_l+0x936>
 8004e3a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8004e3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004e40:	b35a      	cbz	r2, 8004e9a <_strtod_l+0x8ca>
 8004e42:	4a9f      	ldr	r2, [pc, #636]	@ (80050c0 <_strtod_l+0xaf0>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d12b      	bne.n	8004ea0 <_strtod_l+0x8d0>
 8004e48:	9b08      	ldr	r3, [sp, #32]
 8004e4a:	4651      	mov	r1, sl
 8004e4c:	b303      	cbz	r3, 8004e90 <_strtod_l+0x8c0>
 8004e4e:	4b9d      	ldr	r3, [pc, #628]	@ (80050c4 <_strtod_l+0xaf4>)
 8004e50:	465a      	mov	r2, fp
 8004e52:	4013      	ands	r3, r2
 8004e54:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8004e58:	f04f 32ff 	mov.w	r2, #4294967295
 8004e5c:	d81b      	bhi.n	8004e96 <_strtod_l+0x8c6>
 8004e5e:	0d1b      	lsrs	r3, r3, #20
 8004e60:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	4299      	cmp	r1, r3
 8004e6a:	d119      	bne.n	8004ea0 <_strtod_l+0x8d0>
 8004e6c:	4b96      	ldr	r3, [pc, #600]	@ (80050c8 <_strtod_l+0xaf8>)
 8004e6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d102      	bne.n	8004e7a <_strtod_l+0x8aa>
 8004e74:	3101      	adds	r1, #1
 8004e76:	f43f adce 	beq.w	8004a16 <_strtod_l+0x446>
 8004e7a:	4b92      	ldr	r3, [pc, #584]	@ (80050c4 <_strtod_l+0xaf4>)
 8004e7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e7e:	401a      	ands	r2, r3
 8004e80:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8004e84:	f04f 0a00 	mov.w	sl, #0
 8004e88:	9b08      	ldr	r3, [sp, #32]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1b9      	bne.n	8004e02 <_strtod_l+0x832>
 8004e8e:	e5cd      	b.n	8004a2c <_strtod_l+0x45c>
 8004e90:	f04f 33ff 	mov.w	r3, #4294967295
 8004e94:	e7e8      	b.n	8004e68 <_strtod_l+0x898>
 8004e96:	4613      	mov	r3, r2
 8004e98:	e7e6      	b.n	8004e68 <_strtod_l+0x898>
 8004e9a:	ea53 030a 	orrs.w	r3, r3, sl
 8004e9e:	d0a2      	beq.n	8004de6 <_strtod_l+0x816>
 8004ea0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004ea2:	b1db      	cbz	r3, 8004edc <_strtod_l+0x90c>
 8004ea4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ea6:	4213      	tst	r3, r2
 8004ea8:	d0ee      	beq.n	8004e88 <_strtod_l+0x8b8>
 8004eaa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004eac:	9a08      	ldr	r2, [sp, #32]
 8004eae:	4650      	mov	r0, sl
 8004eb0:	4659      	mov	r1, fp
 8004eb2:	b1bb      	cbz	r3, 8004ee4 <_strtod_l+0x914>
 8004eb4:	f7ff fb6c 	bl	8004590 <sulp>
 8004eb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ebc:	ec53 2b10 	vmov	r2, r3, d0
 8004ec0:	f7fb f9f4 	bl	80002ac <__adddf3>
 8004ec4:	4682      	mov	sl, r0
 8004ec6:	468b      	mov	fp, r1
 8004ec8:	e7de      	b.n	8004e88 <_strtod_l+0x8b8>
 8004eca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8004ece:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004ed2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004ed6:	f04f 3aff 	mov.w	sl, #4294967295
 8004eda:	e7d5      	b.n	8004e88 <_strtod_l+0x8b8>
 8004edc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004ede:	ea13 0f0a 	tst.w	r3, sl
 8004ee2:	e7e1      	b.n	8004ea8 <_strtod_l+0x8d8>
 8004ee4:	f7ff fb54 	bl	8004590 <sulp>
 8004ee8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004eec:	ec53 2b10 	vmov	r2, r3, d0
 8004ef0:	f7fb f9da 	bl	80002a8 <__aeabi_dsub>
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	4682      	mov	sl, r0
 8004efa:	468b      	mov	fp, r1
 8004efc:	f7fb fdf4 	bl	8000ae8 <__aeabi_dcmpeq>
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d0c1      	beq.n	8004e88 <_strtod_l+0x8b8>
 8004f04:	e61a      	b.n	8004b3c <_strtod_l+0x56c>
 8004f06:	4641      	mov	r1, r8
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f003 fa99 	bl	8008440 <__ratio>
 8004f0e:	ec57 6b10 	vmov	r6, r7, d0
 8004f12:	2200      	movs	r2, #0
 8004f14:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004f18:	4630      	mov	r0, r6
 8004f1a:	4639      	mov	r1, r7
 8004f1c:	f7fb fdf8 	bl	8000b10 <__aeabi_dcmple>
 8004f20:	2800      	cmp	r0, #0
 8004f22:	d06f      	beq.n	8005004 <_strtod_l+0xa34>
 8004f24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d17a      	bne.n	8005020 <_strtod_l+0xa50>
 8004f2a:	f1ba 0f00 	cmp.w	sl, #0
 8004f2e:	d158      	bne.n	8004fe2 <_strtod_l+0xa12>
 8004f30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d15a      	bne.n	8004ff0 <_strtod_l+0xa20>
 8004f3a:	4b64      	ldr	r3, [pc, #400]	@ (80050cc <_strtod_l+0xafc>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	4630      	mov	r0, r6
 8004f40:	4639      	mov	r1, r7
 8004f42:	f7fb fddb 	bl	8000afc <__aeabi_dcmplt>
 8004f46:	2800      	cmp	r0, #0
 8004f48:	d159      	bne.n	8004ffe <_strtod_l+0xa2e>
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	4639      	mov	r1, r7
 8004f4e:	4b60      	ldr	r3, [pc, #384]	@ (80050d0 <_strtod_l+0xb00>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	f7fb fb61 	bl	8000618 <__aeabi_dmul>
 8004f56:	4606      	mov	r6, r0
 8004f58:	460f      	mov	r7, r1
 8004f5a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8004f5e:	9606      	str	r6, [sp, #24]
 8004f60:	9307      	str	r3, [sp, #28]
 8004f62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f66:	4d57      	ldr	r5, [pc, #348]	@ (80050c4 <_strtod_l+0xaf4>)
 8004f68:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8004f6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f6e:	401d      	ands	r5, r3
 8004f70:	4b58      	ldr	r3, [pc, #352]	@ (80050d4 <_strtod_l+0xb04>)
 8004f72:	429d      	cmp	r5, r3
 8004f74:	f040 80b2 	bne.w	80050dc <_strtod_l+0xb0c>
 8004f78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f7a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8004f7e:	ec4b ab10 	vmov	d0, sl, fp
 8004f82:	f003 f995 	bl	80082b0 <__ulp>
 8004f86:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f8a:	ec51 0b10 	vmov	r0, r1, d0
 8004f8e:	f7fb fb43 	bl	8000618 <__aeabi_dmul>
 8004f92:	4652      	mov	r2, sl
 8004f94:	465b      	mov	r3, fp
 8004f96:	f7fb f989 	bl	80002ac <__adddf3>
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4949      	ldr	r1, [pc, #292]	@ (80050c4 <_strtod_l+0xaf4>)
 8004f9e:	4a4e      	ldr	r2, [pc, #312]	@ (80050d8 <_strtod_l+0xb08>)
 8004fa0:	4019      	ands	r1, r3
 8004fa2:	4291      	cmp	r1, r2
 8004fa4:	4682      	mov	sl, r0
 8004fa6:	d942      	bls.n	800502e <_strtod_l+0xa5e>
 8004fa8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004faa:	4b47      	ldr	r3, [pc, #284]	@ (80050c8 <_strtod_l+0xaf8>)
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d103      	bne.n	8004fb8 <_strtod_l+0x9e8>
 8004fb0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	f43f ad2f 	beq.w	8004a16 <_strtod_l+0x446>
 8004fb8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80050c8 <_strtod_l+0xaf8>
 8004fbc:	f04f 3aff 	mov.w	sl, #4294967295
 8004fc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004fc2:	9805      	ldr	r0, [sp, #20]
 8004fc4:	f002 fe48 	bl	8007c58 <_Bfree>
 8004fc8:	9805      	ldr	r0, [sp, #20]
 8004fca:	4649      	mov	r1, r9
 8004fcc:	f002 fe44 	bl	8007c58 <_Bfree>
 8004fd0:	9805      	ldr	r0, [sp, #20]
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	f002 fe40 	bl	8007c58 <_Bfree>
 8004fd8:	9805      	ldr	r0, [sp, #20]
 8004fda:	4621      	mov	r1, r4
 8004fdc:	f002 fe3c 	bl	8007c58 <_Bfree>
 8004fe0:	e619      	b.n	8004c16 <_strtod_l+0x646>
 8004fe2:	f1ba 0f01 	cmp.w	sl, #1
 8004fe6:	d103      	bne.n	8004ff0 <_strtod_l+0xa20>
 8004fe8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f43f ada6 	beq.w	8004b3c <_strtod_l+0x56c>
 8004ff0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80050a0 <_strtod_l+0xad0>
 8004ff4:	4f35      	ldr	r7, [pc, #212]	@ (80050cc <_strtod_l+0xafc>)
 8004ff6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004ffa:	2600      	movs	r6, #0
 8004ffc:	e7b1      	b.n	8004f62 <_strtod_l+0x992>
 8004ffe:	4f34      	ldr	r7, [pc, #208]	@ (80050d0 <_strtod_l+0xb00>)
 8005000:	2600      	movs	r6, #0
 8005002:	e7aa      	b.n	8004f5a <_strtod_l+0x98a>
 8005004:	4b32      	ldr	r3, [pc, #200]	@ (80050d0 <_strtod_l+0xb00>)
 8005006:	4630      	mov	r0, r6
 8005008:	4639      	mov	r1, r7
 800500a:	2200      	movs	r2, #0
 800500c:	f7fb fb04 	bl	8000618 <__aeabi_dmul>
 8005010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005012:	4606      	mov	r6, r0
 8005014:	460f      	mov	r7, r1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d09f      	beq.n	8004f5a <_strtod_l+0x98a>
 800501a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800501e:	e7a0      	b.n	8004f62 <_strtod_l+0x992>
 8005020:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80050a8 <_strtod_l+0xad8>
 8005024:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005028:	ec57 6b17 	vmov	r6, r7, d7
 800502c:	e799      	b.n	8004f62 <_strtod_l+0x992>
 800502e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005032:	9b08      	ldr	r3, [sp, #32]
 8005034:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8005038:	2b00      	cmp	r3, #0
 800503a:	d1c1      	bne.n	8004fc0 <_strtod_l+0x9f0>
 800503c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005040:	0d1b      	lsrs	r3, r3, #20
 8005042:	051b      	lsls	r3, r3, #20
 8005044:	429d      	cmp	r5, r3
 8005046:	d1bb      	bne.n	8004fc0 <_strtod_l+0x9f0>
 8005048:	4630      	mov	r0, r6
 800504a:	4639      	mov	r1, r7
 800504c:	f7fb fe44 	bl	8000cd8 <__aeabi_d2lz>
 8005050:	f7fb fab4 	bl	80005bc <__aeabi_l2d>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4630      	mov	r0, r6
 800505a:	4639      	mov	r1, r7
 800505c:	f7fb f924 	bl	80002a8 <__aeabi_dsub>
 8005060:	460b      	mov	r3, r1
 8005062:	4602      	mov	r2, r0
 8005064:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005068:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800506c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800506e:	ea46 060a 	orr.w	r6, r6, sl
 8005072:	431e      	orrs	r6, r3
 8005074:	d06f      	beq.n	8005156 <_strtod_l+0xb86>
 8005076:	a30e      	add	r3, pc, #56	@ (adr r3, 80050b0 <_strtod_l+0xae0>)
 8005078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507c:	f7fb fd3e 	bl	8000afc <__aeabi_dcmplt>
 8005080:	2800      	cmp	r0, #0
 8005082:	f47f acd3 	bne.w	8004a2c <_strtod_l+0x45c>
 8005086:	a30c      	add	r3, pc, #48	@ (adr r3, 80050b8 <_strtod_l+0xae8>)
 8005088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800508c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005090:	f7fb fd52 	bl	8000b38 <__aeabi_dcmpgt>
 8005094:	2800      	cmp	r0, #0
 8005096:	d093      	beq.n	8004fc0 <_strtod_l+0x9f0>
 8005098:	e4c8      	b.n	8004a2c <_strtod_l+0x45c>
 800509a:	bf00      	nop
 800509c:	f3af 8000 	nop.w
 80050a0:	00000000 	.word	0x00000000
 80050a4:	bff00000 	.word	0xbff00000
 80050a8:	00000000 	.word	0x00000000
 80050ac:	3ff00000 	.word	0x3ff00000
 80050b0:	94a03595 	.word	0x94a03595
 80050b4:	3fdfffff 	.word	0x3fdfffff
 80050b8:	35afe535 	.word	0x35afe535
 80050bc:	3fe00000 	.word	0x3fe00000
 80050c0:	000fffff 	.word	0x000fffff
 80050c4:	7ff00000 	.word	0x7ff00000
 80050c8:	7fefffff 	.word	0x7fefffff
 80050cc:	3ff00000 	.word	0x3ff00000
 80050d0:	3fe00000 	.word	0x3fe00000
 80050d4:	7fe00000 	.word	0x7fe00000
 80050d8:	7c9fffff 	.word	0x7c9fffff
 80050dc:	9b08      	ldr	r3, [sp, #32]
 80050de:	b323      	cbz	r3, 800512a <_strtod_l+0xb5a>
 80050e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80050e4:	d821      	bhi.n	800512a <_strtod_l+0xb5a>
 80050e6:	a328      	add	r3, pc, #160	@ (adr r3, 8005188 <_strtod_l+0xbb8>)
 80050e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ec:	4630      	mov	r0, r6
 80050ee:	4639      	mov	r1, r7
 80050f0:	f7fb fd0e 	bl	8000b10 <__aeabi_dcmple>
 80050f4:	b1a0      	cbz	r0, 8005120 <_strtod_l+0xb50>
 80050f6:	4639      	mov	r1, r7
 80050f8:	4630      	mov	r0, r6
 80050fa:	f7fb fd65 	bl	8000bc8 <__aeabi_d2uiz>
 80050fe:	2801      	cmp	r0, #1
 8005100:	bf38      	it	cc
 8005102:	2001      	movcc	r0, #1
 8005104:	f7fb fa0e 	bl	8000524 <__aeabi_ui2d>
 8005108:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800510a:	4606      	mov	r6, r0
 800510c:	460f      	mov	r7, r1
 800510e:	b9fb      	cbnz	r3, 8005150 <_strtod_l+0xb80>
 8005110:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005114:	9014      	str	r0, [sp, #80]	@ 0x50
 8005116:	9315      	str	r3, [sp, #84]	@ 0x54
 8005118:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800511c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005120:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005122:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005126:	1b5b      	subs	r3, r3, r5
 8005128:	9311      	str	r3, [sp, #68]	@ 0x44
 800512a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800512e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005132:	f003 f8bd 	bl	80082b0 <__ulp>
 8005136:	4650      	mov	r0, sl
 8005138:	ec53 2b10 	vmov	r2, r3, d0
 800513c:	4659      	mov	r1, fp
 800513e:	f7fb fa6b 	bl	8000618 <__aeabi_dmul>
 8005142:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005146:	f7fb f8b1 	bl	80002ac <__adddf3>
 800514a:	4682      	mov	sl, r0
 800514c:	468b      	mov	fp, r1
 800514e:	e770      	b.n	8005032 <_strtod_l+0xa62>
 8005150:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005154:	e7e0      	b.n	8005118 <_strtod_l+0xb48>
 8005156:	a30e      	add	r3, pc, #56	@ (adr r3, 8005190 <_strtod_l+0xbc0>)
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f7fb fcce 	bl	8000afc <__aeabi_dcmplt>
 8005160:	e798      	b.n	8005094 <_strtod_l+0xac4>
 8005162:	2300      	movs	r3, #0
 8005164:	930e      	str	r3, [sp, #56]	@ 0x38
 8005166:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005168:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	f7ff ba6d 	b.w	800464a <_strtod_l+0x7a>
 8005170:	2a65      	cmp	r2, #101	@ 0x65
 8005172:	f43f ab68 	beq.w	8004846 <_strtod_l+0x276>
 8005176:	2a45      	cmp	r2, #69	@ 0x45
 8005178:	f43f ab65 	beq.w	8004846 <_strtod_l+0x276>
 800517c:	2301      	movs	r3, #1
 800517e:	f7ff bba0 	b.w	80048c2 <_strtod_l+0x2f2>
 8005182:	bf00      	nop
 8005184:	f3af 8000 	nop.w
 8005188:	ffc00000 	.word	0xffc00000
 800518c:	41dfffff 	.word	0x41dfffff
 8005190:	94a03595 	.word	0x94a03595
 8005194:	3fcfffff 	.word	0x3fcfffff

08005198 <_strtod_r>:
 8005198:	4b01      	ldr	r3, [pc, #4]	@ (80051a0 <_strtod_r+0x8>)
 800519a:	f7ff ba19 	b.w	80045d0 <_strtod_l>
 800519e:	bf00      	nop
 80051a0:	20000024 	.word	0x20000024

080051a4 <_strtol_l.isra.0>:
 80051a4:	2b24      	cmp	r3, #36	@ 0x24
 80051a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051aa:	4686      	mov	lr, r0
 80051ac:	4690      	mov	r8, r2
 80051ae:	d801      	bhi.n	80051b4 <_strtol_l.isra.0+0x10>
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d106      	bne.n	80051c2 <_strtol_l.isra.0+0x1e>
 80051b4:	f001 fa04 	bl	80065c0 <__errno>
 80051b8:	2316      	movs	r3, #22
 80051ba:	6003      	str	r3, [r0, #0]
 80051bc:	2000      	movs	r0, #0
 80051be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051c2:	4834      	ldr	r0, [pc, #208]	@ (8005294 <_strtol_l.isra.0+0xf0>)
 80051c4:	460d      	mov	r5, r1
 80051c6:	462a      	mov	r2, r5
 80051c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051cc:	5d06      	ldrb	r6, [r0, r4]
 80051ce:	f016 0608 	ands.w	r6, r6, #8
 80051d2:	d1f8      	bne.n	80051c6 <_strtol_l.isra.0+0x22>
 80051d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80051d6:	d110      	bne.n	80051fa <_strtol_l.isra.0+0x56>
 80051d8:	782c      	ldrb	r4, [r5, #0]
 80051da:	2601      	movs	r6, #1
 80051dc:	1c95      	adds	r5, r2, #2
 80051de:	f033 0210 	bics.w	r2, r3, #16
 80051e2:	d115      	bne.n	8005210 <_strtol_l.isra.0+0x6c>
 80051e4:	2c30      	cmp	r4, #48	@ 0x30
 80051e6:	d10d      	bne.n	8005204 <_strtol_l.isra.0+0x60>
 80051e8:	782a      	ldrb	r2, [r5, #0]
 80051ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80051ee:	2a58      	cmp	r2, #88	@ 0x58
 80051f0:	d108      	bne.n	8005204 <_strtol_l.isra.0+0x60>
 80051f2:	786c      	ldrb	r4, [r5, #1]
 80051f4:	3502      	adds	r5, #2
 80051f6:	2310      	movs	r3, #16
 80051f8:	e00a      	b.n	8005210 <_strtol_l.isra.0+0x6c>
 80051fa:	2c2b      	cmp	r4, #43	@ 0x2b
 80051fc:	bf04      	itt	eq
 80051fe:	782c      	ldrbeq	r4, [r5, #0]
 8005200:	1c95      	addeq	r5, r2, #2
 8005202:	e7ec      	b.n	80051de <_strtol_l.isra.0+0x3a>
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1f6      	bne.n	80051f6 <_strtol_l.isra.0+0x52>
 8005208:	2c30      	cmp	r4, #48	@ 0x30
 800520a:	bf14      	ite	ne
 800520c:	230a      	movne	r3, #10
 800520e:	2308      	moveq	r3, #8
 8005210:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005214:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005218:	2200      	movs	r2, #0
 800521a:	fbbc f9f3 	udiv	r9, ip, r3
 800521e:	4610      	mov	r0, r2
 8005220:	fb03 ca19 	mls	sl, r3, r9, ip
 8005224:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005228:	2f09      	cmp	r7, #9
 800522a:	d80f      	bhi.n	800524c <_strtol_l.isra.0+0xa8>
 800522c:	463c      	mov	r4, r7
 800522e:	42a3      	cmp	r3, r4
 8005230:	dd1b      	ble.n	800526a <_strtol_l.isra.0+0xc6>
 8005232:	1c57      	adds	r7, r2, #1
 8005234:	d007      	beq.n	8005246 <_strtol_l.isra.0+0xa2>
 8005236:	4581      	cmp	r9, r0
 8005238:	d314      	bcc.n	8005264 <_strtol_l.isra.0+0xc0>
 800523a:	d101      	bne.n	8005240 <_strtol_l.isra.0+0x9c>
 800523c:	45a2      	cmp	sl, r4
 800523e:	db11      	blt.n	8005264 <_strtol_l.isra.0+0xc0>
 8005240:	fb00 4003 	mla	r0, r0, r3, r4
 8005244:	2201      	movs	r2, #1
 8005246:	f815 4b01 	ldrb.w	r4, [r5], #1
 800524a:	e7eb      	b.n	8005224 <_strtol_l.isra.0+0x80>
 800524c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005250:	2f19      	cmp	r7, #25
 8005252:	d801      	bhi.n	8005258 <_strtol_l.isra.0+0xb4>
 8005254:	3c37      	subs	r4, #55	@ 0x37
 8005256:	e7ea      	b.n	800522e <_strtol_l.isra.0+0x8a>
 8005258:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800525c:	2f19      	cmp	r7, #25
 800525e:	d804      	bhi.n	800526a <_strtol_l.isra.0+0xc6>
 8005260:	3c57      	subs	r4, #87	@ 0x57
 8005262:	e7e4      	b.n	800522e <_strtol_l.isra.0+0x8a>
 8005264:	f04f 32ff 	mov.w	r2, #4294967295
 8005268:	e7ed      	b.n	8005246 <_strtol_l.isra.0+0xa2>
 800526a:	1c53      	adds	r3, r2, #1
 800526c:	d108      	bne.n	8005280 <_strtol_l.isra.0+0xdc>
 800526e:	2322      	movs	r3, #34	@ 0x22
 8005270:	f8ce 3000 	str.w	r3, [lr]
 8005274:	4660      	mov	r0, ip
 8005276:	f1b8 0f00 	cmp.w	r8, #0
 800527a:	d0a0      	beq.n	80051be <_strtol_l.isra.0+0x1a>
 800527c:	1e69      	subs	r1, r5, #1
 800527e:	e006      	b.n	800528e <_strtol_l.isra.0+0xea>
 8005280:	b106      	cbz	r6, 8005284 <_strtol_l.isra.0+0xe0>
 8005282:	4240      	negs	r0, r0
 8005284:	f1b8 0f00 	cmp.w	r8, #0
 8005288:	d099      	beq.n	80051be <_strtol_l.isra.0+0x1a>
 800528a:	2a00      	cmp	r2, #0
 800528c:	d1f6      	bne.n	800527c <_strtol_l.isra.0+0xd8>
 800528e:	f8c8 1000 	str.w	r1, [r8]
 8005292:	e794      	b.n	80051be <_strtol_l.isra.0+0x1a>
 8005294:	08009a71 	.word	0x08009a71

08005298 <_strtol_r>:
 8005298:	f7ff bf84 	b.w	80051a4 <_strtol_l.isra.0>

0800529c <__cvt>:
 800529c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052a0:	ec57 6b10 	vmov	r6, r7, d0
 80052a4:	2f00      	cmp	r7, #0
 80052a6:	460c      	mov	r4, r1
 80052a8:	4619      	mov	r1, r3
 80052aa:	463b      	mov	r3, r7
 80052ac:	bfbb      	ittet	lt
 80052ae:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80052b2:	461f      	movlt	r7, r3
 80052b4:	2300      	movge	r3, #0
 80052b6:	232d      	movlt	r3, #45	@ 0x2d
 80052b8:	700b      	strb	r3, [r1, #0]
 80052ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80052bc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80052c0:	4691      	mov	r9, r2
 80052c2:	f023 0820 	bic.w	r8, r3, #32
 80052c6:	bfbc      	itt	lt
 80052c8:	4632      	movlt	r2, r6
 80052ca:	4616      	movlt	r6, r2
 80052cc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052d0:	d005      	beq.n	80052de <__cvt+0x42>
 80052d2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80052d6:	d100      	bne.n	80052da <__cvt+0x3e>
 80052d8:	3401      	adds	r4, #1
 80052da:	2102      	movs	r1, #2
 80052dc:	e000      	b.n	80052e0 <__cvt+0x44>
 80052de:	2103      	movs	r1, #3
 80052e0:	ab03      	add	r3, sp, #12
 80052e2:	9301      	str	r3, [sp, #4]
 80052e4:	ab02      	add	r3, sp, #8
 80052e6:	9300      	str	r3, [sp, #0]
 80052e8:	ec47 6b10 	vmov	d0, r6, r7
 80052ec:	4653      	mov	r3, sl
 80052ee:	4622      	mov	r2, r4
 80052f0:	f001 fa56 	bl	80067a0 <_dtoa_r>
 80052f4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80052f8:	4605      	mov	r5, r0
 80052fa:	d119      	bne.n	8005330 <__cvt+0x94>
 80052fc:	f019 0f01 	tst.w	r9, #1
 8005300:	d00e      	beq.n	8005320 <__cvt+0x84>
 8005302:	eb00 0904 	add.w	r9, r0, r4
 8005306:	2200      	movs	r2, #0
 8005308:	2300      	movs	r3, #0
 800530a:	4630      	mov	r0, r6
 800530c:	4639      	mov	r1, r7
 800530e:	f7fb fbeb 	bl	8000ae8 <__aeabi_dcmpeq>
 8005312:	b108      	cbz	r0, 8005318 <__cvt+0x7c>
 8005314:	f8cd 900c 	str.w	r9, [sp, #12]
 8005318:	2230      	movs	r2, #48	@ 0x30
 800531a:	9b03      	ldr	r3, [sp, #12]
 800531c:	454b      	cmp	r3, r9
 800531e:	d31e      	bcc.n	800535e <__cvt+0xc2>
 8005320:	9b03      	ldr	r3, [sp, #12]
 8005322:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005324:	1b5b      	subs	r3, r3, r5
 8005326:	4628      	mov	r0, r5
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	b004      	add	sp, #16
 800532c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005330:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005334:	eb00 0904 	add.w	r9, r0, r4
 8005338:	d1e5      	bne.n	8005306 <__cvt+0x6a>
 800533a:	7803      	ldrb	r3, [r0, #0]
 800533c:	2b30      	cmp	r3, #48	@ 0x30
 800533e:	d10a      	bne.n	8005356 <__cvt+0xba>
 8005340:	2200      	movs	r2, #0
 8005342:	2300      	movs	r3, #0
 8005344:	4630      	mov	r0, r6
 8005346:	4639      	mov	r1, r7
 8005348:	f7fb fbce 	bl	8000ae8 <__aeabi_dcmpeq>
 800534c:	b918      	cbnz	r0, 8005356 <__cvt+0xba>
 800534e:	f1c4 0401 	rsb	r4, r4, #1
 8005352:	f8ca 4000 	str.w	r4, [sl]
 8005356:	f8da 3000 	ldr.w	r3, [sl]
 800535a:	4499      	add	r9, r3
 800535c:	e7d3      	b.n	8005306 <__cvt+0x6a>
 800535e:	1c59      	adds	r1, r3, #1
 8005360:	9103      	str	r1, [sp, #12]
 8005362:	701a      	strb	r2, [r3, #0]
 8005364:	e7d9      	b.n	800531a <__cvt+0x7e>

08005366 <__exponent>:
 8005366:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005368:	2900      	cmp	r1, #0
 800536a:	bfba      	itte	lt
 800536c:	4249      	neglt	r1, r1
 800536e:	232d      	movlt	r3, #45	@ 0x2d
 8005370:	232b      	movge	r3, #43	@ 0x2b
 8005372:	2909      	cmp	r1, #9
 8005374:	7002      	strb	r2, [r0, #0]
 8005376:	7043      	strb	r3, [r0, #1]
 8005378:	dd29      	ble.n	80053ce <__exponent+0x68>
 800537a:	f10d 0307 	add.w	r3, sp, #7
 800537e:	461d      	mov	r5, r3
 8005380:	270a      	movs	r7, #10
 8005382:	461a      	mov	r2, r3
 8005384:	fbb1 f6f7 	udiv	r6, r1, r7
 8005388:	fb07 1416 	mls	r4, r7, r6, r1
 800538c:	3430      	adds	r4, #48	@ 0x30
 800538e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005392:	460c      	mov	r4, r1
 8005394:	2c63      	cmp	r4, #99	@ 0x63
 8005396:	f103 33ff 	add.w	r3, r3, #4294967295
 800539a:	4631      	mov	r1, r6
 800539c:	dcf1      	bgt.n	8005382 <__exponent+0x1c>
 800539e:	3130      	adds	r1, #48	@ 0x30
 80053a0:	1e94      	subs	r4, r2, #2
 80053a2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80053a6:	1c41      	adds	r1, r0, #1
 80053a8:	4623      	mov	r3, r4
 80053aa:	42ab      	cmp	r3, r5
 80053ac:	d30a      	bcc.n	80053c4 <__exponent+0x5e>
 80053ae:	f10d 0309 	add.w	r3, sp, #9
 80053b2:	1a9b      	subs	r3, r3, r2
 80053b4:	42ac      	cmp	r4, r5
 80053b6:	bf88      	it	hi
 80053b8:	2300      	movhi	r3, #0
 80053ba:	3302      	adds	r3, #2
 80053bc:	4403      	add	r3, r0
 80053be:	1a18      	subs	r0, r3, r0
 80053c0:	b003      	add	sp, #12
 80053c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053c4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80053c8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80053cc:	e7ed      	b.n	80053aa <__exponent+0x44>
 80053ce:	2330      	movs	r3, #48	@ 0x30
 80053d0:	3130      	adds	r1, #48	@ 0x30
 80053d2:	7083      	strb	r3, [r0, #2]
 80053d4:	70c1      	strb	r1, [r0, #3]
 80053d6:	1d03      	adds	r3, r0, #4
 80053d8:	e7f1      	b.n	80053be <__exponent+0x58>
	...

080053dc <_printf_float>:
 80053dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e0:	b08d      	sub	sp, #52	@ 0x34
 80053e2:	460c      	mov	r4, r1
 80053e4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80053e8:	4616      	mov	r6, r2
 80053ea:	461f      	mov	r7, r3
 80053ec:	4605      	mov	r5, r0
 80053ee:	f001 f89d 	bl	800652c <_localeconv_r>
 80053f2:	6803      	ldr	r3, [r0, #0]
 80053f4:	9304      	str	r3, [sp, #16]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f7fa ff4a 	bl	8000290 <strlen>
 80053fc:	2300      	movs	r3, #0
 80053fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8005400:	f8d8 3000 	ldr.w	r3, [r8]
 8005404:	9005      	str	r0, [sp, #20]
 8005406:	3307      	adds	r3, #7
 8005408:	f023 0307 	bic.w	r3, r3, #7
 800540c:	f103 0208 	add.w	r2, r3, #8
 8005410:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005414:	f8d4 b000 	ldr.w	fp, [r4]
 8005418:	f8c8 2000 	str.w	r2, [r8]
 800541c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005420:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005424:	9307      	str	r3, [sp, #28]
 8005426:	f8cd 8018 	str.w	r8, [sp, #24]
 800542a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800542e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005432:	4b9c      	ldr	r3, [pc, #624]	@ (80056a4 <_printf_float+0x2c8>)
 8005434:	f04f 32ff 	mov.w	r2, #4294967295
 8005438:	f7fb fb88 	bl	8000b4c <__aeabi_dcmpun>
 800543c:	bb70      	cbnz	r0, 800549c <_printf_float+0xc0>
 800543e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005442:	4b98      	ldr	r3, [pc, #608]	@ (80056a4 <_printf_float+0x2c8>)
 8005444:	f04f 32ff 	mov.w	r2, #4294967295
 8005448:	f7fb fb62 	bl	8000b10 <__aeabi_dcmple>
 800544c:	bb30      	cbnz	r0, 800549c <_printf_float+0xc0>
 800544e:	2200      	movs	r2, #0
 8005450:	2300      	movs	r3, #0
 8005452:	4640      	mov	r0, r8
 8005454:	4649      	mov	r1, r9
 8005456:	f7fb fb51 	bl	8000afc <__aeabi_dcmplt>
 800545a:	b110      	cbz	r0, 8005462 <_printf_float+0x86>
 800545c:	232d      	movs	r3, #45	@ 0x2d
 800545e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005462:	4a91      	ldr	r2, [pc, #580]	@ (80056a8 <_printf_float+0x2cc>)
 8005464:	4b91      	ldr	r3, [pc, #580]	@ (80056ac <_printf_float+0x2d0>)
 8005466:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800546a:	bf8c      	ite	hi
 800546c:	4690      	movhi	r8, r2
 800546e:	4698      	movls	r8, r3
 8005470:	2303      	movs	r3, #3
 8005472:	6123      	str	r3, [r4, #16]
 8005474:	f02b 0304 	bic.w	r3, fp, #4
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	f04f 0900 	mov.w	r9, #0
 800547e:	9700      	str	r7, [sp, #0]
 8005480:	4633      	mov	r3, r6
 8005482:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005484:	4621      	mov	r1, r4
 8005486:	4628      	mov	r0, r5
 8005488:	f000 f9d2 	bl	8005830 <_printf_common>
 800548c:	3001      	adds	r0, #1
 800548e:	f040 808d 	bne.w	80055ac <_printf_float+0x1d0>
 8005492:	f04f 30ff 	mov.w	r0, #4294967295
 8005496:	b00d      	add	sp, #52	@ 0x34
 8005498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549c:	4642      	mov	r2, r8
 800549e:	464b      	mov	r3, r9
 80054a0:	4640      	mov	r0, r8
 80054a2:	4649      	mov	r1, r9
 80054a4:	f7fb fb52 	bl	8000b4c <__aeabi_dcmpun>
 80054a8:	b140      	cbz	r0, 80054bc <_printf_float+0xe0>
 80054aa:	464b      	mov	r3, r9
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	bfbc      	itt	lt
 80054b0:	232d      	movlt	r3, #45	@ 0x2d
 80054b2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80054b6:	4a7e      	ldr	r2, [pc, #504]	@ (80056b0 <_printf_float+0x2d4>)
 80054b8:	4b7e      	ldr	r3, [pc, #504]	@ (80056b4 <_printf_float+0x2d8>)
 80054ba:	e7d4      	b.n	8005466 <_printf_float+0x8a>
 80054bc:	6863      	ldr	r3, [r4, #4]
 80054be:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80054c2:	9206      	str	r2, [sp, #24]
 80054c4:	1c5a      	adds	r2, r3, #1
 80054c6:	d13b      	bne.n	8005540 <_printf_float+0x164>
 80054c8:	2306      	movs	r3, #6
 80054ca:	6063      	str	r3, [r4, #4]
 80054cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80054d0:	2300      	movs	r3, #0
 80054d2:	6022      	str	r2, [r4, #0]
 80054d4:	9303      	str	r3, [sp, #12]
 80054d6:	ab0a      	add	r3, sp, #40	@ 0x28
 80054d8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80054dc:	ab09      	add	r3, sp, #36	@ 0x24
 80054de:	9300      	str	r3, [sp, #0]
 80054e0:	6861      	ldr	r1, [r4, #4]
 80054e2:	ec49 8b10 	vmov	d0, r8, r9
 80054e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80054ea:	4628      	mov	r0, r5
 80054ec:	f7ff fed6 	bl	800529c <__cvt>
 80054f0:	9b06      	ldr	r3, [sp, #24]
 80054f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80054f4:	2b47      	cmp	r3, #71	@ 0x47
 80054f6:	4680      	mov	r8, r0
 80054f8:	d129      	bne.n	800554e <_printf_float+0x172>
 80054fa:	1cc8      	adds	r0, r1, #3
 80054fc:	db02      	blt.n	8005504 <_printf_float+0x128>
 80054fe:	6863      	ldr	r3, [r4, #4]
 8005500:	4299      	cmp	r1, r3
 8005502:	dd41      	ble.n	8005588 <_printf_float+0x1ac>
 8005504:	f1aa 0a02 	sub.w	sl, sl, #2
 8005508:	fa5f fa8a 	uxtb.w	sl, sl
 800550c:	3901      	subs	r1, #1
 800550e:	4652      	mov	r2, sl
 8005510:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005514:	9109      	str	r1, [sp, #36]	@ 0x24
 8005516:	f7ff ff26 	bl	8005366 <__exponent>
 800551a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800551c:	1813      	adds	r3, r2, r0
 800551e:	2a01      	cmp	r2, #1
 8005520:	4681      	mov	r9, r0
 8005522:	6123      	str	r3, [r4, #16]
 8005524:	dc02      	bgt.n	800552c <_printf_float+0x150>
 8005526:	6822      	ldr	r2, [r4, #0]
 8005528:	07d2      	lsls	r2, r2, #31
 800552a:	d501      	bpl.n	8005530 <_printf_float+0x154>
 800552c:	3301      	adds	r3, #1
 800552e:	6123      	str	r3, [r4, #16]
 8005530:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0a2      	beq.n	800547e <_printf_float+0xa2>
 8005538:	232d      	movs	r3, #45	@ 0x2d
 800553a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800553e:	e79e      	b.n	800547e <_printf_float+0xa2>
 8005540:	9a06      	ldr	r2, [sp, #24]
 8005542:	2a47      	cmp	r2, #71	@ 0x47
 8005544:	d1c2      	bne.n	80054cc <_printf_float+0xf0>
 8005546:	2b00      	cmp	r3, #0
 8005548:	d1c0      	bne.n	80054cc <_printf_float+0xf0>
 800554a:	2301      	movs	r3, #1
 800554c:	e7bd      	b.n	80054ca <_printf_float+0xee>
 800554e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005552:	d9db      	bls.n	800550c <_printf_float+0x130>
 8005554:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005558:	d118      	bne.n	800558c <_printf_float+0x1b0>
 800555a:	2900      	cmp	r1, #0
 800555c:	6863      	ldr	r3, [r4, #4]
 800555e:	dd0b      	ble.n	8005578 <_printf_float+0x19c>
 8005560:	6121      	str	r1, [r4, #16]
 8005562:	b913      	cbnz	r3, 800556a <_printf_float+0x18e>
 8005564:	6822      	ldr	r2, [r4, #0]
 8005566:	07d0      	lsls	r0, r2, #31
 8005568:	d502      	bpl.n	8005570 <_printf_float+0x194>
 800556a:	3301      	adds	r3, #1
 800556c:	440b      	add	r3, r1
 800556e:	6123      	str	r3, [r4, #16]
 8005570:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005572:	f04f 0900 	mov.w	r9, #0
 8005576:	e7db      	b.n	8005530 <_printf_float+0x154>
 8005578:	b913      	cbnz	r3, 8005580 <_printf_float+0x1a4>
 800557a:	6822      	ldr	r2, [r4, #0]
 800557c:	07d2      	lsls	r2, r2, #31
 800557e:	d501      	bpl.n	8005584 <_printf_float+0x1a8>
 8005580:	3302      	adds	r3, #2
 8005582:	e7f4      	b.n	800556e <_printf_float+0x192>
 8005584:	2301      	movs	r3, #1
 8005586:	e7f2      	b.n	800556e <_printf_float+0x192>
 8005588:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800558c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800558e:	4299      	cmp	r1, r3
 8005590:	db05      	blt.n	800559e <_printf_float+0x1c2>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	6121      	str	r1, [r4, #16]
 8005596:	07d8      	lsls	r0, r3, #31
 8005598:	d5ea      	bpl.n	8005570 <_printf_float+0x194>
 800559a:	1c4b      	adds	r3, r1, #1
 800559c:	e7e7      	b.n	800556e <_printf_float+0x192>
 800559e:	2900      	cmp	r1, #0
 80055a0:	bfd4      	ite	le
 80055a2:	f1c1 0202 	rsble	r2, r1, #2
 80055a6:	2201      	movgt	r2, #1
 80055a8:	4413      	add	r3, r2
 80055aa:	e7e0      	b.n	800556e <_printf_float+0x192>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	055a      	lsls	r2, r3, #21
 80055b0:	d407      	bmi.n	80055c2 <_printf_float+0x1e6>
 80055b2:	6923      	ldr	r3, [r4, #16]
 80055b4:	4642      	mov	r2, r8
 80055b6:	4631      	mov	r1, r6
 80055b8:	4628      	mov	r0, r5
 80055ba:	47b8      	blx	r7
 80055bc:	3001      	adds	r0, #1
 80055be:	d12b      	bne.n	8005618 <_printf_float+0x23c>
 80055c0:	e767      	b.n	8005492 <_printf_float+0xb6>
 80055c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80055c6:	f240 80dd 	bls.w	8005784 <_printf_float+0x3a8>
 80055ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80055ce:	2200      	movs	r2, #0
 80055d0:	2300      	movs	r3, #0
 80055d2:	f7fb fa89 	bl	8000ae8 <__aeabi_dcmpeq>
 80055d6:	2800      	cmp	r0, #0
 80055d8:	d033      	beq.n	8005642 <_printf_float+0x266>
 80055da:	4a37      	ldr	r2, [pc, #220]	@ (80056b8 <_printf_float+0x2dc>)
 80055dc:	2301      	movs	r3, #1
 80055de:	4631      	mov	r1, r6
 80055e0:	4628      	mov	r0, r5
 80055e2:	47b8      	blx	r7
 80055e4:	3001      	adds	r0, #1
 80055e6:	f43f af54 	beq.w	8005492 <_printf_float+0xb6>
 80055ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80055ee:	4543      	cmp	r3, r8
 80055f0:	db02      	blt.n	80055f8 <_printf_float+0x21c>
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	07d8      	lsls	r0, r3, #31
 80055f6:	d50f      	bpl.n	8005618 <_printf_float+0x23c>
 80055f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055fc:	4631      	mov	r1, r6
 80055fe:	4628      	mov	r0, r5
 8005600:	47b8      	blx	r7
 8005602:	3001      	adds	r0, #1
 8005604:	f43f af45 	beq.w	8005492 <_printf_float+0xb6>
 8005608:	f04f 0900 	mov.w	r9, #0
 800560c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005610:	f104 0a1a 	add.w	sl, r4, #26
 8005614:	45c8      	cmp	r8, r9
 8005616:	dc09      	bgt.n	800562c <_printf_float+0x250>
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	079b      	lsls	r3, r3, #30
 800561c:	f100 8103 	bmi.w	8005826 <_printf_float+0x44a>
 8005620:	68e0      	ldr	r0, [r4, #12]
 8005622:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005624:	4298      	cmp	r0, r3
 8005626:	bfb8      	it	lt
 8005628:	4618      	movlt	r0, r3
 800562a:	e734      	b.n	8005496 <_printf_float+0xba>
 800562c:	2301      	movs	r3, #1
 800562e:	4652      	mov	r2, sl
 8005630:	4631      	mov	r1, r6
 8005632:	4628      	mov	r0, r5
 8005634:	47b8      	blx	r7
 8005636:	3001      	adds	r0, #1
 8005638:	f43f af2b 	beq.w	8005492 <_printf_float+0xb6>
 800563c:	f109 0901 	add.w	r9, r9, #1
 8005640:	e7e8      	b.n	8005614 <_printf_float+0x238>
 8005642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005644:	2b00      	cmp	r3, #0
 8005646:	dc39      	bgt.n	80056bc <_printf_float+0x2e0>
 8005648:	4a1b      	ldr	r2, [pc, #108]	@ (80056b8 <_printf_float+0x2dc>)
 800564a:	2301      	movs	r3, #1
 800564c:	4631      	mov	r1, r6
 800564e:	4628      	mov	r0, r5
 8005650:	47b8      	blx	r7
 8005652:	3001      	adds	r0, #1
 8005654:	f43f af1d 	beq.w	8005492 <_printf_float+0xb6>
 8005658:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800565c:	ea59 0303 	orrs.w	r3, r9, r3
 8005660:	d102      	bne.n	8005668 <_printf_float+0x28c>
 8005662:	6823      	ldr	r3, [r4, #0]
 8005664:	07d9      	lsls	r1, r3, #31
 8005666:	d5d7      	bpl.n	8005618 <_printf_float+0x23c>
 8005668:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800566c:	4631      	mov	r1, r6
 800566e:	4628      	mov	r0, r5
 8005670:	47b8      	blx	r7
 8005672:	3001      	adds	r0, #1
 8005674:	f43f af0d 	beq.w	8005492 <_printf_float+0xb6>
 8005678:	f04f 0a00 	mov.w	sl, #0
 800567c:	f104 0b1a 	add.w	fp, r4, #26
 8005680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005682:	425b      	negs	r3, r3
 8005684:	4553      	cmp	r3, sl
 8005686:	dc01      	bgt.n	800568c <_printf_float+0x2b0>
 8005688:	464b      	mov	r3, r9
 800568a:	e793      	b.n	80055b4 <_printf_float+0x1d8>
 800568c:	2301      	movs	r3, #1
 800568e:	465a      	mov	r2, fp
 8005690:	4631      	mov	r1, r6
 8005692:	4628      	mov	r0, r5
 8005694:	47b8      	blx	r7
 8005696:	3001      	adds	r0, #1
 8005698:	f43f aefb 	beq.w	8005492 <_printf_float+0xb6>
 800569c:	f10a 0a01 	add.w	sl, sl, #1
 80056a0:	e7ee      	b.n	8005680 <_printf_float+0x2a4>
 80056a2:	bf00      	nop
 80056a4:	7fefffff 	.word	0x7fefffff
 80056a8:	080097d6 	.word	0x080097d6
 80056ac:	080097d2 	.word	0x080097d2
 80056b0:	080097de 	.word	0x080097de
 80056b4:	080097da 	.word	0x080097da
 80056b8:	08009a14 	.word	0x08009a14
 80056bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80056c2:	4553      	cmp	r3, sl
 80056c4:	bfa8      	it	ge
 80056c6:	4653      	movge	r3, sl
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	4699      	mov	r9, r3
 80056cc:	dc36      	bgt.n	800573c <_printf_float+0x360>
 80056ce:	f04f 0b00 	mov.w	fp, #0
 80056d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056d6:	f104 021a 	add.w	r2, r4, #26
 80056da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056dc:	9306      	str	r3, [sp, #24]
 80056de:	eba3 0309 	sub.w	r3, r3, r9
 80056e2:	455b      	cmp	r3, fp
 80056e4:	dc31      	bgt.n	800574a <_printf_float+0x36e>
 80056e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056e8:	459a      	cmp	sl, r3
 80056ea:	dc3a      	bgt.n	8005762 <_printf_float+0x386>
 80056ec:	6823      	ldr	r3, [r4, #0]
 80056ee:	07da      	lsls	r2, r3, #31
 80056f0:	d437      	bmi.n	8005762 <_printf_float+0x386>
 80056f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056f4:	ebaa 0903 	sub.w	r9, sl, r3
 80056f8:	9b06      	ldr	r3, [sp, #24]
 80056fa:	ebaa 0303 	sub.w	r3, sl, r3
 80056fe:	4599      	cmp	r9, r3
 8005700:	bfa8      	it	ge
 8005702:	4699      	movge	r9, r3
 8005704:	f1b9 0f00 	cmp.w	r9, #0
 8005708:	dc33      	bgt.n	8005772 <_printf_float+0x396>
 800570a:	f04f 0800 	mov.w	r8, #0
 800570e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005712:	f104 0b1a 	add.w	fp, r4, #26
 8005716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005718:	ebaa 0303 	sub.w	r3, sl, r3
 800571c:	eba3 0309 	sub.w	r3, r3, r9
 8005720:	4543      	cmp	r3, r8
 8005722:	f77f af79 	ble.w	8005618 <_printf_float+0x23c>
 8005726:	2301      	movs	r3, #1
 8005728:	465a      	mov	r2, fp
 800572a:	4631      	mov	r1, r6
 800572c:	4628      	mov	r0, r5
 800572e:	47b8      	blx	r7
 8005730:	3001      	adds	r0, #1
 8005732:	f43f aeae 	beq.w	8005492 <_printf_float+0xb6>
 8005736:	f108 0801 	add.w	r8, r8, #1
 800573a:	e7ec      	b.n	8005716 <_printf_float+0x33a>
 800573c:	4642      	mov	r2, r8
 800573e:	4631      	mov	r1, r6
 8005740:	4628      	mov	r0, r5
 8005742:	47b8      	blx	r7
 8005744:	3001      	adds	r0, #1
 8005746:	d1c2      	bne.n	80056ce <_printf_float+0x2f2>
 8005748:	e6a3      	b.n	8005492 <_printf_float+0xb6>
 800574a:	2301      	movs	r3, #1
 800574c:	4631      	mov	r1, r6
 800574e:	4628      	mov	r0, r5
 8005750:	9206      	str	r2, [sp, #24]
 8005752:	47b8      	blx	r7
 8005754:	3001      	adds	r0, #1
 8005756:	f43f ae9c 	beq.w	8005492 <_printf_float+0xb6>
 800575a:	9a06      	ldr	r2, [sp, #24]
 800575c:	f10b 0b01 	add.w	fp, fp, #1
 8005760:	e7bb      	b.n	80056da <_printf_float+0x2fe>
 8005762:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005766:	4631      	mov	r1, r6
 8005768:	4628      	mov	r0, r5
 800576a:	47b8      	blx	r7
 800576c:	3001      	adds	r0, #1
 800576e:	d1c0      	bne.n	80056f2 <_printf_float+0x316>
 8005770:	e68f      	b.n	8005492 <_printf_float+0xb6>
 8005772:	9a06      	ldr	r2, [sp, #24]
 8005774:	464b      	mov	r3, r9
 8005776:	4442      	add	r2, r8
 8005778:	4631      	mov	r1, r6
 800577a:	4628      	mov	r0, r5
 800577c:	47b8      	blx	r7
 800577e:	3001      	adds	r0, #1
 8005780:	d1c3      	bne.n	800570a <_printf_float+0x32e>
 8005782:	e686      	b.n	8005492 <_printf_float+0xb6>
 8005784:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005788:	f1ba 0f01 	cmp.w	sl, #1
 800578c:	dc01      	bgt.n	8005792 <_printf_float+0x3b6>
 800578e:	07db      	lsls	r3, r3, #31
 8005790:	d536      	bpl.n	8005800 <_printf_float+0x424>
 8005792:	2301      	movs	r3, #1
 8005794:	4642      	mov	r2, r8
 8005796:	4631      	mov	r1, r6
 8005798:	4628      	mov	r0, r5
 800579a:	47b8      	blx	r7
 800579c:	3001      	adds	r0, #1
 800579e:	f43f ae78 	beq.w	8005492 <_printf_float+0xb6>
 80057a2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057a6:	4631      	mov	r1, r6
 80057a8:	4628      	mov	r0, r5
 80057aa:	47b8      	blx	r7
 80057ac:	3001      	adds	r0, #1
 80057ae:	f43f ae70 	beq.w	8005492 <_printf_float+0xb6>
 80057b2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80057b6:	2200      	movs	r2, #0
 80057b8:	2300      	movs	r3, #0
 80057ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057be:	f7fb f993 	bl	8000ae8 <__aeabi_dcmpeq>
 80057c2:	b9c0      	cbnz	r0, 80057f6 <_printf_float+0x41a>
 80057c4:	4653      	mov	r3, sl
 80057c6:	f108 0201 	add.w	r2, r8, #1
 80057ca:	4631      	mov	r1, r6
 80057cc:	4628      	mov	r0, r5
 80057ce:	47b8      	blx	r7
 80057d0:	3001      	adds	r0, #1
 80057d2:	d10c      	bne.n	80057ee <_printf_float+0x412>
 80057d4:	e65d      	b.n	8005492 <_printf_float+0xb6>
 80057d6:	2301      	movs	r3, #1
 80057d8:	465a      	mov	r2, fp
 80057da:	4631      	mov	r1, r6
 80057dc:	4628      	mov	r0, r5
 80057de:	47b8      	blx	r7
 80057e0:	3001      	adds	r0, #1
 80057e2:	f43f ae56 	beq.w	8005492 <_printf_float+0xb6>
 80057e6:	f108 0801 	add.w	r8, r8, #1
 80057ea:	45d0      	cmp	r8, sl
 80057ec:	dbf3      	blt.n	80057d6 <_printf_float+0x3fa>
 80057ee:	464b      	mov	r3, r9
 80057f0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80057f4:	e6df      	b.n	80055b6 <_printf_float+0x1da>
 80057f6:	f04f 0800 	mov.w	r8, #0
 80057fa:	f104 0b1a 	add.w	fp, r4, #26
 80057fe:	e7f4      	b.n	80057ea <_printf_float+0x40e>
 8005800:	2301      	movs	r3, #1
 8005802:	4642      	mov	r2, r8
 8005804:	e7e1      	b.n	80057ca <_printf_float+0x3ee>
 8005806:	2301      	movs	r3, #1
 8005808:	464a      	mov	r2, r9
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	f43f ae3e 	beq.w	8005492 <_printf_float+0xb6>
 8005816:	f108 0801 	add.w	r8, r8, #1
 800581a:	68e3      	ldr	r3, [r4, #12]
 800581c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800581e:	1a5b      	subs	r3, r3, r1
 8005820:	4543      	cmp	r3, r8
 8005822:	dcf0      	bgt.n	8005806 <_printf_float+0x42a>
 8005824:	e6fc      	b.n	8005620 <_printf_float+0x244>
 8005826:	f04f 0800 	mov.w	r8, #0
 800582a:	f104 0919 	add.w	r9, r4, #25
 800582e:	e7f4      	b.n	800581a <_printf_float+0x43e>

08005830 <_printf_common>:
 8005830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005834:	4616      	mov	r6, r2
 8005836:	4698      	mov	r8, r3
 8005838:	688a      	ldr	r2, [r1, #8]
 800583a:	690b      	ldr	r3, [r1, #16]
 800583c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005840:	4293      	cmp	r3, r2
 8005842:	bfb8      	it	lt
 8005844:	4613      	movlt	r3, r2
 8005846:	6033      	str	r3, [r6, #0]
 8005848:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800584c:	4607      	mov	r7, r0
 800584e:	460c      	mov	r4, r1
 8005850:	b10a      	cbz	r2, 8005856 <_printf_common+0x26>
 8005852:	3301      	adds	r3, #1
 8005854:	6033      	str	r3, [r6, #0]
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	0699      	lsls	r1, r3, #26
 800585a:	bf42      	ittt	mi
 800585c:	6833      	ldrmi	r3, [r6, #0]
 800585e:	3302      	addmi	r3, #2
 8005860:	6033      	strmi	r3, [r6, #0]
 8005862:	6825      	ldr	r5, [r4, #0]
 8005864:	f015 0506 	ands.w	r5, r5, #6
 8005868:	d106      	bne.n	8005878 <_printf_common+0x48>
 800586a:	f104 0a19 	add.w	sl, r4, #25
 800586e:	68e3      	ldr	r3, [r4, #12]
 8005870:	6832      	ldr	r2, [r6, #0]
 8005872:	1a9b      	subs	r3, r3, r2
 8005874:	42ab      	cmp	r3, r5
 8005876:	dc26      	bgt.n	80058c6 <_printf_common+0x96>
 8005878:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800587c:	6822      	ldr	r2, [r4, #0]
 800587e:	3b00      	subs	r3, #0
 8005880:	bf18      	it	ne
 8005882:	2301      	movne	r3, #1
 8005884:	0692      	lsls	r2, r2, #26
 8005886:	d42b      	bmi.n	80058e0 <_printf_common+0xb0>
 8005888:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800588c:	4641      	mov	r1, r8
 800588e:	4638      	mov	r0, r7
 8005890:	47c8      	blx	r9
 8005892:	3001      	adds	r0, #1
 8005894:	d01e      	beq.n	80058d4 <_printf_common+0xa4>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	6922      	ldr	r2, [r4, #16]
 800589a:	f003 0306 	and.w	r3, r3, #6
 800589e:	2b04      	cmp	r3, #4
 80058a0:	bf02      	ittt	eq
 80058a2:	68e5      	ldreq	r5, [r4, #12]
 80058a4:	6833      	ldreq	r3, [r6, #0]
 80058a6:	1aed      	subeq	r5, r5, r3
 80058a8:	68a3      	ldr	r3, [r4, #8]
 80058aa:	bf0c      	ite	eq
 80058ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058b0:	2500      	movne	r5, #0
 80058b2:	4293      	cmp	r3, r2
 80058b4:	bfc4      	itt	gt
 80058b6:	1a9b      	subgt	r3, r3, r2
 80058b8:	18ed      	addgt	r5, r5, r3
 80058ba:	2600      	movs	r6, #0
 80058bc:	341a      	adds	r4, #26
 80058be:	42b5      	cmp	r5, r6
 80058c0:	d11a      	bne.n	80058f8 <_printf_common+0xc8>
 80058c2:	2000      	movs	r0, #0
 80058c4:	e008      	b.n	80058d8 <_printf_common+0xa8>
 80058c6:	2301      	movs	r3, #1
 80058c8:	4652      	mov	r2, sl
 80058ca:	4641      	mov	r1, r8
 80058cc:	4638      	mov	r0, r7
 80058ce:	47c8      	blx	r9
 80058d0:	3001      	adds	r0, #1
 80058d2:	d103      	bne.n	80058dc <_printf_common+0xac>
 80058d4:	f04f 30ff 	mov.w	r0, #4294967295
 80058d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058dc:	3501      	adds	r5, #1
 80058de:	e7c6      	b.n	800586e <_printf_common+0x3e>
 80058e0:	18e1      	adds	r1, r4, r3
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	2030      	movs	r0, #48	@ 0x30
 80058e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058ea:	4422      	add	r2, r4
 80058ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058f4:	3302      	adds	r3, #2
 80058f6:	e7c7      	b.n	8005888 <_printf_common+0x58>
 80058f8:	2301      	movs	r3, #1
 80058fa:	4622      	mov	r2, r4
 80058fc:	4641      	mov	r1, r8
 80058fe:	4638      	mov	r0, r7
 8005900:	47c8      	blx	r9
 8005902:	3001      	adds	r0, #1
 8005904:	d0e6      	beq.n	80058d4 <_printf_common+0xa4>
 8005906:	3601      	adds	r6, #1
 8005908:	e7d9      	b.n	80058be <_printf_common+0x8e>
	...

0800590c <_printf_i>:
 800590c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005910:	7e0f      	ldrb	r7, [r1, #24]
 8005912:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005914:	2f78      	cmp	r7, #120	@ 0x78
 8005916:	4691      	mov	r9, r2
 8005918:	4680      	mov	r8, r0
 800591a:	460c      	mov	r4, r1
 800591c:	469a      	mov	sl, r3
 800591e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005922:	d807      	bhi.n	8005934 <_printf_i+0x28>
 8005924:	2f62      	cmp	r7, #98	@ 0x62
 8005926:	d80a      	bhi.n	800593e <_printf_i+0x32>
 8005928:	2f00      	cmp	r7, #0
 800592a:	f000 80d1 	beq.w	8005ad0 <_printf_i+0x1c4>
 800592e:	2f58      	cmp	r7, #88	@ 0x58
 8005930:	f000 80b8 	beq.w	8005aa4 <_printf_i+0x198>
 8005934:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005938:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800593c:	e03a      	b.n	80059b4 <_printf_i+0xa8>
 800593e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005942:	2b15      	cmp	r3, #21
 8005944:	d8f6      	bhi.n	8005934 <_printf_i+0x28>
 8005946:	a101      	add	r1, pc, #4	@ (adr r1, 800594c <_printf_i+0x40>)
 8005948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800594c:	080059a5 	.word	0x080059a5
 8005950:	080059b9 	.word	0x080059b9
 8005954:	08005935 	.word	0x08005935
 8005958:	08005935 	.word	0x08005935
 800595c:	08005935 	.word	0x08005935
 8005960:	08005935 	.word	0x08005935
 8005964:	080059b9 	.word	0x080059b9
 8005968:	08005935 	.word	0x08005935
 800596c:	08005935 	.word	0x08005935
 8005970:	08005935 	.word	0x08005935
 8005974:	08005935 	.word	0x08005935
 8005978:	08005ab7 	.word	0x08005ab7
 800597c:	080059e3 	.word	0x080059e3
 8005980:	08005a71 	.word	0x08005a71
 8005984:	08005935 	.word	0x08005935
 8005988:	08005935 	.word	0x08005935
 800598c:	08005ad9 	.word	0x08005ad9
 8005990:	08005935 	.word	0x08005935
 8005994:	080059e3 	.word	0x080059e3
 8005998:	08005935 	.word	0x08005935
 800599c:	08005935 	.word	0x08005935
 80059a0:	08005a79 	.word	0x08005a79
 80059a4:	6833      	ldr	r3, [r6, #0]
 80059a6:	1d1a      	adds	r2, r3, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6032      	str	r2, [r6, #0]
 80059ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80059b4:	2301      	movs	r3, #1
 80059b6:	e09c      	b.n	8005af2 <_printf_i+0x1e6>
 80059b8:	6833      	ldr	r3, [r6, #0]
 80059ba:	6820      	ldr	r0, [r4, #0]
 80059bc:	1d19      	adds	r1, r3, #4
 80059be:	6031      	str	r1, [r6, #0]
 80059c0:	0606      	lsls	r6, r0, #24
 80059c2:	d501      	bpl.n	80059c8 <_printf_i+0xbc>
 80059c4:	681d      	ldr	r5, [r3, #0]
 80059c6:	e003      	b.n	80059d0 <_printf_i+0xc4>
 80059c8:	0645      	lsls	r5, r0, #25
 80059ca:	d5fb      	bpl.n	80059c4 <_printf_i+0xb8>
 80059cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80059d0:	2d00      	cmp	r5, #0
 80059d2:	da03      	bge.n	80059dc <_printf_i+0xd0>
 80059d4:	232d      	movs	r3, #45	@ 0x2d
 80059d6:	426d      	negs	r5, r5
 80059d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059dc:	4858      	ldr	r0, [pc, #352]	@ (8005b40 <_printf_i+0x234>)
 80059de:	230a      	movs	r3, #10
 80059e0:	e011      	b.n	8005a06 <_printf_i+0xfa>
 80059e2:	6821      	ldr	r1, [r4, #0]
 80059e4:	6833      	ldr	r3, [r6, #0]
 80059e6:	0608      	lsls	r0, r1, #24
 80059e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80059ec:	d402      	bmi.n	80059f4 <_printf_i+0xe8>
 80059ee:	0649      	lsls	r1, r1, #25
 80059f0:	bf48      	it	mi
 80059f2:	b2ad      	uxthmi	r5, r5
 80059f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80059f6:	4852      	ldr	r0, [pc, #328]	@ (8005b40 <_printf_i+0x234>)
 80059f8:	6033      	str	r3, [r6, #0]
 80059fa:	bf14      	ite	ne
 80059fc:	230a      	movne	r3, #10
 80059fe:	2308      	moveq	r3, #8
 8005a00:	2100      	movs	r1, #0
 8005a02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a06:	6866      	ldr	r6, [r4, #4]
 8005a08:	60a6      	str	r6, [r4, #8]
 8005a0a:	2e00      	cmp	r6, #0
 8005a0c:	db05      	blt.n	8005a1a <_printf_i+0x10e>
 8005a0e:	6821      	ldr	r1, [r4, #0]
 8005a10:	432e      	orrs	r6, r5
 8005a12:	f021 0104 	bic.w	r1, r1, #4
 8005a16:	6021      	str	r1, [r4, #0]
 8005a18:	d04b      	beq.n	8005ab2 <_printf_i+0x1a6>
 8005a1a:	4616      	mov	r6, r2
 8005a1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a20:	fb03 5711 	mls	r7, r3, r1, r5
 8005a24:	5dc7      	ldrb	r7, [r0, r7]
 8005a26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a2a:	462f      	mov	r7, r5
 8005a2c:	42bb      	cmp	r3, r7
 8005a2e:	460d      	mov	r5, r1
 8005a30:	d9f4      	bls.n	8005a1c <_printf_i+0x110>
 8005a32:	2b08      	cmp	r3, #8
 8005a34:	d10b      	bne.n	8005a4e <_printf_i+0x142>
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	07df      	lsls	r7, r3, #31
 8005a3a:	d508      	bpl.n	8005a4e <_printf_i+0x142>
 8005a3c:	6923      	ldr	r3, [r4, #16]
 8005a3e:	6861      	ldr	r1, [r4, #4]
 8005a40:	4299      	cmp	r1, r3
 8005a42:	bfde      	ittt	le
 8005a44:	2330      	movle	r3, #48	@ 0x30
 8005a46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a4e:	1b92      	subs	r2, r2, r6
 8005a50:	6122      	str	r2, [r4, #16]
 8005a52:	f8cd a000 	str.w	sl, [sp]
 8005a56:	464b      	mov	r3, r9
 8005a58:	aa03      	add	r2, sp, #12
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	4640      	mov	r0, r8
 8005a5e:	f7ff fee7 	bl	8005830 <_printf_common>
 8005a62:	3001      	adds	r0, #1
 8005a64:	d14a      	bne.n	8005afc <_printf_i+0x1f0>
 8005a66:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6a:	b004      	add	sp, #16
 8005a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a70:	6823      	ldr	r3, [r4, #0]
 8005a72:	f043 0320 	orr.w	r3, r3, #32
 8005a76:	6023      	str	r3, [r4, #0]
 8005a78:	4832      	ldr	r0, [pc, #200]	@ (8005b44 <_printf_i+0x238>)
 8005a7a:	2778      	movs	r7, #120	@ 0x78
 8005a7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a80:	6823      	ldr	r3, [r4, #0]
 8005a82:	6831      	ldr	r1, [r6, #0]
 8005a84:	061f      	lsls	r7, r3, #24
 8005a86:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a8a:	d402      	bmi.n	8005a92 <_printf_i+0x186>
 8005a8c:	065f      	lsls	r7, r3, #25
 8005a8e:	bf48      	it	mi
 8005a90:	b2ad      	uxthmi	r5, r5
 8005a92:	6031      	str	r1, [r6, #0]
 8005a94:	07d9      	lsls	r1, r3, #31
 8005a96:	bf44      	itt	mi
 8005a98:	f043 0320 	orrmi.w	r3, r3, #32
 8005a9c:	6023      	strmi	r3, [r4, #0]
 8005a9e:	b11d      	cbz	r5, 8005aa8 <_printf_i+0x19c>
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	e7ad      	b.n	8005a00 <_printf_i+0xf4>
 8005aa4:	4826      	ldr	r0, [pc, #152]	@ (8005b40 <_printf_i+0x234>)
 8005aa6:	e7e9      	b.n	8005a7c <_printf_i+0x170>
 8005aa8:	6823      	ldr	r3, [r4, #0]
 8005aaa:	f023 0320 	bic.w	r3, r3, #32
 8005aae:	6023      	str	r3, [r4, #0]
 8005ab0:	e7f6      	b.n	8005aa0 <_printf_i+0x194>
 8005ab2:	4616      	mov	r6, r2
 8005ab4:	e7bd      	b.n	8005a32 <_printf_i+0x126>
 8005ab6:	6833      	ldr	r3, [r6, #0]
 8005ab8:	6825      	ldr	r5, [r4, #0]
 8005aba:	6961      	ldr	r1, [r4, #20]
 8005abc:	1d18      	adds	r0, r3, #4
 8005abe:	6030      	str	r0, [r6, #0]
 8005ac0:	062e      	lsls	r6, r5, #24
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	d501      	bpl.n	8005aca <_printf_i+0x1be>
 8005ac6:	6019      	str	r1, [r3, #0]
 8005ac8:	e002      	b.n	8005ad0 <_printf_i+0x1c4>
 8005aca:	0668      	lsls	r0, r5, #25
 8005acc:	d5fb      	bpl.n	8005ac6 <_printf_i+0x1ba>
 8005ace:	8019      	strh	r1, [r3, #0]
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	6123      	str	r3, [r4, #16]
 8005ad4:	4616      	mov	r6, r2
 8005ad6:	e7bc      	b.n	8005a52 <_printf_i+0x146>
 8005ad8:	6833      	ldr	r3, [r6, #0]
 8005ada:	1d1a      	adds	r2, r3, #4
 8005adc:	6032      	str	r2, [r6, #0]
 8005ade:	681e      	ldr	r6, [r3, #0]
 8005ae0:	6862      	ldr	r2, [r4, #4]
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	4630      	mov	r0, r6
 8005ae6:	f7fa fb83 	bl	80001f0 <memchr>
 8005aea:	b108      	cbz	r0, 8005af0 <_printf_i+0x1e4>
 8005aec:	1b80      	subs	r0, r0, r6
 8005aee:	6060      	str	r0, [r4, #4]
 8005af0:	6863      	ldr	r3, [r4, #4]
 8005af2:	6123      	str	r3, [r4, #16]
 8005af4:	2300      	movs	r3, #0
 8005af6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005afa:	e7aa      	b.n	8005a52 <_printf_i+0x146>
 8005afc:	6923      	ldr	r3, [r4, #16]
 8005afe:	4632      	mov	r2, r6
 8005b00:	4649      	mov	r1, r9
 8005b02:	4640      	mov	r0, r8
 8005b04:	47d0      	blx	sl
 8005b06:	3001      	adds	r0, #1
 8005b08:	d0ad      	beq.n	8005a66 <_printf_i+0x15a>
 8005b0a:	6823      	ldr	r3, [r4, #0]
 8005b0c:	079b      	lsls	r3, r3, #30
 8005b0e:	d413      	bmi.n	8005b38 <_printf_i+0x22c>
 8005b10:	68e0      	ldr	r0, [r4, #12]
 8005b12:	9b03      	ldr	r3, [sp, #12]
 8005b14:	4298      	cmp	r0, r3
 8005b16:	bfb8      	it	lt
 8005b18:	4618      	movlt	r0, r3
 8005b1a:	e7a6      	b.n	8005a6a <_printf_i+0x15e>
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	4632      	mov	r2, r6
 8005b20:	4649      	mov	r1, r9
 8005b22:	4640      	mov	r0, r8
 8005b24:	47d0      	blx	sl
 8005b26:	3001      	adds	r0, #1
 8005b28:	d09d      	beq.n	8005a66 <_printf_i+0x15a>
 8005b2a:	3501      	adds	r5, #1
 8005b2c:	68e3      	ldr	r3, [r4, #12]
 8005b2e:	9903      	ldr	r1, [sp, #12]
 8005b30:	1a5b      	subs	r3, r3, r1
 8005b32:	42ab      	cmp	r3, r5
 8005b34:	dcf2      	bgt.n	8005b1c <_printf_i+0x210>
 8005b36:	e7eb      	b.n	8005b10 <_printf_i+0x204>
 8005b38:	2500      	movs	r5, #0
 8005b3a:	f104 0619 	add.w	r6, r4, #25
 8005b3e:	e7f5      	b.n	8005b2c <_printf_i+0x220>
 8005b40:	080097e2 	.word	0x080097e2
 8005b44:	080097f3 	.word	0x080097f3

08005b48 <_scanf_float>:
 8005b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4c:	b087      	sub	sp, #28
 8005b4e:	4691      	mov	r9, r2
 8005b50:	9303      	str	r3, [sp, #12]
 8005b52:	688b      	ldr	r3, [r1, #8]
 8005b54:	1e5a      	subs	r2, r3, #1
 8005b56:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005b5a:	bf81      	itttt	hi
 8005b5c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005b60:	eb03 0b05 	addhi.w	fp, r3, r5
 8005b64:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005b68:	608b      	strhi	r3, [r1, #8]
 8005b6a:	680b      	ldr	r3, [r1, #0]
 8005b6c:	460a      	mov	r2, r1
 8005b6e:	f04f 0500 	mov.w	r5, #0
 8005b72:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005b76:	f842 3b1c 	str.w	r3, [r2], #28
 8005b7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005b7e:	4680      	mov	r8, r0
 8005b80:	460c      	mov	r4, r1
 8005b82:	bf98      	it	ls
 8005b84:	f04f 0b00 	movls.w	fp, #0
 8005b88:	9201      	str	r2, [sp, #4]
 8005b8a:	4616      	mov	r6, r2
 8005b8c:	46aa      	mov	sl, r5
 8005b8e:	462f      	mov	r7, r5
 8005b90:	9502      	str	r5, [sp, #8]
 8005b92:	68a2      	ldr	r2, [r4, #8]
 8005b94:	b15a      	cbz	r2, 8005bae <_scanf_float+0x66>
 8005b96:	f8d9 3000 	ldr.w	r3, [r9]
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	2b4e      	cmp	r3, #78	@ 0x4e
 8005b9e:	d863      	bhi.n	8005c68 <_scanf_float+0x120>
 8005ba0:	2b40      	cmp	r3, #64	@ 0x40
 8005ba2:	d83b      	bhi.n	8005c1c <_scanf_float+0xd4>
 8005ba4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005ba8:	b2c8      	uxtb	r0, r1
 8005baa:	280e      	cmp	r0, #14
 8005bac:	d939      	bls.n	8005c22 <_scanf_float+0xda>
 8005bae:	b11f      	cbz	r7, 8005bb8 <_scanf_float+0x70>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005bb6:	6023      	str	r3, [r4, #0]
 8005bb8:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bbc:	f1ba 0f01 	cmp.w	sl, #1
 8005bc0:	f200 8114 	bhi.w	8005dec <_scanf_float+0x2a4>
 8005bc4:	9b01      	ldr	r3, [sp, #4]
 8005bc6:	429e      	cmp	r6, r3
 8005bc8:	f200 8105 	bhi.w	8005dd6 <_scanf_float+0x28e>
 8005bcc:	2001      	movs	r0, #1
 8005bce:	b007      	add	sp, #28
 8005bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005bd8:	2a0d      	cmp	r2, #13
 8005bda:	d8e8      	bhi.n	8005bae <_scanf_float+0x66>
 8005bdc:	a101      	add	r1, pc, #4	@ (adr r1, 8005be4 <_scanf_float+0x9c>)
 8005bde:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005be2:	bf00      	nop
 8005be4:	08005d2d 	.word	0x08005d2d
 8005be8:	08005baf 	.word	0x08005baf
 8005bec:	08005baf 	.word	0x08005baf
 8005bf0:	08005baf 	.word	0x08005baf
 8005bf4:	08005d89 	.word	0x08005d89
 8005bf8:	08005d63 	.word	0x08005d63
 8005bfc:	08005baf 	.word	0x08005baf
 8005c00:	08005baf 	.word	0x08005baf
 8005c04:	08005d3b 	.word	0x08005d3b
 8005c08:	08005baf 	.word	0x08005baf
 8005c0c:	08005baf 	.word	0x08005baf
 8005c10:	08005baf 	.word	0x08005baf
 8005c14:	08005baf 	.word	0x08005baf
 8005c18:	08005cf7 	.word	0x08005cf7
 8005c1c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005c20:	e7da      	b.n	8005bd8 <_scanf_float+0x90>
 8005c22:	290e      	cmp	r1, #14
 8005c24:	d8c3      	bhi.n	8005bae <_scanf_float+0x66>
 8005c26:	a001      	add	r0, pc, #4	@ (adr r0, 8005c2c <_scanf_float+0xe4>)
 8005c28:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005c2c:	08005ce7 	.word	0x08005ce7
 8005c30:	08005baf 	.word	0x08005baf
 8005c34:	08005ce7 	.word	0x08005ce7
 8005c38:	08005d77 	.word	0x08005d77
 8005c3c:	08005baf 	.word	0x08005baf
 8005c40:	08005c89 	.word	0x08005c89
 8005c44:	08005ccd 	.word	0x08005ccd
 8005c48:	08005ccd 	.word	0x08005ccd
 8005c4c:	08005ccd 	.word	0x08005ccd
 8005c50:	08005ccd 	.word	0x08005ccd
 8005c54:	08005ccd 	.word	0x08005ccd
 8005c58:	08005ccd 	.word	0x08005ccd
 8005c5c:	08005ccd 	.word	0x08005ccd
 8005c60:	08005ccd 	.word	0x08005ccd
 8005c64:	08005ccd 	.word	0x08005ccd
 8005c68:	2b6e      	cmp	r3, #110	@ 0x6e
 8005c6a:	d809      	bhi.n	8005c80 <_scanf_float+0x138>
 8005c6c:	2b60      	cmp	r3, #96	@ 0x60
 8005c6e:	d8b1      	bhi.n	8005bd4 <_scanf_float+0x8c>
 8005c70:	2b54      	cmp	r3, #84	@ 0x54
 8005c72:	d07b      	beq.n	8005d6c <_scanf_float+0x224>
 8005c74:	2b59      	cmp	r3, #89	@ 0x59
 8005c76:	d19a      	bne.n	8005bae <_scanf_float+0x66>
 8005c78:	2d07      	cmp	r5, #7
 8005c7a:	d198      	bne.n	8005bae <_scanf_float+0x66>
 8005c7c:	2508      	movs	r5, #8
 8005c7e:	e02f      	b.n	8005ce0 <_scanf_float+0x198>
 8005c80:	2b74      	cmp	r3, #116	@ 0x74
 8005c82:	d073      	beq.n	8005d6c <_scanf_float+0x224>
 8005c84:	2b79      	cmp	r3, #121	@ 0x79
 8005c86:	e7f6      	b.n	8005c76 <_scanf_float+0x12e>
 8005c88:	6821      	ldr	r1, [r4, #0]
 8005c8a:	05c8      	lsls	r0, r1, #23
 8005c8c:	d51e      	bpl.n	8005ccc <_scanf_float+0x184>
 8005c8e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005c92:	6021      	str	r1, [r4, #0]
 8005c94:	3701      	adds	r7, #1
 8005c96:	f1bb 0f00 	cmp.w	fp, #0
 8005c9a:	d003      	beq.n	8005ca4 <_scanf_float+0x15c>
 8005c9c:	3201      	adds	r2, #1
 8005c9e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ca2:	60a2      	str	r2, [r4, #8]
 8005ca4:	68a3      	ldr	r3, [r4, #8]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	60a3      	str	r3, [r4, #8]
 8005caa:	6923      	ldr	r3, [r4, #16]
 8005cac:	3301      	adds	r3, #1
 8005cae:	6123      	str	r3, [r4, #16]
 8005cb0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f8c9 3004 	str.w	r3, [r9, #4]
 8005cbc:	f340 8082 	ble.w	8005dc4 <_scanf_float+0x27c>
 8005cc0:	f8d9 3000 	ldr.w	r3, [r9]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	f8c9 3000 	str.w	r3, [r9]
 8005cca:	e762      	b.n	8005b92 <_scanf_float+0x4a>
 8005ccc:	eb1a 0105 	adds.w	r1, sl, r5
 8005cd0:	f47f af6d 	bne.w	8005bae <_scanf_float+0x66>
 8005cd4:	6822      	ldr	r2, [r4, #0]
 8005cd6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005cda:	6022      	str	r2, [r4, #0]
 8005cdc:	460d      	mov	r5, r1
 8005cde:	468a      	mov	sl, r1
 8005ce0:	f806 3b01 	strb.w	r3, [r6], #1
 8005ce4:	e7de      	b.n	8005ca4 <_scanf_float+0x15c>
 8005ce6:	6822      	ldr	r2, [r4, #0]
 8005ce8:	0610      	lsls	r0, r2, #24
 8005cea:	f57f af60 	bpl.w	8005bae <_scanf_float+0x66>
 8005cee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cf2:	6022      	str	r2, [r4, #0]
 8005cf4:	e7f4      	b.n	8005ce0 <_scanf_float+0x198>
 8005cf6:	f1ba 0f00 	cmp.w	sl, #0
 8005cfa:	d10c      	bne.n	8005d16 <_scanf_float+0x1ce>
 8005cfc:	b977      	cbnz	r7, 8005d1c <_scanf_float+0x1d4>
 8005cfe:	6822      	ldr	r2, [r4, #0]
 8005d00:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005d04:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005d08:	d108      	bne.n	8005d1c <_scanf_float+0x1d4>
 8005d0a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005d0e:	6022      	str	r2, [r4, #0]
 8005d10:	f04f 0a01 	mov.w	sl, #1
 8005d14:	e7e4      	b.n	8005ce0 <_scanf_float+0x198>
 8005d16:	f1ba 0f02 	cmp.w	sl, #2
 8005d1a:	d050      	beq.n	8005dbe <_scanf_float+0x276>
 8005d1c:	2d01      	cmp	r5, #1
 8005d1e:	d002      	beq.n	8005d26 <_scanf_float+0x1de>
 8005d20:	2d04      	cmp	r5, #4
 8005d22:	f47f af44 	bne.w	8005bae <_scanf_float+0x66>
 8005d26:	3501      	adds	r5, #1
 8005d28:	b2ed      	uxtb	r5, r5
 8005d2a:	e7d9      	b.n	8005ce0 <_scanf_float+0x198>
 8005d2c:	f1ba 0f01 	cmp.w	sl, #1
 8005d30:	f47f af3d 	bne.w	8005bae <_scanf_float+0x66>
 8005d34:	f04f 0a02 	mov.w	sl, #2
 8005d38:	e7d2      	b.n	8005ce0 <_scanf_float+0x198>
 8005d3a:	b975      	cbnz	r5, 8005d5a <_scanf_float+0x212>
 8005d3c:	2f00      	cmp	r7, #0
 8005d3e:	f47f af37 	bne.w	8005bb0 <_scanf_float+0x68>
 8005d42:	6822      	ldr	r2, [r4, #0]
 8005d44:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005d48:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005d4c:	f040 8103 	bne.w	8005f56 <_scanf_float+0x40e>
 8005d50:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005d54:	6022      	str	r2, [r4, #0]
 8005d56:	2501      	movs	r5, #1
 8005d58:	e7c2      	b.n	8005ce0 <_scanf_float+0x198>
 8005d5a:	2d03      	cmp	r5, #3
 8005d5c:	d0e3      	beq.n	8005d26 <_scanf_float+0x1de>
 8005d5e:	2d05      	cmp	r5, #5
 8005d60:	e7df      	b.n	8005d22 <_scanf_float+0x1da>
 8005d62:	2d02      	cmp	r5, #2
 8005d64:	f47f af23 	bne.w	8005bae <_scanf_float+0x66>
 8005d68:	2503      	movs	r5, #3
 8005d6a:	e7b9      	b.n	8005ce0 <_scanf_float+0x198>
 8005d6c:	2d06      	cmp	r5, #6
 8005d6e:	f47f af1e 	bne.w	8005bae <_scanf_float+0x66>
 8005d72:	2507      	movs	r5, #7
 8005d74:	e7b4      	b.n	8005ce0 <_scanf_float+0x198>
 8005d76:	6822      	ldr	r2, [r4, #0]
 8005d78:	0591      	lsls	r1, r2, #22
 8005d7a:	f57f af18 	bpl.w	8005bae <_scanf_float+0x66>
 8005d7e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005d82:	6022      	str	r2, [r4, #0]
 8005d84:	9702      	str	r7, [sp, #8]
 8005d86:	e7ab      	b.n	8005ce0 <_scanf_float+0x198>
 8005d88:	6822      	ldr	r2, [r4, #0]
 8005d8a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005d8e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005d92:	d005      	beq.n	8005da0 <_scanf_float+0x258>
 8005d94:	0550      	lsls	r0, r2, #21
 8005d96:	f57f af0a 	bpl.w	8005bae <_scanf_float+0x66>
 8005d9a:	2f00      	cmp	r7, #0
 8005d9c:	f000 80db 	beq.w	8005f56 <_scanf_float+0x40e>
 8005da0:	0591      	lsls	r1, r2, #22
 8005da2:	bf58      	it	pl
 8005da4:	9902      	ldrpl	r1, [sp, #8]
 8005da6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005daa:	bf58      	it	pl
 8005dac:	1a79      	subpl	r1, r7, r1
 8005dae:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005db2:	bf58      	it	pl
 8005db4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005db8:	6022      	str	r2, [r4, #0]
 8005dba:	2700      	movs	r7, #0
 8005dbc:	e790      	b.n	8005ce0 <_scanf_float+0x198>
 8005dbe:	f04f 0a03 	mov.w	sl, #3
 8005dc2:	e78d      	b.n	8005ce0 <_scanf_float+0x198>
 8005dc4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005dc8:	4649      	mov	r1, r9
 8005dca:	4640      	mov	r0, r8
 8005dcc:	4798      	blx	r3
 8005dce:	2800      	cmp	r0, #0
 8005dd0:	f43f aedf 	beq.w	8005b92 <_scanf_float+0x4a>
 8005dd4:	e6eb      	b.n	8005bae <_scanf_float+0x66>
 8005dd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005dda:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005dde:	464a      	mov	r2, r9
 8005de0:	4640      	mov	r0, r8
 8005de2:	4798      	blx	r3
 8005de4:	6923      	ldr	r3, [r4, #16]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	6123      	str	r3, [r4, #16]
 8005dea:	e6eb      	b.n	8005bc4 <_scanf_float+0x7c>
 8005dec:	1e6b      	subs	r3, r5, #1
 8005dee:	2b06      	cmp	r3, #6
 8005df0:	d824      	bhi.n	8005e3c <_scanf_float+0x2f4>
 8005df2:	2d02      	cmp	r5, #2
 8005df4:	d836      	bhi.n	8005e64 <_scanf_float+0x31c>
 8005df6:	9b01      	ldr	r3, [sp, #4]
 8005df8:	429e      	cmp	r6, r3
 8005dfa:	f67f aee7 	bls.w	8005bcc <_scanf_float+0x84>
 8005dfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e06:	464a      	mov	r2, r9
 8005e08:	4640      	mov	r0, r8
 8005e0a:	4798      	blx	r3
 8005e0c:	6923      	ldr	r3, [r4, #16]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	6123      	str	r3, [r4, #16]
 8005e12:	e7f0      	b.n	8005df6 <_scanf_float+0x2ae>
 8005e14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e18:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005e1c:	464a      	mov	r2, r9
 8005e1e:	4640      	mov	r0, r8
 8005e20:	4798      	blx	r3
 8005e22:	6923      	ldr	r3, [r4, #16]
 8005e24:	3b01      	subs	r3, #1
 8005e26:	6123      	str	r3, [r4, #16]
 8005e28:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e2c:	fa5f fa8a 	uxtb.w	sl, sl
 8005e30:	f1ba 0f02 	cmp.w	sl, #2
 8005e34:	d1ee      	bne.n	8005e14 <_scanf_float+0x2cc>
 8005e36:	3d03      	subs	r5, #3
 8005e38:	b2ed      	uxtb	r5, r5
 8005e3a:	1b76      	subs	r6, r6, r5
 8005e3c:	6823      	ldr	r3, [r4, #0]
 8005e3e:	05da      	lsls	r2, r3, #23
 8005e40:	d530      	bpl.n	8005ea4 <_scanf_float+0x35c>
 8005e42:	055b      	lsls	r3, r3, #21
 8005e44:	d511      	bpl.n	8005e6a <_scanf_float+0x322>
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	429e      	cmp	r6, r3
 8005e4a:	f67f aebf 	bls.w	8005bcc <_scanf_float+0x84>
 8005e4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e56:	464a      	mov	r2, r9
 8005e58:	4640      	mov	r0, r8
 8005e5a:	4798      	blx	r3
 8005e5c:	6923      	ldr	r3, [r4, #16]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	6123      	str	r3, [r4, #16]
 8005e62:	e7f0      	b.n	8005e46 <_scanf_float+0x2fe>
 8005e64:	46aa      	mov	sl, r5
 8005e66:	46b3      	mov	fp, r6
 8005e68:	e7de      	b.n	8005e28 <_scanf_float+0x2e0>
 8005e6a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005e6e:	6923      	ldr	r3, [r4, #16]
 8005e70:	2965      	cmp	r1, #101	@ 0x65
 8005e72:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e76:	f106 35ff 	add.w	r5, r6, #4294967295
 8005e7a:	6123      	str	r3, [r4, #16]
 8005e7c:	d00c      	beq.n	8005e98 <_scanf_float+0x350>
 8005e7e:	2945      	cmp	r1, #69	@ 0x45
 8005e80:	d00a      	beq.n	8005e98 <_scanf_float+0x350>
 8005e82:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e86:	464a      	mov	r2, r9
 8005e88:	4640      	mov	r0, r8
 8005e8a:	4798      	blx	r3
 8005e8c:	6923      	ldr	r3, [r4, #16]
 8005e8e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005e92:	3b01      	subs	r3, #1
 8005e94:	1eb5      	subs	r5, r6, #2
 8005e96:	6123      	str	r3, [r4, #16]
 8005e98:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e9c:	464a      	mov	r2, r9
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	4798      	blx	r3
 8005ea2:	462e      	mov	r6, r5
 8005ea4:	6822      	ldr	r2, [r4, #0]
 8005ea6:	f012 0210 	ands.w	r2, r2, #16
 8005eaa:	d001      	beq.n	8005eb0 <_scanf_float+0x368>
 8005eac:	2000      	movs	r0, #0
 8005eae:	e68e      	b.n	8005bce <_scanf_float+0x86>
 8005eb0:	7032      	strb	r2, [r6, #0]
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005eb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ebc:	d125      	bne.n	8005f0a <_scanf_float+0x3c2>
 8005ebe:	9b02      	ldr	r3, [sp, #8]
 8005ec0:	429f      	cmp	r7, r3
 8005ec2:	d00a      	beq.n	8005eda <_scanf_float+0x392>
 8005ec4:	1bda      	subs	r2, r3, r7
 8005ec6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005eca:	429e      	cmp	r6, r3
 8005ecc:	bf28      	it	cs
 8005ece:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005ed2:	4922      	ldr	r1, [pc, #136]	@ (8005f5c <_scanf_float+0x414>)
 8005ed4:	4630      	mov	r0, r6
 8005ed6:	f000 f977 	bl	80061c8 <siprintf>
 8005eda:	9901      	ldr	r1, [sp, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	4640      	mov	r0, r8
 8005ee0:	f7ff f95a 	bl	8005198 <_strtod_r>
 8005ee4:	9b03      	ldr	r3, [sp, #12]
 8005ee6:	6821      	ldr	r1, [r4, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f011 0f02 	tst.w	r1, #2
 8005eee:	ec57 6b10 	vmov	r6, r7, d0
 8005ef2:	f103 0204 	add.w	r2, r3, #4
 8005ef6:	d015      	beq.n	8005f24 <_scanf_float+0x3dc>
 8005ef8:	9903      	ldr	r1, [sp, #12]
 8005efa:	600a      	str	r2, [r1, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	e9c3 6700 	strd	r6, r7, [r3]
 8005f02:	68e3      	ldr	r3, [r4, #12]
 8005f04:	3301      	adds	r3, #1
 8005f06:	60e3      	str	r3, [r4, #12]
 8005f08:	e7d0      	b.n	8005eac <_scanf_float+0x364>
 8005f0a:	9b04      	ldr	r3, [sp, #16]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d0e4      	beq.n	8005eda <_scanf_float+0x392>
 8005f10:	9905      	ldr	r1, [sp, #20]
 8005f12:	230a      	movs	r3, #10
 8005f14:	3101      	adds	r1, #1
 8005f16:	4640      	mov	r0, r8
 8005f18:	f7ff f9be 	bl	8005298 <_strtol_r>
 8005f1c:	9b04      	ldr	r3, [sp, #16]
 8005f1e:	9e05      	ldr	r6, [sp, #20]
 8005f20:	1ac2      	subs	r2, r0, r3
 8005f22:	e7d0      	b.n	8005ec6 <_scanf_float+0x37e>
 8005f24:	f011 0f04 	tst.w	r1, #4
 8005f28:	9903      	ldr	r1, [sp, #12]
 8005f2a:	600a      	str	r2, [r1, #0]
 8005f2c:	d1e6      	bne.n	8005efc <_scanf_float+0x3b4>
 8005f2e:	681d      	ldr	r5, [r3, #0]
 8005f30:	4632      	mov	r2, r6
 8005f32:	463b      	mov	r3, r7
 8005f34:	4630      	mov	r0, r6
 8005f36:	4639      	mov	r1, r7
 8005f38:	f7fa fe08 	bl	8000b4c <__aeabi_dcmpun>
 8005f3c:	b128      	cbz	r0, 8005f4a <_scanf_float+0x402>
 8005f3e:	4808      	ldr	r0, [pc, #32]	@ (8005f60 <_scanf_float+0x418>)
 8005f40:	f000 fb82 	bl	8006648 <nanf>
 8005f44:	ed85 0a00 	vstr	s0, [r5]
 8005f48:	e7db      	b.n	8005f02 <_scanf_float+0x3ba>
 8005f4a:	4630      	mov	r0, r6
 8005f4c:	4639      	mov	r1, r7
 8005f4e:	f7fa fe5b 	bl	8000c08 <__aeabi_d2f>
 8005f52:	6028      	str	r0, [r5, #0]
 8005f54:	e7d5      	b.n	8005f02 <_scanf_float+0x3ba>
 8005f56:	2700      	movs	r7, #0
 8005f58:	e62e      	b.n	8005bb8 <_scanf_float+0x70>
 8005f5a:	bf00      	nop
 8005f5c:	08009804 	.word	0x08009804
 8005f60:	080098bd 	.word	0x080098bd

08005f64 <std>:
 8005f64:	2300      	movs	r3, #0
 8005f66:	b510      	push	{r4, lr}
 8005f68:	4604      	mov	r4, r0
 8005f6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f72:	6083      	str	r3, [r0, #8]
 8005f74:	8181      	strh	r1, [r0, #12]
 8005f76:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f78:	81c2      	strh	r2, [r0, #14]
 8005f7a:	6183      	str	r3, [r0, #24]
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	2208      	movs	r2, #8
 8005f80:	305c      	adds	r0, #92	@ 0x5c
 8005f82:	f000 fa49 	bl	8006418 <memset>
 8005f86:	4b0d      	ldr	r3, [pc, #52]	@ (8005fbc <std+0x58>)
 8005f88:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc0 <std+0x5c>)
 8005f8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc4 <std+0x60>)
 8005f90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f92:	4b0d      	ldr	r3, [pc, #52]	@ (8005fc8 <std+0x64>)
 8005f94:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f96:	4b0d      	ldr	r3, [pc, #52]	@ (8005fcc <std+0x68>)
 8005f98:	6224      	str	r4, [r4, #32]
 8005f9a:	429c      	cmp	r4, r3
 8005f9c:	d006      	beq.n	8005fac <std+0x48>
 8005f9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005fa2:	4294      	cmp	r4, r2
 8005fa4:	d002      	beq.n	8005fac <std+0x48>
 8005fa6:	33d0      	adds	r3, #208	@ 0xd0
 8005fa8:	429c      	cmp	r4, r3
 8005faa:	d105      	bne.n	8005fb8 <std+0x54>
 8005fac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb4:	f000 bb2e 	b.w	8006614 <__retarget_lock_init_recursive>
 8005fb8:	bd10      	pop	{r4, pc}
 8005fba:	bf00      	nop
 8005fbc:	08006265 	.word	0x08006265
 8005fc0:	0800628b 	.word	0x0800628b
 8005fc4:	080062c3 	.word	0x080062c3
 8005fc8:	080062e7 	.word	0x080062e7
 8005fcc:	200011f8 	.word	0x200011f8

08005fd0 <stdio_exit_handler>:
 8005fd0:	4a02      	ldr	r2, [pc, #8]	@ (8005fdc <stdio_exit_handler+0xc>)
 8005fd2:	4903      	ldr	r1, [pc, #12]	@ (8005fe0 <stdio_exit_handler+0x10>)
 8005fd4:	4803      	ldr	r0, [pc, #12]	@ (8005fe4 <stdio_exit_handler+0x14>)
 8005fd6:	f000 b869 	b.w	80060ac <_fwalk_sglue>
 8005fda:	bf00      	nop
 8005fdc:	20000018 	.word	0x20000018
 8005fe0:	080091bd 	.word	0x080091bd
 8005fe4:	20000194 	.word	0x20000194

08005fe8 <cleanup_stdio>:
 8005fe8:	6841      	ldr	r1, [r0, #4]
 8005fea:	4b0c      	ldr	r3, [pc, #48]	@ (800601c <cleanup_stdio+0x34>)
 8005fec:	4299      	cmp	r1, r3
 8005fee:	b510      	push	{r4, lr}
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	d001      	beq.n	8005ff8 <cleanup_stdio+0x10>
 8005ff4:	f003 f8e2 	bl	80091bc <_fflush_r>
 8005ff8:	68a1      	ldr	r1, [r4, #8]
 8005ffa:	4b09      	ldr	r3, [pc, #36]	@ (8006020 <cleanup_stdio+0x38>)
 8005ffc:	4299      	cmp	r1, r3
 8005ffe:	d002      	beq.n	8006006 <cleanup_stdio+0x1e>
 8006000:	4620      	mov	r0, r4
 8006002:	f003 f8db 	bl	80091bc <_fflush_r>
 8006006:	68e1      	ldr	r1, [r4, #12]
 8006008:	4b06      	ldr	r3, [pc, #24]	@ (8006024 <cleanup_stdio+0x3c>)
 800600a:	4299      	cmp	r1, r3
 800600c:	d004      	beq.n	8006018 <cleanup_stdio+0x30>
 800600e:	4620      	mov	r0, r4
 8006010:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006014:	f003 b8d2 	b.w	80091bc <_fflush_r>
 8006018:	bd10      	pop	{r4, pc}
 800601a:	bf00      	nop
 800601c:	200011f8 	.word	0x200011f8
 8006020:	20001260 	.word	0x20001260
 8006024:	200012c8 	.word	0x200012c8

08006028 <global_stdio_init.part.0>:
 8006028:	b510      	push	{r4, lr}
 800602a:	4b0b      	ldr	r3, [pc, #44]	@ (8006058 <global_stdio_init.part.0+0x30>)
 800602c:	4c0b      	ldr	r4, [pc, #44]	@ (800605c <global_stdio_init.part.0+0x34>)
 800602e:	4a0c      	ldr	r2, [pc, #48]	@ (8006060 <global_stdio_init.part.0+0x38>)
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	4620      	mov	r0, r4
 8006034:	2200      	movs	r2, #0
 8006036:	2104      	movs	r1, #4
 8006038:	f7ff ff94 	bl	8005f64 <std>
 800603c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006040:	2201      	movs	r2, #1
 8006042:	2109      	movs	r1, #9
 8006044:	f7ff ff8e 	bl	8005f64 <std>
 8006048:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800604c:	2202      	movs	r2, #2
 800604e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006052:	2112      	movs	r1, #18
 8006054:	f7ff bf86 	b.w	8005f64 <std>
 8006058:	20001330 	.word	0x20001330
 800605c:	200011f8 	.word	0x200011f8
 8006060:	08005fd1 	.word	0x08005fd1

08006064 <__sfp_lock_acquire>:
 8006064:	4801      	ldr	r0, [pc, #4]	@ (800606c <__sfp_lock_acquire+0x8>)
 8006066:	f000 bad6 	b.w	8006616 <__retarget_lock_acquire_recursive>
 800606a:	bf00      	nop
 800606c:	20001339 	.word	0x20001339

08006070 <__sfp_lock_release>:
 8006070:	4801      	ldr	r0, [pc, #4]	@ (8006078 <__sfp_lock_release+0x8>)
 8006072:	f000 bad1 	b.w	8006618 <__retarget_lock_release_recursive>
 8006076:	bf00      	nop
 8006078:	20001339 	.word	0x20001339

0800607c <__sinit>:
 800607c:	b510      	push	{r4, lr}
 800607e:	4604      	mov	r4, r0
 8006080:	f7ff fff0 	bl	8006064 <__sfp_lock_acquire>
 8006084:	6a23      	ldr	r3, [r4, #32]
 8006086:	b11b      	cbz	r3, 8006090 <__sinit+0x14>
 8006088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800608c:	f7ff bff0 	b.w	8006070 <__sfp_lock_release>
 8006090:	4b04      	ldr	r3, [pc, #16]	@ (80060a4 <__sinit+0x28>)
 8006092:	6223      	str	r3, [r4, #32]
 8006094:	4b04      	ldr	r3, [pc, #16]	@ (80060a8 <__sinit+0x2c>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f5      	bne.n	8006088 <__sinit+0xc>
 800609c:	f7ff ffc4 	bl	8006028 <global_stdio_init.part.0>
 80060a0:	e7f2      	b.n	8006088 <__sinit+0xc>
 80060a2:	bf00      	nop
 80060a4:	08005fe9 	.word	0x08005fe9
 80060a8:	20001330 	.word	0x20001330

080060ac <_fwalk_sglue>:
 80060ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060b0:	4607      	mov	r7, r0
 80060b2:	4688      	mov	r8, r1
 80060b4:	4614      	mov	r4, r2
 80060b6:	2600      	movs	r6, #0
 80060b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80060bc:	f1b9 0901 	subs.w	r9, r9, #1
 80060c0:	d505      	bpl.n	80060ce <_fwalk_sglue+0x22>
 80060c2:	6824      	ldr	r4, [r4, #0]
 80060c4:	2c00      	cmp	r4, #0
 80060c6:	d1f7      	bne.n	80060b8 <_fwalk_sglue+0xc>
 80060c8:	4630      	mov	r0, r6
 80060ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060ce:	89ab      	ldrh	r3, [r5, #12]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d907      	bls.n	80060e4 <_fwalk_sglue+0x38>
 80060d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060d8:	3301      	adds	r3, #1
 80060da:	d003      	beq.n	80060e4 <_fwalk_sglue+0x38>
 80060dc:	4629      	mov	r1, r5
 80060de:	4638      	mov	r0, r7
 80060e0:	47c0      	blx	r8
 80060e2:	4306      	orrs	r6, r0
 80060e4:	3568      	adds	r5, #104	@ 0x68
 80060e6:	e7e9      	b.n	80060bc <_fwalk_sglue+0x10>

080060e8 <iprintf>:
 80060e8:	b40f      	push	{r0, r1, r2, r3}
 80060ea:	b507      	push	{r0, r1, r2, lr}
 80060ec:	4906      	ldr	r1, [pc, #24]	@ (8006108 <iprintf+0x20>)
 80060ee:	ab04      	add	r3, sp, #16
 80060f0:	6808      	ldr	r0, [r1, #0]
 80060f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80060f6:	6881      	ldr	r1, [r0, #8]
 80060f8:	9301      	str	r3, [sp, #4]
 80060fa:	f002 fd75 	bl	8008be8 <_vfiprintf_r>
 80060fe:	b003      	add	sp, #12
 8006100:	f85d eb04 	ldr.w	lr, [sp], #4
 8006104:	b004      	add	sp, #16
 8006106:	4770      	bx	lr
 8006108:	20000190 	.word	0x20000190

0800610c <_puts_r>:
 800610c:	6a03      	ldr	r3, [r0, #32]
 800610e:	b570      	push	{r4, r5, r6, lr}
 8006110:	6884      	ldr	r4, [r0, #8]
 8006112:	4605      	mov	r5, r0
 8006114:	460e      	mov	r6, r1
 8006116:	b90b      	cbnz	r3, 800611c <_puts_r+0x10>
 8006118:	f7ff ffb0 	bl	800607c <__sinit>
 800611c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800611e:	07db      	lsls	r3, r3, #31
 8006120:	d405      	bmi.n	800612e <_puts_r+0x22>
 8006122:	89a3      	ldrh	r3, [r4, #12]
 8006124:	0598      	lsls	r0, r3, #22
 8006126:	d402      	bmi.n	800612e <_puts_r+0x22>
 8006128:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800612a:	f000 fa74 	bl	8006616 <__retarget_lock_acquire_recursive>
 800612e:	89a3      	ldrh	r3, [r4, #12]
 8006130:	0719      	lsls	r1, r3, #28
 8006132:	d502      	bpl.n	800613a <_puts_r+0x2e>
 8006134:	6923      	ldr	r3, [r4, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d135      	bne.n	80061a6 <_puts_r+0x9a>
 800613a:	4621      	mov	r1, r4
 800613c:	4628      	mov	r0, r5
 800613e:	f000 f915 	bl	800636c <__swsetup_r>
 8006142:	b380      	cbz	r0, 80061a6 <_puts_r+0x9a>
 8006144:	f04f 35ff 	mov.w	r5, #4294967295
 8006148:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800614a:	07da      	lsls	r2, r3, #31
 800614c:	d405      	bmi.n	800615a <_puts_r+0x4e>
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	059b      	lsls	r3, r3, #22
 8006152:	d402      	bmi.n	800615a <_puts_r+0x4e>
 8006154:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006156:	f000 fa5f 	bl	8006618 <__retarget_lock_release_recursive>
 800615a:	4628      	mov	r0, r5
 800615c:	bd70      	pop	{r4, r5, r6, pc}
 800615e:	2b00      	cmp	r3, #0
 8006160:	da04      	bge.n	800616c <_puts_r+0x60>
 8006162:	69a2      	ldr	r2, [r4, #24]
 8006164:	429a      	cmp	r2, r3
 8006166:	dc17      	bgt.n	8006198 <_puts_r+0x8c>
 8006168:	290a      	cmp	r1, #10
 800616a:	d015      	beq.n	8006198 <_puts_r+0x8c>
 800616c:	6823      	ldr	r3, [r4, #0]
 800616e:	1c5a      	adds	r2, r3, #1
 8006170:	6022      	str	r2, [r4, #0]
 8006172:	7019      	strb	r1, [r3, #0]
 8006174:	68a3      	ldr	r3, [r4, #8]
 8006176:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800617a:	3b01      	subs	r3, #1
 800617c:	60a3      	str	r3, [r4, #8]
 800617e:	2900      	cmp	r1, #0
 8006180:	d1ed      	bne.n	800615e <_puts_r+0x52>
 8006182:	2b00      	cmp	r3, #0
 8006184:	da11      	bge.n	80061aa <_puts_r+0x9e>
 8006186:	4622      	mov	r2, r4
 8006188:	210a      	movs	r1, #10
 800618a:	4628      	mov	r0, r5
 800618c:	f000 f8af 	bl	80062ee <__swbuf_r>
 8006190:	3001      	adds	r0, #1
 8006192:	d0d7      	beq.n	8006144 <_puts_r+0x38>
 8006194:	250a      	movs	r5, #10
 8006196:	e7d7      	b.n	8006148 <_puts_r+0x3c>
 8006198:	4622      	mov	r2, r4
 800619a:	4628      	mov	r0, r5
 800619c:	f000 f8a7 	bl	80062ee <__swbuf_r>
 80061a0:	3001      	adds	r0, #1
 80061a2:	d1e7      	bne.n	8006174 <_puts_r+0x68>
 80061a4:	e7ce      	b.n	8006144 <_puts_r+0x38>
 80061a6:	3e01      	subs	r6, #1
 80061a8:	e7e4      	b.n	8006174 <_puts_r+0x68>
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	1c5a      	adds	r2, r3, #1
 80061ae:	6022      	str	r2, [r4, #0]
 80061b0:	220a      	movs	r2, #10
 80061b2:	701a      	strb	r2, [r3, #0]
 80061b4:	e7ee      	b.n	8006194 <_puts_r+0x88>
	...

080061b8 <puts>:
 80061b8:	4b02      	ldr	r3, [pc, #8]	@ (80061c4 <puts+0xc>)
 80061ba:	4601      	mov	r1, r0
 80061bc:	6818      	ldr	r0, [r3, #0]
 80061be:	f7ff bfa5 	b.w	800610c <_puts_r>
 80061c2:	bf00      	nop
 80061c4:	20000190 	.word	0x20000190

080061c8 <siprintf>:
 80061c8:	b40e      	push	{r1, r2, r3}
 80061ca:	b510      	push	{r4, lr}
 80061cc:	b09d      	sub	sp, #116	@ 0x74
 80061ce:	ab1f      	add	r3, sp, #124	@ 0x7c
 80061d0:	9002      	str	r0, [sp, #8]
 80061d2:	9006      	str	r0, [sp, #24]
 80061d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061d8:	480a      	ldr	r0, [pc, #40]	@ (8006204 <siprintf+0x3c>)
 80061da:	9107      	str	r1, [sp, #28]
 80061dc:	9104      	str	r1, [sp, #16]
 80061de:	490a      	ldr	r1, [pc, #40]	@ (8006208 <siprintf+0x40>)
 80061e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80061e4:	9105      	str	r1, [sp, #20]
 80061e6:	2400      	movs	r4, #0
 80061e8:	a902      	add	r1, sp, #8
 80061ea:	6800      	ldr	r0, [r0, #0]
 80061ec:	9301      	str	r3, [sp, #4]
 80061ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 80061f0:	f002 fa04 	bl	80085fc <_svfiprintf_r>
 80061f4:	9b02      	ldr	r3, [sp, #8]
 80061f6:	701c      	strb	r4, [r3, #0]
 80061f8:	b01d      	add	sp, #116	@ 0x74
 80061fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061fe:	b003      	add	sp, #12
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	20000190 	.word	0x20000190
 8006208:	ffff0208 	.word	0xffff0208

0800620c <siscanf>:
 800620c:	b40e      	push	{r1, r2, r3}
 800620e:	b570      	push	{r4, r5, r6, lr}
 8006210:	b09d      	sub	sp, #116	@ 0x74
 8006212:	ac21      	add	r4, sp, #132	@ 0x84
 8006214:	2500      	movs	r5, #0
 8006216:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800621a:	f854 6b04 	ldr.w	r6, [r4], #4
 800621e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006222:	951b      	str	r5, [sp, #108]	@ 0x6c
 8006224:	9002      	str	r0, [sp, #8]
 8006226:	9006      	str	r0, [sp, #24]
 8006228:	f7fa f832 	bl	8000290 <strlen>
 800622c:	4b0b      	ldr	r3, [pc, #44]	@ (800625c <siscanf+0x50>)
 800622e:	9003      	str	r0, [sp, #12]
 8006230:	9007      	str	r0, [sp, #28]
 8006232:	480b      	ldr	r0, [pc, #44]	@ (8006260 <siscanf+0x54>)
 8006234:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006236:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800623a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800623e:	4632      	mov	r2, r6
 8006240:	4623      	mov	r3, r4
 8006242:	a902      	add	r1, sp, #8
 8006244:	6800      	ldr	r0, [r0, #0]
 8006246:	950f      	str	r5, [sp, #60]	@ 0x3c
 8006248:	9514      	str	r5, [sp, #80]	@ 0x50
 800624a:	9401      	str	r4, [sp, #4]
 800624c:	f002 fb2c 	bl	80088a8 <__ssvfiscanf_r>
 8006250:	b01d      	add	sp, #116	@ 0x74
 8006252:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006256:	b003      	add	sp, #12
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	08006287 	.word	0x08006287
 8006260:	20000190 	.word	0x20000190

08006264 <__sread>:
 8006264:	b510      	push	{r4, lr}
 8006266:	460c      	mov	r4, r1
 8006268:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800626c:	f000 f984 	bl	8006578 <_read_r>
 8006270:	2800      	cmp	r0, #0
 8006272:	bfab      	itete	ge
 8006274:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006276:	89a3      	ldrhlt	r3, [r4, #12]
 8006278:	181b      	addge	r3, r3, r0
 800627a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800627e:	bfac      	ite	ge
 8006280:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006282:	81a3      	strhlt	r3, [r4, #12]
 8006284:	bd10      	pop	{r4, pc}

08006286 <__seofread>:
 8006286:	2000      	movs	r0, #0
 8006288:	4770      	bx	lr

0800628a <__swrite>:
 800628a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800628e:	461f      	mov	r7, r3
 8006290:	898b      	ldrh	r3, [r1, #12]
 8006292:	05db      	lsls	r3, r3, #23
 8006294:	4605      	mov	r5, r0
 8006296:	460c      	mov	r4, r1
 8006298:	4616      	mov	r6, r2
 800629a:	d505      	bpl.n	80062a8 <__swrite+0x1e>
 800629c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062a0:	2302      	movs	r3, #2
 80062a2:	2200      	movs	r2, #0
 80062a4:	f000 f956 	bl	8006554 <_lseek_r>
 80062a8:	89a3      	ldrh	r3, [r4, #12]
 80062aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062b2:	81a3      	strh	r3, [r4, #12]
 80062b4:	4632      	mov	r2, r6
 80062b6:	463b      	mov	r3, r7
 80062b8:	4628      	mov	r0, r5
 80062ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062be:	f000 b96d 	b.w	800659c <_write_r>

080062c2 <__sseek>:
 80062c2:	b510      	push	{r4, lr}
 80062c4:	460c      	mov	r4, r1
 80062c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ca:	f000 f943 	bl	8006554 <_lseek_r>
 80062ce:	1c43      	adds	r3, r0, #1
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	bf15      	itete	ne
 80062d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062de:	81a3      	strheq	r3, [r4, #12]
 80062e0:	bf18      	it	ne
 80062e2:	81a3      	strhne	r3, [r4, #12]
 80062e4:	bd10      	pop	{r4, pc}

080062e6 <__sclose>:
 80062e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062ea:	f000 b923 	b.w	8006534 <_close_r>

080062ee <__swbuf_r>:
 80062ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f0:	460e      	mov	r6, r1
 80062f2:	4614      	mov	r4, r2
 80062f4:	4605      	mov	r5, r0
 80062f6:	b118      	cbz	r0, 8006300 <__swbuf_r+0x12>
 80062f8:	6a03      	ldr	r3, [r0, #32]
 80062fa:	b90b      	cbnz	r3, 8006300 <__swbuf_r+0x12>
 80062fc:	f7ff febe 	bl	800607c <__sinit>
 8006300:	69a3      	ldr	r3, [r4, #24]
 8006302:	60a3      	str	r3, [r4, #8]
 8006304:	89a3      	ldrh	r3, [r4, #12]
 8006306:	071a      	lsls	r2, r3, #28
 8006308:	d501      	bpl.n	800630e <__swbuf_r+0x20>
 800630a:	6923      	ldr	r3, [r4, #16]
 800630c:	b943      	cbnz	r3, 8006320 <__swbuf_r+0x32>
 800630e:	4621      	mov	r1, r4
 8006310:	4628      	mov	r0, r5
 8006312:	f000 f82b 	bl	800636c <__swsetup_r>
 8006316:	b118      	cbz	r0, 8006320 <__swbuf_r+0x32>
 8006318:	f04f 37ff 	mov.w	r7, #4294967295
 800631c:	4638      	mov	r0, r7
 800631e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	6922      	ldr	r2, [r4, #16]
 8006324:	1a98      	subs	r0, r3, r2
 8006326:	6963      	ldr	r3, [r4, #20]
 8006328:	b2f6      	uxtb	r6, r6
 800632a:	4283      	cmp	r3, r0
 800632c:	4637      	mov	r7, r6
 800632e:	dc05      	bgt.n	800633c <__swbuf_r+0x4e>
 8006330:	4621      	mov	r1, r4
 8006332:	4628      	mov	r0, r5
 8006334:	f002 ff42 	bl	80091bc <_fflush_r>
 8006338:	2800      	cmp	r0, #0
 800633a:	d1ed      	bne.n	8006318 <__swbuf_r+0x2a>
 800633c:	68a3      	ldr	r3, [r4, #8]
 800633e:	3b01      	subs	r3, #1
 8006340:	60a3      	str	r3, [r4, #8]
 8006342:	6823      	ldr	r3, [r4, #0]
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	6022      	str	r2, [r4, #0]
 8006348:	701e      	strb	r6, [r3, #0]
 800634a:	6962      	ldr	r2, [r4, #20]
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	429a      	cmp	r2, r3
 8006350:	d004      	beq.n	800635c <__swbuf_r+0x6e>
 8006352:	89a3      	ldrh	r3, [r4, #12]
 8006354:	07db      	lsls	r3, r3, #31
 8006356:	d5e1      	bpl.n	800631c <__swbuf_r+0x2e>
 8006358:	2e0a      	cmp	r6, #10
 800635a:	d1df      	bne.n	800631c <__swbuf_r+0x2e>
 800635c:	4621      	mov	r1, r4
 800635e:	4628      	mov	r0, r5
 8006360:	f002 ff2c 	bl	80091bc <_fflush_r>
 8006364:	2800      	cmp	r0, #0
 8006366:	d0d9      	beq.n	800631c <__swbuf_r+0x2e>
 8006368:	e7d6      	b.n	8006318 <__swbuf_r+0x2a>
	...

0800636c <__swsetup_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4b29      	ldr	r3, [pc, #164]	@ (8006414 <__swsetup_r+0xa8>)
 8006370:	4605      	mov	r5, r0
 8006372:	6818      	ldr	r0, [r3, #0]
 8006374:	460c      	mov	r4, r1
 8006376:	b118      	cbz	r0, 8006380 <__swsetup_r+0x14>
 8006378:	6a03      	ldr	r3, [r0, #32]
 800637a:	b90b      	cbnz	r3, 8006380 <__swsetup_r+0x14>
 800637c:	f7ff fe7e 	bl	800607c <__sinit>
 8006380:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006384:	0719      	lsls	r1, r3, #28
 8006386:	d422      	bmi.n	80063ce <__swsetup_r+0x62>
 8006388:	06da      	lsls	r2, r3, #27
 800638a:	d407      	bmi.n	800639c <__swsetup_r+0x30>
 800638c:	2209      	movs	r2, #9
 800638e:	602a      	str	r2, [r5, #0]
 8006390:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006394:	81a3      	strh	r3, [r4, #12]
 8006396:	f04f 30ff 	mov.w	r0, #4294967295
 800639a:	e033      	b.n	8006404 <__swsetup_r+0x98>
 800639c:	0758      	lsls	r0, r3, #29
 800639e:	d512      	bpl.n	80063c6 <__swsetup_r+0x5a>
 80063a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063a2:	b141      	cbz	r1, 80063b6 <__swsetup_r+0x4a>
 80063a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80063a8:	4299      	cmp	r1, r3
 80063aa:	d002      	beq.n	80063b2 <__swsetup_r+0x46>
 80063ac:	4628      	mov	r0, r5
 80063ae:	f000 ffc7 	bl	8007340 <_free_r>
 80063b2:	2300      	movs	r3, #0
 80063b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80063b6:	89a3      	ldrh	r3, [r4, #12]
 80063b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80063bc:	81a3      	strh	r3, [r4, #12]
 80063be:	2300      	movs	r3, #0
 80063c0:	6063      	str	r3, [r4, #4]
 80063c2:	6923      	ldr	r3, [r4, #16]
 80063c4:	6023      	str	r3, [r4, #0]
 80063c6:	89a3      	ldrh	r3, [r4, #12]
 80063c8:	f043 0308 	orr.w	r3, r3, #8
 80063cc:	81a3      	strh	r3, [r4, #12]
 80063ce:	6923      	ldr	r3, [r4, #16]
 80063d0:	b94b      	cbnz	r3, 80063e6 <__swsetup_r+0x7a>
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80063d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063dc:	d003      	beq.n	80063e6 <__swsetup_r+0x7a>
 80063de:	4621      	mov	r1, r4
 80063e0:	4628      	mov	r0, r5
 80063e2:	f002 ff4b 	bl	800927c <__smakebuf_r>
 80063e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ea:	f013 0201 	ands.w	r2, r3, #1
 80063ee:	d00a      	beq.n	8006406 <__swsetup_r+0x9a>
 80063f0:	2200      	movs	r2, #0
 80063f2:	60a2      	str	r2, [r4, #8]
 80063f4:	6962      	ldr	r2, [r4, #20]
 80063f6:	4252      	negs	r2, r2
 80063f8:	61a2      	str	r2, [r4, #24]
 80063fa:	6922      	ldr	r2, [r4, #16]
 80063fc:	b942      	cbnz	r2, 8006410 <__swsetup_r+0xa4>
 80063fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006402:	d1c5      	bne.n	8006390 <__swsetup_r+0x24>
 8006404:	bd38      	pop	{r3, r4, r5, pc}
 8006406:	0799      	lsls	r1, r3, #30
 8006408:	bf58      	it	pl
 800640a:	6962      	ldrpl	r2, [r4, #20]
 800640c:	60a2      	str	r2, [r4, #8]
 800640e:	e7f4      	b.n	80063fa <__swsetup_r+0x8e>
 8006410:	2000      	movs	r0, #0
 8006412:	e7f7      	b.n	8006404 <__swsetup_r+0x98>
 8006414:	20000190 	.word	0x20000190

08006418 <memset>:
 8006418:	4402      	add	r2, r0
 800641a:	4603      	mov	r3, r0
 800641c:	4293      	cmp	r3, r2
 800641e:	d100      	bne.n	8006422 <memset+0xa>
 8006420:	4770      	bx	lr
 8006422:	f803 1b01 	strb.w	r1, [r3], #1
 8006426:	e7f9      	b.n	800641c <memset+0x4>

08006428 <strncmp>:
 8006428:	b510      	push	{r4, lr}
 800642a:	b16a      	cbz	r2, 8006448 <strncmp+0x20>
 800642c:	3901      	subs	r1, #1
 800642e:	1884      	adds	r4, r0, r2
 8006430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006434:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006438:	429a      	cmp	r2, r3
 800643a:	d103      	bne.n	8006444 <strncmp+0x1c>
 800643c:	42a0      	cmp	r0, r4
 800643e:	d001      	beq.n	8006444 <strncmp+0x1c>
 8006440:	2a00      	cmp	r2, #0
 8006442:	d1f5      	bne.n	8006430 <strncmp+0x8>
 8006444:	1ad0      	subs	r0, r2, r3
 8006446:	bd10      	pop	{r4, pc}
 8006448:	4610      	mov	r0, r2
 800644a:	e7fc      	b.n	8006446 <strncmp+0x1e>

0800644c <strncpy>:
 800644c:	b510      	push	{r4, lr}
 800644e:	3901      	subs	r1, #1
 8006450:	4603      	mov	r3, r0
 8006452:	b132      	cbz	r2, 8006462 <strncpy+0x16>
 8006454:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006458:	f803 4b01 	strb.w	r4, [r3], #1
 800645c:	3a01      	subs	r2, #1
 800645e:	2c00      	cmp	r4, #0
 8006460:	d1f7      	bne.n	8006452 <strncpy+0x6>
 8006462:	441a      	add	r2, r3
 8006464:	2100      	movs	r1, #0
 8006466:	4293      	cmp	r3, r2
 8006468:	d100      	bne.n	800646c <strncpy+0x20>
 800646a:	bd10      	pop	{r4, pc}
 800646c:	f803 1b01 	strb.w	r1, [r3], #1
 8006470:	e7f9      	b.n	8006466 <strncpy+0x1a>
	...

08006474 <strtok>:
 8006474:	4b16      	ldr	r3, [pc, #88]	@ (80064d0 <strtok+0x5c>)
 8006476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800647a:	681f      	ldr	r7, [r3, #0]
 800647c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800647e:	4605      	mov	r5, r0
 8006480:	460e      	mov	r6, r1
 8006482:	b9ec      	cbnz	r4, 80064c0 <strtok+0x4c>
 8006484:	2050      	movs	r0, #80	@ 0x50
 8006486:	f001 fadf 	bl	8007a48 <malloc>
 800648a:	4602      	mov	r2, r0
 800648c:	6478      	str	r0, [r7, #68]	@ 0x44
 800648e:	b920      	cbnz	r0, 800649a <strtok+0x26>
 8006490:	4b10      	ldr	r3, [pc, #64]	@ (80064d4 <strtok+0x60>)
 8006492:	4811      	ldr	r0, [pc, #68]	@ (80064d8 <strtok+0x64>)
 8006494:	215b      	movs	r1, #91	@ 0x5b
 8006496:	f000 f8dd 	bl	8006654 <__assert_func>
 800649a:	e9c0 4400 	strd	r4, r4, [r0]
 800649e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80064a2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80064a6:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80064aa:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80064ae:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80064b2:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80064b6:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 80064ba:	6184      	str	r4, [r0, #24]
 80064bc:	7704      	strb	r4, [r0, #28]
 80064be:	6244      	str	r4, [r0, #36]	@ 0x24
 80064c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064c2:	4631      	mov	r1, r6
 80064c4:	4628      	mov	r0, r5
 80064c6:	2301      	movs	r3, #1
 80064c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064cc:	f000 b806 	b.w	80064dc <__strtok_r>
 80064d0:	20000190 	.word	0x20000190
 80064d4:	08009809 	.word	0x08009809
 80064d8:	08009820 	.word	0x08009820

080064dc <__strtok_r>:
 80064dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064de:	4604      	mov	r4, r0
 80064e0:	b908      	cbnz	r0, 80064e6 <__strtok_r+0xa>
 80064e2:	6814      	ldr	r4, [r2, #0]
 80064e4:	b144      	cbz	r4, 80064f8 <__strtok_r+0x1c>
 80064e6:	4620      	mov	r0, r4
 80064e8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80064ec:	460f      	mov	r7, r1
 80064ee:	f817 6b01 	ldrb.w	r6, [r7], #1
 80064f2:	b91e      	cbnz	r6, 80064fc <__strtok_r+0x20>
 80064f4:	b965      	cbnz	r5, 8006510 <__strtok_r+0x34>
 80064f6:	6015      	str	r5, [r2, #0]
 80064f8:	2000      	movs	r0, #0
 80064fa:	e005      	b.n	8006508 <__strtok_r+0x2c>
 80064fc:	42b5      	cmp	r5, r6
 80064fe:	d1f6      	bne.n	80064ee <__strtok_r+0x12>
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1f0      	bne.n	80064e6 <__strtok_r+0xa>
 8006504:	6014      	str	r4, [r2, #0]
 8006506:	7003      	strb	r3, [r0, #0]
 8006508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800650a:	461c      	mov	r4, r3
 800650c:	e00c      	b.n	8006528 <__strtok_r+0x4c>
 800650e:	b91d      	cbnz	r5, 8006518 <__strtok_r+0x3c>
 8006510:	4627      	mov	r7, r4
 8006512:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006516:	460e      	mov	r6, r1
 8006518:	f816 5b01 	ldrb.w	r5, [r6], #1
 800651c:	42ab      	cmp	r3, r5
 800651e:	d1f6      	bne.n	800650e <__strtok_r+0x32>
 8006520:	2b00      	cmp	r3, #0
 8006522:	d0f2      	beq.n	800650a <__strtok_r+0x2e>
 8006524:	2300      	movs	r3, #0
 8006526:	703b      	strb	r3, [r7, #0]
 8006528:	6014      	str	r4, [r2, #0]
 800652a:	e7ed      	b.n	8006508 <__strtok_r+0x2c>

0800652c <_localeconv_r>:
 800652c:	4800      	ldr	r0, [pc, #0]	@ (8006530 <_localeconv_r+0x4>)
 800652e:	4770      	bx	lr
 8006530:	20000114 	.word	0x20000114

08006534 <_close_r>:
 8006534:	b538      	push	{r3, r4, r5, lr}
 8006536:	4d06      	ldr	r5, [pc, #24]	@ (8006550 <_close_r+0x1c>)
 8006538:	2300      	movs	r3, #0
 800653a:	4604      	mov	r4, r0
 800653c:	4608      	mov	r0, r1
 800653e:	602b      	str	r3, [r5, #0]
 8006540:	f7fa ff48 	bl	80013d4 <_close>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	d102      	bne.n	800654e <_close_r+0x1a>
 8006548:	682b      	ldr	r3, [r5, #0]
 800654a:	b103      	cbz	r3, 800654e <_close_r+0x1a>
 800654c:	6023      	str	r3, [r4, #0]
 800654e:	bd38      	pop	{r3, r4, r5, pc}
 8006550:	20001334 	.word	0x20001334

08006554 <_lseek_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4d07      	ldr	r5, [pc, #28]	@ (8006574 <_lseek_r+0x20>)
 8006558:	4604      	mov	r4, r0
 800655a:	4608      	mov	r0, r1
 800655c:	4611      	mov	r1, r2
 800655e:	2200      	movs	r2, #0
 8006560:	602a      	str	r2, [r5, #0]
 8006562:	461a      	mov	r2, r3
 8006564:	f7fa ff5d 	bl	8001422 <_lseek>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d102      	bne.n	8006572 <_lseek_r+0x1e>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	b103      	cbz	r3, 8006572 <_lseek_r+0x1e>
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	20001334 	.word	0x20001334

08006578 <_read_r>:
 8006578:	b538      	push	{r3, r4, r5, lr}
 800657a:	4d07      	ldr	r5, [pc, #28]	@ (8006598 <_read_r+0x20>)
 800657c:	4604      	mov	r4, r0
 800657e:	4608      	mov	r0, r1
 8006580:	4611      	mov	r1, r2
 8006582:	2200      	movs	r2, #0
 8006584:	602a      	str	r2, [r5, #0]
 8006586:	461a      	mov	r2, r3
 8006588:	f7fa feeb 	bl	8001362 <_read>
 800658c:	1c43      	adds	r3, r0, #1
 800658e:	d102      	bne.n	8006596 <_read_r+0x1e>
 8006590:	682b      	ldr	r3, [r5, #0]
 8006592:	b103      	cbz	r3, 8006596 <_read_r+0x1e>
 8006594:	6023      	str	r3, [r4, #0]
 8006596:	bd38      	pop	{r3, r4, r5, pc}
 8006598:	20001334 	.word	0x20001334

0800659c <_write_r>:
 800659c:	b538      	push	{r3, r4, r5, lr}
 800659e:	4d07      	ldr	r5, [pc, #28]	@ (80065bc <_write_r+0x20>)
 80065a0:	4604      	mov	r4, r0
 80065a2:	4608      	mov	r0, r1
 80065a4:	4611      	mov	r1, r2
 80065a6:	2200      	movs	r2, #0
 80065a8:	602a      	str	r2, [r5, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	f7fa fef6 	bl	800139c <_write>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_write_r+0x1e>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_write_r+0x1e>
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	20001334 	.word	0x20001334

080065c0 <__errno>:
 80065c0:	4b01      	ldr	r3, [pc, #4]	@ (80065c8 <__errno+0x8>)
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000190 	.word	0x20000190

080065cc <__libc_init_array>:
 80065cc:	b570      	push	{r4, r5, r6, lr}
 80065ce:	4d0d      	ldr	r5, [pc, #52]	@ (8006604 <__libc_init_array+0x38>)
 80065d0:	4c0d      	ldr	r4, [pc, #52]	@ (8006608 <__libc_init_array+0x3c>)
 80065d2:	1b64      	subs	r4, r4, r5
 80065d4:	10a4      	asrs	r4, r4, #2
 80065d6:	2600      	movs	r6, #0
 80065d8:	42a6      	cmp	r6, r4
 80065da:	d109      	bne.n	80065f0 <__libc_init_array+0x24>
 80065dc:	4d0b      	ldr	r5, [pc, #44]	@ (800660c <__libc_init_array+0x40>)
 80065de:	4c0c      	ldr	r4, [pc, #48]	@ (8006610 <__libc_init_array+0x44>)
 80065e0:	f003 f84e 	bl	8009680 <_init>
 80065e4:	1b64      	subs	r4, r4, r5
 80065e6:	10a4      	asrs	r4, r4, #2
 80065e8:	2600      	movs	r6, #0
 80065ea:	42a6      	cmp	r6, r4
 80065ec:	d105      	bne.n	80065fa <__libc_init_array+0x2e>
 80065ee:	bd70      	pop	{r4, r5, r6, pc}
 80065f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80065f4:	4798      	blx	r3
 80065f6:	3601      	adds	r6, #1
 80065f8:	e7ee      	b.n	80065d8 <__libc_init_array+0xc>
 80065fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80065fe:	4798      	blx	r3
 8006600:	3601      	adds	r6, #1
 8006602:	e7f2      	b.n	80065ea <__libc_init_array+0x1e>
 8006604:	08009c78 	.word	0x08009c78
 8006608:	08009c78 	.word	0x08009c78
 800660c:	08009c78 	.word	0x08009c78
 8006610:	08009c7c 	.word	0x08009c7c

08006614 <__retarget_lock_init_recursive>:
 8006614:	4770      	bx	lr

08006616 <__retarget_lock_acquire_recursive>:
 8006616:	4770      	bx	lr

08006618 <__retarget_lock_release_recursive>:
 8006618:	4770      	bx	lr

0800661a <memcpy>:
 800661a:	440a      	add	r2, r1
 800661c:	4291      	cmp	r1, r2
 800661e:	f100 33ff 	add.w	r3, r0, #4294967295
 8006622:	d100      	bne.n	8006626 <memcpy+0xc>
 8006624:	4770      	bx	lr
 8006626:	b510      	push	{r4, lr}
 8006628:	f811 4b01 	ldrb.w	r4, [r1], #1
 800662c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006630:	4291      	cmp	r1, r2
 8006632:	d1f9      	bne.n	8006628 <memcpy+0xe>
 8006634:	bd10      	pop	{r4, pc}
	...

08006638 <nan>:
 8006638:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006640 <nan+0x8>
 800663c:	4770      	bx	lr
 800663e:	bf00      	nop
 8006640:	00000000 	.word	0x00000000
 8006644:	7ff80000 	.word	0x7ff80000

08006648 <nanf>:
 8006648:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006650 <nanf+0x8>
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	7fc00000 	.word	0x7fc00000

08006654 <__assert_func>:
 8006654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006656:	4614      	mov	r4, r2
 8006658:	461a      	mov	r2, r3
 800665a:	4b09      	ldr	r3, [pc, #36]	@ (8006680 <__assert_func+0x2c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4605      	mov	r5, r0
 8006660:	68d8      	ldr	r0, [r3, #12]
 8006662:	b14c      	cbz	r4, 8006678 <__assert_func+0x24>
 8006664:	4b07      	ldr	r3, [pc, #28]	@ (8006684 <__assert_func+0x30>)
 8006666:	9100      	str	r1, [sp, #0]
 8006668:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800666c:	4906      	ldr	r1, [pc, #24]	@ (8006688 <__assert_func+0x34>)
 800666e:	462b      	mov	r3, r5
 8006670:	f002 fdcc 	bl	800920c <fiprintf>
 8006674:	f002 fefe 	bl	8009474 <abort>
 8006678:	4b04      	ldr	r3, [pc, #16]	@ (800668c <__assert_func+0x38>)
 800667a:	461c      	mov	r4, r3
 800667c:	e7f3      	b.n	8006666 <__assert_func+0x12>
 800667e:	bf00      	nop
 8006680:	20000190 	.word	0x20000190
 8006684:	08009882 	.word	0x08009882
 8006688:	0800988f 	.word	0x0800988f
 800668c:	080098bd 	.word	0x080098bd

08006690 <quorem>:
 8006690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006694:	6903      	ldr	r3, [r0, #16]
 8006696:	690c      	ldr	r4, [r1, #16]
 8006698:	42a3      	cmp	r3, r4
 800669a:	4607      	mov	r7, r0
 800669c:	db7e      	blt.n	800679c <quorem+0x10c>
 800669e:	3c01      	subs	r4, #1
 80066a0:	f101 0814 	add.w	r8, r1, #20
 80066a4:	00a3      	lsls	r3, r4, #2
 80066a6:	f100 0514 	add.w	r5, r0, #20
 80066aa:	9300      	str	r3, [sp, #0]
 80066ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066ba:	3301      	adds	r3, #1
 80066bc:	429a      	cmp	r2, r3
 80066be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80066c6:	d32e      	bcc.n	8006726 <quorem+0x96>
 80066c8:	f04f 0a00 	mov.w	sl, #0
 80066cc:	46c4      	mov	ip, r8
 80066ce:	46ae      	mov	lr, r5
 80066d0:	46d3      	mov	fp, sl
 80066d2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80066d6:	b298      	uxth	r0, r3
 80066d8:	fb06 a000 	mla	r0, r6, r0, sl
 80066dc:	0c02      	lsrs	r2, r0, #16
 80066de:	0c1b      	lsrs	r3, r3, #16
 80066e0:	fb06 2303 	mla	r3, r6, r3, r2
 80066e4:	f8de 2000 	ldr.w	r2, [lr]
 80066e8:	b280      	uxth	r0, r0
 80066ea:	b292      	uxth	r2, r2
 80066ec:	1a12      	subs	r2, r2, r0
 80066ee:	445a      	add	r2, fp
 80066f0:	f8de 0000 	ldr.w	r0, [lr]
 80066f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80066fe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006702:	b292      	uxth	r2, r2
 8006704:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006708:	45e1      	cmp	r9, ip
 800670a:	f84e 2b04 	str.w	r2, [lr], #4
 800670e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006712:	d2de      	bcs.n	80066d2 <quorem+0x42>
 8006714:	9b00      	ldr	r3, [sp, #0]
 8006716:	58eb      	ldr	r3, [r5, r3]
 8006718:	b92b      	cbnz	r3, 8006726 <quorem+0x96>
 800671a:	9b01      	ldr	r3, [sp, #4]
 800671c:	3b04      	subs	r3, #4
 800671e:	429d      	cmp	r5, r3
 8006720:	461a      	mov	r2, r3
 8006722:	d32f      	bcc.n	8006784 <quorem+0xf4>
 8006724:	613c      	str	r4, [r7, #16]
 8006726:	4638      	mov	r0, r7
 8006728:	f001 fd12 	bl	8008150 <__mcmp>
 800672c:	2800      	cmp	r0, #0
 800672e:	db25      	blt.n	800677c <quorem+0xec>
 8006730:	4629      	mov	r1, r5
 8006732:	2000      	movs	r0, #0
 8006734:	f858 2b04 	ldr.w	r2, [r8], #4
 8006738:	f8d1 c000 	ldr.w	ip, [r1]
 800673c:	fa1f fe82 	uxth.w	lr, r2
 8006740:	fa1f f38c 	uxth.w	r3, ip
 8006744:	eba3 030e 	sub.w	r3, r3, lr
 8006748:	4403      	add	r3, r0
 800674a:	0c12      	lsrs	r2, r2, #16
 800674c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006750:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006754:	b29b      	uxth	r3, r3
 8006756:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800675a:	45c1      	cmp	r9, r8
 800675c:	f841 3b04 	str.w	r3, [r1], #4
 8006760:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006764:	d2e6      	bcs.n	8006734 <quorem+0xa4>
 8006766:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800676a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800676e:	b922      	cbnz	r2, 800677a <quorem+0xea>
 8006770:	3b04      	subs	r3, #4
 8006772:	429d      	cmp	r5, r3
 8006774:	461a      	mov	r2, r3
 8006776:	d30b      	bcc.n	8006790 <quorem+0x100>
 8006778:	613c      	str	r4, [r7, #16]
 800677a:	3601      	adds	r6, #1
 800677c:	4630      	mov	r0, r6
 800677e:	b003      	add	sp, #12
 8006780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006784:	6812      	ldr	r2, [r2, #0]
 8006786:	3b04      	subs	r3, #4
 8006788:	2a00      	cmp	r2, #0
 800678a:	d1cb      	bne.n	8006724 <quorem+0x94>
 800678c:	3c01      	subs	r4, #1
 800678e:	e7c6      	b.n	800671e <quorem+0x8e>
 8006790:	6812      	ldr	r2, [r2, #0]
 8006792:	3b04      	subs	r3, #4
 8006794:	2a00      	cmp	r2, #0
 8006796:	d1ef      	bne.n	8006778 <quorem+0xe8>
 8006798:	3c01      	subs	r4, #1
 800679a:	e7ea      	b.n	8006772 <quorem+0xe2>
 800679c:	2000      	movs	r0, #0
 800679e:	e7ee      	b.n	800677e <quorem+0xee>

080067a0 <_dtoa_r>:
 80067a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a4:	69c7      	ldr	r7, [r0, #28]
 80067a6:	b097      	sub	sp, #92	@ 0x5c
 80067a8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80067ac:	ec55 4b10 	vmov	r4, r5, d0
 80067b0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80067b2:	9107      	str	r1, [sp, #28]
 80067b4:	4681      	mov	r9, r0
 80067b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80067b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80067ba:	b97f      	cbnz	r7, 80067dc <_dtoa_r+0x3c>
 80067bc:	2010      	movs	r0, #16
 80067be:	f001 f943 	bl	8007a48 <malloc>
 80067c2:	4602      	mov	r2, r0
 80067c4:	f8c9 001c 	str.w	r0, [r9, #28]
 80067c8:	b920      	cbnz	r0, 80067d4 <_dtoa_r+0x34>
 80067ca:	4ba9      	ldr	r3, [pc, #676]	@ (8006a70 <_dtoa_r+0x2d0>)
 80067cc:	21ef      	movs	r1, #239	@ 0xef
 80067ce:	48a9      	ldr	r0, [pc, #676]	@ (8006a74 <_dtoa_r+0x2d4>)
 80067d0:	f7ff ff40 	bl	8006654 <__assert_func>
 80067d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80067d8:	6007      	str	r7, [r0, #0]
 80067da:	60c7      	str	r7, [r0, #12]
 80067dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80067e0:	6819      	ldr	r1, [r3, #0]
 80067e2:	b159      	cbz	r1, 80067fc <_dtoa_r+0x5c>
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	604a      	str	r2, [r1, #4]
 80067e8:	2301      	movs	r3, #1
 80067ea:	4093      	lsls	r3, r2
 80067ec:	608b      	str	r3, [r1, #8]
 80067ee:	4648      	mov	r0, r9
 80067f0:	f001 fa32 	bl	8007c58 <_Bfree>
 80067f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80067f8:	2200      	movs	r2, #0
 80067fa:	601a      	str	r2, [r3, #0]
 80067fc:	1e2b      	subs	r3, r5, #0
 80067fe:	bfb9      	ittee	lt
 8006800:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006804:	9305      	strlt	r3, [sp, #20]
 8006806:	2300      	movge	r3, #0
 8006808:	6033      	strge	r3, [r6, #0]
 800680a:	9f05      	ldr	r7, [sp, #20]
 800680c:	4b9a      	ldr	r3, [pc, #616]	@ (8006a78 <_dtoa_r+0x2d8>)
 800680e:	bfbc      	itt	lt
 8006810:	2201      	movlt	r2, #1
 8006812:	6032      	strlt	r2, [r6, #0]
 8006814:	43bb      	bics	r3, r7
 8006816:	d112      	bne.n	800683e <_dtoa_r+0x9e>
 8006818:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800681a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006824:	4323      	orrs	r3, r4
 8006826:	f000 855a 	beq.w	80072de <_dtoa_r+0xb3e>
 800682a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800682c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006a8c <_dtoa_r+0x2ec>
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 855c 	beq.w	80072ee <_dtoa_r+0xb4e>
 8006836:	f10a 0303 	add.w	r3, sl, #3
 800683a:	f000 bd56 	b.w	80072ea <_dtoa_r+0xb4a>
 800683e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006842:	2200      	movs	r2, #0
 8006844:	ec51 0b17 	vmov	r0, r1, d7
 8006848:	2300      	movs	r3, #0
 800684a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800684e:	f7fa f94b 	bl	8000ae8 <__aeabi_dcmpeq>
 8006852:	4680      	mov	r8, r0
 8006854:	b158      	cbz	r0, 800686e <_dtoa_r+0xce>
 8006856:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006858:	2301      	movs	r3, #1
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800685e:	b113      	cbz	r3, 8006866 <_dtoa_r+0xc6>
 8006860:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006862:	4b86      	ldr	r3, [pc, #536]	@ (8006a7c <_dtoa_r+0x2dc>)
 8006864:	6013      	str	r3, [r2, #0]
 8006866:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006a90 <_dtoa_r+0x2f0>
 800686a:	f000 bd40 	b.w	80072ee <_dtoa_r+0xb4e>
 800686e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006872:	aa14      	add	r2, sp, #80	@ 0x50
 8006874:	a915      	add	r1, sp, #84	@ 0x54
 8006876:	4648      	mov	r0, r9
 8006878:	f001 fd8a 	bl	8008390 <__d2b>
 800687c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006880:	9002      	str	r0, [sp, #8]
 8006882:	2e00      	cmp	r6, #0
 8006884:	d078      	beq.n	8006978 <_dtoa_r+0x1d8>
 8006886:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006888:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800688c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006890:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006894:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006898:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800689c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80068a0:	4619      	mov	r1, r3
 80068a2:	2200      	movs	r2, #0
 80068a4:	4b76      	ldr	r3, [pc, #472]	@ (8006a80 <_dtoa_r+0x2e0>)
 80068a6:	f7f9 fcff 	bl	80002a8 <__aeabi_dsub>
 80068aa:	a36b      	add	r3, pc, #428	@ (adr r3, 8006a58 <_dtoa_r+0x2b8>)
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	f7f9 feb2 	bl	8000618 <__aeabi_dmul>
 80068b4:	a36a      	add	r3, pc, #424	@ (adr r3, 8006a60 <_dtoa_r+0x2c0>)
 80068b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ba:	f7f9 fcf7 	bl	80002ac <__adddf3>
 80068be:	4604      	mov	r4, r0
 80068c0:	4630      	mov	r0, r6
 80068c2:	460d      	mov	r5, r1
 80068c4:	f7f9 fe3e 	bl	8000544 <__aeabi_i2d>
 80068c8:	a367      	add	r3, pc, #412	@ (adr r3, 8006a68 <_dtoa_r+0x2c8>)
 80068ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ce:	f7f9 fea3 	bl	8000618 <__aeabi_dmul>
 80068d2:	4602      	mov	r2, r0
 80068d4:	460b      	mov	r3, r1
 80068d6:	4620      	mov	r0, r4
 80068d8:	4629      	mov	r1, r5
 80068da:	f7f9 fce7 	bl	80002ac <__adddf3>
 80068de:	4604      	mov	r4, r0
 80068e0:	460d      	mov	r5, r1
 80068e2:	f7fa f949 	bl	8000b78 <__aeabi_d2iz>
 80068e6:	2200      	movs	r2, #0
 80068e8:	4607      	mov	r7, r0
 80068ea:	2300      	movs	r3, #0
 80068ec:	4620      	mov	r0, r4
 80068ee:	4629      	mov	r1, r5
 80068f0:	f7fa f904 	bl	8000afc <__aeabi_dcmplt>
 80068f4:	b140      	cbz	r0, 8006908 <_dtoa_r+0x168>
 80068f6:	4638      	mov	r0, r7
 80068f8:	f7f9 fe24 	bl	8000544 <__aeabi_i2d>
 80068fc:	4622      	mov	r2, r4
 80068fe:	462b      	mov	r3, r5
 8006900:	f7fa f8f2 	bl	8000ae8 <__aeabi_dcmpeq>
 8006904:	b900      	cbnz	r0, 8006908 <_dtoa_r+0x168>
 8006906:	3f01      	subs	r7, #1
 8006908:	2f16      	cmp	r7, #22
 800690a:	d852      	bhi.n	80069b2 <_dtoa_r+0x212>
 800690c:	4b5d      	ldr	r3, [pc, #372]	@ (8006a84 <_dtoa_r+0x2e4>)
 800690e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006916:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800691a:	f7fa f8ef 	bl	8000afc <__aeabi_dcmplt>
 800691e:	2800      	cmp	r0, #0
 8006920:	d049      	beq.n	80069b6 <_dtoa_r+0x216>
 8006922:	3f01      	subs	r7, #1
 8006924:	2300      	movs	r3, #0
 8006926:	9310      	str	r3, [sp, #64]	@ 0x40
 8006928:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800692a:	1b9b      	subs	r3, r3, r6
 800692c:	1e5a      	subs	r2, r3, #1
 800692e:	bf45      	ittet	mi
 8006930:	f1c3 0301 	rsbmi	r3, r3, #1
 8006934:	9300      	strmi	r3, [sp, #0]
 8006936:	2300      	movpl	r3, #0
 8006938:	2300      	movmi	r3, #0
 800693a:	9206      	str	r2, [sp, #24]
 800693c:	bf54      	ite	pl
 800693e:	9300      	strpl	r3, [sp, #0]
 8006940:	9306      	strmi	r3, [sp, #24]
 8006942:	2f00      	cmp	r7, #0
 8006944:	db39      	blt.n	80069ba <_dtoa_r+0x21a>
 8006946:	9b06      	ldr	r3, [sp, #24]
 8006948:	970d      	str	r7, [sp, #52]	@ 0x34
 800694a:	443b      	add	r3, r7
 800694c:	9306      	str	r3, [sp, #24]
 800694e:	2300      	movs	r3, #0
 8006950:	9308      	str	r3, [sp, #32]
 8006952:	9b07      	ldr	r3, [sp, #28]
 8006954:	2b09      	cmp	r3, #9
 8006956:	d863      	bhi.n	8006a20 <_dtoa_r+0x280>
 8006958:	2b05      	cmp	r3, #5
 800695a:	bfc4      	itt	gt
 800695c:	3b04      	subgt	r3, #4
 800695e:	9307      	strgt	r3, [sp, #28]
 8006960:	9b07      	ldr	r3, [sp, #28]
 8006962:	f1a3 0302 	sub.w	r3, r3, #2
 8006966:	bfcc      	ite	gt
 8006968:	2400      	movgt	r4, #0
 800696a:	2401      	movle	r4, #1
 800696c:	2b03      	cmp	r3, #3
 800696e:	d863      	bhi.n	8006a38 <_dtoa_r+0x298>
 8006970:	e8df f003 	tbb	[pc, r3]
 8006974:	2b375452 	.word	0x2b375452
 8006978:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800697c:	441e      	add	r6, r3
 800697e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006982:	2b20      	cmp	r3, #32
 8006984:	bfc1      	itttt	gt
 8006986:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800698a:	409f      	lslgt	r7, r3
 800698c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006990:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006994:	bfd6      	itet	le
 8006996:	f1c3 0320 	rsble	r3, r3, #32
 800699a:	ea47 0003 	orrgt.w	r0, r7, r3
 800699e:	fa04 f003 	lslle.w	r0, r4, r3
 80069a2:	f7f9 fdbf 	bl	8000524 <__aeabi_ui2d>
 80069a6:	2201      	movs	r2, #1
 80069a8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80069ac:	3e01      	subs	r6, #1
 80069ae:	9212      	str	r2, [sp, #72]	@ 0x48
 80069b0:	e776      	b.n	80068a0 <_dtoa_r+0x100>
 80069b2:	2301      	movs	r3, #1
 80069b4:	e7b7      	b.n	8006926 <_dtoa_r+0x186>
 80069b6:	9010      	str	r0, [sp, #64]	@ 0x40
 80069b8:	e7b6      	b.n	8006928 <_dtoa_r+0x188>
 80069ba:	9b00      	ldr	r3, [sp, #0]
 80069bc:	1bdb      	subs	r3, r3, r7
 80069be:	9300      	str	r3, [sp, #0]
 80069c0:	427b      	negs	r3, r7
 80069c2:	9308      	str	r3, [sp, #32]
 80069c4:	2300      	movs	r3, #0
 80069c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80069c8:	e7c3      	b.n	8006952 <_dtoa_r+0x1b2>
 80069ca:	2301      	movs	r3, #1
 80069cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80069ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069d0:	eb07 0b03 	add.w	fp, r7, r3
 80069d4:	f10b 0301 	add.w	r3, fp, #1
 80069d8:	2b01      	cmp	r3, #1
 80069da:	9303      	str	r3, [sp, #12]
 80069dc:	bfb8      	it	lt
 80069de:	2301      	movlt	r3, #1
 80069e0:	e006      	b.n	80069f0 <_dtoa_r+0x250>
 80069e2:	2301      	movs	r3, #1
 80069e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80069e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	dd28      	ble.n	8006a3e <_dtoa_r+0x29e>
 80069ec:	469b      	mov	fp, r3
 80069ee:	9303      	str	r3, [sp, #12]
 80069f0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80069f4:	2100      	movs	r1, #0
 80069f6:	2204      	movs	r2, #4
 80069f8:	f102 0514 	add.w	r5, r2, #20
 80069fc:	429d      	cmp	r5, r3
 80069fe:	d926      	bls.n	8006a4e <_dtoa_r+0x2ae>
 8006a00:	6041      	str	r1, [r0, #4]
 8006a02:	4648      	mov	r0, r9
 8006a04:	f001 f8e8 	bl	8007bd8 <_Balloc>
 8006a08:	4682      	mov	sl, r0
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	d142      	bne.n	8006a94 <_dtoa_r+0x2f4>
 8006a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8006a88 <_dtoa_r+0x2e8>)
 8006a10:	4602      	mov	r2, r0
 8006a12:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a16:	e6da      	b.n	80067ce <_dtoa_r+0x2e>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	e7e3      	b.n	80069e4 <_dtoa_r+0x244>
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	e7d5      	b.n	80069cc <_dtoa_r+0x22c>
 8006a20:	2401      	movs	r4, #1
 8006a22:	2300      	movs	r3, #0
 8006a24:	9307      	str	r3, [sp, #28]
 8006a26:	9409      	str	r4, [sp, #36]	@ 0x24
 8006a28:	f04f 3bff 	mov.w	fp, #4294967295
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006a32:	2312      	movs	r3, #18
 8006a34:	920c      	str	r2, [sp, #48]	@ 0x30
 8006a36:	e7db      	b.n	80069f0 <_dtoa_r+0x250>
 8006a38:	2301      	movs	r3, #1
 8006a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a3c:	e7f4      	b.n	8006a28 <_dtoa_r+0x288>
 8006a3e:	f04f 0b01 	mov.w	fp, #1
 8006a42:	f8cd b00c 	str.w	fp, [sp, #12]
 8006a46:	465b      	mov	r3, fp
 8006a48:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006a4c:	e7d0      	b.n	80069f0 <_dtoa_r+0x250>
 8006a4e:	3101      	adds	r1, #1
 8006a50:	0052      	lsls	r2, r2, #1
 8006a52:	e7d1      	b.n	80069f8 <_dtoa_r+0x258>
 8006a54:	f3af 8000 	nop.w
 8006a58:	636f4361 	.word	0x636f4361
 8006a5c:	3fd287a7 	.word	0x3fd287a7
 8006a60:	8b60c8b3 	.word	0x8b60c8b3
 8006a64:	3fc68a28 	.word	0x3fc68a28
 8006a68:	509f79fb 	.word	0x509f79fb
 8006a6c:	3fd34413 	.word	0x3fd34413
 8006a70:	08009809 	.word	0x08009809
 8006a74:	080098cb 	.word	0x080098cb
 8006a78:	7ff00000 	.word	0x7ff00000
 8006a7c:	08009a15 	.word	0x08009a15
 8006a80:	3ff80000 	.word	0x3ff80000
 8006a84:	08009ba8 	.word	0x08009ba8
 8006a88:	08009923 	.word	0x08009923
 8006a8c:	080098c7 	.word	0x080098c7
 8006a90:	08009a14 	.word	0x08009a14
 8006a94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006a98:	6018      	str	r0, [r3, #0]
 8006a9a:	9b03      	ldr	r3, [sp, #12]
 8006a9c:	2b0e      	cmp	r3, #14
 8006a9e:	f200 80a1 	bhi.w	8006be4 <_dtoa_r+0x444>
 8006aa2:	2c00      	cmp	r4, #0
 8006aa4:	f000 809e 	beq.w	8006be4 <_dtoa_r+0x444>
 8006aa8:	2f00      	cmp	r7, #0
 8006aaa:	dd33      	ble.n	8006b14 <_dtoa_r+0x374>
 8006aac:	4b9c      	ldr	r3, [pc, #624]	@ (8006d20 <_dtoa_r+0x580>)
 8006aae:	f007 020f 	and.w	r2, r7, #15
 8006ab2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ab6:	ed93 7b00 	vldr	d7, [r3]
 8006aba:	05f8      	lsls	r0, r7, #23
 8006abc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006ac0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006ac4:	d516      	bpl.n	8006af4 <_dtoa_r+0x354>
 8006ac6:	4b97      	ldr	r3, [pc, #604]	@ (8006d24 <_dtoa_r+0x584>)
 8006ac8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006acc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ad0:	f7f9 fecc 	bl	800086c <__aeabi_ddiv>
 8006ad4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ad8:	f004 040f 	and.w	r4, r4, #15
 8006adc:	2603      	movs	r6, #3
 8006ade:	4d91      	ldr	r5, [pc, #580]	@ (8006d24 <_dtoa_r+0x584>)
 8006ae0:	b954      	cbnz	r4, 8006af8 <_dtoa_r+0x358>
 8006ae2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006ae6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006aea:	f7f9 febf 	bl	800086c <__aeabi_ddiv>
 8006aee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006af2:	e028      	b.n	8006b46 <_dtoa_r+0x3a6>
 8006af4:	2602      	movs	r6, #2
 8006af6:	e7f2      	b.n	8006ade <_dtoa_r+0x33e>
 8006af8:	07e1      	lsls	r1, r4, #31
 8006afa:	d508      	bpl.n	8006b0e <_dtoa_r+0x36e>
 8006afc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006b00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b04:	f7f9 fd88 	bl	8000618 <__aeabi_dmul>
 8006b08:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006b0c:	3601      	adds	r6, #1
 8006b0e:	1064      	asrs	r4, r4, #1
 8006b10:	3508      	adds	r5, #8
 8006b12:	e7e5      	b.n	8006ae0 <_dtoa_r+0x340>
 8006b14:	f000 80af 	beq.w	8006c76 <_dtoa_r+0x4d6>
 8006b18:	427c      	negs	r4, r7
 8006b1a:	4b81      	ldr	r3, [pc, #516]	@ (8006d20 <_dtoa_r+0x580>)
 8006b1c:	4d81      	ldr	r5, [pc, #516]	@ (8006d24 <_dtoa_r+0x584>)
 8006b1e:	f004 020f 	and.w	r2, r4, #15
 8006b22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006b2e:	f7f9 fd73 	bl	8000618 <__aeabi_dmul>
 8006b32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b36:	1124      	asrs	r4, r4, #4
 8006b38:	2300      	movs	r3, #0
 8006b3a:	2602      	movs	r6, #2
 8006b3c:	2c00      	cmp	r4, #0
 8006b3e:	f040 808f 	bne.w	8006c60 <_dtoa_r+0x4c0>
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1d3      	bne.n	8006aee <_dtoa_r+0x34e>
 8006b46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006b48:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	f000 8094 	beq.w	8006c7a <_dtoa_r+0x4da>
 8006b52:	4b75      	ldr	r3, [pc, #468]	@ (8006d28 <_dtoa_r+0x588>)
 8006b54:	2200      	movs	r2, #0
 8006b56:	4620      	mov	r0, r4
 8006b58:	4629      	mov	r1, r5
 8006b5a:	f7f9 ffcf 	bl	8000afc <__aeabi_dcmplt>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	f000 808b 	beq.w	8006c7a <_dtoa_r+0x4da>
 8006b64:	9b03      	ldr	r3, [sp, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f000 8087 	beq.w	8006c7a <_dtoa_r+0x4da>
 8006b6c:	f1bb 0f00 	cmp.w	fp, #0
 8006b70:	dd34      	ble.n	8006bdc <_dtoa_r+0x43c>
 8006b72:	4620      	mov	r0, r4
 8006b74:	4b6d      	ldr	r3, [pc, #436]	@ (8006d2c <_dtoa_r+0x58c>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	4629      	mov	r1, r5
 8006b7a:	f7f9 fd4d 	bl	8000618 <__aeabi_dmul>
 8006b7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b82:	f107 38ff 	add.w	r8, r7, #4294967295
 8006b86:	3601      	adds	r6, #1
 8006b88:	465c      	mov	r4, fp
 8006b8a:	4630      	mov	r0, r6
 8006b8c:	f7f9 fcda 	bl	8000544 <__aeabi_i2d>
 8006b90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b94:	f7f9 fd40 	bl	8000618 <__aeabi_dmul>
 8006b98:	4b65      	ldr	r3, [pc, #404]	@ (8006d30 <_dtoa_r+0x590>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f7f9 fb86 	bl	80002ac <__adddf3>
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006ba6:	2c00      	cmp	r4, #0
 8006ba8:	d16a      	bne.n	8006c80 <_dtoa_r+0x4e0>
 8006baa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bae:	4b61      	ldr	r3, [pc, #388]	@ (8006d34 <_dtoa_r+0x594>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f7f9 fb79 	bl	80002a8 <__aeabi_dsub>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006bbe:	462a      	mov	r2, r5
 8006bc0:	4633      	mov	r3, r6
 8006bc2:	f7f9 ffb9 	bl	8000b38 <__aeabi_dcmpgt>
 8006bc6:	2800      	cmp	r0, #0
 8006bc8:	f040 8298 	bne.w	80070fc <_dtoa_r+0x95c>
 8006bcc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006bd0:	462a      	mov	r2, r5
 8006bd2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006bd6:	f7f9 ff91 	bl	8000afc <__aeabi_dcmplt>
 8006bda:	bb38      	cbnz	r0, 8006c2c <_dtoa_r+0x48c>
 8006bdc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006be0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006be4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	f2c0 8157 	blt.w	8006e9a <_dtoa_r+0x6fa>
 8006bec:	2f0e      	cmp	r7, #14
 8006bee:	f300 8154 	bgt.w	8006e9a <_dtoa_r+0x6fa>
 8006bf2:	4b4b      	ldr	r3, [pc, #300]	@ (8006d20 <_dtoa_r+0x580>)
 8006bf4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006bf8:	ed93 7b00 	vldr	d7, [r3]
 8006bfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	ed8d 7b00 	vstr	d7, [sp]
 8006c04:	f280 80e5 	bge.w	8006dd2 <_dtoa_r+0x632>
 8006c08:	9b03      	ldr	r3, [sp, #12]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	f300 80e1 	bgt.w	8006dd2 <_dtoa_r+0x632>
 8006c10:	d10c      	bne.n	8006c2c <_dtoa_r+0x48c>
 8006c12:	4b48      	ldr	r3, [pc, #288]	@ (8006d34 <_dtoa_r+0x594>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	ec51 0b17 	vmov	r0, r1, d7
 8006c1a:	f7f9 fcfd 	bl	8000618 <__aeabi_dmul>
 8006c1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c22:	f7f9 ff7f 	bl	8000b24 <__aeabi_dcmpge>
 8006c26:	2800      	cmp	r0, #0
 8006c28:	f000 8266 	beq.w	80070f8 <_dtoa_r+0x958>
 8006c2c:	2400      	movs	r4, #0
 8006c2e:	4625      	mov	r5, r4
 8006c30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006c32:	4656      	mov	r6, sl
 8006c34:	ea6f 0803 	mvn.w	r8, r3
 8006c38:	2700      	movs	r7, #0
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	4648      	mov	r0, r9
 8006c3e:	f001 f80b 	bl	8007c58 <_Bfree>
 8006c42:	2d00      	cmp	r5, #0
 8006c44:	f000 80bd 	beq.w	8006dc2 <_dtoa_r+0x622>
 8006c48:	b12f      	cbz	r7, 8006c56 <_dtoa_r+0x4b6>
 8006c4a:	42af      	cmp	r7, r5
 8006c4c:	d003      	beq.n	8006c56 <_dtoa_r+0x4b6>
 8006c4e:	4639      	mov	r1, r7
 8006c50:	4648      	mov	r0, r9
 8006c52:	f001 f801 	bl	8007c58 <_Bfree>
 8006c56:	4629      	mov	r1, r5
 8006c58:	4648      	mov	r0, r9
 8006c5a:	f000 fffd 	bl	8007c58 <_Bfree>
 8006c5e:	e0b0      	b.n	8006dc2 <_dtoa_r+0x622>
 8006c60:	07e2      	lsls	r2, r4, #31
 8006c62:	d505      	bpl.n	8006c70 <_dtoa_r+0x4d0>
 8006c64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c68:	f7f9 fcd6 	bl	8000618 <__aeabi_dmul>
 8006c6c:	3601      	adds	r6, #1
 8006c6e:	2301      	movs	r3, #1
 8006c70:	1064      	asrs	r4, r4, #1
 8006c72:	3508      	adds	r5, #8
 8006c74:	e762      	b.n	8006b3c <_dtoa_r+0x39c>
 8006c76:	2602      	movs	r6, #2
 8006c78:	e765      	b.n	8006b46 <_dtoa_r+0x3a6>
 8006c7a:	9c03      	ldr	r4, [sp, #12]
 8006c7c:	46b8      	mov	r8, r7
 8006c7e:	e784      	b.n	8006b8a <_dtoa_r+0x3ea>
 8006c80:	4b27      	ldr	r3, [pc, #156]	@ (8006d20 <_dtoa_r+0x580>)
 8006c82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006c84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006c88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c8c:	4454      	add	r4, sl
 8006c8e:	2900      	cmp	r1, #0
 8006c90:	d054      	beq.n	8006d3c <_dtoa_r+0x59c>
 8006c92:	4929      	ldr	r1, [pc, #164]	@ (8006d38 <_dtoa_r+0x598>)
 8006c94:	2000      	movs	r0, #0
 8006c96:	f7f9 fde9 	bl	800086c <__aeabi_ddiv>
 8006c9a:	4633      	mov	r3, r6
 8006c9c:	462a      	mov	r2, r5
 8006c9e:	f7f9 fb03 	bl	80002a8 <__aeabi_dsub>
 8006ca2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ca6:	4656      	mov	r6, sl
 8006ca8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cac:	f7f9 ff64 	bl	8000b78 <__aeabi_d2iz>
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	f7f9 fc47 	bl	8000544 <__aeabi_i2d>
 8006cb6:	4602      	mov	r2, r0
 8006cb8:	460b      	mov	r3, r1
 8006cba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006cbe:	f7f9 faf3 	bl	80002a8 <__aeabi_dsub>
 8006cc2:	3530      	adds	r5, #48	@ 0x30
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	460b      	mov	r3, r1
 8006cc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006ccc:	f806 5b01 	strb.w	r5, [r6], #1
 8006cd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006cd4:	f7f9 ff12 	bl	8000afc <__aeabi_dcmplt>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d172      	bne.n	8006dc2 <_dtoa_r+0x622>
 8006cdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ce0:	4911      	ldr	r1, [pc, #68]	@ (8006d28 <_dtoa_r+0x588>)
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	f7f9 fae0 	bl	80002a8 <__aeabi_dsub>
 8006ce8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006cec:	f7f9 ff06 	bl	8000afc <__aeabi_dcmplt>
 8006cf0:	2800      	cmp	r0, #0
 8006cf2:	f040 80b4 	bne.w	8006e5e <_dtoa_r+0x6be>
 8006cf6:	42a6      	cmp	r6, r4
 8006cf8:	f43f af70 	beq.w	8006bdc <_dtoa_r+0x43c>
 8006cfc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006d00:	4b0a      	ldr	r3, [pc, #40]	@ (8006d2c <_dtoa_r+0x58c>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	f7f9 fc88 	bl	8000618 <__aeabi_dmul>
 8006d08:	4b08      	ldr	r3, [pc, #32]	@ (8006d2c <_dtoa_r+0x58c>)
 8006d0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d0e:	2200      	movs	r2, #0
 8006d10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d14:	f7f9 fc80 	bl	8000618 <__aeabi_dmul>
 8006d18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006d1c:	e7c4      	b.n	8006ca8 <_dtoa_r+0x508>
 8006d1e:	bf00      	nop
 8006d20:	08009ba8 	.word	0x08009ba8
 8006d24:	08009b80 	.word	0x08009b80
 8006d28:	3ff00000 	.word	0x3ff00000
 8006d2c:	40240000 	.word	0x40240000
 8006d30:	401c0000 	.word	0x401c0000
 8006d34:	40140000 	.word	0x40140000
 8006d38:	3fe00000 	.word	0x3fe00000
 8006d3c:	4631      	mov	r1, r6
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f7f9 fc6a 	bl	8000618 <__aeabi_dmul>
 8006d44:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006d48:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006d4a:	4656      	mov	r6, sl
 8006d4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d50:	f7f9 ff12 	bl	8000b78 <__aeabi_d2iz>
 8006d54:	4605      	mov	r5, r0
 8006d56:	f7f9 fbf5 	bl	8000544 <__aeabi_i2d>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d62:	f7f9 faa1 	bl	80002a8 <__aeabi_dsub>
 8006d66:	3530      	adds	r5, #48	@ 0x30
 8006d68:	f806 5b01 	strb.w	r5, [r6], #1
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	460b      	mov	r3, r1
 8006d70:	42a6      	cmp	r6, r4
 8006d72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006d76:	f04f 0200 	mov.w	r2, #0
 8006d7a:	d124      	bne.n	8006dc6 <_dtoa_r+0x626>
 8006d7c:	4baf      	ldr	r3, [pc, #700]	@ (800703c <_dtoa_r+0x89c>)
 8006d7e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006d82:	f7f9 fa93 	bl	80002ac <__adddf3>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006d8e:	f7f9 fed3 	bl	8000b38 <__aeabi_dcmpgt>
 8006d92:	2800      	cmp	r0, #0
 8006d94:	d163      	bne.n	8006e5e <_dtoa_r+0x6be>
 8006d96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006d9a:	49a8      	ldr	r1, [pc, #672]	@ (800703c <_dtoa_r+0x89c>)
 8006d9c:	2000      	movs	r0, #0
 8006d9e:	f7f9 fa83 	bl	80002a8 <__aeabi_dsub>
 8006da2:	4602      	mov	r2, r0
 8006da4:	460b      	mov	r3, r1
 8006da6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006daa:	f7f9 fea7 	bl	8000afc <__aeabi_dcmplt>
 8006dae:	2800      	cmp	r0, #0
 8006db0:	f43f af14 	beq.w	8006bdc <_dtoa_r+0x43c>
 8006db4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006db6:	1e73      	subs	r3, r6, #1
 8006db8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006dba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006dbe:	2b30      	cmp	r3, #48	@ 0x30
 8006dc0:	d0f8      	beq.n	8006db4 <_dtoa_r+0x614>
 8006dc2:	4647      	mov	r7, r8
 8006dc4:	e03b      	b.n	8006e3e <_dtoa_r+0x69e>
 8006dc6:	4b9e      	ldr	r3, [pc, #632]	@ (8007040 <_dtoa_r+0x8a0>)
 8006dc8:	f7f9 fc26 	bl	8000618 <__aeabi_dmul>
 8006dcc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dd0:	e7bc      	b.n	8006d4c <_dtoa_r+0x5ac>
 8006dd2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006dd6:	4656      	mov	r6, sl
 8006dd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ddc:	4620      	mov	r0, r4
 8006dde:	4629      	mov	r1, r5
 8006de0:	f7f9 fd44 	bl	800086c <__aeabi_ddiv>
 8006de4:	f7f9 fec8 	bl	8000b78 <__aeabi_d2iz>
 8006de8:	4680      	mov	r8, r0
 8006dea:	f7f9 fbab 	bl	8000544 <__aeabi_i2d>
 8006dee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006df2:	f7f9 fc11 	bl	8000618 <__aeabi_dmul>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006e02:	f7f9 fa51 	bl	80002a8 <__aeabi_dsub>
 8006e06:	f806 4b01 	strb.w	r4, [r6], #1
 8006e0a:	9d03      	ldr	r5, [sp, #12]
 8006e0c:	eba6 040a 	sub.w	r4, r6, sl
 8006e10:	42a5      	cmp	r5, r4
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	d133      	bne.n	8006e80 <_dtoa_r+0x6e0>
 8006e18:	f7f9 fa48 	bl	80002ac <__adddf3>
 8006e1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e20:	4604      	mov	r4, r0
 8006e22:	460d      	mov	r5, r1
 8006e24:	f7f9 fe88 	bl	8000b38 <__aeabi_dcmpgt>
 8006e28:	b9c0      	cbnz	r0, 8006e5c <_dtoa_r+0x6bc>
 8006e2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e2e:	4620      	mov	r0, r4
 8006e30:	4629      	mov	r1, r5
 8006e32:	f7f9 fe59 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e36:	b110      	cbz	r0, 8006e3e <_dtoa_r+0x69e>
 8006e38:	f018 0f01 	tst.w	r8, #1
 8006e3c:	d10e      	bne.n	8006e5c <_dtoa_r+0x6bc>
 8006e3e:	9902      	ldr	r1, [sp, #8]
 8006e40:	4648      	mov	r0, r9
 8006e42:	f000 ff09 	bl	8007c58 <_Bfree>
 8006e46:	2300      	movs	r3, #0
 8006e48:	7033      	strb	r3, [r6, #0]
 8006e4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e4c:	3701      	adds	r7, #1
 8006e4e:	601f      	str	r7, [r3, #0]
 8006e50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f000 824b 	beq.w	80072ee <_dtoa_r+0xb4e>
 8006e58:	601e      	str	r6, [r3, #0]
 8006e5a:	e248      	b.n	80072ee <_dtoa_r+0xb4e>
 8006e5c:	46b8      	mov	r8, r7
 8006e5e:	4633      	mov	r3, r6
 8006e60:	461e      	mov	r6, r3
 8006e62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e66:	2a39      	cmp	r2, #57	@ 0x39
 8006e68:	d106      	bne.n	8006e78 <_dtoa_r+0x6d8>
 8006e6a:	459a      	cmp	sl, r3
 8006e6c:	d1f8      	bne.n	8006e60 <_dtoa_r+0x6c0>
 8006e6e:	2230      	movs	r2, #48	@ 0x30
 8006e70:	f108 0801 	add.w	r8, r8, #1
 8006e74:	f88a 2000 	strb.w	r2, [sl]
 8006e78:	781a      	ldrb	r2, [r3, #0]
 8006e7a:	3201      	adds	r2, #1
 8006e7c:	701a      	strb	r2, [r3, #0]
 8006e7e:	e7a0      	b.n	8006dc2 <_dtoa_r+0x622>
 8006e80:	4b6f      	ldr	r3, [pc, #444]	@ (8007040 <_dtoa_r+0x8a0>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	f7f9 fbc8 	bl	8000618 <__aeabi_dmul>
 8006e88:	2200      	movs	r2, #0
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	460d      	mov	r5, r1
 8006e90:	f7f9 fe2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d09f      	beq.n	8006dd8 <_dtoa_r+0x638>
 8006e98:	e7d1      	b.n	8006e3e <_dtoa_r+0x69e>
 8006e9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006e9c:	2a00      	cmp	r2, #0
 8006e9e:	f000 80ea 	beq.w	8007076 <_dtoa_r+0x8d6>
 8006ea2:	9a07      	ldr	r2, [sp, #28]
 8006ea4:	2a01      	cmp	r2, #1
 8006ea6:	f300 80cd 	bgt.w	8007044 <_dtoa_r+0x8a4>
 8006eaa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006eac:	2a00      	cmp	r2, #0
 8006eae:	f000 80c1 	beq.w	8007034 <_dtoa_r+0x894>
 8006eb2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006eb6:	9c08      	ldr	r4, [sp, #32]
 8006eb8:	9e00      	ldr	r6, [sp, #0]
 8006eba:	9a00      	ldr	r2, [sp, #0]
 8006ebc:	441a      	add	r2, r3
 8006ebe:	9200      	str	r2, [sp, #0]
 8006ec0:	9a06      	ldr	r2, [sp, #24]
 8006ec2:	2101      	movs	r1, #1
 8006ec4:	441a      	add	r2, r3
 8006ec6:	4648      	mov	r0, r9
 8006ec8:	9206      	str	r2, [sp, #24]
 8006eca:	f000 ffc3 	bl	8007e54 <__i2b>
 8006ece:	4605      	mov	r5, r0
 8006ed0:	b166      	cbz	r6, 8006eec <_dtoa_r+0x74c>
 8006ed2:	9b06      	ldr	r3, [sp, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	dd09      	ble.n	8006eec <_dtoa_r+0x74c>
 8006ed8:	42b3      	cmp	r3, r6
 8006eda:	9a00      	ldr	r2, [sp, #0]
 8006edc:	bfa8      	it	ge
 8006ede:	4633      	movge	r3, r6
 8006ee0:	1ad2      	subs	r2, r2, r3
 8006ee2:	9200      	str	r2, [sp, #0]
 8006ee4:	9a06      	ldr	r2, [sp, #24]
 8006ee6:	1af6      	subs	r6, r6, r3
 8006ee8:	1ad3      	subs	r3, r2, r3
 8006eea:	9306      	str	r3, [sp, #24]
 8006eec:	9b08      	ldr	r3, [sp, #32]
 8006eee:	b30b      	cbz	r3, 8006f34 <_dtoa_r+0x794>
 8006ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 80c6 	beq.w	8007084 <_dtoa_r+0x8e4>
 8006ef8:	2c00      	cmp	r4, #0
 8006efa:	f000 80c0 	beq.w	800707e <_dtoa_r+0x8de>
 8006efe:	4629      	mov	r1, r5
 8006f00:	4622      	mov	r2, r4
 8006f02:	4648      	mov	r0, r9
 8006f04:	f001 f85e 	bl	8007fc4 <__pow5mult>
 8006f08:	9a02      	ldr	r2, [sp, #8]
 8006f0a:	4601      	mov	r1, r0
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	4648      	mov	r0, r9
 8006f10:	f000 ffb6 	bl	8007e80 <__multiply>
 8006f14:	9902      	ldr	r1, [sp, #8]
 8006f16:	4680      	mov	r8, r0
 8006f18:	4648      	mov	r0, r9
 8006f1a:	f000 fe9d 	bl	8007c58 <_Bfree>
 8006f1e:	9b08      	ldr	r3, [sp, #32]
 8006f20:	1b1b      	subs	r3, r3, r4
 8006f22:	9308      	str	r3, [sp, #32]
 8006f24:	f000 80b1 	beq.w	800708a <_dtoa_r+0x8ea>
 8006f28:	9a08      	ldr	r2, [sp, #32]
 8006f2a:	4641      	mov	r1, r8
 8006f2c:	4648      	mov	r0, r9
 8006f2e:	f001 f849 	bl	8007fc4 <__pow5mult>
 8006f32:	9002      	str	r0, [sp, #8]
 8006f34:	2101      	movs	r1, #1
 8006f36:	4648      	mov	r0, r9
 8006f38:	f000 ff8c 	bl	8007e54 <__i2b>
 8006f3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f3e:	4604      	mov	r4, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f000 81d8 	beq.w	80072f6 <_dtoa_r+0xb56>
 8006f46:	461a      	mov	r2, r3
 8006f48:	4601      	mov	r1, r0
 8006f4a:	4648      	mov	r0, r9
 8006f4c:	f001 f83a 	bl	8007fc4 <__pow5mult>
 8006f50:	9b07      	ldr	r3, [sp, #28]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	4604      	mov	r4, r0
 8006f56:	f300 809f 	bgt.w	8007098 <_dtoa_r+0x8f8>
 8006f5a:	9b04      	ldr	r3, [sp, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f040 8097 	bne.w	8007090 <_dtoa_r+0x8f0>
 8006f62:	9b05      	ldr	r3, [sp, #20]
 8006f64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f040 8093 	bne.w	8007094 <_dtoa_r+0x8f4>
 8006f6e:	9b05      	ldr	r3, [sp, #20]
 8006f70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f74:	0d1b      	lsrs	r3, r3, #20
 8006f76:	051b      	lsls	r3, r3, #20
 8006f78:	b133      	cbz	r3, 8006f88 <_dtoa_r+0x7e8>
 8006f7a:	9b00      	ldr	r3, [sp, #0]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	9b06      	ldr	r3, [sp, #24]
 8006f82:	3301      	adds	r3, #1
 8006f84:	9306      	str	r3, [sp, #24]
 8006f86:	2301      	movs	r3, #1
 8006f88:	9308      	str	r3, [sp, #32]
 8006f8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 81b8 	beq.w	8007302 <_dtoa_r+0xb62>
 8006f92:	6923      	ldr	r3, [r4, #16]
 8006f94:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006f98:	6918      	ldr	r0, [r3, #16]
 8006f9a:	f000 ff0f 	bl	8007dbc <__hi0bits>
 8006f9e:	f1c0 0020 	rsb	r0, r0, #32
 8006fa2:	9b06      	ldr	r3, [sp, #24]
 8006fa4:	4418      	add	r0, r3
 8006fa6:	f010 001f 	ands.w	r0, r0, #31
 8006faa:	f000 8082 	beq.w	80070b2 <_dtoa_r+0x912>
 8006fae:	f1c0 0320 	rsb	r3, r0, #32
 8006fb2:	2b04      	cmp	r3, #4
 8006fb4:	dd73      	ble.n	800709e <_dtoa_r+0x8fe>
 8006fb6:	9b00      	ldr	r3, [sp, #0]
 8006fb8:	f1c0 001c 	rsb	r0, r0, #28
 8006fbc:	4403      	add	r3, r0
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	9b06      	ldr	r3, [sp, #24]
 8006fc2:	4403      	add	r3, r0
 8006fc4:	4406      	add	r6, r0
 8006fc6:	9306      	str	r3, [sp, #24]
 8006fc8:	9b00      	ldr	r3, [sp, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	dd05      	ble.n	8006fda <_dtoa_r+0x83a>
 8006fce:	9902      	ldr	r1, [sp, #8]
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	4648      	mov	r0, r9
 8006fd4:	f001 f850 	bl	8008078 <__lshift>
 8006fd8:	9002      	str	r0, [sp, #8]
 8006fda:	9b06      	ldr	r3, [sp, #24]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	dd05      	ble.n	8006fec <_dtoa_r+0x84c>
 8006fe0:	4621      	mov	r1, r4
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	4648      	mov	r0, r9
 8006fe6:	f001 f847 	bl	8008078 <__lshift>
 8006fea:	4604      	mov	r4, r0
 8006fec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d061      	beq.n	80070b6 <_dtoa_r+0x916>
 8006ff2:	9802      	ldr	r0, [sp, #8]
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	f001 f8ab 	bl	8008150 <__mcmp>
 8006ffa:	2800      	cmp	r0, #0
 8006ffc:	da5b      	bge.n	80070b6 <_dtoa_r+0x916>
 8006ffe:	2300      	movs	r3, #0
 8007000:	9902      	ldr	r1, [sp, #8]
 8007002:	220a      	movs	r2, #10
 8007004:	4648      	mov	r0, r9
 8007006:	f000 fe49 	bl	8007c9c <__multadd>
 800700a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800700c:	9002      	str	r0, [sp, #8]
 800700e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007012:	2b00      	cmp	r3, #0
 8007014:	f000 8177 	beq.w	8007306 <_dtoa_r+0xb66>
 8007018:	4629      	mov	r1, r5
 800701a:	2300      	movs	r3, #0
 800701c:	220a      	movs	r2, #10
 800701e:	4648      	mov	r0, r9
 8007020:	f000 fe3c 	bl	8007c9c <__multadd>
 8007024:	f1bb 0f00 	cmp.w	fp, #0
 8007028:	4605      	mov	r5, r0
 800702a:	dc6f      	bgt.n	800710c <_dtoa_r+0x96c>
 800702c:	9b07      	ldr	r3, [sp, #28]
 800702e:	2b02      	cmp	r3, #2
 8007030:	dc49      	bgt.n	80070c6 <_dtoa_r+0x926>
 8007032:	e06b      	b.n	800710c <_dtoa_r+0x96c>
 8007034:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007036:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800703a:	e73c      	b.n	8006eb6 <_dtoa_r+0x716>
 800703c:	3fe00000 	.word	0x3fe00000
 8007040:	40240000 	.word	0x40240000
 8007044:	9b03      	ldr	r3, [sp, #12]
 8007046:	1e5c      	subs	r4, r3, #1
 8007048:	9b08      	ldr	r3, [sp, #32]
 800704a:	42a3      	cmp	r3, r4
 800704c:	db09      	blt.n	8007062 <_dtoa_r+0x8c2>
 800704e:	1b1c      	subs	r4, r3, r4
 8007050:	9b03      	ldr	r3, [sp, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	f6bf af30 	bge.w	8006eb8 <_dtoa_r+0x718>
 8007058:	9b00      	ldr	r3, [sp, #0]
 800705a:	9a03      	ldr	r2, [sp, #12]
 800705c:	1a9e      	subs	r6, r3, r2
 800705e:	2300      	movs	r3, #0
 8007060:	e72b      	b.n	8006eba <_dtoa_r+0x71a>
 8007062:	9b08      	ldr	r3, [sp, #32]
 8007064:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007066:	9408      	str	r4, [sp, #32]
 8007068:	1ae3      	subs	r3, r4, r3
 800706a:	441a      	add	r2, r3
 800706c:	9e00      	ldr	r6, [sp, #0]
 800706e:	9b03      	ldr	r3, [sp, #12]
 8007070:	920d      	str	r2, [sp, #52]	@ 0x34
 8007072:	2400      	movs	r4, #0
 8007074:	e721      	b.n	8006eba <_dtoa_r+0x71a>
 8007076:	9c08      	ldr	r4, [sp, #32]
 8007078:	9e00      	ldr	r6, [sp, #0]
 800707a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800707c:	e728      	b.n	8006ed0 <_dtoa_r+0x730>
 800707e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007082:	e751      	b.n	8006f28 <_dtoa_r+0x788>
 8007084:	9a08      	ldr	r2, [sp, #32]
 8007086:	9902      	ldr	r1, [sp, #8]
 8007088:	e750      	b.n	8006f2c <_dtoa_r+0x78c>
 800708a:	f8cd 8008 	str.w	r8, [sp, #8]
 800708e:	e751      	b.n	8006f34 <_dtoa_r+0x794>
 8007090:	2300      	movs	r3, #0
 8007092:	e779      	b.n	8006f88 <_dtoa_r+0x7e8>
 8007094:	9b04      	ldr	r3, [sp, #16]
 8007096:	e777      	b.n	8006f88 <_dtoa_r+0x7e8>
 8007098:	2300      	movs	r3, #0
 800709a:	9308      	str	r3, [sp, #32]
 800709c:	e779      	b.n	8006f92 <_dtoa_r+0x7f2>
 800709e:	d093      	beq.n	8006fc8 <_dtoa_r+0x828>
 80070a0:	9a00      	ldr	r2, [sp, #0]
 80070a2:	331c      	adds	r3, #28
 80070a4:	441a      	add	r2, r3
 80070a6:	9200      	str	r2, [sp, #0]
 80070a8:	9a06      	ldr	r2, [sp, #24]
 80070aa:	441a      	add	r2, r3
 80070ac:	441e      	add	r6, r3
 80070ae:	9206      	str	r2, [sp, #24]
 80070b0:	e78a      	b.n	8006fc8 <_dtoa_r+0x828>
 80070b2:	4603      	mov	r3, r0
 80070b4:	e7f4      	b.n	80070a0 <_dtoa_r+0x900>
 80070b6:	9b03      	ldr	r3, [sp, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	46b8      	mov	r8, r7
 80070bc:	dc20      	bgt.n	8007100 <_dtoa_r+0x960>
 80070be:	469b      	mov	fp, r3
 80070c0:	9b07      	ldr	r3, [sp, #28]
 80070c2:	2b02      	cmp	r3, #2
 80070c4:	dd1e      	ble.n	8007104 <_dtoa_r+0x964>
 80070c6:	f1bb 0f00 	cmp.w	fp, #0
 80070ca:	f47f adb1 	bne.w	8006c30 <_dtoa_r+0x490>
 80070ce:	4621      	mov	r1, r4
 80070d0:	465b      	mov	r3, fp
 80070d2:	2205      	movs	r2, #5
 80070d4:	4648      	mov	r0, r9
 80070d6:	f000 fde1 	bl	8007c9c <__multadd>
 80070da:	4601      	mov	r1, r0
 80070dc:	4604      	mov	r4, r0
 80070de:	9802      	ldr	r0, [sp, #8]
 80070e0:	f001 f836 	bl	8008150 <__mcmp>
 80070e4:	2800      	cmp	r0, #0
 80070e6:	f77f ada3 	ble.w	8006c30 <_dtoa_r+0x490>
 80070ea:	4656      	mov	r6, sl
 80070ec:	2331      	movs	r3, #49	@ 0x31
 80070ee:	f806 3b01 	strb.w	r3, [r6], #1
 80070f2:	f108 0801 	add.w	r8, r8, #1
 80070f6:	e59f      	b.n	8006c38 <_dtoa_r+0x498>
 80070f8:	9c03      	ldr	r4, [sp, #12]
 80070fa:	46b8      	mov	r8, r7
 80070fc:	4625      	mov	r5, r4
 80070fe:	e7f4      	b.n	80070ea <_dtoa_r+0x94a>
 8007100:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 8101 	beq.w	800730e <_dtoa_r+0xb6e>
 800710c:	2e00      	cmp	r6, #0
 800710e:	dd05      	ble.n	800711c <_dtoa_r+0x97c>
 8007110:	4629      	mov	r1, r5
 8007112:	4632      	mov	r2, r6
 8007114:	4648      	mov	r0, r9
 8007116:	f000 ffaf 	bl	8008078 <__lshift>
 800711a:	4605      	mov	r5, r0
 800711c:	9b08      	ldr	r3, [sp, #32]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d05c      	beq.n	80071dc <_dtoa_r+0xa3c>
 8007122:	6869      	ldr	r1, [r5, #4]
 8007124:	4648      	mov	r0, r9
 8007126:	f000 fd57 	bl	8007bd8 <_Balloc>
 800712a:	4606      	mov	r6, r0
 800712c:	b928      	cbnz	r0, 800713a <_dtoa_r+0x99a>
 800712e:	4b82      	ldr	r3, [pc, #520]	@ (8007338 <_dtoa_r+0xb98>)
 8007130:	4602      	mov	r2, r0
 8007132:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007136:	f7ff bb4a 	b.w	80067ce <_dtoa_r+0x2e>
 800713a:	692a      	ldr	r2, [r5, #16]
 800713c:	3202      	adds	r2, #2
 800713e:	0092      	lsls	r2, r2, #2
 8007140:	f105 010c 	add.w	r1, r5, #12
 8007144:	300c      	adds	r0, #12
 8007146:	f7ff fa68 	bl	800661a <memcpy>
 800714a:	2201      	movs	r2, #1
 800714c:	4631      	mov	r1, r6
 800714e:	4648      	mov	r0, r9
 8007150:	f000 ff92 	bl	8008078 <__lshift>
 8007154:	f10a 0301 	add.w	r3, sl, #1
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	eb0a 030b 	add.w	r3, sl, fp
 800715e:	9308      	str	r3, [sp, #32]
 8007160:	9b04      	ldr	r3, [sp, #16]
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	462f      	mov	r7, r5
 8007168:	9306      	str	r3, [sp, #24]
 800716a:	4605      	mov	r5, r0
 800716c:	9b00      	ldr	r3, [sp, #0]
 800716e:	9802      	ldr	r0, [sp, #8]
 8007170:	4621      	mov	r1, r4
 8007172:	f103 3bff 	add.w	fp, r3, #4294967295
 8007176:	f7ff fa8b 	bl	8006690 <quorem>
 800717a:	4603      	mov	r3, r0
 800717c:	3330      	adds	r3, #48	@ 0x30
 800717e:	9003      	str	r0, [sp, #12]
 8007180:	4639      	mov	r1, r7
 8007182:	9802      	ldr	r0, [sp, #8]
 8007184:	9309      	str	r3, [sp, #36]	@ 0x24
 8007186:	f000 ffe3 	bl	8008150 <__mcmp>
 800718a:	462a      	mov	r2, r5
 800718c:	9004      	str	r0, [sp, #16]
 800718e:	4621      	mov	r1, r4
 8007190:	4648      	mov	r0, r9
 8007192:	f000 fff9 	bl	8008188 <__mdiff>
 8007196:	68c2      	ldr	r2, [r0, #12]
 8007198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800719a:	4606      	mov	r6, r0
 800719c:	bb02      	cbnz	r2, 80071e0 <_dtoa_r+0xa40>
 800719e:	4601      	mov	r1, r0
 80071a0:	9802      	ldr	r0, [sp, #8]
 80071a2:	f000 ffd5 	bl	8008150 <__mcmp>
 80071a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071a8:	4602      	mov	r2, r0
 80071aa:	4631      	mov	r1, r6
 80071ac:	4648      	mov	r0, r9
 80071ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80071b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80071b2:	f000 fd51 	bl	8007c58 <_Bfree>
 80071b6:	9b07      	ldr	r3, [sp, #28]
 80071b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80071ba:	9e00      	ldr	r6, [sp, #0]
 80071bc:	ea42 0103 	orr.w	r1, r2, r3
 80071c0:	9b06      	ldr	r3, [sp, #24]
 80071c2:	4319      	orrs	r1, r3
 80071c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c6:	d10d      	bne.n	80071e4 <_dtoa_r+0xa44>
 80071c8:	2b39      	cmp	r3, #57	@ 0x39
 80071ca:	d027      	beq.n	800721c <_dtoa_r+0xa7c>
 80071cc:	9a04      	ldr	r2, [sp, #16]
 80071ce:	2a00      	cmp	r2, #0
 80071d0:	dd01      	ble.n	80071d6 <_dtoa_r+0xa36>
 80071d2:	9b03      	ldr	r3, [sp, #12]
 80071d4:	3331      	adds	r3, #49	@ 0x31
 80071d6:	f88b 3000 	strb.w	r3, [fp]
 80071da:	e52e      	b.n	8006c3a <_dtoa_r+0x49a>
 80071dc:	4628      	mov	r0, r5
 80071de:	e7b9      	b.n	8007154 <_dtoa_r+0x9b4>
 80071e0:	2201      	movs	r2, #1
 80071e2:	e7e2      	b.n	80071aa <_dtoa_r+0xa0a>
 80071e4:	9904      	ldr	r1, [sp, #16]
 80071e6:	2900      	cmp	r1, #0
 80071e8:	db04      	blt.n	80071f4 <_dtoa_r+0xa54>
 80071ea:	9807      	ldr	r0, [sp, #28]
 80071ec:	4301      	orrs	r1, r0
 80071ee:	9806      	ldr	r0, [sp, #24]
 80071f0:	4301      	orrs	r1, r0
 80071f2:	d120      	bne.n	8007236 <_dtoa_r+0xa96>
 80071f4:	2a00      	cmp	r2, #0
 80071f6:	ddee      	ble.n	80071d6 <_dtoa_r+0xa36>
 80071f8:	9902      	ldr	r1, [sp, #8]
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	2201      	movs	r2, #1
 80071fe:	4648      	mov	r0, r9
 8007200:	f000 ff3a 	bl	8008078 <__lshift>
 8007204:	4621      	mov	r1, r4
 8007206:	9002      	str	r0, [sp, #8]
 8007208:	f000 ffa2 	bl	8008150 <__mcmp>
 800720c:	2800      	cmp	r0, #0
 800720e:	9b00      	ldr	r3, [sp, #0]
 8007210:	dc02      	bgt.n	8007218 <_dtoa_r+0xa78>
 8007212:	d1e0      	bne.n	80071d6 <_dtoa_r+0xa36>
 8007214:	07da      	lsls	r2, r3, #31
 8007216:	d5de      	bpl.n	80071d6 <_dtoa_r+0xa36>
 8007218:	2b39      	cmp	r3, #57	@ 0x39
 800721a:	d1da      	bne.n	80071d2 <_dtoa_r+0xa32>
 800721c:	2339      	movs	r3, #57	@ 0x39
 800721e:	f88b 3000 	strb.w	r3, [fp]
 8007222:	4633      	mov	r3, r6
 8007224:	461e      	mov	r6, r3
 8007226:	3b01      	subs	r3, #1
 8007228:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800722c:	2a39      	cmp	r2, #57	@ 0x39
 800722e:	d04e      	beq.n	80072ce <_dtoa_r+0xb2e>
 8007230:	3201      	adds	r2, #1
 8007232:	701a      	strb	r2, [r3, #0]
 8007234:	e501      	b.n	8006c3a <_dtoa_r+0x49a>
 8007236:	2a00      	cmp	r2, #0
 8007238:	dd03      	ble.n	8007242 <_dtoa_r+0xaa2>
 800723a:	2b39      	cmp	r3, #57	@ 0x39
 800723c:	d0ee      	beq.n	800721c <_dtoa_r+0xa7c>
 800723e:	3301      	adds	r3, #1
 8007240:	e7c9      	b.n	80071d6 <_dtoa_r+0xa36>
 8007242:	9a00      	ldr	r2, [sp, #0]
 8007244:	9908      	ldr	r1, [sp, #32]
 8007246:	f802 3c01 	strb.w	r3, [r2, #-1]
 800724a:	428a      	cmp	r2, r1
 800724c:	d028      	beq.n	80072a0 <_dtoa_r+0xb00>
 800724e:	9902      	ldr	r1, [sp, #8]
 8007250:	2300      	movs	r3, #0
 8007252:	220a      	movs	r2, #10
 8007254:	4648      	mov	r0, r9
 8007256:	f000 fd21 	bl	8007c9c <__multadd>
 800725a:	42af      	cmp	r7, r5
 800725c:	9002      	str	r0, [sp, #8]
 800725e:	f04f 0300 	mov.w	r3, #0
 8007262:	f04f 020a 	mov.w	r2, #10
 8007266:	4639      	mov	r1, r7
 8007268:	4648      	mov	r0, r9
 800726a:	d107      	bne.n	800727c <_dtoa_r+0xadc>
 800726c:	f000 fd16 	bl	8007c9c <__multadd>
 8007270:	4607      	mov	r7, r0
 8007272:	4605      	mov	r5, r0
 8007274:	9b00      	ldr	r3, [sp, #0]
 8007276:	3301      	adds	r3, #1
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	e777      	b.n	800716c <_dtoa_r+0x9cc>
 800727c:	f000 fd0e 	bl	8007c9c <__multadd>
 8007280:	4629      	mov	r1, r5
 8007282:	4607      	mov	r7, r0
 8007284:	2300      	movs	r3, #0
 8007286:	220a      	movs	r2, #10
 8007288:	4648      	mov	r0, r9
 800728a:	f000 fd07 	bl	8007c9c <__multadd>
 800728e:	4605      	mov	r5, r0
 8007290:	e7f0      	b.n	8007274 <_dtoa_r+0xad4>
 8007292:	f1bb 0f00 	cmp.w	fp, #0
 8007296:	bfcc      	ite	gt
 8007298:	465e      	movgt	r6, fp
 800729a:	2601      	movle	r6, #1
 800729c:	4456      	add	r6, sl
 800729e:	2700      	movs	r7, #0
 80072a0:	9902      	ldr	r1, [sp, #8]
 80072a2:	9300      	str	r3, [sp, #0]
 80072a4:	2201      	movs	r2, #1
 80072a6:	4648      	mov	r0, r9
 80072a8:	f000 fee6 	bl	8008078 <__lshift>
 80072ac:	4621      	mov	r1, r4
 80072ae:	9002      	str	r0, [sp, #8]
 80072b0:	f000 ff4e 	bl	8008150 <__mcmp>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	dcb4      	bgt.n	8007222 <_dtoa_r+0xa82>
 80072b8:	d102      	bne.n	80072c0 <_dtoa_r+0xb20>
 80072ba:	9b00      	ldr	r3, [sp, #0]
 80072bc:	07db      	lsls	r3, r3, #31
 80072be:	d4b0      	bmi.n	8007222 <_dtoa_r+0xa82>
 80072c0:	4633      	mov	r3, r6
 80072c2:	461e      	mov	r6, r3
 80072c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072c8:	2a30      	cmp	r2, #48	@ 0x30
 80072ca:	d0fa      	beq.n	80072c2 <_dtoa_r+0xb22>
 80072cc:	e4b5      	b.n	8006c3a <_dtoa_r+0x49a>
 80072ce:	459a      	cmp	sl, r3
 80072d0:	d1a8      	bne.n	8007224 <_dtoa_r+0xa84>
 80072d2:	2331      	movs	r3, #49	@ 0x31
 80072d4:	f108 0801 	add.w	r8, r8, #1
 80072d8:	f88a 3000 	strb.w	r3, [sl]
 80072dc:	e4ad      	b.n	8006c3a <_dtoa_r+0x49a>
 80072de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80072e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800733c <_dtoa_r+0xb9c>
 80072e4:	b11b      	cbz	r3, 80072ee <_dtoa_r+0xb4e>
 80072e6:	f10a 0308 	add.w	r3, sl, #8
 80072ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80072ec:	6013      	str	r3, [r2, #0]
 80072ee:	4650      	mov	r0, sl
 80072f0:	b017      	add	sp, #92	@ 0x5c
 80072f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f6:	9b07      	ldr	r3, [sp, #28]
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	f77f ae2e 	ble.w	8006f5a <_dtoa_r+0x7ba>
 80072fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007300:	9308      	str	r3, [sp, #32]
 8007302:	2001      	movs	r0, #1
 8007304:	e64d      	b.n	8006fa2 <_dtoa_r+0x802>
 8007306:	f1bb 0f00 	cmp.w	fp, #0
 800730a:	f77f aed9 	ble.w	80070c0 <_dtoa_r+0x920>
 800730e:	4656      	mov	r6, sl
 8007310:	9802      	ldr	r0, [sp, #8]
 8007312:	4621      	mov	r1, r4
 8007314:	f7ff f9bc 	bl	8006690 <quorem>
 8007318:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800731c:	f806 3b01 	strb.w	r3, [r6], #1
 8007320:	eba6 020a 	sub.w	r2, r6, sl
 8007324:	4593      	cmp	fp, r2
 8007326:	ddb4      	ble.n	8007292 <_dtoa_r+0xaf2>
 8007328:	9902      	ldr	r1, [sp, #8]
 800732a:	2300      	movs	r3, #0
 800732c:	220a      	movs	r2, #10
 800732e:	4648      	mov	r0, r9
 8007330:	f000 fcb4 	bl	8007c9c <__multadd>
 8007334:	9002      	str	r0, [sp, #8]
 8007336:	e7eb      	b.n	8007310 <_dtoa_r+0xb70>
 8007338:	08009923 	.word	0x08009923
 800733c:	080098be 	.word	0x080098be

08007340 <_free_r>:
 8007340:	b538      	push	{r3, r4, r5, lr}
 8007342:	4605      	mov	r5, r0
 8007344:	2900      	cmp	r1, #0
 8007346:	d041      	beq.n	80073cc <_free_r+0x8c>
 8007348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800734c:	1f0c      	subs	r4, r1, #4
 800734e:	2b00      	cmp	r3, #0
 8007350:	bfb8      	it	lt
 8007352:	18e4      	addlt	r4, r4, r3
 8007354:	f000 fc34 	bl	8007bc0 <__malloc_lock>
 8007358:	4a1d      	ldr	r2, [pc, #116]	@ (80073d0 <_free_r+0x90>)
 800735a:	6813      	ldr	r3, [r2, #0]
 800735c:	b933      	cbnz	r3, 800736c <_free_r+0x2c>
 800735e:	6063      	str	r3, [r4, #4]
 8007360:	6014      	str	r4, [r2, #0]
 8007362:	4628      	mov	r0, r5
 8007364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007368:	f000 bc30 	b.w	8007bcc <__malloc_unlock>
 800736c:	42a3      	cmp	r3, r4
 800736e:	d908      	bls.n	8007382 <_free_r+0x42>
 8007370:	6820      	ldr	r0, [r4, #0]
 8007372:	1821      	adds	r1, r4, r0
 8007374:	428b      	cmp	r3, r1
 8007376:	bf01      	itttt	eq
 8007378:	6819      	ldreq	r1, [r3, #0]
 800737a:	685b      	ldreq	r3, [r3, #4]
 800737c:	1809      	addeq	r1, r1, r0
 800737e:	6021      	streq	r1, [r4, #0]
 8007380:	e7ed      	b.n	800735e <_free_r+0x1e>
 8007382:	461a      	mov	r2, r3
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	b10b      	cbz	r3, 800738c <_free_r+0x4c>
 8007388:	42a3      	cmp	r3, r4
 800738a:	d9fa      	bls.n	8007382 <_free_r+0x42>
 800738c:	6811      	ldr	r1, [r2, #0]
 800738e:	1850      	adds	r0, r2, r1
 8007390:	42a0      	cmp	r0, r4
 8007392:	d10b      	bne.n	80073ac <_free_r+0x6c>
 8007394:	6820      	ldr	r0, [r4, #0]
 8007396:	4401      	add	r1, r0
 8007398:	1850      	adds	r0, r2, r1
 800739a:	4283      	cmp	r3, r0
 800739c:	6011      	str	r1, [r2, #0]
 800739e:	d1e0      	bne.n	8007362 <_free_r+0x22>
 80073a0:	6818      	ldr	r0, [r3, #0]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	6053      	str	r3, [r2, #4]
 80073a6:	4408      	add	r0, r1
 80073a8:	6010      	str	r0, [r2, #0]
 80073aa:	e7da      	b.n	8007362 <_free_r+0x22>
 80073ac:	d902      	bls.n	80073b4 <_free_r+0x74>
 80073ae:	230c      	movs	r3, #12
 80073b0:	602b      	str	r3, [r5, #0]
 80073b2:	e7d6      	b.n	8007362 <_free_r+0x22>
 80073b4:	6820      	ldr	r0, [r4, #0]
 80073b6:	1821      	adds	r1, r4, r0
 80073b8:	428b      	cmp	r3, r1
 80073ba:	bf04      	itt	eq
 80073bc:	6819      	ldreq	r1, [r3, #0]
 80073be:	685b      	ldreq	r3, [r3, #4]
 80073c0:	6063      	str	r3, [r4, #4]
 80073c2:	bf04      	itt	eq
 80073c4:	1809      	addeq	r1, r1, r0
 80073c6:	6021      	streq	r1, [r4, #0]
 80073c8:	6054      	str	r4, [r2, #4]
 80073ca:	e7ca      	b.n	8007362 <_free_r+0x22>
 80073cc:	bd38      	pop	{r3, r4, r5, pc}
 80073ce:	bf00      	nop
 80073d0:	20001340 	.word	0x20001340

080073d4 <rshift>:
 80073d4:	6903      	ldr	r3, [r0, #16]
 80073d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80073da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073de:	ea4f 1261 	mov.w	r2, r1, asr #5
 80073e2:	f100 0414 	add.w	r4, r0, #20
 80073e6:	dd45      	ble.n	8007474 <rshift+0xa0>
 80073e8:	f011 011f 	ands.w	r1, r1, #31
 80073ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80073f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80073f4:	d10c      	bne.n	8007410 <rshift+0x3c>
 80073f6:	f100 0710 	add.w	r7, r0, #16
 80073fa:	4629      	mov	r1, r5
 80073fc:	42b1      	cmp	r1, r6
 80073fe:	d334      	bcc.n	800746a <rshift+0x96>
 8007400:	1a9b      	subs	r3, r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	1eea      	subs	r2, r5, #3
 8007406:	4296      	cmp	r6, r2
 8007408:	bf38      	it	cc
 800740a:	2300      	movcc	r3, #0
 800740c:	4423      	add	r3, r4
 800740e:	e015      	b.n	800743c <rshift+0x68>
 8007410:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007414:	f1c1 0820 	rsb	r8, r1, #32
 8007418:	40cf      	lsrs	r7, r1
 800741a:	f105 0e04 	add.w	lr, r5, #4
 800741e:	46a1      	mov	r9, r4
 8007420:	4576      	cmp	r6, lr
 8007422:	46f4      	mov	ip, lr
 8007424:	d815      	bhi.n	8007452 <rshift+0x7e>
 8007426:	1a9a      	subs	r2, r3, r2
 8007428:	0092      	lsls	r2, r2, #2
 800742a:	3a04      	subs	r2, #4
 800742c:	3501      	adds	r5, #1
 800742e:	42ae      	cmp	r6, r5
 8007430:	bf38      	it	cc
 8007432:	2200      	movcc	r2, #0
 8007434:	18a3      	adds	r3, r4, r2
 8007436:	50a7      	str	r7, [r4, r2]
 8007438:	b107      	cbz	r7, 800743c <rshift+0x68>
 800743a:	3304      	adds	r3, #4
 800743c:	1b1a      	subs	r2, r3, r4
 800743e:	42a3      	cmp	r3, r4
 8007440:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007444:	bf08      	it	eq
 8007446:	2300      	moveq	r3, #0
 8007448:	6102      	str	r2, [r0, #16]
 800744a:	bf08      	it	eq
 800744c:	6143      	streq	r3, [r0, #20]
 800744e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007452:	f8dc c000 	ldr.w	ip, [ip]
 8007456:	fa0c fc08 	lsl.w	ip, ip, r8
 800745a:	ea4c 0707 	orr.w	r7, ip, r7
 800745e:	f849 7b04 	str.w	r7, [r9], #4
 8007462:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007466:	40cf      	lsrs	r7, r1
 8007468:	e7da      	b.n	8007420 <rshift+0x4c>
 800746a:	f851 cb04 	ldr.w	ip, [r1], #4
 800746e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007472:	e7c3      	b.n	80073fc <rshift+0x28>
 8007474:	4623      	mov	r3, r4
 8007476:	e7e1      	b.n	800743c <rshift+0x68>

08007478 <__hexdig_fun>:
 8007478:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800747c:	2b09      	cmp	r3, #9
 800747e:	d802      	bhi.n	8007486 <__hexdig_fun+0xe>
 8007480:	3820      	subs	r0, #32
 8007482:	b2c0      	uxtb	r0, r0
 8007484:	4770      	bx	lr
 8007486:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800748a:	2b05      	cmp	r3, #5
 800748c:	d801      	bhi.n	8007492 <__hexdig_fun+0x1a>
 800748e:	3847      	subs	r0, #71	@ 0x47
 8007490:	e7f7      	b.n	8007482 <__hexdig_fun+0xa>
 8007492:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007496:	2b05      	cmp	r3, #5
 8007498:	d801      	bhi.n	800749e <__hexdig_fun+0x26>
 800749a:	3827      	subs	r0, #39	@ 0x27
 800749c:	e7f1      	b.n	8007482 <__hexdig_fun+0xa>
 800749e:	2000      	movs	r0, #0
 80074a0:	4770      	bx	lr
	...

080074a4 <__gethex>:
 80074a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074a8:	b085      	sub	sp, #20
 80074aa:	468a      	mov	sl, r1
 80074ac:	9302      	str	r3, [sp, #8]
 80074ae:	680b      	ldr	r3, [r1, #0]
 80074b0:	9001      	str	r0, [sp, #4]
 80074b2:	4690      	mov	r8, r2
 80074b4:	1c9c      	adds	r4, r3, #2
 80074b6:	46a1      	mov	r9, r4
 80074b8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80074bc:	2830      	cmp	r0, #48	@ 0x30
 80074be:	d0fa      	beq.n	80074b6 <__gethex+0x12>
 80074c0:	eba9 0303 	sub.w	r3, r9, r3
 80074c4:	f1a3 0b02 	sub.w	fp, r3, #2
 80074c8:	f7ff ffd6 	bl	8007478 <__hexdig_fun>
 80074cc:	4605      	mov	r5, r0
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d168      	bne.n	80075a4 <__gethex+0x100>
 80074d2:	49a0      	ldr	r1, [pc, #640]	@ (8007754 <__gethex+0x2b0>)
 80074d4:	2201      	movs	r2, #1
 80074d6:	4648      	mov	r0, r9
 80074d8:	f7fe ffa6 	bl	8006428 <strncmp>
 80074dc:	4607      	mov	r7, r0
 80074de:	2800      	cmp	r0, #0
 80074e0:	d167      	bne.n	80075b2 <__gethex+0x10e>
 80074e2:	f899 0001 	ldrb.w	r0, [r9, #1]
 80074e6:	4626      	mov	r6, r4
 80074e8:	f7ff ffc6 	bl	8007478 <__hexdig_fun>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d062      	beq.n	80075b6 <__gethex+0x112>
 80074f0:	4623      	mov	r3, r4
 80074f2:	7818      	ldrb	r0, [r3, #0]
 80074f4:	2830      	cmp	r0, #48	@ 0x30
 80074f6:	4699      	mov	r9, r3
 80074f8:	f103 0301 	add.w	r3, r3, #1
 80074fc:	d0f9      	beq.n	80074f2 <__gethex+0x4e>
 80074fe:	f7ff ffbb 	bl	8007478 <__hexdig_fun>
 8007502:	fab0 f580 	clz	r5, r0
 8007506:	096d      	lsrs	r5, r5, #5
 8007508:	f04f 0b01 	mov.w	fp, #1
 800750c:	464a      	mov	r2, r9
 800750e:	4616      	mov	r6, r2
 8007510:	3201      	adds	r2, #1
 8007512:	7830      	ldrb	r0, [r6, #0]
 8007514:	f7ff ffb0 	bl	8007478 <__hexdig_fun>
 8007518:	2800      	cmp	r0, #0
 800751a:	d1f8      	bne.n	800750e <__gethex+0x6a>
 800751c:	498d      	ldr	r1, [pc, #564]	@ (8007754 <__gethex+0x2b0>)
 800751e:	2201      	movs	r2, #1
 8007520:	4630      	mov	r0, r6
 8007522:	f7fe ff81 	bl	8006428 <strncmp>
 8007526:	2800      	cmp	r0, #0
 8007528:	d13f      	bne.n	80075aa <__gethex+0x106>
 800752a:	b944      	cbnz	r4, 800753e <__gethex+0x9a>
 800752c:	1c74      	adds	r4, r6, #1
 800752e:	4622      	mov	r2, r4
 8007530:	4616      	mov	r6, r2
 8007532:	3201      	adds	r2, #1
 8007534:	7830      	ldrb	r0, [r6, #0]
 8007536:	f7ff ff9f 	bl	8007478 <__hexdig_fun>
 800753a:	2800      	cmp	r0, #0
 800753c:	d1f8      	bne.n	8007530 <__gethex+0x8c>
 800753e:	1ba4      	subs	r4, r4, r6
 8007540:	00a7      	lsls	r7, r4, #2
 8007542:	7833      	ldrb	r3, [r6, #0]
 8007544:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007548:	2b50      	cmp	r3, #80	@ 0x50
 800754a:	d13e      	bne.n	80075ca <__gethex+0x126>
 800754c:	7873      	ldrb	r3, [r6, #1]
 800754e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007550:	d033      	beq.n	80075ba <__gethex+0x116>
 8007552:	2b2d      	cmp	r3, #45	@ 0x2d
 8007554:	d034      	beq.n	80075c0 <__gethex+0x11c>
 8007556:	1c71      	adds	r1, r6, #1
 8007558:	2400      	movs	r4, #0
 800755a:	7808      	ldrb	r0, [r1, #0]
 800755c:	f7ff ff8c 	bl	8007478 <__hexdig_fun>
 8007560:	1e43      	subs	r3, r0, #1
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b18      	cmp	r3, #24
 8007566:	d830      	bhi.n	80075ca <__gethex+0x126>
 8007568:	f1a0 0210 	sub.w	r2, r0, #16
 800756c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007570:	f7ff ff82 	bl	8007478 <__hexdig_fun>
 8007574:	f100 3cff 	add.w	ip, r0, #4294967295
 8007578:	fa5f fc8c 	uxtb.w	ip, ip
 800757c:	f1bc 0f18 	cmp.w	ip, #24
 8007580:	f04f 030a 	mov.w	r3, #10
 8007584:	d91e      	bls.n	80075c4 <__gethex+0x120>
 8007586:	b104      	cbz	r4, 800758a <__gethex+0xe6>
 8007588:	4252      	negs	r2, r2
 800758a:	4417      	add	r7, r2
 800758c:	f8ca 1000 	str.w	r1, [sl]
 8007590:	b1ed      	cbz	r5, 80075ce <__gethex+0x12a>
 8007592:	f1bb 0f00 	cmp.w	fp, #0
 8007596:	bf0c      	ite	eq
 8007598:	2506      	moveq	r5, #6
 800759a:	2500      	movne	r5, #0
 800759c:	4628      	mov	r0, r5
 800759e:	b005      	add	sp, #20
 80075a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075a4:	2500      	movs	r5, #0
 80075a6:	462c      	mov	r4, r5
 80075a8:	e7b0      	b.n	800750c <__gethex+0x68>
 80075aa:	2c00      	cmp	r4, #0
 80075ac:	d1c7      	bne.n	800753e <__gethex+0x9a>
 80075ae:	4627      	mov	r7, r4
 80075b0:	e7c7      	b.n	8007542 <__gethex+0x9e>
 80075b2:	464e      	mov	r6, r9
 80075b4:	462f      	mov	r7, r5
 80075b6:	2501      	movs	r5, #1
 80075b8:	e7c3      	b.n	8007542 <__gethex+0x9e>
 80075ba:	2400      	movs	r4, #0
 80075bc:	1cb1      	adds	r1, r6, #2
 80075be:	e7cc      	b.n	800755a <__gethex+0xb6>
 80075c0:	2401      	movs	r4, #1
 80075c2:	e7fb      	b.n	80075bc <__gethex+0x118>
 80075c4:	fb03 0002 	mla	r0, r3, r2, r0
 80075c8:	e7ce      	b.n	8007568 <__gethex+0xc4>
 80075ca:	4631      	mov	r1, r6
 80075cc:	e7de      	b.n	800758c <__gethex+0xe8>
 80075ce:	eba6 0309 	sub.w	r3, r6, r9
 80075d2:	3b01      	subs	r3, #1
 80075d4:	4629      	mov	r1, r5
 80075d6:	2b07      	cmp	r3, #7
 80075d8:	dc0a      	bgt.n	80075f0 <__gethex+0x14c>
 80075da:	9801      	ldr	r0, [sp, #4]
 80075dc:	f000 fafc 	bl	8007bd8 <_Balloc>
 80075e0:	4604      	mov	r4, r0
 80075e2:	b940      	cbnz	r0, 80075f6 <__gethex+0x152>
 80075e4:	4b5c      	ldr	r3, [pc, #368]	@ (8007758 <__gethex+0x2b4>)
 80075e6:	4602      	mov	r2, r0
 80075e8:	21e4      	movs	r1, #228	@ 0xe4
 80075ea:	485c      	ldr	r0, [pc, #368]	@ (800775c <__gethex+0x2b8>)
 80075ec:	f7ff f832 	bl	8006654 <__assert_func>
 80075f0:	3101      	adds	r1, #1
 80075f2:	105b      	asrs	r3, r3, #1
 80075f4:	e7ef      	b.n	80075d6 <__gethex+0x132>
 80075f6:	f100 0a14 	add.w	sl, r0, #20
 80075fa:	2300      	movs	r3, #0
 80075fc:	4655      	mov	r5, sl
 80075fe:	469b      	mov	fp, r3
 8007600:	45b1      	cmp	r9, r6
 8007602:	d337      	bcc.n	8007674 <__gethex+0x1d0>
 8007604:	f845 bb04 	str.w	fp, [r5], #4
 8007608:	eba5 050a 	sub.w	r5, r5, sl
 800760c:	10ad      	asrs	r5, r5, #2
 800760e:	6125      	str	r5, [r4, #16]
 8007610:	4658      	mov	r0, fp
 8007612:	f000 fbd3 	bl	8007dbc <__hi0bits>
 8007616:	016d      	lsls	r5, r5, #5
 8007618:	f8d8 6000 	ldr.w	r6, [r8]
 800761c:	1a2d      	subs	r5, r5, r0
 800761e:	42b5      	cmp	r5, r6
 8007620:	dd54      	ble.n	80076cc <__gethex+0x228>
 8007622:	1bad      	subs	r5, r5, r6
 8007624:	4629      	mov	r1, r5
 8007626:	4620      	mov	r0, r4
 8007628:	f000 ff5f 	bl	80084ea <__any_on>
 800762c:	4681      	mov	r9, r0
 800762e:	b178      	cbz	r0, 8007650 <__gethex+0x1ac>
 8007630:	1e6b      	subs	r3, r5, #1
 8007632:	1159      	asrs	r1, r3, #5
 8007634:	f003 021f 	and.w	r2, r3, #31
 8007638:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800763c:	f04f 0901 	mov.w	r9, #1
 8007640:	fa09 f202 	lsl.w	r2, r9, r2
 8007644:	420a      	tst	r2, r1
 8007646:	d003      	beq.n	8007650 <__gethex+0x1ac>
 8007648:	454b      	cmp	r3, r9
 800764a:	dc36      	bgt.n	80076ba <__gethex+0x216>
 800764c:	f04f 0902 	mov.w	r9, #2
 8007650:	4629      	mov	r1, r5
 8007652:	4620      	mov	r0, r4
 8007654:	f7ff febe 	bl	80073d4 <rshift>
 8007658:	442f      	add	r7, r5
 800765a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800765e:	42bb      	cmp	r3, r7
 8007660:	da42      	bge.n	80076e8 <__gethex+0x244>
 8007662:	9801      	ldr	r0, [sp, #4]
 8007664:	4621      	mov	r1, r4
 8007666:	f000 faf7 	bl	8007c58 <_Bfree>
 800766a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800766c:	2300      	movs	r3, #0
 800766e:	6013      	str	r3, [r2, #0]
 8007670:	25a3      	movs	r5, #163	@ 0xa3
 8007672:	e793      	b.n	800759c <__gethex+0xf8>
 8007674:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007678:	2a2e      	cmp	r2, #46	@ 0x2e
 800767a:	d012      	beq.n	80076a2 <__gethex+0x1fe>
 800767c:	2b20      	cmp	r3, #32
 800767e:	d104      	bne.n	800768a <__gethex+0x1e6>
 8007680:	f845 bb04 	str.w	fp, [r5], #4
 8007684:	f04f 0b00 	mov.w	fp, #0
 8007688:	465b      	mov	r3, fp
 800768a:	7830      	ldrb	r0, [r6, #0]
 800768c:	9303      	str	r3, [sp, #12]
 800768e:	f7ff fef3 	bl	8007478 <__hexdig_fun>
 8007692:	9b03      	ldr	r3, [sp, #12]
 8007694:	f000 000f 	and.w	r0, r0, #15
 8007698:	4098      	lsls	r0, r3
 800769a:	ea4b 0b00 	orr.w	fp, fp, r0
 800769e:	3304      	adds	r3, #4
 80076a0:	e7ae      	b.n	8007600 <__gethex+0x15c>
 80076a2:	45b1      	cmp	r9, r6
 80076a4:	d8ea      	bhi.n	800767c <__gethex+0x1d8>
 80076a6:	492b      	ldr	r1, [pc, #172]	@ (8007754 <__gethex+0x2b0>)
 80076a8:	9303      	str	r3, [sp, #12]
 80076aa:	2201      	movs	r2, #1
 80076ac:	4630      	mov	r0, r6
 80076ae:	f7fe febb 	bl	8006428 <strncmp>
 80076b2:	9b03      	ldr	r3, [sp, #12]
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d1e1      	bne.n	800767c <__gethex+0x1d8>
 80076b8:	e7a2      	b.n	8007600 <__gethex+0x15c>
 80076ba:	1ea9      	subs	r1, r5, #2
 80076bc:	4620      	mov	r0, r4
 80076be:	f000 ff14 	bl	80084ea <__any_on>
 80076c2:	2800      	cmp	r0, #0
 80076c4:	d0c2      	beq.n	800764c <__gethex+0x1a8>
 80076c6:	f04f 0903 	mov.w	r9, #3
 80076ca:	e7c1      	b.n	8007650 <__gethex+0x1ac>
 80076cc:	da09      	bge.n	80076e2 <__gethex+0x23e>
 80076ce:	1b75      	subs	r5, r6, r5
 80076d0:	4621      	mov	r1, r4
 80076d2:	9801      	ldr	r0, [sp, #4]
 80076d4:	462a      	mov	r2, r5
 80076d6:	f000 fccf 	bl	8008078 <__lshift>
 80076da:	1b7f      	subs	r7, r7, r5
 80076dc:	4604      	mov	r4, r0
 80076de:	f100 0a14 	add.w	sl, r0, #20
 80076e2:	f04f 0900 	mov.w	r9, #0
 80076e6:	e7b8      	b.n	800765a <__gethex+0x1b6>
 80076e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80076ec:	42bd      	cmp	r5, r7
 80076ee:	dd6f      	ble.n	80077d0 <__gethex+0x32c>
 80076f0:	1bed      	subs	r5, r5, r7
 80076f2:	42ae      	cmp	r6, r5
 80076f4:	dc34      	bgt.n	8007760 <__gethex+0x2bc>
 80076f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d022      	beq.n	8007744 <__gethex+0x2a0>
 80076fe:	2b03      	cmp	r3, #3
 8007700:	d024      	beq.n	800774c <__gethex+0x2a8>
 8007702:	2b01      	cmp	r3, #1
 8007704:	d115      	bne.n	8007732 <__gethex+0x28e>
 8007706:	42ae      	cmp	r6, r5
 8007708:	d113      	bne.n	8007732 <__gethex+0x28e>
 800770a:	2e01      	cmp	r6, #1
 800770c:	d10b      	bne.n	8007726 <__gethex+0x282>
 800770e:	9a02      	ldr	r2, [sp, #8]
 8007710:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007714:	6013      	str	r3, [r2, #0]
 8007716:	2301      	movs	r3, #1
 8007718:	6123      	str	r3, [r4, #16]
 800771a:	f8ca 3000 	str.w	r3, [sl]
 800771e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007720:	2562      	movs	r5, #98	@ 0x62
 8007722:	601c      	str	r4, [r3, #0]
 8007724:	e73a      	b.n	800759c <__gethex+0xf8>
 8007726:	1e71      	subs	r1, r6, #1
 8007728:	4620      	mov	r0, r4
 800772a:	f000 fede 	bl	80084ea <__any_on>
 800772e:	2800      	cmp	r0, #0
 8007730:	d1ed      	bne.n	800770e <__gethex+0x26a>
 8007732:	9801      	ldr	r0, [sp, #4]
 8007734:	4621      	mov	r1, r4
 8007736:	f000 fa8f 	bl	8007c58 <_Bfree>
 800773a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800773c:	2300      	movs	r3, #0
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	2550      	movs	r5, #80	@ 0x50
 8007742:	e72b      	b.n	800759c <__gethex+0xf8>
 8007744:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1f3      	bne.n	8007732 <__gethex+0x28e>
 800774a:	e7e0      	b.n	800770e <__gethex+0x26a>
 800774c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1dd      	bne.n	800770e <__gethex+0x26a>
 8007752:	e7ee      	b.n	8007732 <__gethex+0x28e>
 8007754:	080097d0 	.word	0x080097d0
 8007758:	08009923 	.word	0x08009923
 800775c:	08009934 	.word	0x08009934
 8007760:	1e6f      	subs	r7, r5, #1
 8007762:	f1b9 0f00 	cmp.w	r9, #0
 8007766:	d130      	bne.n	80077ca <__gethex+0x326>
 8007768:	b127      	cbz	r7, 8007774 <__gethex+0x2d0>
 800776a:	4639      	mov	r1, r7
 800776c:	4620      	mov	r0, r4
 800776e:	f000 febc 	bl	80084ea <__any_on>
 8007772:	4681      	mov	r9, r0
 8007774:	117a      	asrs	r2, r7, #5
 8007776:	2301      	movs	r3, #1
 8007778:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800777c:	f007 071f 	and.w	r7, r7, #31
 8007780:	40bb      	lsls	r3, r7
 8007782:	4213      	tst	r3, r2
 8007784:	4629      	mov	r1, r5
 8007786:	4620      	mov	r0, r4
 8007788:	bf18      	it	ne
 800778a:	f049 0902 	orrne.w	r9, r9, #2
 800778e:	f7ff fe21 	bl	80073d4 <rshift>
 8007792:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007796:	1b76      	subs	r6, r6, r5
 8007798:	2502      	movs	r5, #2
 800779a:	f1b9 0f00 	cmp.w	r9, #0
 800779e:	d047      	beq.n	8007830 <__gethex+0x38c>
 80077a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d015      	beq.n	80077d4 <__gethex+0x330>
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d017      	beq.n	80077dc <__gethex+0x338>
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	d109      	bne.n	80077c4 <__gethex+0x320>
 80077b0:	f019 0f02 	tst.w	r9, #2
 80077b4:	d006      	beq.n	80077c4 <__gethex+0x320>
 80077b6:	f8da 3000 	ldr.w	r3, [sl]
 80077ba:	ea49 0903 	orr.w	r9, r9, r3
 80077be:	f019 0f01 	tst.w	r9, #1
 80077c2:	d10e      	bne.n	80077e2 <__gethex+0x33e>
 80077c4:	f045 0510 	orr.w	r5, r5, #16
 80077c8:	e032      	b.n	8007830 <__gethex+0x38c>
 80077ca:	f04f 0901 	mov.w	r9, #1
 80077ce:	e7d1      	b.n	8007774 <__gethex+0x2d0>
 80077d0:	2501      	movs	r5, #1
 80077d2:	e7e2      	b.n	800779a <__gethex+0x2f6>
 80077d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077d6:	f1c3 0301 	rsb	r3, r3, #1
 80077da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80077dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d0f0      	beq.n	80077c4 <__gethex+0x320>
 80077e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80077e6:	f104 0314 	add.w	r3, r4, #20
 80077ea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80077ee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80077f2:	f04f 0c00 	mov.w	ip, #0
 80077f6:	4618      	mov	r0, r3
 80077f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80077fc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007800:	d01b      	beq.n	800783a <__gethex+0x396>
 8007802:	3201      	adds	r2, #1
 8007804:	6002      	str	r2, [r0, #0]
 8007806:	2d02      	cmp	r5, #2
 8007808:	f104 0314 	add.w	r3, r4, #20
 800780c:	d13c      	bne.n	8007888 <__gethex+0x3e4>
 800780e:	f8d8 2000 	ldr.w	r2, [r8]
 8007812:	3a01      	subs	r2, #1
 8007814:	42b2      	cmp	r2, r6
 8007816:	d109      	bne.n	800782c <__gethex+0x388>
 8007818:	1171      	asrs	r1, r6, #5
 800781a:	2201      	movs	r2, #1
 800781c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007820:	f006 061f 	and.w	r6, r6, #31
 8007824:	fa02 f606 	lsl.w	r6, r2, r6
 8007828:	421e      	tst	r6, r3
 800782a:	d13a      	bne.n	80078a2 <__gethex+0x3fe>
 800782c:	f045 0520 	orr.w	r5, r5, #32
 8007830:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007832:	601c      	str	r4, [r3, #0]
 8007834:	9b02      	ldr	r3, [sp, #8]
 8007836:	601f      	str	r7, [r3, #0]
 8007838:	e6b0      	b.n	800759c <__gethex+0xf8>
 800783a:	4299      	cmp	r1, r3
 800783c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007840:	d8d9      	bhi.n	80077f6 <__gethex+0x352>
 8007842:	68a3      	ldr	r3, [r4, #8]
 8007844:	459b      	cmp	fp, r3
 8007846:	db17      	blt.n	8007878 <__gethex+0x3d4>
 8007848:	6861      	ldr	r1, [r4, #4]
 800784a:	9801      	ldr	r0, [sp, #4]
 800784c:	3101      	adds	r1, #1
 800784e:	f000 f9c3 	bl	8007bd8 <_Balloc>
 8007852:	4681      	mov	r9, r0
 8007854:	b918      	cbnz	r0, 800785e <__gethex+0x3ba>
 8007856:	4b1a      	ldr	r3, [pc, #104]	@ (80078c0 <__gethex+0x41c>)
 8007858:	4602      	mov	r2, r0
 800785a:	2184      	movs	r1, #132	@ 0x84
 800785c:	e6c5      	b.n	80075ea <__gethex+0x146>
 800785e:	6922      	ldr	r2, [r4, #16]
 8007860:	3202      	adds	r2, #2
 8007862:	f104 010c 	add.w	r1, r4, #12
 8007866:	0092      	lsls	r2, r2, #2
 8007868:	300c      	adds	r0, #12
 800786a:	f7fe fed6 	bl	800661a <memcpy>
 800786e:	4621      	mov	r1, r4
 8007870:	9801      	ldr	r0, [sp, #4]
 8007872:	f000 f9f1 	bl	8007c58 <_Bfree>
 8007876:	464c      	mov	r4, r9
 8007878:	6923      	ldr	r3, [r4, #16]
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007880:	6122      	str	r2, [r4, #16]
 8007882:	2201      	movs	r2, #1
 8007884:	615a      	str	r2, [r3, #20]
 8007886:	e7be      	b.n	8007806 <__gethex+0x362>
 8007888:	6922      	ldr	r2, [r4, #16]
 800788a:	455a      	cmp	r2, fp
 800788c:	dd0b      	ble.n	80078a6 <__gethex+0x402>
 800788e:	2101      	movs	r1, #1
 8007890:	4620      	mov	r0, r4
 8007892:	f7ff fd9f 	bl	80073d4 <rshift>
 8007896:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800789a:	3701      	adds	r7, #1
 800789c:	42bb      	cmp	r3, r7
 800789e:	f6ff aee0 	blt.w	8007662 <__gethex+0x1be>
 80078a2:	2501      	movs	r5, #1
 80078a4:	e7c2      	b.n	800782c <__gethex+0x388>
 80078a6:	f016 061f 	ands.w	r6, r6, #31
 80078aa:	d0fa      	beq.n	80078a2 <__gethex+0x3fe>
 80078ac:	4453      	add	r3, sl
 80078ae:	f1c6 0620 	rsb	r6, r6, #32
 80078b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80078b6:	f000 fa81 	bl	8007dbc <__hi0bits>
 80078ba:	42b0      	cmp	r0, r6
 80078bc:	dbe7      	blt.n	800788e <__gethex+0x3ea>
 80078be:	e7f0      	b.n	80078a2 <__gethex+0x3fe>
 80078c0:	08009923 	.word	0x08009923

080078c4 <L_shift>:
 80078c4:	f1c2 0208 	rsb	r2, r2, #8
 80078c8:	0092      	lsls	r2, r2, #2
 80078ca:	b570      	push	{r4, r5, r6, lr}
 80078cc:	f1c2 0620 	rsb	r6, r2, #32
 80078d0:	6843      	ldr	r3, [r0, #4]
 80078d2:	6804      	ldr	r4, [r0, #0]
 80078d4:	fa03 f506 	lsl.w	r5, r3, r6
 80078d8:	432c      	orrs	r4, r5
 80078da:	40d3      	lsrs	r3, r2
 80078dc:	6004      	str	r4, [r0, #0]
 80078de:	f840 3f04 	str.w	r3, [r0, #4]!
 80078e2:	4288      	cmp	r0, r1
 80078e4:	d3f4      	bcc.n	80078d0 <L_shift+0xc>
 80078e6:	bd70      	pop	{r4, r5, r6, pc}

080078e8 <__match>:
 80078e8:	b530      	push	{r4, r5, lr}
 80078ea:	6803      	ldr	r3, [r0, #0]
 80078ec:	3301      	adds	r3, #1
 80078ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078f2:	b914      	cbnz	r4, 80078fa <__match+0x12>
 80078f4:	6003      	str	r3, [r0, #0]
 80078f6:	2001      	movs	r0, #1
 80078f8:	bd30      	pop	{r4, r5, pc}
 80078fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007902:	2d19      	cmp	r5, #25
 8007904:	bf98      	it	ls
 8007906:	3220      	addls	r2, #32
 8007908:	42a2      	cmp	r2, r4
 800790a:	d0f0      	beq.n	80078ee <__match+0x6>
 800790c:	2000      	movs	r0, #0
 800790e:	e7f3      	b.n	80078f8 <__match+0x10>

08007910 <__hexnan>:
 8007910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007914:	680b      	ldr	r3, [r1, #0]
 8007916:	6801      	ldr	r1, [r0, #0]
 8007918:	115e      	asrs	r6, r3, #5
 800791a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800791e:	f013 031f 	ands.w	r3, r3, #31
 8007922:	b087      	sub	sp, #28
 8007924:	bf18      	it	ne
 8007926:	3604      	addne	r6, #4
 8007928:	2500      	movs	r5, #0
 800792a:	1f37      	subs	r7, r6, #4
 800792c:	4682      	mov	sl, r0
 800792e:	4690      	mov	r8, r2
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	f846 5c04 	str.w	r5, [r6, #-4]
 8007936:	46b9      	mov	r9, r7
 8007938:	463c      	mov	r4, r7
 800793a:	9502      	str	r5, [sp, #8]
 800793c:	46ab      	mov	fp, r5
 800793e:	784a      	ldrb	r2, [r1, #1]
 8007940:	1c4b      	adds	r3, r1, #1
 8007942:	9303      	str	r3, [sp, #12]
 8007944:	b342      	cbz	r2, 8007998 <__hexnan+0x88>
 8007946:	4610      	mov	r0, r2
 8007948:	9105      	str	r1, [sp, #20]
 800794a:	9204      	str	r2, [sp, #16]
 800794c:	f7ff fd94 	bl	8007478 <__hexdig_fun>
 8007950:	2800      	cmp	r0, #0
 8007952:	d151      	bne.n	80079f8 <__hexnan+0xe8>
 8007954:	9a04      	ldr	r2, [sp, #16]
 8007956:	9905      	ldr	r1, [sp, #20]
 8007958:	2a20      	cmp	r2, #32
 800795a:	d818      	bhi.n	800798e <__hexnan+0x7e>
 800795c:	9b02      	ldr	r3, [sp, #8]
 800795e:	459b      	cmp	fp, r3
 8007960:	dd13      	ble.n	800798a <__hexnan+0x7a>
 8007962:	454c      	cmp	r4, r9
 8007964:	d206      	bcs.n	8007974 <__hexnan+0x64>
 8007966:	2d07      	cmp	r5, #7
 8007968:	dc04      	bgt.n	8007974 <__hexnan+0x64>
 800796a:	462a      	mov	r2, r5
 800796c:	4649      	mov	r1, r9
 800796e:	4620      	mov	r0, r4
 8007970:	f7ff ffa8 	bl	80078c4 <L_shift>
 8007974:	4544      	cmp	r4, r8
 8007976:	d952      	bls.n	8007a1e <__hexnan+0x10e>
 8007978:	2300      	movs	r3, #0
 800797a:	f1a4 0904 	sub.w	r9, r4, #4
 800797e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007982:	f8cd b008 	str.w	fp, [sp, #8]
 8007986:	464c      	mov	r4, r9
 8007988:	461d      	mov	r5, r3
 800798a:	9903      	ldr	r1, [sp, #12]
 800798c:	e7d7      	b.n	800793e <__hexnan+0x2e>
 800798e:	2a29      	cmp	r2, #41	@ 0x29
 8007990:	d157      	bne.n	8007a42 <__hexnan+0x132>
 8007992:	3102      	adds	r1, #2
 8007994:	f8ca 1000 	str.w	r1, [sl]
 8007998:	f1bb 0f00 	cmp.w	fp, #0
 800799c:	d051      	beq.n	8007a42 <__hexnan+0x132>
 800799e:	454c      	cmp	r4, r9
 80079a0:	d206      	bcs.n	80079b0 <__hexnan+0xa0>
 80079a2:	2d07      	cmp	r5, #7
 80079a4:	dc04      	bgt.n	80079b0 <__hexnan+0xa0>
 80079a6:	462a      	mov	r2, r5
 80079a8:	4649      	mov	r1, r9
 80079aa:	4620      	mov	r0, r4
 80079ac:	f7ff ff8a 	bl	80078c4 <L_shift>
 80079b0:	4544      	cmp	r4, r8
 80079b2:	d936      	bls.n	8007a22 <__hexnan+0x112>
 80079b4:	f1a8 0204 	sub.w	r2, r8, #4
 80079b8:	4623      	mov	r3, r4
 80079ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80079be:	f842 1f04 	str.w	r1, [r2, #4]!
 80079c2:	429f      	cmp	r7, r3
 80079c4:	d2f9      	bcs.n	80079ba <__hexnan+0xaa>
 80079c6:	1b3b      	subs	r3, r7, r4
 80079c8:	f023 0303 	bic.w	r3, r3, #3
 80079cc:	3304      	adds	r3, #4
 80079ce:	3401      	adds	r4, #1
 80079d0:	3e03      	subs	r6, #3
 80079d2:	42b4      	cmp	r4, r6
 80079d4:	bf88      	it	hi
 80079d6:	2304      	movhi	r3, #4
 80079d8:	4443      	add	r3, r8
 80079da:	2200      	movs	r2, #0
 80079dc:	f843 2b04 	str.w	r2, [r3], #4
 80079e0:	429f      	cmp	r7, r3
 80079e2:	d2fb      	bcs.n	80079dc <__hexnan+0xcc>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	b91b      	cbnz	r3, 80079f0 <__hexnan+0xe0>
 80079e8:	4547      	cmp	r7, r8
 80079ea:	d128      	bne.n	8007a3e <__hexnan+0x12e>
 80079ec:	2301      	movs	r3, #1
 80079ee:	603b      	str	r3, [r7, #0]
 80079f0:	2005      	movs	r0, #5
 80079f2:	b007      	add	sp, #28
 80079f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f8:	3501      	adds	r5, #1
 80079fa:	2d08      	cmp	r5, #8
 80079fc:	f10b 0b01 	add.w	fp, fp, #1
 8007a00:	dd06      	ble.n	8007a10 <__hexnan+0x100>
 8007a02:	4544      	cmp	r4, r8
 8007a04:	d9c1      	bls.n	800798a <__hexnan+0x7a>
 8007a06:	2300      	movs	r3, #0
 8007a08:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a0c:	2501      	movs	r5, #1
 8007a0e:	3c04      	subs	r4, #4
 8007a10:	6822      	ldr	r2, [r4, #0]
 8007a12:	f000 000f 	and.w	r0, r0, #15
 8007a16:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007a1a:	6020      	str	r0, [r4, #0]
 8007a1c:	e7b5      	b.n	800798a <__hexnan+0x7a>
 8007a1e:	2508      	movs	r5, #8
 8007a20:	e7b3      	b.n	800798a <__hexnan+0x7a>
 8007a22:	9b01      	ldr	r3, [sp, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d0dd      	beq.n	80079e4 <__hexnan+0xd4>
 8007a28:	f1c3 0320 	rsb	r3, r3, #32
 8007a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a30:	40da      	lsrs	r2, r3
 8007a32:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007a36:	4013      	ands	r3, r2
 8007a38:	f846 3c04 	str.w	r3, [r6, #-4]
 8007a3c:	e7d2      	b.n	80079e4 <__hexnan+0xd4>
 8007a3e:	3f04      	subs	r7, #4
 8007a40:	e7d0      	b.n	80079e4 <__hexnan+0xd4>
 8007a42:	2004      	movs	r0, #4
 8007a44:	e7d5      	b.n	80079f2 <__hexnan+0xe2>
	...

08007a48 <malloc>:
 8007a48:	4b02      	ldr	r3, [pc, #8]	@ (8007a54 <malloc+0xc>)
 8007a4a:	4601      	mov	r1, r0
 8007a4c:	6818      	ldr	r0, [r3, #0]
 8007a4e:	f000 b825 	b.w	8007a9c <_malloc_r>
 8007a52:	bf00      	nop
 8007a54:	20000190 	.word	0x20000190

08007a58 <sbrk_aligned>:
 8007a58:	b570      	push	{r4, r5, r6, lr}
 8007a5a:	4e0f      	ldr	r6, [pc, #60]	@ (8007a98 <sbrk_aligned+0x40>)
 8007a5c:	460c      	mov	r4, r1
 8007a5e:	6831      	ldr	r1, [r6, #0]
 8007a60:	4605      	mov	r5, r0
 8007a62:	b911      	cbnz	r1, 8007a6a <sbrk_aligned+0x12>
 8007a64:	f001 fcf6 	bl	8009454 <_sbrk_r>
 8007a68:	6030      	str	r0, [r6, #0]
 8007a6a:	4621      	mov	r1, r4
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f001 fcf1 	bl	8009454 <_sbrk_r>
 8007a72:	1c43      	adds	r3, r0, #1
 8007a74:	d103      	bne.n	8007a7e <sbrk_aligned+0x26>
 8007a76:	f04f 34ff 	mov.w	r4, #4294967295
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	bd70      	pop	{r4, r5, r6, pc}
 8007a7e:	1cc4      	adds	r4, r0, #3
 8007a80:	f024 0403 	bic.w	r4, r4, #3
 8007a84:	42a0      	cmp	r0, r4
 8007a86:	d0f8      	beq.n	8007a7a <sbrk_aligned+0x22>
 8007a88:	1a21      	subs	r1, r4, r0
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	f001 fce2 	bl	8009454 <_sbrk_r>
 8007a90:	3001      	adds	r0, #1
 8007a92:	d1f2      	bne.n	8007a7a <sbrk_aligned+0x22>
 8007a94:	e7ef      	b.n	8007a76 <sbrk_aligned+0x1e>
 8007a96:	bf00      	nop
 8007a98:	2000133c 	.word	0x2000133c

08007a9c <_malloc_r>:
 8007a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aa0:	1ccd      	adds	r5, r1, #3
 8007aa2:	f025 0503 	bic.w	r5, r5, #3
 8007aa6:	3508      	adds	r5, #8
 8007aa8:	2d0c      	cmp	r5, #12
 8007aaa:	bf38      	it	cc
 8007aac:	250c      	movcc	r5, #12
 8007aae:	2d00      	cmp	r5, #0
 8007ab0:	4606      	mov	r6, r0
 8007ab2:	db01      	blt.n	8007ab8 <_malloc_r+0x1c>
 8007ab4:	42a9      	cmp	r1, r5
 8007ab6:	d904      	bls.n	8007ac2 <_malloc_r+0x26>
 8007ab8:	230c      	movs	r3, #12
 8007aba:	6033      	str	r3, [r6, #0]
 8007abc:	2000      	movs	r0, #0
 8007abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ac2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007b98 <_malloc_r+0xfc>
 8007ac6:	f000 f87b 	bl	8007bc0 <__malloc_lock>
 8007aca:	f8d8 3000 	ldr.w	r3, [r8]
 8007ace:	461c      	mov	r4, r3
 8007ad0:	bb44      	cbnz	r4, 8007b24 <_malloc_r+0x88>
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	4630      	mov	r0, r6
 8007ad6:	f7ff ffbf 	bl	8007a58 <sbrk_aligned>
 8007ada:	1c43      	adds	r3, r0, #1
 8007adc:	4604      	mov	r4, r0
 8007ade:	d158      	bne.n	8007b92 <_malloc_r+0xf6>
 8007ae0:	f8d8 4000 	ldr.w	r4, [r8]
 8007ae4:	4627      	mov	r7, r4
 8007ae6:	2f00      	cmp	r7, #0
 8007ae8:	d143      	bne.n	8007b72 <_malloc_r+0xd6>
 8007aea:	2c00      	cmp	r4, #0
 8007aec:	d04b      	beq.n	8007b86 <_malloc_r+0xea>
 8007aee:	6823      	ldr	r3, [r4, #0]
 8007af0:	4639      	mov	r1, r7
 8007af2:	4630      	mov	r0, r6
 8007af4:	eb04 0903 	add.w	r9, r4, r3
 8007af8:	f001 fcac 	bl	8009454 <_sbrk_r>
 8007afc:	4581      	cmp	r9, r0
 8007afe:	d142      	bne.n	8007b86 <_malloc_r+0xea>
 8007b00:	6821      	ldr	r1, [r4, #0]
 8007b02:	1a6d      	subs	r5, r5, r1
 8007b04:	4629      	mov	r1, r5
 8007b06:	4630      	mov	r0, r6
 8007b08:	f7ff ffa6 	bl	8007a58 <sbrk_aligned>
 8007b0c:	3001      	adds	r0, #1
 8007b0e:	d03a      	beq.n	8007b86 <_malloc_r+0xea>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	442b      	add	r3, r5
 8007b14:	6023      	str	r3, [r4, #0]
 8007b16:	f8d8 3000 	ldr.w	r3, [r8]
 8007b1a:	685a      	ldr	r2, [r3, #4]
 8007b1c:	bb62      	cbnz	r2, 8007b78 <_malloc_r+0xdc>
 8007b1e:	f8c8 7000 	str.w	r7, [r8]
 8007b22:	e00f      	b.n	8007b44 <_malloc_r+0xa8>
 8007b24:	6822      	ldr	r2, [r4, #0]
 8007b26:	1b52      	subs	r2, r2, r5
 8007b28:	d420      	bmi.n	8007b6c <_malloc_r+0xd0>
 8007b2a:	2a0b      	cmp	r2, #11
 8007b2c:	d917      	bls.n	8007b5e <_malloc_r+0xc2>
 8007b2e:	1961      	adds	r1, r4, r5
 8007b30:	42a3      	cmp	r3, r4
 8007b32:	6025      	str	r5, [r4, #0]
 8007b34:	bf18      	it	ne
 8007b36:	6059      	strne	r1, [r3, #4]
 8007b38:	6863      	ldr	r3, [r4, #4]
 8007b3a:	bf08      	it	eq
 8007b3c:	f8c8 1000 	streq.w	r1, [r8]
 8007b40:	5162      	str	r2, [r4, r5]
 8007b42:	604b      	str	r3, [r1, #4]
 8007b44:	4630      	mov	r0, r6
 8007b46:	f000 f841 	bl	8007bcc <__malloc_unlock>
 8007b4a:	f104 000b 	add.w	r0, r4, #11
 8007b4e:	1d23      	adds	r3, r4, #4
 8007b50:	f020 0007 	bic.w	r0, r0, #7
 8007b54:	1ac2      	subs	r2, r0, r3
 8007b56:	bf1c      	itt	ne
 8007b58:	1a1b      	subne	r3, r3, r0
 8007b5a:	50a3      	strne	r3, [r4, r2]
 8007b5c:	e7af      	b.n	8007abe <_malloc_r+0x22>
 8007b5e:	6862      	ldr	r2, [r4, #4]
 8007b60:	42a3      	cmp	r3, r4
 8007b62:	bf0c      	ite	eq
 8007b64:	f8c8 2000 	streq.w	r2, [r8]
 8007b68:	605a      	strne	r2, [r3, #4]
 8007b6a:	e7eb      	b.n	8007b44 <_malloc_r+0xa8>
 8007b6c:	4623      	mov	r3, r4
 8007b6e:	6864      	ldr	r4, [r4, #4]
 8007b70:	e7ae      	b.n	8007ad0 <_malloc_r+0x34>
 8007b72:	463c      	mov	r4, r7
 8007b74:	687f      	ldr	r7, [r7, #4]
 8007b76:	e7b6      	b.n	8007ae6 <_malloc_r+0x4a>
 8007b78:	461a      	mov	r2, r3
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	42a3      	cmp	r3, r4
 8007b7e:	d1fb      	bne.n	8007b78 <_malloc_r+0xdc>
 8007b80:	2300      	movs	r3, #0
 8007b82:	6053      	str	r3, [r2, #4]
 8007b84:	e7de      	b.n	8007b44 <_malloc_r+0xa8>
 8007b86:	230c      	movs	r3, #12
 8007b88:	6033      	str	r3, [r6, #0]
 8007b8a:	4630      	mov	r0, r6
 8007b8c:	f000 f81e 	bl	8007bcc <__malloc_unlock>
 8007b90:	e794      	b.n	8007abc <_malloc_r+0x20>
 8007b92:	6005      	str	r5, [r0, #0]
 8007b94:	e7d6      	b.n	8007b44 <_malloc_r+0xa8>
 8007b96:	bf00      	nop
 8007b98:	20001340 	.word	0x20001340

08007b9c <__ascii_mbtowc>:
 8007b9c:	b082      	sub	sp, #8
 8007b9e:	b901      	cbnz	r1, 8007ba2 <__ascii_mbtowc+0x6>
 8007ba0:	a901      	add	r1, sp, #4
 8007ba2:	b142      	cbz	r2, 8007bb6 <__ascii_mbtowc+0x1a>
 8007ba4:	b14b      	cbz	r3, 8007bba <__ascii_mbtowc+0x1e>
 8007ba6:	7813      	ldrb	r3, [r2, #0]
 8007ba8:	600b      	str	r3, [r1, #0]
 8007baa:	7812      	ldrb	r2, [r2, #0]
 8007bac:	1e10      	subs	r0, r2, #0
 8007bae:	bf18      	it	ne
 8007bb0:	2001      	movne	r0, #1
 8007bb2:	b002      	add	sp, #8
 8007bb4:	4770      	bx	lr
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	e7fb      	b.n	8007bb2 <__ascii_mbtowc+0x16>
 8007bba:	f06f 0001 	mvn.w	r0, #1
 8007bbe:	e7f8      	b.n	8007bb2 <__ascii_mbtowc+0x16>

08007bc0 <__malloc_lock>:
 8007bc0:	4801      	ldr	r0, [pc, #4]	@ (8007bc8 <__malloc_lock+0x8>)
 8007bc2:	f7fe bd28 	b.w	8006616 <__retarget_lock_acquire_recursive>
 8007bc6:	bf00      	nop
 8007bc8:	20001338 	.word	0x20001338

08007bcc <__malloc_unlock>:
 8007bcc:	4801      	ldr	r0, [pc, #4]	@ (8007bd4 <__malloc_unlock+0x8>)
 8007bce:	f7fe bd23 	b.w	8006618 <__retarget_lock_release_recursive>
 8007bd2:	bf00      	nop
 8007bd4:	20001338 	.word	0x20001338

08007bd8 <_Balloc>:
 8007bd8:	b570      	push	{r4, r5, r6, lr}
 8007bda:	69c6      	ldr	r6, [r0, #28]
 8007bdc:	4604      	mov	r4, r0
 8007bde:	460d      	mov	r5, r1
 8007be0:	b976      	cbnz	r6, 8007c00 <_Balloc+0x28>
 8007be2:	2010      	movs	r0, #16
 8007be4:	f7ff ff30 	bl	8007a48 <malloc>
 8007be8:	4602      	mov	r2, r0
 8007bea:	61e0      	str	r0, [r4, #28]
 8007bec:	b920      	cbnz	r0, 8007bf8 <_Balloc+0x20>
 8007bee:	4b18      	ldr	r3, [pc, #96]	@ (8007c50 <_Balloc+0x78>)
 8007bf0:	4818      	ldr	r0, [pc, #96]	@ (8007c54 <_Balloc+0x7c>)
 8007bf2:	216b      	movs	r1, #107	@ 0x6b
 8007bf4:	f7fe fd2e 	bl	8006654 <__assert_func>
 8007bf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007bfc:	6006      	str	r6, [r0, #0]
 8007bfe:	60c6      	str	r6, [r0, #12]
 8007c00:	69e6      	ldr	r6, [r4, #28]
 8007c02:	68f3      	ldr	r3, [r6, #12]
 8007c04:	b183      	cbz	r3, 8007c28 <_Balloc+0x50>
 8007c06:	69e3      	ldr	r3, [r4, #28]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c0e:	b9b8      	cbnz	r0, 8007c40 <_Balloc+0x68>
 8007c10:	2101      	movs	r1, #1
 8007c12:	fa01 f605 	lsl.w	r6, r1, r5
 8007c16:	1d72      	adds	r2, r6, #5
 8007c18:	0092      	lsls	r2, r2, #2
 8007c1a:	4620      	mov	r0, r4
 8007c1c:	f001 fc31 	bl	8009482 <_calloc_r>
 8007c20:	b160      	cbz	r0, 8007c3c <_Balloc+0x64>
 8007c22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007c26:	e00e      	b.n	8007c46 <_Balloc+0x6e>
 8007c28:	2221      	movs	r2, #33	@ 0x21
 8007c2a:	2104      	movs	r1, #4
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	f001 fc28 	bl	8009482 <_calloc_r>
 8007c32:	69e3      	ldr	r3, [r4, #28]
 8007c34:	60f0      	str	r0, [r6, #12]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d1e4      	bne.n	8007c06 <_Balloc+0x2e>
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	bd70      	pop	{r4, r5, r6, pc}
 8007c40:	6802      	ldr	r2, [r0, #0]
 8007c42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007c46:	2300      	movs	r3, #0
 8007c48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007c4c:	e7f7      	b.n	8007c3e <_Balloc+0x66>
 8007c4e:	bf00      	nop
 8007c50:	08009809 	.word	0x08009809
 8007c54:	08009994 	.word	0x08009994

08007c58 <_Bfree>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	69c6      	ldr	r6, [r0, #28]
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	460c      	mov	r4, r1
 8007c60:	b976      	cbnz	r6, 8007c80 <_Bfree+0x28>
 8007c62:	2010      	movs	r0, #16
 8007c64:	f7ff fef0 	bl	8007a48 <malloc>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	61e8      	str	r0, [r5, #28]
 8007c6c:	b920      	cbnz	r0, 8007c78 <_Bfree+0x20>
 8007c6e:	4b09      	ldr	r3, [pc, #36]	@ (8007c94 <_Bfree+0x3c>)
 8007c70:	4809      	ldr	r0, [pc, #36]	@ (8007c98 <_Bfree+0x40>)
 8007c72:	218f      	movs	r1, #143	@ 0x8f
 8007c74:	f7fe fcee 	bl	8006654 <__assert_func>
 8007c78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c7c:	6006      	str	r6, [r0, #0]
 8007c7e:	60c6      	str	r6, [r0, #12]
 8007c80:	b13c      	cbz	r4, 8007c92 <_Bfree+0x3a>
 8007c82:	69eb      	ldr	r3, [r5, #28]
 8007c84:	6862      	ldr	r2, [r4, #4]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007c8c:	6021      	str	r1, [r4, #0]
 8007c8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007c92:	bd70      	pop	{r4, r5, r6, pc}
 8007c94:	08009809 	.word	0x08009809
 8007c98:	08009994 	.word	0x08009994

08007c9c <__multadd>:
 8007c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca0:	690d      	ldr	r5, [r1, #16]
 8007ca2:	4607      	mov	r7, r0
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	461e      	mov	r6, r3
 8007ca8:	f101 0c14 	add.w	ip, r1, #20
 8007cac:	2000      	movs	r0, #0
 8007cae:	f8dc 3000 	ldr.w	r3, [ip]
 8007cb2:	b299      	uxth	r1, r3
 8007cb4:	fb02 6101 	mla	r1, r2, r1, r6
 8007cb8:	0c1e      	lsrs	r6, r3, #16
 8007cba:	0c0b      	lsrs	r3, r1, #16
 8007cbc:	fb02 3306 	mla	r3, r2, r6, r3
 8007cc0:	b289      	uxth	r1, r1
 8007cc2:	3001      	adds	r0, #1
 8007cc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007cc8:	4285      	cmp	r5, r0
 8007cca:	f84c 1b04 	str.w	r1, [ip], #4
 8007cce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007cd2:	dcec      	bgt.n	8007cae <__multadd+0x12>
 8007cd4:	b30e      	cbz	r6, 8007d1a <__multadd+0x7e>
 8007cd6:	68a3      	ldr	r3, [r4, #8]
 8007cd8:	42ab      	cmp	r3, r5
 8007cda:	dc19      	bgt.n	8007d10 <__multadd+0x74>
 8007cdc:	6861      	ldr	r1, [r4, #4]
 8007cde:	4638      	mov	r0, r7
 8007ce0:	3101      	adds	r1, #1
 8007ce2:	f7ff ff79 	bl	8007bd8 <_Balloc>
 8007ce6:	4680      	mov	r8, r0
 8007ce8:	b928      	cbnz	r0, 8007cf6 <__multadd+0x5a>
 8007cea:	4602      	mov	r2, r0
 8007cec:	4b0c      	ldr	r3, [pc, #48]	@ (8007d20 <__multadd+0x84>)
 8007cee:	480d      	ldr	r0, [pc, #52]	@ (8007d24 <__multadd+0x88>)
 8007cf0:	21ba      	movs	r1, #186	@ 0xba
 8007cf2:	f7fe fcaf 	bl	8006654 <__assert_func>
 8007cf6:	6922      	ldr	r2, [r4, #16]
 8007cf8:	3202      	adds	r2, #2
 8007cfa:	f104 010c 	add.w	r1, r4, #12
 8007cfe:	0092      	lsls	r2, r2, #2
 8007d00:	300c      	adds	r0, #12
 8007d02:	f7fe fc8a 	bl	800661a <memcpy>
 8007d06:	4621      	mov	r1, r4
 8007d08:	4638      	mov	r0, r7
 8007d0a:	f7ff ffa5 	bl	8007c58 <_Bfree>
 8007d0e:	4644      	mov	r4, r8
 8007d10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d14:	3501      	adds	r5, #1
 8007d16:	615e      	str	r6, [r3, #20]
 8007d18:	6125      	str	r5, [r4, #16]
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d20:	08009923 	.word	0x08009923
 8007d24:	08009994 	.word	0x08009994

08007d28 <__s2b>:
 8007d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d2c:	460c      	mov	r4, r1
 8007d2e:	4615      	mov	r5, r2
 8007d30:	461f      	mov	r7, r3
 8007d32:	2209      	movs	r2, #9
 8007d34:	3308      	adds	r3, #8
 8007d36:	4606      	mov	r6, r0
 8007d38:	fb93 f3f2 	sdiv	r3, r3, r2
 8007d3c:	2100      	movs	r1, #0
 8007d3e:	2201      	movs	r2, #1
 8007d40:	429a      	cmp	r2, r3
 8007d42:	db09      	blt.n	8007d58 <__s2b+0x30>
 8007d44:	4630      	mov	r0, r6
 8007d46:	f7ff ff47 	bl	8007bd8 <_Balloc>
 8007d4a:	b940      	cbnz	r0, 8007d5e <__s2b+0x36>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	4b19      	ldr	r3, [pc, #100]	@ (8007db4 <__s2b+0x8c>)
 8007d50:	4819      	ldr	r0, [pc, #100]	@ (8007db8 <__s2b+0x90>)
 8007d52:	21d3      	movs	r1, #211	@ 0xd3
 8007d54:	f7fe fc7e 	bl	8006654 <__assert_func>
 8007d58:	0052      	lsls	r2, r2, #1
 8007d5a:	3101      	adds	r1, #1
 8007d5c:	e7f0      	b.n	8007d40 <__s2b+0x18>
 8007d5e:	9b08      	ldr	r3, [sp, #32]
 8007d60:	6143      	str	r3, [r0, #20]
 8007d62:	2d09      	cmp	r5, #9
 8007d64:	f04f 0301 	mov.w	r3, #1
 8007d68:	6103      	str	r3, [r0, #16]
 8007d6a:	dd16      	ble.n	8007d9a <__s2b+0x72>
 8007d6c:	f104 0909 	add.w	r9, r4, #9
 8007d70:	46c8      	mov	r8, r9
 8007d72:	442c      	add	r4, r5
 8007d74:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007d78:	4601      	mov	r1, r0
 8007d7a:	3b30      	subs	r3, #48	@ 0x30
 8007d7c:	220a      	movs	r2, #10
 8007d7e:	4630      	mov	r0, r6
 8007d80:	f7ff ff8c 	bl	8007c9c <__multadd>
 8007d84:	45a0      	cmp	r8, r4
 8007d86:	d1f5      	bne.n	8007d74 <__s2b+0x4c>
 8007d88:	f1a5 0408 	sub.w	r4, r5, #8
 8007d8c:	444c      	add	r4, r9
 8007d8e:	1b2d      	subs	r5, r5, r4
 8007d90:	1963      	adds	r3, r4, r5
 8007d92:	42bb      	cmp	r3, r7
 8007d94:	db04      	blt.n	8007da0 <__s2b+0x78>
 8007d96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d9a:	340a      	adds	r4, #10
 8007d9c:	2509      	movs	r5, #9
 8007d9e:	e7f6      	b.n	8007d8e <__s2b+0x66>
 8007da0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007da4:	4601      	mov	r1, r0
 8007da6:	3b30      	subs	r3, #48	@ 0x30
 8007da8:	220a      	movs	r2, #10
 8007daa:	4630      	mov	r0, r6
 8007dac:	f7ff ff76 	bl	8007c9c <__multadd>
 8007db0:	e7ee      	b.n	8007d90 <__s2b+0x68>
 8007db2:	bf00      	nop
 8007db4:	08009923 	.word	0x08009923
 8007db8:	08009994 	.word	0x08009994

08007dbc <__hi0bits>:
 8007dbc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	bf36      	itet	cc
 8007dc4:	0403      	lslcc	r3, r0, #16
 8007dc6:	2000      	movcs	r0, #0
 8007dc8:	2010      	movcc	r0, #16
 8007dca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007dce:	bf3c      	itt	cc
 8007dd0:	021b      	lslcc	r3, r3, #8
 8007dd2:	3008      	addcc	r0, #8
 8007dd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dd8:	bf3c      	itt	cc
 8007dda:	011b      	lslcc	r3, r3, #4
 8007ddc:	3004      	addcc	r0, #4
 8007dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007de2:	bf3c      	itt	cc
 8007de4:	009b      	lslcc	r3, r3, #2
 8007de6:	3002      	addcc	r0, #2
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	db05      	blt.n	8007df8 <__hi0bits+0x3c>
 8007dec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007df0:	f100 0001 	add.w	r0, r0, #1
 8007df4:	bf08      	it	eq
 8007df6:	2020      	moveq	r0, #32
 8007df8:	4770      	bx	lr

08007dfa <__lo0bits>:
 8007dfa:	6803      	ldr	r3, [r0, #0]
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	f013 0007 	ands.w	r0, r3, #7
 8007e02:	d00b      	beq.n	8007e1c <__lo0bits+0x22>
 8007e04:	07d9      	lsls	r1, r3, #31
 8007e06:	d421      	bmi.n	8007e4c <__lo0bits+0x52>
 8007e08:	0798      	lsls	r0, r3, #30
 8007e0a:	bf49      	itett	mi
 8007e0c:	085b      	lsrmi	r3, r3, #1
 8007e0e:	089b      	lsrpl	r3, r3, #2
 8007e10:	2001      	movmi	r0, #1
 8007e12:	6013      	strmi	r3, [r2, #0]
 8007e14:	bf5c      	itt	pl
 8007e16:	6013      	strpl	r3, [r2, #0]
 8007e18:	2002      	movpl	r0, #2
 8007e1a:	4770      	bx	lr
 8007e1c:	b299      	uxth	r1, r3
 8007e1e:	b909      	cbnz	r1, 8007e24 <__lo0bits+0x2a>
 8007e20:	0c1b      	lsrs	r3, r3, #16
 8007e22:	2010      	movs	r0, #16
 8007e24:	b2d9      	uxtb	r1, r3
 8007e26:	b909      	cbnz	r1, 8007e2c <__lo0bits+0x32>
 8007e28:	3008      	adds	r0, #8
 8007e2a:	0a1b      	lsrs	r3, r3, #8
 8007e2c:	0719      	lsls	r1, r3, #28
 8007e2e:	bf04      	itt	eq
 8007e30:	091b      	lsreq	r3, r3, #4
 8007e32:	3004      	addeq	r0, #4
 8007e34:	0799      	lsls	r1, r3, #30
 8007e36:	bf04      	itt	eq
 8007e38:	089b      	lsreq	r3, r3, #2
 8007e3a:	3002      	addeq	r0, #2
 8007e3c:	07d9      	lsls	r1, r3, #31
 8007e3e:	d403      	bmi.n	8007e48 <__lo0bits+0x4e>
 8007e40:	085b      	lsrs	r3, r3, #1
 8007e42:	f100 0001 	add.w	r0, r0, #1
 8007e46:	d003      	beq.n	8007e50 <__lo0bits+0x56>
 8007e48:	6013      	str	r3, [r2, #0]
 8007e4a:	4770      	bx	lr
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	4770      	bx	lr
 8007e50:	2020      	movs	r0, #32
 8007e52:	4770      	bx	lr

08007e54 <__i2b>:
 8007e54:	b510      	push	{r4, lr}
 8007e56:	460c      	mov	r4, r1
 8007e58:	2101      	movs	r1, #1
 8007e5a:	f7ff febd 	bl	8007bd8 <_Balloc>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	b928      	cbnz	r0, 8007e6e <__i2b+0x1a>
 8007e62:	4b05      	ldr	r3, [pc, #20]	@ (8007e78 <__i2b+0x24>)
 8007e64:	4805      	ldr	r0, [pc, #20]	@ (8007e7c <__i2b+0x28>)
 8007e66:	f240 1145 	movw	r1, #325	@ 0x145
 8007e6a:	f7fe fbf3 	bl	8006654 <__assert_func>
 8007e6e:	2301      	movs	r3, #1
 8007e70:	6144      	str	r4, [r0, #20]
 8007e72:	6103      	str	r3, [r0, #16]
 8007e74:	bd10      	pop	{r4, pc}
 8007e76:	bf00      	nop
 8007e78:	08009923 	.word	0x08009923
 8007e7c:	08009994 	.word	0x08009994

08007e80 <__multiply>:
 8007e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e84:	4617      	mov	r7, r2
 8007e86:	690a      	ldr	r2, [r1, #16]
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	bfa8      	it	ge
 8007e8e:	463b      	movge	r3, r7
 8007e90:	4689      	mov	r9, r1
 8007e92:	bfa4      	itt	ge
 8007e94:	460f      	movge	r7, r1
 8007e96:	4699      	movge	r9, r3
 8007e98:	693d      	ldr	r5, [r7, #16]
 8007e9a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	6879      	ldr	r1, [r7, #4]
 8007ea2:	eb05 060a 	add.w	r6, r5, sl
 8007ea6:	42b3      	cmp	r3, r6
 8007ea8:	b085      	sub	sp, #20
 8007eaa:	bfb8      	it	lt
 8007eac:	3101      	addlt	r1, #1
 8007eae:	f7ff fe93 	bl	8007bd8 <_Balloc>
 8007eb2:	b930      	cbnz	r0, 8007ec2 <__multiply+0x42>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	4b41      	ldr	r3, [pc, #260]	@ (8007fbc <__multiply+0x13c>)
 8007eb8:	4841      	ldr	r0, [pc, #260]	@ (8007fc0 <__multiply+0x140>)
 8007eba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ebe:	f7fe fbc9 	bl	8006654 <__assert_func>
 8007ec2:	f100 0414 	add.w	r4, r0, #20
 8007ec6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007eca:	4623      	mov	r3, r4
 8007ecc:	2200      	movs	r2, #0
 8007ece:	4573      	cmp	r3, lr
 8007ed0:	d320      	bcc.n	8007f14 <__multiply+0x94>
 8007ed2:	f107 0814 	add.w	r8, r7, #20
 8007ed6:	f109 0114 	add.w	r1, r9, #20
 8007eda:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007ede:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007ee2:	9302      	str	r3, [sp, #8]
 8007ee4:	1beb      	subs	r3, r5, r7
 8007ee6:	3b15      	subs	r3, #21
 8007ee8:	f023 0303 	bic.w	r3, r3, #3
 8007eec:	3304      	adds	r3, #4
 8007eee:	3715      	adds	r7, #21
 8007ef0:	42bd      	cmp	r5, r7
 8007ef2:	bf38      	it	cc
 8007ef4:	2304      	movcc	r3, #4
 8007ef6:	9301      	str	r3, [sp, #4]
 8007ef8:	9b02      	ldr	r3, [sp, #8]
 8007efa:	9103      	str	r1, [sp, #12]
 8007efc:	428b      	cmp	r3, r1
 8007efe:	d80c      	bhi.n	8007f1a <__multiply+0x9a>
 8007f00:	2e00      	cmp	r6, #0
 8007f02:	dd03      	ble.n	8007f0c <__multiply+0x8c>
 8007f04:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d055      	beq.n	8007fb8 <__multiply+0x138>
 8007f0c:	6106      	str	r6, [r0, #16]
 8007f0e:	b005      	add	sp, #20
 8007f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f14:	f843 2b04 	str.w	r2, [r3], #4
 8007f18:	e7d9      	b.n	8007ece <__multiply+0x4e>
 8007f1a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f1e:	f1ba 0f00 	cmp.w	sl, #0
 8007f22:	d01f      	beq.n	8007f64 <__multiply+0xe4>
 8007f24:	46c4      	mov	ip, r8
 8007f26:	46a1      	mov	r9, r4
 8007f28:	2700      	movs	r7, #0
 8007f2a:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007f2e:	f8d9 3000 	ldr.w	r3, [r9]
 8007f32:	fa1f fb82 	uxth.w	fp, r2
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f3c:	443b      	add	r3, r7
 8007f3e:	f8d9 7000 	ldr.w	r7, [r9]
 8007f42:	0c12      	lsrs	r2, r2, #16
 8007f44:	0c3f      	lsrs	r7, r7, #16
 8007f46:	fb0a 7202 	mla	r2, sl, r2, r7
 8007f4a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f54:	4565      	cmp	r5, ip
 8007f56:	f849 3b04 	str.w	r3, [r9], #4
 8007f5a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007f5e:	d8e4      	bhi.n	8007f2a <__multiply+0xaa>
 8007f60:	9b01      	ldr	r3, [sp, #4]
 8007f62:	50e7      	str	r7, [r4, r3]
 8007f64:	9b03      	ldr	r3, [sp, #12]
 8007f66:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f6a:	3104      	adds	r1, #4
 8007f6c:	f1b9 0f00 	cmp.w	r9, #0
 8007f70:	d020      	beq.n	8007fb4 <__multiply+0x134>
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	4647      	mov	r7, r8
 8007f76:	46a4      	mov	ip, r4
 8007f78:	f04f 0a00 	mov.w	sl, #0
 8007f7c:	f8b7 b000 	ldrh.w	fp, [r7]
 8007f80:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007f84:	fb09 220b 	mla	r2, r9, fp, r2
 8007f88:	4452      	add	r2, sl
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f90:	f84c 3b04 	str.w	r3, [ip], #4
 8007f94:	f857 3b04 	ldr.w	r3, [r7], #4
 8007f98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f9c:	f8bc 3000 	ldrh.w	r3, [ip]
 8007fa0:	fb09 330a 	mla	r3, r9, sl, r3
 8007fa4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007fa8:	42bd      	cmp	r5, r7
 8007faa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fae:	d8e5      	bhi.n	8007f7c <__multiply+0xfc>
 8007fb0:	9a01      	ldr	r2, [sp, #4]
 8007fb2:	50a3      	str	r3, [r4, r2]
 8007fb4:	3404      	adds	r4, #4
 8007fb6:	e79f      	b.n	8007ef8 <__multiply+0x78>
 8007fb8:	3e01      	subs	r6, #1
 8007fba:	e7a1      	b.n	8007f00 <__multiply+0x80>
 8007fbc:	08009923 	.word	0x08009923
 8007fc0:	08009994 	.word	0x08009994

08007fc4 <__pow5mult>:
 8007fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc8:	4615      	mov	r5, r2
 8007fca:	f012 0203 	ands.w	r2, r2, #3
 8007fce:	4607      	mov	r7, r0
 8007fd0:	460e      	mov	r6, r1
 8007fd2:	d007      	beq.n	8007fe4 <__pow5mult+0x20>
 8007fd4:	4c25      	ldr	r4, [pc, #148]	@ (800806c <__pow5mult+0xa8>)
 8007fd6:	3a01      	subs	r2, #1
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fde:	f7ff fe5d 	bl	8007c9c <__multadd>
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	10ad      	asrs	r5, r5, #2
 8007fe6:	d03d      	beq.n	8008064 <__pow5mult+0xa0>
 8007fe8:	69fc      	ldr	r4, [r7, #28]
 8007fea:	b97c      	cbnz	r4, 800800c <__pow5mult+0x48>
 8007fec:	2010      	movs	r0, #16
 8007fee:	f7ff fd2b 	bl	8007a48 <malloc>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	61f8      	str	r0, [r7, #28]
 8007ff6:	b928      	cbnz	r0, 8008004 <__pow5mult+0x40>
 8007ff8:	4b1d      	ldr	r3, [pc, #116]	@ (8008070 <__pow5mult+0xac>)
 8007ffa:	481e      	ldr	r0, [pc, #120]	@ (8008074 <__pow5mult+0xb0>)
 8007ffc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008000:	f7fe fb28 	bl	8006654 <__assert_func>
 8008004:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008008:	6004      	str	r4, [r0, #0]
 800800a:	60c4      	str	r4, [r0, #12]
 800800c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008010:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008014:	b94c      	cbnz	r4, 800802a <__pow5mult+0x66>
 8008016:	f240 2171 	movw	r1, #625	@ 0x271
 800801a:	4638      	mov	r0, r7
 800801c:	f7ff ff1a 	bl	8007e54 <__i2b>
 8008020:	2300      	movs	r3, #0
 8008022:	f8c8 0008 	str.w	r0, [r8, #8]
 8008026:	4604      	mov	r4, r0
 8008028:	6003      	str	r3, [r0, #0]
 800802a:	f04f 0900 	mov.w	r9, #0
 800802e:	07eb      	lsls	r3, r5, #31
 8008030:	d50a      	bpl.n	8008048 <__pow5mult+0x84>
 8008032:	4631      	mov	r1, r6
 8008034:	4622      	mov	r2, r4
 8008036:	4638      	mov	r0, r7
 8008038:	f7ff ff22 	bl	8007e80 <__multiply>
 800803c:	4631      	mov	r1, r6
 800803e:	4680      	mov	r8, r0
 8008040:	4638      	mov	r0, r7
 8008042:	f7ff fe09 	bl	8007c58 <_Bfree>
 8008046:	4646      	mov	r6, r8
 8008048:	106d      	asrs	r5, r5, #1
 800804a:	d00b      	beq.n	8008064 <__pow5mult+0xa0>
 800804c:	6820      	ldr	r0, [r4, #0]
 800804e:	b938      	cbnz	r0, 8008060 <__pow5mult+0x9c>
 8008050:	4622      	mov	r2, r4
 8008052:	4621      	mov	r1, r4
 8008054:	4638      	mov	r0, r7
 8008056:	f7ff ff13 	bl	8007e80 <__multiply>
 800805a:	6020      	str	r0, [r4, #0]
 800805c:	f8c0 9000 	str.w	r9, [r0]
 8008060:	4604      	mov	r4, r0
 8008062:	e7e4      	b.n	800802e <__pow5mult+0x6a>
 8008064:	4630      	mov	r0, r6
 8008066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800806a:	bf00      	nop
 800806c:	08009b74 	.word	0x08009b74
 8008070:	08009809 	.word	0x08009809
 8008074:	08009994 	.word	0x08009994

08008078 <__lshift>:
 8008078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800807c:	460c      	mov	r4, r1
 800807e:	6849      	ldr	r1, [r1, #4]
 8008080:	6923      	ldr	r3, [r4, #16]
 8008082:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008086:	68a3      	ldr	r3, [r4, #8]
 8008088:	4607      	mov	r7, r0
 800808a:	4691      	mov	r9, r2
 800808c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008090:	f108 0601 	add.w	r6, r8, #1
 8008094:	42b3      	cmp	r3, r6
 8008096:	db0b      	blt.n	80080b0 <__lshift+0x38>
 8008098:	4638      	mov	r0, r7
 800809a:	f7ff fd9d 	bl	8007bd8 <_Balloc>
 800809e:	4605      	mov	r5, r0
 80080a0:	b948      	cbnz	r0, 80080b6 <__lshift+0x3e>
 80080a2:	4602      	mov	r2, r0
 80080a4:	4b28      	ldr	r3, [pc, #160]	@ (8008148 <__lshift+0xd0>)
 80080a6:	4829      	ldr	r0, [pc, #164]	@ (800814c <__lshift+0xd4>)
 80080a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80080ac:	f7fe fad2 	bl	8006654 <__assert_func>
 80080b0:	3101      	adds	r1, #1
 80080b2:	005b      	lsls	r3, r3, #1
 80080b4:	e7ee      	b.n	8008094 <__lshift+0x1c>
 80080b6:	2300      	movs	r3, #0
 80080b8:	f100 0114 	add.w	r1, r0, #20
 80080bc:	f100 0210 	add.w	r2, r0, #16
 80080c0:	4618      	mov	r0, r3
 80080c2:	4553      	cmp	r3, sl
 80080c4:	db33      	blt.n	800812e <__lshift+0xb6>
 80080c6:	6920      	ldr	r0, [r4, #16]
 80080c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080cc:	f104 0314 	add.w	r3, r4, #20
 80080d0:	f019 091f 	ands.w	r9, r9, #31
 80080d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080dc:	d02b      	beq.n	8008136 <__lshift+0xbe>
 80080de:	f1c9 0e20 	rsb	lr, r9, #32
 80080e2:	468a      	mov	sl, r1
 80080e4:	2200      	movs	r2, #0
 80080e6:	6818      	ldr	r0, [r3, #0]
 80080e8:	fa00 f009 	lsl.w	r0, r0, r9
 80080ec:	4310      	orrs	r0, r2
 80080ee:	f84a 0b04 	str.w	r0, [sl], #4
 80080f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80080f6:	459c      	cmp	ip, r3
 80080f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80080fc:	d8f3      	bhi.n	80080e6 <__lshift+0x6e>
 80080fe:	ebac 0304 	sub.w	r3, ip, r4
 8008102:	3b15      	subs	r3, #21
 8008104:	f023 0303 	bic.w	r3, r3, #3
 8008108:	3304      	adds	r3, #4
 800810a:	f104 0015 	add.w	r0, r4, #21
 800810e:	4560      	cmp	r0, ip
 8008110:	bf88      	it	hi
 8008112:	2304      	movhi	r3, #4
 8008114:	50ca      	str	r2, [r1, r3]
 8008116:	b10a      	cbz	r2, 800811c <__lshift+0xa4>
 8008118:	f108 0602 	add.w	r6, r8, #2
 800811c:	3e01      	subs	r6, #1
 800811e:	4638      	mov	r0, r7
 8008120:	612e      	str	r6, [r5, #16]
 8008122:	4621      	mov	r1, r4
 8008124:	f7ff fd98 	bl	8007c58 <_Bfree>
 8008128:	4628      	mov	r0, r5
 800812a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008132:	3301      	adds	r3, #1
 8008134:	e7c5      	b.n	80080c2 <__lshift+0x4a>
 8008136:	3904      	subs	r1, #4
 8008138:	f853 2b04 	ldr.w	r2, [r3], #4
 800813c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008140:	459c      	cmp	ip, r3
 8008142:	d8f9      	bhi.n	8008138 <__lshift+0xc0>
 8008144:	e7ea      	b.n	800811c <__lshift+0xa4>
 8008146:	bf00      	nop
 8008148:	08009923 	.word	0x08009923
 800814c:	08009994 	.word	0x08009994

08008150 <__mcmp>:
 8008150:	690a      	ldr	r2, [r1, #16]
 8008152:	4603      	mov	r3, r0
 8008154:	6900      	ldr	r0, [r0, #16]
 8008156:	1a80      	subs	r0, r0, r2
 8008158:	b530      	push	{r4, r5, lr}
 800815a:	d10e      	bne.n	800817a <__mcmp+0x2a>
 800815c:	3314      	adds	r3, #20
 800815e:	3114      	adds	r1, #20
 8008160:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008164:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008168:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800816c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008170:	4295      	cmp	r5, r2
 8008172:	d003      	beq.n	800817c <__mcmp+0x2c>
 8008174:	d205      	bcs.n	8008182 <__mcmp+0x32>
 8008176:	f04f 30ff 	mov.w	r0, #4294967295
 800817a:	bd30      	pop	{r4, r5, pc}
 800817c:	42a3      	cmp	r3, r4
 800817e:	d3f3      	bcc.n	8008168 <__mcmp+0x18>
 8008180:	e7fb      	b.n	800817a <__mcmp+0x2a>
 8008182:	2001      	movs	r0, #1
 8008184:	e7f9      	b.n	800817a <__mcmp+0x2a>
	...

08008188 <__mdiff>:
 8008188:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800818c:	4689      	mov	r9, r1
 800818e:	4606      	mov	r6, r0
 8008190:	4611      	mov	r1, r2
 8008192:	4648      	mov	r0, r9
 8008194:	4614      	mov	r4, r2
 8008196:	f7ff ffdb 	bl	8008150 <__mcmp>
 800819a:	1e05      	subs	r5, r0, #0
 800819c:	d112      	bne.n	80081c4 <__mdiff+0x3c>
 800819e:	4629      	mov	r1, r5
 80081a0:	4630      	mov	r0, r6
 80081a2:	f7ff fd19 	bl	8007bd8 <_Balloc>
 80081a6:	4602      	mov	r2, r0
 80081a8:	b928      	cbnz	r0, 80081b6 <__mdiff+0x2e>
 80081aa:	4b3f      	ldr	r3, [pc, #252]	@ (80082a8 <__mdiff+0x120>)
 80081ac:	f240 2137 	movw	r1, #567	@ 0x237
 80081b0:	483e      	ldr	r0, [pc, #248]	@ (80082ac <__mdiff+0x124>)
 80081b2:	f7fe fa4f 	bl	8006654 <__assert_func>
 80081b6:	2301      	movs	r3, #1
 80081b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081bc:	4610      	mov	r0, r2
 80081be:	b003      	add	sp, #12
 80081c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c4:	bfbc      	itt	lt
 80081c6:	464b      	movlt	r3, r9
 80081c8:	46a1      	movlt	r9, r4
 80081ca:	4630      	mov	r0, r6
 80081cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80081d0:	bfba      	itte	lt
 80081d2:	461c      	movlt	r4, r3
 80081d4:	2501      	movlt	r5, #1
 80081d6:	2500      	movge	r5, #0
 80081d8:	f7ff fcfe 	bl	8007bd8 <_Balloc>
 80081dc:	4602      	mov	r2, r0
 80081de:	b918      	cbnz	r0, 80081e8 <__mdiff+0x60>
 80081e0:	4b31      	ldr	r3, [pc, #196]	@ (80082a8 <__mdiff+0x120>)
 80081e2:	f240 2145 	movw	r1, #581	@ 0x245
 80081e6:	e7e3      	b.n	80081b0 <__mdiff+0x28>
 80081e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80081ec:	6926      	ldr	r6, [r4, #16]
 80081ee:	60c5      	str	r5, [r0, #12]
 80081f0:	f109 0310 	add.w	r3, r9, #16
 80081f4:	f109 0514 	add.w	r5, r9, #20
 80081f8:	f104 0e14 	add.w	lr, r4, #20
 80081fc:	f100 0b14 	add.w	fp, r0, #20
 8008200:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008204:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008208:	9301      	str	r3, [sp, #4]
 800820a:	46d9      	mov	r9, fp
 800820c:	f04f 0c00 	mov.w	ip, #0
 8008210:	9b01      	ldr	r3, [sp, #4]
 8008212:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008216:	f853 af04 	ldr.w	sl, [r3, #4]!
 800821a:	9301      	str	r3, [sp, #4]
 800821c:	fa1f f38a 	uxth.w	r3, sl
 8008220:	4619      	mov	r1, r3
 8008222:	b283      	uxth	r3, r0
 8008224:	1acb      	subs	r3, r1, r3
 8008226:	0c00      	lsrs	r0, r0, #16
 8008228:	4463      	add	r3, ip
 800822a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800822e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008232:	b29b      	uxth	r3, r3
 8008234:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008238:	4576      	cmp	r6, lr
 800823a:	f849 3b04 	str.w	r3, [r9], #4
 800823e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008242:	d8e5      	bhi.n	8008210 <__mdiff+0x88>
 8008244:	1b33      	subs	r3, r6, r4
 8008246:	3b15      	subs	r3, #21
 8008248:	f023 0303 	bic.w	r3, r3, #3
 800824c:	3415      	adds	r4, #21
 800824e:	3304      	adds	r3, #4
 8008250:	42a6      	cmp	r6, r4
 8008252:	bf38      	it	cc
 8008254:	2304      	movcc	r3, #4
 8008256:	441d      	add	r5, r3
 8008258:	445b      	add	r3, fp
 800825a:	461e      	mov	r6, r3
 800825c:	462c      	mov	r4, r5
 800825e:	4544      	cmp	r4, r8
 8008260:	d30e      	bcc.n	8008280 <__mdiff+0xf8>
 8008262:	f108 0103 	add.w	r1, r8, #3
 8008266:	1b49      	subs	r1, r1, r5
 8008268:	f021 0103 	bic.w	r1, r1, #3
 800826c:	3d03      	subs	r5, #3
 800826e:	45a8      	cmp	r8, r5
 8008270:	bf38      	it	cc
 8008272:	2100      	movcc	r1, #0
 8008274:	440b      	add	r3, r1
 8008276:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800827a:	b191      	cbz	r1, 80082a2 <__mdiff+0x11a>
 800827c:	6117      	str	r7, [r2, #16]
 800827e:	e79d      	b.n	80081bc <__mdiff+0x34>
 8008280:	f854 1b04 	ldr.w	r1, [r4], #4
 8008284:	46e6      	mov	lr, ip
 8008286:	0c08      	lsrs	r0, r1, #16
 8008288:	fa1c fc81 	uxtah	ip, ip, r1
 800828c:	4471      	add	r1, lr
 800828e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008292:	b289      	uxth	r1, r1
 8008294:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008298:	f846 1b04 	str.w	r1, [r6], #4
 800829c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80082a0:	e7dd      	b.n	800825e <__mdiff+0xd6>
 80082a2:	3f01      	subs	r7, #1
 80082a4:	e7e7      	b.n	8008276 <__mdiff+0xee>
 80082a6:	bf00      	nop
 80082a8:	08009923 	.word	0x08009923
 80082ac:	08009994 	.word	0x08009994

080082b0 <__ulp>:
 80082b0:	b082      	sub	sp, #8
 80082b2:	ed8d 0b00 	vstr	d0, [sp]
 80082b6:	9a01      	ldr	r2, [sp, #4]
 80082b8:	4b0f      	ldr	r3, [pc, #60]	@ (80082f8 <__ulp+0x48>)
 80082ba:	4013      	ands	r3, r2
 80082bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	dc08      	bgt.n	80082d6 <__ulp+0x26>
 80082c4:	425b      	negs	r3, r3
 80082c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80082ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80082ce:	da04      	bge.n	80082da <__ulp+0x2a>
 80082d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80082d4:	4113      	asrs	r3, r2
 80082d6:	2200      	movs	r2, #0
 80082d8:	e008      	b.n	80082ec <__ulp+0x3c>
 80082da:	f1a2 0314 	sub.w	r3, r2, #20
 80082de:	2b1e      	cmp	r3, #30
 80082e0:	bfda      	itte	le
 80082e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80082e6:	40da      	lsrle	r2, r3
 80082e8:	2201      	movgt	r2, #1
 80082ea:	2300      	movs	r3, #0
 80082ec:	4619      	mov	r1, r3
 80082ee:	4610      	mov	r0, r2
 80082f0:	ec41 0b10 	vmov	d0, r0, r1
 80082f4:	b002      	add	sp, #8
 80082f6:	4770      	bx	lr
 80082f8:	7ff00000 	.word	0x7ff00000

080082fc <__b2d>:
 80082fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008300:	6906      	ldr	r6, [r0, #16]
 8008302:	f100 0814 	add.w	r8, r0, #20
 8008306:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800830a:	1f37      	subs	r7, r6, #4
 800830c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008310:	4610      	mov	r0, r2
 8008312:	f7ff fd53 	bl	8007dbc <__hi0bits>
 8008316:	f1c0 0320 	rsb	r3, r0, #32
 800831a:	280a      	cmp	r0, #10
 800831c:	600b      	str	r3, [r1, #0]
 800831e:	491b      	ldr	r1, [pc, #108]	@ (800838c <__b2d+0x90>)
 8008320:	dc15      	bgt.n	800834e <__b2d+0x52>
 8008322:	f1c0 0c0b 	rsb	ip, r0, #11
 8008326:	fa22 f30c 	lsr.w	r3, r2, ip
 800832a:	45b8      	cmp	r8, r7
 800832c:	ea43 0501 	orr.w	r5, r3, r1
 8008330:	bf34      	ite	cc
 8008332:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008336:	2300      	movcs	r3, #0
 8008338:	3015      	adds	r0, #21
 800833a:	fa02 f000 	lsl.w	r0, r2, r0
 800833e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008342:	4303      	orrs	r3, r0
 8008344:	461c      	mov	r4, r3
 8008346:	ec45 4b10 	vmov	d0, r4, r5
 800834a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800834e:	45b8      	cmp	r8, r7
 8008350:	bf3a      	itte	cc
 8008352:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008356:	f1a6 0708 	subcc.w	r7, r6, #8
 800835a:	2300      	movcs	r3, #0
 800835c:	380b      	subs	r0, #11
 800835e:	d012      	beq.n	8008386 <__b2d+0x8a>
 8008360:	f1c0 0120 	rsb	r1, r0, #32
 8008364:	fa23 f401 	lsr.w	r4, r3, r1
 8008368:	4082      	lsls	r2, r0
 800836a:	4322      	orrs	r2, r4
 800836c:	4547      	cmp	r7, r8
 800836e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008372:	bf8c      	ite	hi
 8008374:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008378:	2200      	movls	r2, #0
 800837a:	4083      	lsls	r3, r0
 800837c:	40ca      	lsrs	r2, r1
 800837e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008382:	4313      	orrs	r3, r2
 8008384:	e7de      	b.n	8008344 <__b2d+0x48>
 8008386:	ea42 0501 	orr.w	r5, r2, r1
 800838a:	e7db      	b.n	8008344 <__b2d+0x48>
 800838c:	3ff00000 	.word	0x3ff00000

08008390 <__d2b>:
 8008390:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008394:	460f      	mov	r7, r1
 8008396:	2101      	movs	r1, #1
 8008398:	ec59 8b10 	vmov	r8, r9, d0
 800839c:	4616      	mov	r6, r2
 800839e:	f7ff fc1b 	bl	8007bd8 <_Balloc>
 80083a2:	4604      	mov	r4, r0
 80083a4:	b930      	cbnz	r0, 80083b4 <__d2b+0x24>
 80083a6:	4602      	mov	r2, r0
 80083a8:	4b23      	ldr	r3, [pc, #140]	@ (8008438 <__d2b+0xa8>)
 80083aa:	4824      	ldr	r0, [pc, #144]	@ (800843c <__d2b+0xac>)
 80083ac:	f240 310f 	movw	r1, #783	@ 0x30f
 80083b0:	f7fe f950 	bl	8006654 <__assert_func>
 80083b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083bc:	b10d      	cbz	r5, 80083c2 <__d2b+0x32>
 80083be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083c2:	9301      	str	r3, [sp, #4]
 80083c4:	f1b8 0300 	subs.w	r3, r8, #0
 80083c8:	d023      	beq.n	8008412 <__d2b+0x82>
 80083ca:	4668      	mov	r0, sp
 80083cc:	9300      	str	r3, [sp, #0]
 80083ce:	f7ff fd14 	bl	8007dfa <__lo0bits>
 80083d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083d6:	b1d0      	cbz	r0, 800840e <__d2b+0x7e>
 80083d8:	f1c0 0320 	rsb	r3, r0, #32
 80083dc:	fa02 f303 	lsl.w	r3, r2, r3
 80083e0:	430b      	orrs	r3, r1
 80083e2:	40c2      	lsrs	r2, r0
 80083e4:	6163      	str	r3, [r4, #20]
 80083e6:	9201      	str	r2, [sp, #4]
 80083e8:	9b01      	ldr	r3, [sp, #4]
 80083ea:	61a3      	str	r3, [r4, #24]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	bf0c      	ite	eq
 80083f0:	2201      	moveq	r2, #1
 80083f2:	2202      	movne	r2, #2
 80083f4:	6122      	str	r2, [r4, #16]
 80083f6:	b1a5      	cbz	r5, 8008422 <__d2b+0x92>
 80083f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80083fc:	4405      	add	r5, r0
 80083fe:	603d      	str	r5, [r7, #0]
 8008400:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008404:	6030      	str	r0, [r6, #0]
 8008406:	4620      	mov	r0, r4
 8008408:	b003      	add	sp, #12
 800840a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800840e:	6161      	str	r1, [r4, #20]
 8008410:	e7ea      	b.n	80083e8 <__d2b+0x58>
 8008412:	a801      	add	r0, sp, #4
 8008414:	f7ff fcf1 	bl	8007dfa <__lo0bits>
 8008418:	9b01      	ldr	r3, [sp, #4]
 800841a:	6163      	str	r3, [r4, #20]
 800841c:	3020      	adds	r0, #32
 800841e:	2201      	movs	r2, #1
 8008420:	e7e8      	b.n	80083f4 <__d2b+0x64>
 8008422:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008426:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800842a:	6038      	str	r0, [r7, #0]
 800842c:	6918      	ldr	r0, [r3, #16]
 800842e:	f7ff fcc5 	bl	8007dbc <__hi0bits>
 8008432:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008436:	e7e5      	b.n	8008404 <__d2b+0x74>
 8008438:	08009923 	.word	0x08009923
 800843c:	08009994 	.word	0x08009994

08008440 <__ratio>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	b085      	sub	sp, #20
 8008446:	e9cd 1000 	strd	r1, r0, [sp]
 800844a:	a902      	add	r1, sp, #8
 800844c:	f7ff ff56 	bl	80082fc <__b2d>
 8008450:	9800      	ldr	r0, [sp, #0]
 8008452:	a903      	add	r1, sp, #12
 8008454:	ec55 4b10 	vmov	r4, r5, d0
 8008458:	f7ff ff50 	bl	80082fc <__b2d>
 800845c:	9b01      	ldr	r3, [sp, #4]
 800845e:	6919      	ldr	r1, [r3, #16]
 8008460:	9b00      	ldr	r3, [sp, #0]
 8008462:	691b      	ldr	r3, [r3, #16]
 8008464:	1ac9      	subs	r1, r1, r3
 8008466:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800846a:	1a9b      	subs	r3, r3, r2
 800846c:	ec5b ab10 	vmov	sl, fp, d0
 8008470:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008474:	2b00      	cmp	r3, #0
 8008476:	bfce      	itee	gt
 8008478:	462a      	movgt	r2, r5
 800847a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800847e:	465a      	movle	r2, fp
 8008480:	462f      	mov	r7, r5
 8008482:	46d9      	mov	r9, fp
 8008484:	bfcc      	ite	gt
 8008486:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800848a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800848e:	464b      	mov	r3, r9
 8008490:	4652      	mov	r2, sl
 8008492:	4620      	mov	r0, r4
 8008494:	4639      	mov	r1, r7
 8008496:	f7f8 f9e9 	bl	800086c <__aeabi_ddiv>
 800849a:	ec41 0b10 	vmov	d0, r0, r1
 800849e:	b005      	add	sp, #20
 80084a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084a4 <__copybits>:
 80084a4:	3901      	subs	r1, #1
 80084a6:	b570      	push	{r4, r5, r6, lr}
 80084a8:	1149      	asrs	r1, r1, #5
 80084aa:	6914      	ldr	r4, [r2, #16]
 80084ac:	3101      	adds	r1, #1
 80084ae:	f102 0314 	add.w	r3, r2, #20
 80084b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80084b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80084ba:	1f05      	subs	r5, r0, #4
 80084bc:	42a3      	cmp	r3, r4
 80084be:	d30c      	bcc.n	80084da <__copybits+0x36>
 80084c0:	1aa3      	subs	r3, r4, r2
 80084c2:	3b11      	subs	r3, #17
 80084c4:	f023 0303 	bic.w	r3, r3, #3
 80084c8:	3211      	adds	r2, #17
 80084ca:	42a2      	cmp	r2, r4
 80084cc:	bf88      	it	hi
 80084ce:	2300      	movhi	r3, #0
 80084d0:	4418      	add	r0, r3
 80084d2:	2300      	movs	r3, #0
 80084d4:	4288      	cmp	r0, r1
 80084d6:	d305      	bcc.n	80084e4 <__copybits+0x40>
 80084d8:	bd70      	pop	{r4, r5, r6, pc}
 80084da:	f853 6b04 	ldr.w	r6, [r3], #4
 80084de:	f845 6f04 	str.w	r6, [r5, #4]!
 80084e2:	e7eb      	b.n	80084bc <__copybits+0x18>
 80084e4:	f840 3b04 	str.w	r3, [r0], #4
 80084e8:	e7f4      	b.n	80084d4 <__copybits+0x30>

080084ea <__any_on>:
 80084ea:	f100 0214 	add.w	r2, r0, #20
 80084ee:	6900      	ldr	r0, [r0, #16]
 80084f0:	114b      	asrs	r3, r1, #5
 80084f2:	4298      	cmp	r0, r3
 80084f4:	b510      	push	{r4, lr}
 80084f6:	db11      	blt.n	800851c <__any_on+0x32>
 80084f8:	dd0a      	ble.n	8008510 <__any_on+0x26>
 80084fa:	f011 011f 	ands.w	r1, r1, #31
 80084fe:	d007      	beq.n	8008510 <__any_on+0x26>
 8008500:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008504:	fa24 f001 	lsr.w	r0, r4, r1
 8008508:	fa00 f101 	lsl.w	r1, r0, r1
 800850c:	428c      	cmp	r4, r1
 800850e:	d10b      	bne.n	8008528 <__any_on+0x3e>
 8008510:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008514:	4293      	cmp	r3, r2
 8008516:	d803      	bhi.n	8008520 <__any_on+0x36>
 8008518:	2000      	movs	r0, #0
 800851a:	bd10      	pop	{r4, pc}
 800851c:	4603      	mov	r3, r0
 800851e:	e7f7      	b.n	8008510 <__any_on+0x26>
 8008520:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008524:	2900      	cmp	r1, #0
 8008526:	d0f5      	beq.n	8008514 <__any_on+0x2a>
 8008528:	2001      	movs	r0, #1
 800852a:	e7f6      	b.n	800851a <__any_on+0x30>

0800852c <__ascii_wctomb>:
 800852c:	4603      	mov	r3, r0
 800852e:	4608      	mov	r0, r1
 8008530:	b141      	cbz	r1, 8008544 <__ascii_wctomb+0x18>
 8008532:	2aff      	cmp	r2, #255	@ 0xff
 8008534:	d904      	bls.n	8008540 <__ascii_wctomb+0x14>
 8008536:	228a      	movs	r2, #138	@ 0x8a
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	f04f 30ff 	mov.w	r0, #4294967295
 800853e:	4770      	bx	lr
 8008540:	700a      	strb	r2, [r1, #0]
 8008542:	2001      	movs	r0, #1
 8008544:	4770      	bx	lr

08008546 <__ssputs_r>:
 8008546:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800854a:	688e      	ldr	r6, [r1, #8]
 800854c:	461f      	mov	r7, r3
 800854e:	42be      	cmp	r6, r7
 8008550:	680b      	ldr	r3, [r1, #0]
 8008552:	4682      	mov	sl, r0
 8008554:	460c      	mov	r4, r1
 8008556:	4690      	mov	r8, r2
 8008558:	d82d      	bhi.n	80085b6 <__ssputs_r+0x70>
 800855a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800855e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008562:	d026      	beq.n	80085b2 <__ssputs_r+0x6c>
 8008564:	6965      	ldr	r5, [r4, #20]
 8008566:	6909      	ldr	r1, [r1, #16]
 8008568:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800856c:	eba3 0901 	sub.w	r9, r3, r1
 8008570:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008574:	1c7b      	adds	r3, r7, #1
 8008576:	444b      	add	r3, r9
 8008578:	106d      	asrs	r5, r5, #1
 800857a:	429d      	cmp	r5, r3
 800857c:	bf38      	it	cc
 800857e:	461d      	movcc	r5, r3
 8008580:	0553      	lsls	r3, r2, #21
 8008582:	d527      	bpl.n	80085d4 <__ssputs_r+0x8e>
 8008584:	4629      	mov	r1, r5
 8008586:	f7ff fa89 	bl	8007a9c <_malloc_r>
 800858a:	4606      	mov	r6, r0
 800858c:	b360      	cbz	r0, 80085e8 <__ssputs_r+0xa2>
 800858e:	6921      	ldr	r1, [r4, #16]
 8008590:	464a      	mov	r2, r9
 8008592:	f7fe f842 	bl	800661a <memcpy>
 8008596:	89a3      	ldrh	r3, [r4, #12]
 8008598:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800859c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085a0:	81a3      	strh	r3, [r4, #12]
 80085a2:	6126      	str	r6, [r4, #16]
 80085a4:	6165      	str	r5, [r4, #20]
 80085a6:	444e      	add	r6, r9
 80085a8:	eba5 0509 	sub.w	r5, r5, r9
 80085ac:	6026      	str	r6, [r4, #0]
 80085ae:	60a5      	str	r5, [r4, #8]
 80085b0:	463e      	mov	r6, r7
 80085b2:	42be      	cmp	r6, r7
 80085b4:	d900      	bls.n	80085b8 <__ssputs_r+0x72>
 80085b6:	463e      	mov	r6, r7
 80085b8:	6820      	ldr	r0, [r4, #0]
 80085ba:	4632      	mov	r2, r6
 80085bc:	4641      	mov	r1, r8
 80085be:	f000 ff0c 	bl	80093da <memmove>
 80085c2:	68a3      	ldr	r3, [r4, #8]
 80085c4:	1b9b      	subs	r3, r3, r6
 80085c6:	60a3      	str	r3, [r4, #8]
 80085c8:	6823      	ldr	r3, [r4, #0]
 80085ca:	4433      	add	r3, r6
 80085cc:	6023      	str	r3, [r4, #0]
 80085ce:	2000      	movs	r0, #0
 80085d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d4:	462a      	mov	r2, r5
 80085d6:	f000 ff68 	bl	80094aa <_realloc_r>
 80085da:	4606      	mov	r6, r0
 80085dc:	2800      	cmp	r0, #0
 80085de:	d1e0      	bne.n	80085a2 <__ssputs_r+0x5c>
 80085e0:	6921      	ldr	r1, [r4, #16]
 80085e2:	4650      	mov	r0, sl
 80085e4:	f7fe feac 	bl	8007340 <_free_r>
 80085e8:	230c      	movs	r3, #12
 80085ea:	f8ca 3000 	str.w	r3, [sl]
 80085ee:	89a3      	ldrh	r3, [r4, #12]
 80085f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085f4:	81a3      	strh	r3, [r4, #12]
 80085f6:	f04f 30ff 	mov.w	r0, #4294967295
 80085fa:	e7e9      	b.n	80085d0 <__ssputs_r+0x8a>

080085fc <_svfiprintf_r>:
 80085fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008600:	4698      	mov	r8, r3
 8008602:	898b      	ldrh	r3, [r1, #12]
 8008604:	061b      	lsls	r3, r3, #24
 8008606:	b09d      	sub	sp, #116	@ 0x74
 8008608:	4607      	mov	r7, r0
 800860a:	460d      	mov	r5, r1
 800860c:	4614      	mov	r4, r2
 800860e:	d510      	bpl.n	8008632 <_svfiprintf_r+0x36>
 8008610:	690b      	ldr	r3, [r1, #16]
 8008612:	b973      	cbnz	r3, 8008632 <_svfiprintf_r+0x36>
 8008614:	2140      	movs	r1, #64	@ 0x40
 8008616:	f7ff fa41 	bl	8007a9c <_malloc_r>
 800861a:	6028      	str	r0, [r5, #0]
 800861c:	6128      	str	r0, [r5, #16]
 800861e:	b930      	cbnz	r0, 800862e <_svfiprintf_r+0x32>
 8008620:	230c      	movs	r3, #12
 8008622:	603b      	str	r3, [r7, #0]
 8008624:	f04f 30ff 	mov.w	r0, #4294967295
 8008628:	b01d      	add	sp, #116	@ 0x74
 800862a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800862e:	2340      	movs	r3, #64	@ 0x40
 8008630:	616b      	str	r3, [r5, #20]
 8008632:	2300      	movs	r3, #0
 8008634:	9309      	str	r3, [sp, #36]	@ 0x24
 8008636:	2320      	movs	r3, #32
 8008638:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800863c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008640:	2330      	movs	r3, #48	@ 0x30
 8008642:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80087e0 <_svfiprintf_r+0x1e4>
 8008646:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800864a:	f04f 0901 	mov.w	r9, #1
 800864e:	4623      	mov	r3, r4
 8008650:	469a      	mov	sl, r3
 8008652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008656:	b10a      	cbz	r2, 800865c <_svfiprintf_r+0x60>
 8008658:	2a25      	cmp	r2, #37	@ 0x25
 800865a:	d1f9      	bne.n	8008650 <_svfiprintf_r+0x54>
 800865c:	ebba 0b04 	subs.w	fp, sl, r4
 8008660:	d00b      	beq.n	800867a <_svfiprintf_r+0x7e>
 8008662:	465b      	mov	r3, fp
 8008664:	4622      	mov	r2, r4
 8008666:	4629      	mov	r1, r5
 8008668:	4638      	mov	r0, r7
 800866a:	f7ff ff6c 	bl	8008546 <__ssputs_r>
 800866e:	3001      	adds	r0, #1
 8008670:	f000 80a7 	beq.w	80087c2 <_svfiprintf_r+0x1c6>
 8008674:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008676:	445a      	add	r2, fp
 8008678:	9209      	str	r2, [sp, #36]	@ 0x24
 800867a:	f89a 3000 	ldrb.w	r3, [sl]
 800867e:	2b00      	cmp	r3, #0
 8008680:	f000 809f 	beq.w	80087c2 <_svfiprintf_r+0x1c6>
 8008684:	2300      	movs	r3, #0
 8008686:	f04f 32ff 	mov.w	r2, #4294967295
 800868a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800868e:	f10a 0a01 	add.w	sl, sl, #1
 8008692:	9304      	str	r3, [sp, #16]
 8008694:	9307      	str	r3, [sp, #28]
 8008696:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800869a:	931a      	str	r3, [sp, #104]	@ 0x68
 800869c:	4654      	mov	r4, sl
 800869e:	2205      	movs	r2, #5
 80086a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086a4:	484e      	ldr	r0, [pc, #312]	@ (80087e0 <_svfiprintf_r+0x1e4>)
 80086a6:	f7f7 fda3 	bl	80001f0 <memchr>
 80086aa:	9a04      	ldr	r2, [sp, #16]
 80086ac:	b9d8      	cbnz	r0, 80086e6 <_svfiprintf_r+0xea>
 80086ae:	06d0      	lsls	r0, r2, #27
 80086b0:	bf44      	itt	mi
 80086b2:	2320      	movmi	r3, #32
 80086b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086b8:	0711      	lsls	r1, r2, #28
 80086ba:	bf44      	itt	mi
 80086bc:	232b      	movmi	r3, #43	@ 0x2b
 80086be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086c2:	f89a 3000 	ldrb.w	r3, [sl]
 80086c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80086c8:	d015      	beq.n	80086f6 <_svfiprintf_r+0xfa>
 80086ca:	9a07      	ldr	r2, [sp, #28]
 80086cc:	4654      	mov	r4, sl
 80086ce:	2000      	movs	r0, #0
 80086d0:	f04f 0c0a 	mov.w	ip, #10
 80086d4:	4621      	mov	r1, r4
 80086d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086da:	3b30      	subs	r3, #48	@ 0x30
 80086dc:	2b09      	cmp	r3, #9
 80086de:	d94b      	bls.n	8008778 <_svfiprintf_r+0x17c>
 80086e0:	b1b0      	cbz	r0, 8008710 <_svfiprintf_r+0x114>
 80086e2:	9207      	str	r2, [sp, #28]
 80086e4:	e014      	b.n	8008710 <_svfiprintf_r+0x114>
 80086e6:	eba0 0308 	sub.w	r3, r0, r8
 80086ea:	fa09 f303 	lsl.w	r3, r9, r3
 80086ee:	4313      	orrs	r3, r2
 80086f0:	9304      	str	r3, [sp, #16]
 80086f2:	46a2      	mov	sl, r4
 80086f4:	e7d2      	b.n	800869c <_svfiprintf_r+0xa0>
 80086f6:	9b03      	ldr	r3, [sp, #12]
 80086f8:	1d19      	adds	r1, r3, #4
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	9103      	str	r1, [sp, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	bfbb      	ittet	lt
 8008702:	425b      	neglt	r3, r3
 8008704:	f042 0202 	orrlt.w	r2, r2, #2
 8008708:	9307      	strge	r3, [sp, #28]
 800870a:	9307      	strlt	r3, [sp, #28]
 800870c:	bfb8      	it	lt
 800870e:	9204      	strlt	r2, [sp, #16]
 8008710:	7823      	ldrb	r3, [r4, #0]
 8008712:	2b2e      	cmp	r3, #46	@ 0x2e
 8008714:	d10a      	bne.n	800872c <_svfiprintf_r+0x130>
 8008716:	7863      	ldrb	r3, [r4, #1]
 8008718:	2b2a      	cmp	r3, #42	@ 0x2a
 800871a:	d132      	bne.n	8008782 <_svfiprintf_r+0x186>
 800871c:	9b03      	ldr	r3, [sp, #12]
 800871e:	1d1a      	adds	r2, r3, #4
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	9203      	str	r2, [sp, #12]
 8008724:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008728:	3402      	adds	r4, #2
 800872a:	9305      	str	r3, [sp, #20]
 800872c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80087f0 <_svfiprintf_r+0x1f4>
 8008730:	7821      	ldrb	r1, [r4, #0]
 8008732:	2203      	movs	r2, #3
 8008734:	4650      	mov	r0, sl
 8008736:	f7f7 fd5b 	bl	80001f0 <memchr>
 800873a:	b138      	cbz	r0, 800874c <_svfiprintf_r+0x150>
 800873c:	9b04      	ldr	r3, [sp, #16]
 800873e:	eba0 000a 	sub.w	r0, r0, sl
 8008742:	2240      	movs	r2, #64	@ 0x40
 8008744:	4082      	lsls	r2, r0
 8008746:	4313      	orrs	r3, r2
 8008748:	3401      	adds	r4, #1
 800874a:	9304      	str	r3, [sp, #16]
 800874c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008750:	4824      	ldr	r0, [pc, #144]	@ (80087e4 <_svfiprintf_r+0x1e8>)
 8008752:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008756:	2206      	movs	r2, #6
 8008758:	f7f7 fd4a 	bl	80001f0 <memchr>
 800875c:	2800      	cmp	r0, #0
 800875e:	d036      	beq.n	80087ce <_svfiprintf_r+0x1d2>
 8008760:	4b21      	ldr	r3, [pc, #132]	@ (80087e8 <_svfiprintf_r+0x1ec>)
 8008762:	bb1b      	cbnz	r3, 80087ac <_svfiprintf_r+0x1b0>
 8008764:	9b03      	ldr	r3, [sp, #12]
 8008766:	3307      	adds	r3, #7
 8008768:	f023 0307 	bic.w	r3, r3, #7
 800876c:	3308      	adds	r3, #8
 800876e:	9303      	str	r3, [sp, #12]
 8008770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008772:	4433      	add	r3, r6
 8008774:	9309      	str	r3, [sp, #36]	@ 0x24
 8008776:	e76a      	b.n	800864e <_svfiprintf_r+0x52>
 8008778:	fb0c 3202 	mla	r2, ip, r2, r3
 800877c:	460c      	mov	r4, r1
 800877e:	2001      	movs	r0, #1
 8008780:	e7a8      	b.n	80086d4 <_svfiprintf_r+0xd8>
 8008782:	2300      	movs	r3, #0
 8008784:	3401      	adds	r4, #1
 8008786:	9305      	str	r3, [sp, #20]
 8008788:	4619      	mov	r1, r3
 800878a:	f04f 0c0a 	mov.w	ip, #10
 800878e:	4620      	mov	r0, r4
 8008790:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008794:	3a30      	subs	r2, #48	@ 0x30
 8008796:	2a09      	cmp	r2, #9
 8008798:	d903      	bls.n	80087a2 <_svfiprintf_r+0x1a6>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0c6      	beq.n	800872c <_svfiprintf_r+0x130>
 800879e:	9105      	str	r1, [sp, #20]
 80087a0:	e7c4      	b.n	800872c <_svfiprintf_r+0x130>
 80087a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80087a6:	4604      	mov	r4, r0
 80087a8:	2301      	movs	r3, #1
 80087aa:	e7f0      	b.n	800878e <_svfiprintf_r+0x192>
 80087ac:	ab03      	add	r3, sp, #12
 80087ae:	9300      	str	r3, [sp, #0]
 80087b0:	462a      	mov	r2, r5
 80087b2:	4b0e      	ldr	r3, [pc, #56]	@ (80087ec <_svfiprintf_r+0x1f0>)
 80087b4:	a904      	add	r1, sp, #16
 80087b6:	4638      	mov	r0, r7
 80087b8:	f7fc fe10 	bl	80053dc <_printf_float>
 80087bc:	1c42      	adds	r2, r0, #1
 80087be:	4606      	mov	r6, r0
 80087c0:	d1d6      	bne.n	8008770 <_svfiprintf_r+0x174>
 80087c2:	89ab      	ldrh	r3, [r5, #12]
 80087c4:	065b      	lsls	r3, r3, #25
 80087c6:	f53f af2d 	bmi.w	8008624 <_svfiprintf_r+0x28>
 80087ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087cc:	e72c      	b.n	8008628 <_svfiprintf_r+0x2c>
 80087ce:	ab03      	add	r3, sp, #12
 80087d0:	9300      	str	r3, [sp, #0]
 80087d2:	462a      	mov	r2, r5
 80087d4:	4b05      	ldr	r3, [pc, #20]	@ (80087ec <_svfiprintf_r+0x1f0>)
 80087d6:	a904      	add	r1, sp, #16
 80087d8:	4638      	mov	r0, r7
 80087da:	f7fd f897 	bl	800590c <_printf_i>
 80087de:	e7ed      	b.n	80087bc <_svfiprintf_r+0x1c0>
 80087e0:	080099ed 	.word	0x080099ed
 80087e4:	080099f7 	.word	0x080099f7
 80087e8:	080053dd 	.word	0x080053dd
 80087ec:	08008547 	.word	0x08008547
 80087f0:	080099f3 	.word	0x080099f3

080087f4 <_sungetc_r>:
 80087f4:	b538      	push	{r3, r4, r5, lr}
 80087f6:	1c4b      	adds	r3, r1, #1
 80087f8:	4614      	mov	r4, r2
 80087fa:	d103      	bne.n	8008804 <_sungetc_r+0x10>
 80087fc:	f04f 35ff 	mov.w	r5, #4294967295
 8008800:	4628      	mov	r0, r5
 8008802:	bd38      	pop	{r3, r4, r5, pc}
 8008804:	8993      	ldrh	r3, [r2, #12]
 8008806:	f023 0320 	bic.w	r3, r3, #32
 800880a:	8193      	strh	r3, [r2, #12]
 800880c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800880e:	6852      	ldr	r2, [r2, #4]
 8008810:	b2cd      	uxtb	r5, r1
 8008812:	b18b      	cbz	r3, 8008838 <_sungetc_r+0x44>
 8008814:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008816:	4293      	cmp	r3, r2
 8008818:	dd08      	ble.n	800882c <_sungetc_r+0x38>
 800881a:	6823      	ldr	r3, [r4, #0]
 800881c:	1e5a      	subs	r2, r3, #1
 800881e:	6022      	str	r2, [r4, #0]
 8008820:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008824:	6863      	ldr	r3, [r4, #4]
 8008826:	3301      	adds	r3, #1
 8008828:	6063      	str	r3, [r4, #4]
 800882a:	e7e9      	b.n	8008800 <_sungetc_r+0xc>
 800882c:	4621      	mov	r1, r4
 800882e:	f000 fd9a 	bl	8009366 <__submore>
 8008832:	2800      	cmp	r0, #0
 8008834:	d0f1      	beq.n	800881a <_sungetc_r+0x26>
 8008836:	e7e1      	b.n	80087fc <_sungetc_r+0x8>
 8008838:	6921      	ldr	r1, [r4, #16]
 800883a:	6823      	ldr	r3, [r4, #0]
 800883c:	b151      	cbz	r1, 8008854 <_sungetc_r+0x60>
 800883e:	4299      	cmp	r1, r3
 8008840:	d208      	bcs.n	8008854 <_sungetc_r+0x60>
 8008842:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008846:	42a9      	cmp	r1, r5
 8008848:	d104      	bne.n	8008854 <_sungetc_r+0x60>
 800884a:	3b01      	subs	r3, #1
 800884c:	3201      	adds	r2, #1
 800884e:	6023      	str	r3, [r4, #0]
 8008850:	6062      	str	r2, [r4, #4]
 8008852:	e7d5      	b.n	8008800 <_sungetc_r+0xc>
 8008854:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 8008858:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800885c:	6363      	str	r3, [r4, #52]	@ 0x34
 800885e:	2303      	movs	r3, #3
 8008860:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008862:	4623      	mov	r3, r4
 8008864:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008868:	6023      	str	r3, [r4, #0]
 800886a:	2301      	movs	r3, #1
 800886c:	e7dc      	b.n	8008828 <_sungetc_r+0x34>

0800886e <__ssrefill_r>:
 800886e:	b510      	push	{r4, lr}
 8008870:	460c      	mov	r4, r1
 8008872:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008874:	b169      	cbz	r1, 8008892 <__ssrefill_r+0x24>
 8008876:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800887a:	4299      	cmp	r1, r3
 800887c:	d001      	beq.n	8008882 <__ssrefill_r+0x14>
 800887e:	f7fe fd5f 	bl	8007340 <_free_r>
 8008882:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008884:	6063      	str	r3, [r4, #4]
 8008886:	2000      	movs	r0, #0
 8008888:	6360      	str	r0, [r4, #52]	@ 0x34
 800888a:	b113      	cbz	r3, 8008892 <__ssrefill_r+0x24>
 800888c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	bd10      	pop	{r4, pc}
 8008892:	6923      	ldr	r3, [r4, #16]
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	2300      	movs	r3, #0
 8008898:	6063      	str	r3, [r4, #4]
 800889a:	89a3      	ldrh	r3, [r4, #12]
 800889c:	f043 0320 	orr.w	r3, r3, #32
 80088a0:	81a3      	strh	r3, [r4, #12]
 80088a2:	f04f 30ff 	mov.w	r0, #4294967295
 80088a6:	e7f3      	b.n	8008890 <__ssrefill_r+0x22>

080088a8 <__ssvfiscanf_r>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	460c      	mov	r4, r1
 80088ae:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 80088b2:	2100      	movs	r1, #0
 80088b4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80088b8:	49a6      	ldr	r1, [pc, #664]	@ (8008b54 <__ssvfiscanf_r+0x2ac>)
 80088ba:	91a0      	str	r1, [sp, #640]	@ 0x280
 80088bc:	f10d 0804 	add.w	r8, sp, #4
 80088c0:	49a5      	ldr	r1, [pc, #660]	@ (8008b58 <__ssvfiscanf_r+0x2b0>)
 80088c2:	4fa6      	ldr	r7, [pc, #664]	@ (8008b5c <__ssvfiscanf_r+0x2b4>)
 80088c4:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80088c8:	4606      	mov	r6, r0
 80088ca:	91a1      	str	r1, [sp, #644]	@ 0x284
 80088cc:	9300      	str	r3, [sp, #0]
 80088ce:	f892 9000 	ldrb.w	r9, [r2]
 80088d2:	f1b9 0f00 	cmp.w	r9, #0
 80088d6:	f000 8158 	beq.w	8008b8a <__ssvfiscanf_r+0x2e2>
 80088da:	f817 3009 	ldrb.w	r3, [r7, r9]
 80088de:	f013 0308 	ands.w	r3, r3, #8
 80088e2:	f102 0501 	add.w	r5, r2, #1
 80088e6:	d019      	beq.n	800891c <__ssvfiscanf_r+0x74>
 80088e8:	6863      	ldr	r3, [r4, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	dd0f      	ble.n	800890e <__ssvfiscanf_r+0x66>
 80088ee:	6823      	ldr	r3, [r4, #0]
 80088f0:	781a      	ldrb	r2, [r3, #0]
 80088f2:	5cba      	ldrb	r2, [r7, r2]
 80088f4:	0712      	lsls	r2, r2, #28
 80088f6:	d401      	bmi.n	80088fc <__ssvfiscanf_r+0x54>
 80088f8:	462a      	mov	r2, r5
 80088fa:	e7e8      	b.n	80088ce <__ssvfiscanf_r+0x26>
 80088fc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80088fe:	3201      	adds	r2, #1
 8008900:	9245      	str	r2, [sp, #276]	@ 0x114
 8008902:	6862      	ldr	r2, [r4, #4]
 8008904:	3301      	adds	r3, #1
 8008906:	3a01      	subs	r2, #1
 8008908:	6062      	str	r2, [r4, #4]
 800890a:	6023      	str	r3, [r4, #0]
 800890c:	e7ec      	b.n	80088e8 <__ssvfiscanf_r+0x40>
 800890e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008910:	4621      	mov	r1, r4
 8008912:	4630      	mov	r0, r6
 8008914:	4798      	blx	r3
 8008916:	2800      	cmp	r0, #0
 8008918:	d0e9      	beq.n	80088ee <__ssvfiscanf_r+0x46>
 800891a:	e7ed      	b.n	80088f8 <__ssvfiscanf_r+0x50>
 800891c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 8008920:	f040 8085 	bne.w	8008a2e <__ssvfiscanf_r+0x186>
 8008924:	9341      	str	r3, [sp, #260]	@ 0x104
 8008926:	9343      	str	r3, [sp, #268]	@ 0x10c
 8008928:	7853      	ldrb	r3, [r2, #1]
 800892a:	2b2a      	cmp	r3, #42	@ 0x2a
 800892c:	bf02      	ittt	eq
 800892e:	2310      	moveq	r3, #16
 8008930:	1c95      	addeq	r5, r2, #2
 8008932:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008934:	220a      	movs	r2, #10
 8008936:	46aa      	mov	sl, r5
 8008938:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800893c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008940:	2b09      	cmp	r3, #9
 8008942:	d91e      	bls.n	8008982 <__ssvfiscanf_r+0xda>
 8008944:	f8df b218 	ldr.w	fp, [pc, #536]	@ 8008b60 <__ssvfiscanf_r+0x2b8>
 8008948:	2203      	movs	r2, #3
 800894a:	4658      	mov	r0, fp
 800894c:	f7f7 fc50 	bl	80001f0 <memchr>
 8008950:	b138      	cbz	r0, 8008962 <__ssvfiscanf_r+0xba>
 8008952:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008954:	eba0 000b 	sub.w	r0, r0, fp
 8008958:	2301      	movs	r3, #1
 800895a:	4083      	lsls	r3, r0
 800895c:	4313      	orrs	r3, r2
 800895e:	9341      	str	r3, [sp, #260]	@ 0x104
 8008960:	4655      	mov	r5, sl
 8008962:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008966:	2b78      	cmp	r3, #120	@ 0x78
 8008968:	d806      	bhi.n	8008978 <__ssvfiscanf_r+0xd0>
 800896a:	2b57      	cmp	r3, #87	@ 0x57
 800896c:	d810      	bhi.n	8008990 <__ssvfiscanf_r+0xe8>
 800896e:	2b25      	cmp	r3, #37	@ 0x25
 8008970:	d05d      	beq.n	8008a2e <__ssvfiscanf_r+0x186>
 8008972:	d857      	bhi.n	8008a24 <__ssvfiscanf_r+0x17c>
 8008974:	2b00      	cmp	r3, #0
 8008976:	d075      	beq.n	8008a64 <__ssvfiscanf_r+0x1bc>
 8008978:	2303      	movs	r3, #3
 800897a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800897c:	230a      	movs	r3, #10
 800897e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008980:	e088      	b.n	8008a94 <__ssvfiscanf_r+0x1ec>
 8008982:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008984:	fb02 1103 	mla	r1, r2, r3, r1
 8008988:	3930      	subs	r1, #48	@ 0x30
 800898a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800898c:	4655      	mov	r5, sl
 800898e:	e7d2      	b.n	8008936 <__ssvfiscanf_r+0x8e>
 8008990:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008994:	2a20      	cmp	r2, #32
 8008996:	d8ef      	bhi.n	8008978 <__ssvfiscanf_r+0xd0>
 8008998:	a101      	add	r1, pc, #4	@ (adr r1, 80089a0 <__ssvfiscanf_r+0xf8>)
 800899a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800899e:	bf00      	nop
 80089a0:	08008a73 	.word	0x08008a73
 80089a4:	08008979 	.word	0x08008979
 80089a8:	08008979 	.word	0x08008979
 80089ac:	08008acd 	.word	0x08008acd
 80089b0:	08008979 	.word	0x08008979
 80089b4:	08008979 	.word	0x08008979
 80089b8:	08008979 	.word	0x08008979
 80089bc:	08008979 	.word	0x08008979
 80089c0:	08008979 	.word	0x08008979
 80089c4:	08008979 	.word	0x08008979
 80089c8:	08008979 	.word	0x08008979
 80089cc:	08008ae3 	.word	0x08008ae3
 80089d0:	08008ac9 	.word	0x08008ac9
 80089d4:	08008a2b 	.word	0x08008a2b
 80089d8:	08008a2b 	.word	0x08008a2b
 80089dc:	08008a2b 	.word	0x08008a2b
 80089e0:	08008979 	.word	0x08008979
 80089e4:	08008a85 	.word	0x08008a85
 80089e8:	08008979 	.word	0x08008979
 80089ec:	08008979 	.word	0x08008979
 80089f0:	08008979 	.word	0x08008979
 80089f4:	08008979 	.word	0x08008979
 80089f8:	08008af3 	.word	0x08008af3
 80089fc:	08008a8d 	.word	0x08008a8d
 8008a00:	08008a6b 	.word	0x08008a6b
 8008a04:	08008979 	.word	0x08008979
 8008a08:	08008979 	.word	0x08008979
 8008a0c:	08008aef 	.word	0x08008aef
 8008a10:	08008979 	.word	0x08008979
 8008a14:	08008ac9 	.word	0x08008ac9
 8008a18:	08008979 	.word	0x08008979
 8008a1c:	08008979 	.word	0x08008979
 8008a20:	08008a73 	.word	0x08008a73
 8008a24:	3b45      	subs	r3, #69	@ 0x45
 8008a26:	2b02      	cmp	r3, #2
 8008a28:	d8a6      	bhi.n	8008978 <__ssvfiscanf_r+0xd0>
 8008a2a:	2305      	movs	r3, #5
 8008a2c:	e031      	b.n	8008a92 <__ssvfiscanf_r+0x1ea>
 8008a2e:	6863      	ldr	r3, [r4, #4]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	dd0d      	ble.n	8008a50 <__ssvfiscanf_r+0x1a8>
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	781a      	ldrb	r2, [r3, #0]
 8008a38:	454a      	cmp	r2, r9
 8008a3a:	f040 80a6 	bne.w	8008b8a <__ssvfiscanf_r+0x2e2>
 8008a3e:	3301      	adds	r3, #1
 8008a40:	6862      	ldr	r2, [r4, #4]
 8008a42:	6023      	str	r3, [r4, #0]
 8008a44:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008a46:	3a01      	subs	r2, #1
 8008a48:	3301      	adds	r3, #1
 8008a4a:	6062      	str	r2, [r4, #4]
 8008a4c:	9345      	str	r3, [sp, #276]	@ 0x114
 8008a4e:	e753      	b.n	80088f8 <__ssvfiscanf_r+0x50>
 8008a50:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008a52:	4621      	mov	r1, r4
 8008a54:	4630      	mov	r0, r6
 8008a56:	4798      	blx	r3
 8008a58:	2800      	cmp	r0, #0
 8008a5a:	d0eb      	beq.n	8008a34 <__ssvfiscanf_r+0x18c>
 8008a5c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008a5e:	2800      	cmp	r0, #0
 8008a60:	f040 808b 	bne.w	8008b7a <__ssvfiscanf_r+0x2d2>
 8008a64:	f04f 30ff 	mov.w	r0, #4294967295
 8008a68:	e08b      	b.n	8008b82 <__ssvfiscanf_r+0x2da>
 8008a6a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008a6c:	f042 0220 	orr.w	r2, r2, #32
 8008a70:	9241      	str	r2, [sp, #260]	@ 0x104
 8008a72:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008a74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a78:	9241      	str	r2, [sp, #260]	@ 0x104
 8008a7a:	2210      	movs	r2, #16
 8008a7c:	2b6e      	cmp	r3, #110	@ 0x6e
 8008a7e:	9242      	str	r2, [sp, #264]	@ 0x108
 8008a80:	d902      	bls.n	8008a88 <__ssvfiscanf_r+0x1e0>
 8008a82:	e005      	b.n	8008a90 <__ssvfiscanf_r+0x1e8>
 8008a84:	2300      	movs	r3, #0
 8008a86:	9342      	str	r3, [sp, #264]	@ 0x108
 8008a88:	2303      	movs	r3, #3
 8008a8a:	e002      	b.n	8008a92 <__ssvfiscanf_r+0x1ea>
 8008a8c:	2308      	movs	r3, #8
 8008a8e:	9342      	str	r3, [sp, #264]	@ 0x108
 8008a90:	2304      	movs	r3, #4
 8008a92:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008a94:	6863      	ldr	r3, [r4, #4]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	dd39      	ble.n	8008b0e <__ssvfiscanf_r+0x266>
 8008a9a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008a9c:	0659      	lsls	r1, r3, #25
 8008a9e:	d404      	bmi.n	8008aaa <__ssvfiscanf_r+0x202>
 8008aa0:	6823      	ldr	r3, [r4, #0]
 8008aa2:	781a      	ldrb	r2, [r3, #0]
 8008aa4:	5cba      	ldrb	r2, [r7, r2]
 8008aa6:	0712      	lsls	r2, r2, #28
 8008aa8:	d438      	bmi.n	8008b1c <__ssvfiscanf_r+0x274>
 8008aaa:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8008aac:	2b02      	cmp	r3, #2
 8008aae:	dc47      	bgt.n	8008b40 <__ssvfiscanf_r+0x298>
 8008ab0:	466b      	mov	r3, sp
 8008ab2:	4622      	mov	r2, r4
 8008ab4:	a941      	add	r1, sp, #260	@ 0x104
 8008ab6:	4630      	mov	r0, r6
 8008ab8:	f000 f9ae 	bl	8008e18 <_scanf_chars>
 8008abc:	2801      	cmp	r0, #1
 8008abe:	d064      	beq.n	8008b8a <__ssvfiscanf_r+0x2e2>
 8008ac0:	2802      	cmp	r0, #2
 8008ac2:	f47f af19 	bne.w	80088f8 <__ssvfiscanf_r+0x50>
 8008ac6:	e7c9      	b.n	8008a5c <__ssvfiscanf_r+0x1b4>
 8008ac8:	220a      	movs	r2, #10
 8008aca:	e7d7      	b.n	8008a7c <__ssvfiscanf_r+0x1d4>
 8008acc:	4629      	mov	r1, r5
 8008ace:	4640      	mov	r0, r8
 8008ad0:	f000 fc10 	bl	80092f4 <__sccl>
 8008ad4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008ad6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ada:	9341      	str	r3, [sp, #260]	@ 0x104
 8008adc:	4605      	mov	r5, r0
 8008ade:	2301      	movs	r3, #1
 8008ae0:	e7d7      	b.n	8008a92 <__ssvfiscanf_r+0x1ea>
 8008ae2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008ae4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ae8:	9341      	str	r3, [sp, #260]	@ 0x104
 8008aea:	2300      	movs	r3, #0
 8008aec:	e7d1      	b.n	8008a92 <__ssvfiscanf_r+0x1ea>
 8008aee:	2302      	movs	r3, #2
 8008af0:	e7cf      	b.n	8008a92 <__ssvfiscanf_r+0x1ea>
 8008af2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008af4:	06c3      	lsls	r3, r0, #27
 8008af6:	f53f aeff 	bmi.w	80088f8 <__ssvfiscanf_r+0x50>
 8008afa:	9b00      	ldr	r3, [sp, #0]
 8008afc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008afe:	1d19      	adds	r1, r3, #4
 8008b00:	9100      	str	r1, [sp, #0]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	07c0      	lsls	r0, r0, #31
 8008b06:	bf4c      	ite	mi
 8008b08:	801a      	strhmi	r2, [r3, #0]
 8008b0a:	601a      	strpl	r2, [r3, #0]
 8008b0c:	e6f4      	b.n	80088f8 <__ssvfiscanf_r+0x50>
 8008b0e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008b10:	4621      	mov	r1, r4
 8008b12:	4630      	mov	r0, r6
 8008b14:	4798      	blx	r3
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d0bf      	beq.n	8008a9a <__ssvfiscanf_r+0x1f2>
 8008b1a:	e79f      	b.n	8008a5c <__ssvfiscanf_r+0x1b4>
 8008b1c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008b1e:	3201      	adds	r2, #1
 8008b20:	9245      	str	r2, [sp, #276]	@ 0x114
 8008b22:	6862      	ldr	r2, [r4, #4]
 8008b24:	3a01      	subs	r2, #1
 8008b26:	2a00      	cmp	r2, #0
 8008b28:	6062      	str	r2, [r4, #4]
 8008b2a:	dd02      	ble.n	8008b32 <__ssvfiscanf_r+0x28a>
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	6023      	str	r3, [r4, #0]
 8008b30:	e7b6      	b.n	8008aa0 <__ssvfiscanf_r+0x1f8>
 8008b32:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008b34:	4621      	mov	r1, r4
 8008b36:	4630      	mov	r0, r6
 8008b38:	4798      	blx	r3
 8008b3a:	2800      	cmp	r0, #0
 8008b3c:	d0b0      	beq.n	8008aa0 <__ssvfiscanf_r+0x1f8>
 8008b3e:	e78d      	b.n	8008a5c <__ssvfiscanf_r+0x1b4>
 8008b40:	2b04      	cmp	r3, #4
 8008b42:	dc0f      	bgt.n	8008b64 <__ssvfiscanf_r+0x2bc>
 8008b44:	466b      	mov	r3, sp
 8008b46:	4622      	mov	r2, r4
 8008b48:	a941      	add	r1, sp, #260	@ 0x104
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f000 f9be 	bl	8008ecc <_scanf_i>
 8008b50:	e7b4      	b.n	8008abc <__ssvfiscanf_r+0x214>
 8008b52:	bf00      	nop
 8008b54:	080087f5 	.word	0x080087f5
 8008b58:	0800886f 	.word	0x0800886f
 8008b5c:	08009a71 	.word	0x08009a71
 8008b60:	080099f3 	.word	0x080099f3
 8008b64:	4b0a      	ldr	r3, [pc, #40]	@ (8008b90 <__ssvfiscanf_r+0x2e8>)
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	f43f aec6 	beq.w	80088f8 <__ssvfiscanf_r+0x50>
 8008b6c:	466b      	mov	r3, sp
 8008b6e:	4622      	mov	r2, r4
 8008b70:	a941      	add	r1, sp, #260	@ 0x104
 8008b72:	4630      	mov	r0, r6
 8008b74:	f7fc ffe8 	bl	8005b48 <_scanf_float>
 8008b78:	e7a0      	b.n	8008abc <__ssvfiscanf_r+0x214>
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	065b      	lsls	r3, r3, #25
 8008b7e:	f53f af71 	bmi.w	8008a64 <__ssvfiscanf_r+0x1bc>
 8008b82:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 8008b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b8a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008b8c:	e7f9      	b.n	8008b82 <__ssvfiscanf_r+0x2da>
 8008b8e:	bf00      	nop
 8008b90:	08005b49 	.word	0x08005b49

08008b94 <__sfputc_r>:
 8008b94:	6893      	ldr	r3, [r2, #8]
 8008b96:	3b01      	subs	r3, #1
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	b410      	push	{r4}
 8008b9c:	6093      	str	r3, [r2, #8]
 8008b9e:	da08      	bge.n	8008bb2 <__sfputc_r+0x1e>
 8008ba0:	6994      	ldr	r4, [r2, #24]
 8008ba2:	42a3      	cmp	r3, r4
 8008ba4:	db01      	blt.n	8008baa <__sfputc_r+0x16>
 8008ba6:	290a      	cmp	r1, #10
 8008ba8:	d103      	bne.n	8008bb2 <__sfputc_r+0x1e>
 8008baa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bae:	f7fd bb9e 	b.w	80062ee <__swbuf_r>
 8008bb2:	6813      	ldr	r3, [r2, #0]
 8008bb4:	1c58      	adds	r0, r3, #1
 8008bb6:	6010      	str	r0, [r2, #0]
 8008bb8:	7019      	strb	r1, [r3, #0]
 8008bba:	4608      	mov	r0, r1
 8008bbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bc0:	4770      	bx	lr

08008bc2 <__sfputs_r>:
 8008bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc4:	4606      	mov	r6, r0
 8008bc6:	460f      	mov	r7, r1
 8008bc8:	4614      	mov	r4, r2
 8008bca:	18d5      	adds	r5, r2, r3
 8008bcc:	42ac      	cmp	r4, r5
 8008bce:	d101      	bne.n	8008bd4 <__sfputs_r+0x12>
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	e007      	b.n	8008be4 <__sfputs_r+0x22>
 8008bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd8:	463a      	mov	r2, r7
 8008bda:	4630      	mov	r0, r6
 8008bdc:	f7ff ffda 	bl	8008b94 <__sfputc_r>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	d1f3      	bne.n	8008bcc <__sfputs_r+0xa>
 8008be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008be8 <_vfiprintf_r>:
 8008be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bec:	460d      	mov	r5, r1
 8008bee:	b09d      	sub	sp, #116	@ 0x74
 8008bf0:	4614      	mov	r4, r2
 8008bf2:	4698      	mov	r8, r3
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	b118      	cbz	r0, 8008c00 <_vfiprintf_r+0x18>
 8008bf8:	6a03      	ldr	r3, [r0, #32]
 8008bfa:	b90b      	cbnz	r3, 8008c00 <_vfiprintf_r+0x18>
 8008bfc:	f7fd fa3e 	bl	800607c <__sinit>
 8008c00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c02:	07d9      	lsls	r1, r3, #31
 8008c04:	d405      	bmi.n	8008c12 <_vfiprintf_r+0x2a>
 8008c06:	89ab      	ldrh	r3, [r5, #12]
 8008c08:	059a      	lsls	r2, r3, #22
 8008c0a:	d402      	bmi.n	8008c12 <_vfiprintf_r+0x2a>
 8008c0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c0e:	f7fd fd02 	bl	8006616 <__retarget_lock_acquire_recursive>
 8008c12:	89ab      	ldrh	r3, [r5, #12]
 8008c14:	071b      	lsls	r3, r3, #28
 8008c16:	d501      	bpl.n	8008c1c <_vfiprintf_r+0x34>
 8008c18:	692b      	ldr	r3, [r5, #16]
 8008c1a:	b99b      	cbnz	r3, 8008c44 <_vfiprintf_r+0x5c>
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f7fd fba4 	bl	800636c <__swsetup_r>
 8008c24:	b170      	cbz	r0, 8008c44 <_vfiprintf_r+0x5c>
 8008c26:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c28:	07dc      	lsls	r4, r3, #31
 8008c2a:	d504      	bpl.n	8008c36 <_vfiprintf_r+0x4e>
 8008c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c30:	b01d      	add	sp, #116	@ 0x74
 8008c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c36:	89ab      	ldrh	r3, [r5, #12]
 8008c38:	0598      	lsls	r0, r3, #22
 8008c3a:	d4f7      	bmi.n	8008c2c <_vfiprintf_r+0x44>
 8008c3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c3e:	f7fd fceb 	bl	8006618 <__retarget_lock_release_recursive>
 8008c42:	e7f3      	b.n	8008c2c <_vfiprintf_r+0x44>
 8008c44:	2300      	movs	r3, #0
 8008c46:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c48:	2320      	movs	r3, #32
 8008c4a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c52:	2330      	movs	r3, #48	@ 0x30
 8008c54:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e04 <_vfiprintf_r+0x21c>
 8008c58:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c5c:	f04f 0901 	mov.w	r9, #1
 8008c60:	4623      	mov	r3, r4
 8008c62:	469a      	mov	sl, r3
 8008c64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c68:	b10a      	cbz	r2, 8008c6e <_vfiprintf_r+0x86>
 8008c6a:	2a25      	cmp	r2, #37	@ 0x25
 8008c6c:	d1f9      	bne.n	8008c62 <_vfiprintf_r+0x7a>
 8008c6e:	ebba 0b04 	subs.w	fp, sl, r4
 8008c72:	d00b      	beq.n	8008c8c <_vfiprintf_r+0xa4>
 8008c74:	465b      	mov	r3, fp
 8008c76:	4622      	mov	r2, r4
 8008c78:	4629      	mov	r1, r5
 8008c7a:	4630      	mov	r0, r6
 8008c7c:	f7ff ffa1 	bl	8008bc2 <__sfputs_r>
 8008c80:	3001      	adds	r0, #1
 8008c82:	f000 80a7 	beq.w	8008dd4 <_vfiprintf_r+0x1ec>
 8008c86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c88:	445a      	add	r2, fp
 8008c8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c8c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	f000 809f 	beq.w	8008dd4 <_vfiprintf_r+0x1ec>
 8008c96:	2300      	movs	r3, #0
 8008c98:	f04f 32ff 	mov.w	r2, #4294967295
 8008c9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ca0:	f10a 0a01 	add.w	sl, sl, #1
 8008ca4:	9304      	str	r3, [sp, #16]
 8008ca6:	9307      	str	r3, [sp, #28]
 8008ca8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008cac:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cae:	4654      	mov	r4, sl
 8008cb0:	2205      	movs	r2, #5
 8008cb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cb6:	4853      	ldr	r0, [pc, #332]	@ (8008e04 <_vfiprintf_r+0x21c>)
 8008cb8:	f7f7 fa9a 	bl	80001f0 <memchr>
 8008cbc:	9a04      	ldr	r2, [sp, #16]
 8008cbe:	b9d8      	cbnz	r0, 8008cf8 <_vfiprintf_r+0x110>
 8008cc0:	06d1      	lsls	r1, r2, #27
 8008cc2:	bf44      	itt	mi
 8008cc4:	2320      	movmi	r3, #32
 8008cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cca:	0713      	lsls	r3, r2, #28
 8008ccc:	bf44      	itt	mi
 8008cce:	232b      	movmi	r3, #43	@ 0x2b
 8008cd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cd4:	f89a 3000 	ldrb.w	r3, [sl]
 8008cd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cda:	d015      	beq.n	8008d08 <_vfiprintf_r+0x120>
 8008cdc:	9a07      	ldr	r2, [sp, #28]
 8008cde:	4654      	mov	r4, sl
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	f04f 0c0a 	mov.w	ip, #10
 8008ce6:	4621      	mov	r1, r4
 8008ce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008cec:	3b30      	subs	r3, #48	@ 0x30
 8008cee:	2b09      	cmp	r3, #9
 8008cf0:	d94b      	bls.n	8008d8a <_vfiprintf_r+0x1a2>
 8008cf2:	b1b0      	cbz	r0, 8008d22 <_vfiprintf_r+0x13a>
 8008cf4:	9207      	str	r2, [sp, #28]
 8008cf6:	e014      	b.n	8008d22 <_vfiprintf_r+0x13a>
 8008cf8:	eba0 0308 	sub.w	r3, r0, r8
 8008cfc:	fa09 f303 	lsl.w	r3, r9, r3
 8008d00:	4313      	orrs	r3, r2
 8008d02:	9304      	str	r3, [sp, #16]
 8008d04:	46a2      	mov	sl, r4
 8008d06:	e7d2      	b.n	8008cae <_vfiprintf_r+0xc6>
 8008d08:	9b03      	ldr	r3, [sp, #12]
 8008d0a:	1d19      	adds	r1, r3, #4
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	9103      	str	r1, [sp, #12]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	bfbb      	ittet	lt
 8008d14:	425b      	neglt	r3, r3
 8008d16:	f042 0202 	orrlt.w	r2, r2, #2
 8008d1a:	9307      	strge	r3, [sp, #28]
 8008d1c:	9307      	strlt	r3, [sp, #28]
 8008d1e:	bfb8      	it	lt
 8008d20:	9204      	strlt	r2, [sp, #16]
 8008d22:	7823      	ldrb	r3, [r4, #0]
 8008d24:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d26:	d10a      	bne.n	8008d3e <_vfiprintf_r+0x156>
 8008d28:	7863      	ldrb	r3, [r4, #1]
 8008d2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d2c:	d132      	bne.n	8008d94 <_vfiprintf_r+0x1ac>
 8008d2e:	9b03      	ldr	r3, [sp, #12]
 8008d30:	1d1a      	adds	r2, r3, #4
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	9203      	str	r2, [sp, #12]
 8008d36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d3a:	3402      	adds	r4, #2
 8008d3c:	9305      	str	r3, [sp, #20]
 8008d3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e14 <_vfiprintf_r+0x22c>
 8008d42:	7821      	ldrb	r1, [r4, #0]
 8008d44:	2203      	movs	r2, #3
 8008d46:	4650      	mov	r0, sl
 8008d48:	f7f7 fa52 	bl	80001f0 <memchr>
 8008d4c:	b138      	cbz	r0, 8008d5e <_vfiprintf_r+0x176>
 8008d4e:	9b04      	ldr	r3, [sp, #16]
 8008d50:	eba0 000a 	sub.w	r0, r0, sl
 8008d54:	2240      	movs	r2, #64	@ 0x40
 8008d56:	4082      	lsls	r2, r0
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	3401      	adds	r4, #1
 8008d5c:	9304      	str	r3, [sp, #16]
 8008d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d62:	4829      	ldr	r0, [pc, #164]	@ (8008e08 <_vfiprintf_r+0x220>)
 8008d64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d68:	2206      	movs	r2, #6
 8008d6a:	f7f7 fa41 	bl	80001f0 <memchr>
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d03f      	beq.n	8008df2 <_vfiprintf_r+0x20a>
 8008d72:	4b26      	ldr	r3, [pc, #152]	@ (8008e0c <_vfiprintf_r+0x224>)
 8008d74:	bb1b      	cbnz	r3, 8008dbe <_vfiprintf_r+0x1d6>
 8008d76:	9b03      	ldr	r3, [sp, #12]
 8008d78:	3307      	adds	r3, #7
 8008d7a:	f023 0307 	bic.w	r3, r3, #7
 8008d7e:	3308      	adds	r3, #8
 8008d80:	9303      	str	r3, [sp, #12]
 8008d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d84:	443b      	add	r3, r7
 8008d86:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d88:	e76a      	b.n	8008c60 <_vfiprintf_r+0x78>
 8008d8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d8e:	460c      	mov	r4, r1
 8008d90:	2001      	movs	r0, #1
 8008d92:	e7a8      	b.n	8008ce6 <_vfiprintf_r+0xfe>
 8008d94:	2300      	movs	r3, #0
 8008d96:	3401      	adds	r4, #1
 8008d98:	9305      	str	r3, [sp, #20]
 8008d9a:	4619      	mov	r1, r3
 8008d9c:	f04f 0c0a 	mov.w	ip, #10
 8008da0:	4620      	mov	r0, r4
 8008da2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008da6:	3a30      	subs	r2, #48	@ 0x30
 8008da8:	2a09      	cmp	r2, #9
 8008daa:	d903      	bls.n	8008db4 <_vfiprintf_r+0x1cc>
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d0c6      	beq.n	8008d3e <_vfiprintf_r+0x156>
 8008db0:	9105      	str	r1, [sp, #20]
 8008db2:	e7c4      	b.n	8008d3e <_vfiprintf_r+0x156>
 8008db4:	fb0c 2101 	mla	r1, ip, r1, r2
 8008db8:	4604      	mov	r4, r0
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e7f0      	b.n	8008da0 <_vfiprintf_r+0x1b8>
 8008dbe:	ab03      	add	r3, sp, #12
 8008dc0:	9300      	str	r3, [sp, #0]
 8008dc2:	462a      	mov	r2, r5
 8008dc4:	4b12      	ldr	r3, [pc, #72]	@ (8008e10 <_vfiprintf_r+0x228>)
 8008dc6:	a904      	add	r1, sp, #16
 8008dc8:	4630      	mov	r0, r6
 8008dca:	f7fc fb07 	bl	80053dc <_printf_float>
 8008dce:	4607      	mov	r7, r0
 8008dd0:	1c78      	adds	r0, r7, #1
 8008dd2:	d1d6      	bne.n	8008d82 <_vfiprintf_r+0x19a>
 8008dd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dd6:	07d9      	lsls	r1, r3, #31
 8008dd8:	d405      	bmi.n	8008de6 <_vfiprintf_r+0x1fe>
 8008dda:	89ab      	ldrh	r3, [r5, #12]
 8008ddc:	059a      	lsls	r2, r3, #22
 8008dde:	d402      	bmi.n	8008de6 <_vfiprintf_r+0x1fe>
 8008de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008de2:	f7fd fc19 	bl	8006618 <__retarget_lock_release_recursive>
 8008de6:	89ab      	ldrh	r3, [r5, #12]
 8008de8:	065b      	lsls	r3, r3, #25
 8008dea:	f53f af1f 	bmi.w	8008c2c <_vfiprintf_r+0x44>
 8008dee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008df0:	e71e      	b.n	8008c30 <_vfiprintf_r+0x48>
 8008df2:	ab03      	add	r3, sp, #12
 8008df4:	9300      	str	r3, [sp, #0]
 8008df6:	462a      	mov	r2, r5
 8008df8:	4b05      	ldr	r3, [pc, #20]	@ (8008e10 <_vfiprintf_r+0x228>)
 8008dfa:	a904      	add	r1, sp, #16
 8008dfc:	4630      	mov	r0, r6
 8008dfe:	f7fc fd85 	bl	800590c <_printf_i>
 8008e02:	e7e4      	b.n	8008dce <_vfiprintf_r+0x1e6>
 8008e04:	080099ed 	.word	0x080099ed
 8008e08:	080099f7 	.word	0x080099f7
 8008e0c:	080053dd 	.word	0x080053dd
 8008e10:	08008bc3 	.word	0x08008bc3
 8008e14:	080099f3 	.word	0x080099f3

08008e18 <_scanf_chars>:
 8008e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e1c:	4615      	mov	r5, r2
 8008e1e:	688a      	ldr	r2, [r1, #8]
 8008e20:	4680      	mov	r8, r0
 8008e22:	460c      	mov	r4, r1
 8008e24:	b932      	cbnz	r2, 8008e34 <_scanf_chars+0x1c>
 8008e26:	698a      	ldr	r2, [r1, #24]
 8008e28:	2a00      	cmp	r2, #0
 8008e2a:	bf14      	ite	ne
 8008e2c:	f04f 32ff 	movne.w	r2, #4294967295
 8008e30:	2201      	moveq	r2, #1
 8008e32:	608a      	str	r2, [r1, #8]
 8008e34:	6822      	ldr	r2, [r4, #0]
 8008e36:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8008ec8 <_scanf_chars+0xb0>
 8008e3a:	06d1      	lsls	r1, r2, #27
 8008e3c:	bf5f      	itttt	pl
 8008e3e:	681a      	ldrpl	r2, [r3, #0]
 8008e40:	1d11      	addpl	r1, r2, #4
 8008e42:	6019      	strpl	r1, [r3, #0]
 8008e44:	6816      	ldrpl	r6, [r2, #0]
 8008e46:	2700      	movs	r7, #0
 8008e48:	69a0      	ldr	r0, [r4, #24]
 8008e4a:	b188      	cbz	r0, 8008e70 <_scanf_chars+0x58>
 8008e4c:	2801      	cmp	r0, #1
 8008e4e:	d107      	bne.n	8008e60 <_scanf_chars+0x48>
 8008e50:	682b      	ldr	r3, [r5, #0]
 8008e52:	781a      	ldrb	r2, [r3, #0]
 8008e54:	6963      	ldr	r3, [r4, #20]
 8008e56:	5c9b      	ldrb	r3, [r3, r2]
 8008e58:	b953      	cbnz	r3, 8008e70 <_scanf_chars+0x58>
 8008e5a:	2f00      	cmp	r7, #0
 8008e5c:	d031      	beq.n	8008ec2 <_scanf_chars+0xaa>
 8008e5e:	e022      	b.n	8008ea6 <_scanf_chars+0x8e>
 8008e60:	2802      	cmp	r0, #2
 8008e62:	d120      	bne.n	8008ea6 <_scanf_chars+0x8e>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	f819 3003 	ldrb.w	r3, [r9, r3]
 8008e6c:	071b      	lsls	r3, r3, #28
 8008e6e:	d41a      	bmi.n	8008ea6 <_scanf_chars+0x8e>
 8008e70:	6823      	ldr	r3, [r4, #0]
 8008e72:	06da      	lsls	r2, r3, #27
 8008e74:	bf5e      	ittt	pl
 8008e76:	682b      	ldrpl	r3, [r5, #0]
 8008e78:	781b      	ldrbpl	r3, [r3, #0]
 8008e7a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008e7e:	682a      	ldr	r2, [r5, #0]
 8008e80:	686b      	ldr	r3, [r5, #4]
 8008e82:	3201      	adds	r2, #1
 8008e84:	602a      	str	r2, [r5, #0]
 8008e86:	68a2      	ldr	r2, [r4, #8]
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	3a01      	subs	r2, #1
 8008e8c:	606b      	str	r3, [r5, #4]
 8008e8e:	3701      	adds	r7, #1
 8008e90:	60a2      	str	r2, [r4, #8]
 8008e92:	b142      	cbz	r2, 8008ea6 <_scanf_chars+0x8e>
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	dcd7      	bgt.n	8008e48 <_scanf_chars+0x30>
 8008e98:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	4640      	mov	r0, r8
 8008ea0:	4798      	blx	r3
 8008ea2:	2800      	cmp	r0, #0
 8008ea4:	d0d0      	beq.n	8008e48 <_scanf_chars+0x30>
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	f013 0310 	ands.w	r3, r3, #16
 8008eac:	d105      	bne.n	8008eba <_scanf_chars+0xa2>
 8008eae:	68e2      	ldr	r2, [r4, #12]
 8008eb0:	3201      	adds	r2, #1
 8008eb2:	60e2      	str	r2, [r4, #12]
 8008eb4:	69a2      	ldr	r2, [r4, #24]
 8008eb6:	b102      	cbz	r2, 8008eba <_scanf_chars+0xa2>
 8008eb8:	7033      	strb	r3, [r6, #0]
 8008eba:	6923      	ldr	r3, [r4, #16]
 8008ebc:	443b      	add	r3, r7
 8008ebe:	6123      	str	r3, [r4, #16]
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ec6:	bf00      	nop
 8008ec8:	08009a71 	.word	0x08009a71

08008ecc <_scanf_i>:
 8008ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed0:	4698      	mov	r8, r3
 8008ed2:	4b74      	ldr	r3, [pc, #464]	@ (80090a4 <_scanf_i+0x1d8>)
 8008ed4:	460c      	mov	r4, r1
 8008ed6:	4682      	mov	sl, r0
 8008ed8:	4616      	mov	r6, r2
 8008eda:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ede:	b087      	sub	sp, #28
 8008ee0:	ab03      	add	r3, sp, #12
 8008ee2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008ee6:	4b70      	ldr	r3, [pc, #448]	@ (80090a8 <_scanf_i+0x1dc>)
 8008ee8:	69a1      	ldr	r1, [r4, #24]
 8008eea:	4a70      	ldr	r2, [pc, #448]	@ (80090ac <_scanf_i+0x1e0>)
 8008eec:	2903      	cmp	r1, #3
 8008eee:	bf08      	it	eq
 8008ef0:	461a      	moveq	r2, r3
 8008ef2:	68a3      	ldr	r3, [r4, #8]
 8008ef4:	9201      	str	r2, [sp, #4]
 8008ef6:	1e5a      	subs	r2, r3, #1
 8008ef8:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008efc:	bf88      	it	hi
 8008efe:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008f02:	4627      	mov	r7, r4
 8008f04:	bf82      	ittt	hi
 8008f06:	eb03 0905 	addhi.w	r9, r3, r5
 8008f0a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008f0e:	60a3      	strhi	r3, [r4, #8]
 8008f10:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008f14:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8008f18:	bf98      	it	ls
 8008f1a:	f04f 0900 	movls.w	r9, #0
 8008f1e:	6023      	str	r3, [r4, #0]
 8008f20:	463d      	mov	r5, r7
 8008f22:	f04f 0b00 	mov.w	fp, #0
 8008f26:	6831      	ldr	r1, [r6, #0]
 8008f28:	ab03      	add	r3, sp, #12
 8008f2a:	7809      	ldrb	r1, [r1, #0]
 8008f2c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008f30:	2202      	movs	r2, #2
 8008f32:	f7f7 f95d 	bl	80001f0 <memchr>
 8008f36:	b328      	cbz	r0, 8008f84 <_scanf_i+0xb8>
 8008f38:	f1bb 0f01 	cmp.w	fp, #1
 8008f3c:	d159      	bne.n	8008ff2 <_scanf_i+0x126>
 8008f3e:	6862      	ldr	r2, [r4, #4]
 8008f40:	b92a      	cbnz	r2, 8008f4e <_scanf_i+0x82>
 8008f42:	6822      	ldr	r2, [r4, #0]
 8008f44:	2108      	movs	r1, #8
 8008f46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008f4a:	6061      	str	r1, [r4, #4]
 8008f4c:	6022      	str	r2, [r4, #0]
 8008f4e:	6822      	ldr	r2, [r4, #0]
 8008f50:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8008f54:	6022      	str	r2, [r4, #0]
 8008f56:	68a2      	ldr	r2, [r4, #8]
 8008f58:	1e51      	subs	r1, r2, #1
 8008f5a:	60a1      	str	r1, [r4, #8]
 8008f5c:	b192      	cbz	r2, 8008f84 <_scanf_i+0xb8>
 8008f5e:	6832      	ldr	r2, [r6, #0]
 8008f60:	1c51      	adds	r1, r2, #1
 8008f62:	6031      	str	r1, [r6, #0]
 8008f64:	7812      	ldrb	r2, [r2, #0]
 8008f66:	f805 2b01 	strb.w	r2, [r5], #1
 8008f6a:	6872      	ldr	r2, [r6, #4]
 8008f6c:	3a01      	subs	r2, #1
 8008f6e:	2a00      	cmp	r2, #0
 8008f70:	6072      	str	r2, [r6, #4]
 8008f72:	dc07      	bgt.n	8008f84 <_scanf_i+0xb8>
 8008f74:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8008f78:	4631      	mov	r1, r6
 8008f7a:	4650      	mov	r0, sl
 8008f7c:	4790      	blx	r2
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	f040 8085 	bne.w	800908e <_scanf_i+0x1c2>
 8008f84:	f10b 0b01 	add.w	fp, fp, #1
 8008f88:	f1bb 0f03 	cmp.w	fp, #3
 8008f8c:	d1cb      	bne.n	8008f26 <_scanf_i+0x5a>
 8008f8e:	6863      	ldr	r3, [r4, #4]
 8008f90:	b90b      	cbnz	r3, 8008f96 <_scanf_i+0xca>
 8008f92:	230a      	movs	r3, #10
 8008f94:	6063      	str	r3, [r4, #4]
 8008f96:	6863      	ldr	r3, [r4, #4]
 8008f98:	4945      	ldr	r1, [pc, #276]	@ (80090b0 <_scanf_i+0x1e4>)
 8008f9a:	6960      	ldr	r0, [r4, #20]
 8008f9c:	1ac9      	subs	r1, r1, r3
 8008f9e:	f000 f9a9 	bl	80092f4 <__sccl>
 8008fa2:	f04f 0b00 	mov.w	fp, #0
 8008fa6:	68a3      	ldr	r3, [r4, #8]
 8008fa8:	6822      	ldr	r2, [r4, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d03d      	beq.n	800902a <_scanf_i+0x15e>
 8008fae:	6831      	ldr	r1, [r6, #0]
 8008fb0:	6960      	ldr	r0, [r4, #20]
 8008fb2:	f891 c000 	ldrb.w	ip, [r1]
 8008fb6:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008fba:	2800      	cmp	r0, #0
 8008fbc:	d035      	beq.n	800902a <_scanf_i+0x15e>
 8008fbe:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8008fc2:	d124      	bne.n	800900e <_scanf_i+0x142>
 8008fc4:	0510      	lsls	r0, r2, #20
 8008fc6:	d522      	bpl.n	800900e <_scanf_i+0x142>
 8008fc8:	f10b 0b01 	add.w	fp, fp, #1
 8008fcc:	f1b9 0f00 	cmp.w	r9, #0
 8008fd0:	d003      	beq.n	8008fda <_scanf_i+0x10e>
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	f109 39ff 	add.w	r9, r9, #4294967295
 8008fd8:	60a3      	str	r3, [r4, #8]
 8008fda:	6873      	ldr	r3, [r6, #4]
 8008fdc:	3b01      	subs	r3, #1
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	6073      	str	r3, [r6, #4]
 8008fe2:	dd1b      	ble.n	800901c <_scanf_i+0x150>
 8008fe4:	6833      	ldr	r3, [r6, #0]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	6033      	str	r3, [r6, #0]
 8008fea:	68a3      	ldr	r3, [r4, #8]
 8008fec:	3b01      	subs	r3, #1
 8008fee:	60a3      	str	r3, [r4, #8]
 8008ff0:	e7d9      	b.n	8008fa6 <_scanf_i+0xda>
 8008ff2:	f1bb 0f02 	cmp.w	fp, #2
 8008ff6:	d1ae      	bne.n	8008f56 <_scanf_i+0x8a>
 8008ff8:	6822      	ldr	r2, [r4, #0]
 8008ffa:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8008ffe:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009002:	d1c4      	bne.n	8008f8e <_scanf_i+0xc2>
 8009004:	2110      	movs	r1, #16
 8009006:	6061      	str	r1, [r4, #4]
 8009008:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800900c:	e7a2      	b.n	8008f54 <_scanf_i+0x88>
 800900e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009012:	6022      	str	r2, [r4, #0]
 8009014:	780b      	ldrb	r3, [r1, #0]
 8009016:	f805 3b01 	strb.w	r3, [r5], #1
 800901a:	e7de      	b.n	8008fda <_scanf_i+0x10e>
 800901c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009020:	4631      	mov	r1, r6
 8009022:	4650      	mov	r0, sl
 8009024:	4798      	blx	r3
 8009026:	2800      	cmp	r0, #0
 8009028:	d0df      	beq.n	8008fea <_scanf_i+0x11e>
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	05d9      	lsls	r1, r3, #23
 800902e:	d50d      	bpl.n	800904c <_scanf_i+0x180>
 8009030:	42bd      	cmp	r5, r7
 8009032:	d909      	bls.n	8009048 <_scanf_i+0x17c>
 8009034:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009038:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800903c:	4632      	mov	r2, r6
 800903e:	4650      	mov	r0, sl
 8009040:	4798      	blx	r3
 8009042:	f105 39ff 	add.w	r9, r5, #4294967295
 8009046:	464d      	mov	r5, r9
 8009048:	42bd      	cmp	r5, r7
 800904a:	d028      	beq.n	800909e <_scanf_i+0x1d2>
 800904c:	6822      	ldr	r2, [r4, #0]
 800904e:	f012 0210 	ands.w	r2, r2, #16
 8009052:	d113      	bne.n	800907c <_scanf_i+0x1b0>
 8009054:	702a      	strb	r2, [r5, #0]
 8009056:	6863      	ldr	r3, [r4, #4]
 8009058:	9e01      	ldr	r6, [sp, #4]
 800905a:	4639      	mov	r1, r7
 800905c:	4650      	mov	r0, sl
 800905e:	47b0      	blx	r6
 8009060:	f8d8 3000 	ldr.w	r3, [r8]
 8009064:	6821      	ldr	r1, [r4, #0]
 8009066:	1d1a      	adds	r2, r3, #4
 8009068:	f8c8 2000 	str.w	r2, [r8]
 800906c:	f011 0f20 	tst.w	r1, #32
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	d00f      	beq.n	8009094 <_scanf_i+0x1c8>
 8009074:	6018      	str	r0, [r3, #0]
 8009076:	68e3      	ldr	r3, [r4, #12]
 8009078:	3301      	adds	r3, #1
 800907a:	60e3      	str	r3, [r4, #12]
 800907c:	6923      	ldr	r3, [r4, #16]
 800907e:	1bed      	subs	r5, r5, r7
 8009080:	445d      	add	r5, fp
 8009082:	442b      	add	r3, r5
 8009084:	6123      	str	r3, [r4, #16]
 8009086:	2000      	movs	r0, #0
 8009088:	b007      	add	sp, #28
 800908a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800908e:	f04f 0b00 	mov.w	fp, #0
 8009092:	e7ca      	b.n	800902a <_scanf_i+0x15e>
 8009094:	07ca      	lsls	r2, r1, #31
 8009096:	bf4c      	ite	mi
 8009098:	8018      	strhmi	r0, [r3, #0]
 800909a:	6018      	strpl	r0, [r3, #0]
 800909c:	e7eb      	b.n	8009076 <_scanf_i+0x1aa>
 800909e:	2001      	movs	r0, #1
 80090a0:	e7f2      	b.n	8009088 <_scanf_i+0x1bc>
 80090a2:	bf00      	nop
 80090a4:	080097ac 	.word	0x080097ac
 80090a8:	08005299 	.word	0x08005299
 80090ac:	080095e5 	.word	0x080095e5
 80090b0:	08009a0e 	.word	0x08009a0e

080090b4 <__sflush_r>:
 80090b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090bc:	0716      	lsls	r6, r2, #28
 80090be:	4605      	mov	r5, r0
 80090c0:	460c      	mov	r4, r1
 80090c2:	d454      	bmi.n	800916e <__sflush_r+0xba>
 80090c4:	684b      	ldr	r3, [r1, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	dc02      	bgt.n	80090d0 <__sflush_r+0x1c>
 80090ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	dd48      	ble.n	8009162 <__sflush_r+0xae>
 80090d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090d2:	2e00      	cmp	r6, #0
 80090d4:	d045      	beq.n	8009162 <__sflush_r+0xae>
 80090d6:	2300      	movs	r3, #0
 80090d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80090dc:	682f      	ldr	r7, [r5, #0]
 80090de:	6a21      	ldr	r1, [r4, #32]
 80090e0:	602b      	str	r3, [r5, #0]
 80090e2:	d030      	beq.n	8009146 <__sflush_r+0x92>
 80090e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80090e6:	89a3      	ldrh	r3, [r4, #12]
 80090e8:	0759      	lsls	r1, r3, #29
 80090ea:	d505      	bpl.n	80090f8 <__sflush_r+0x44>
 80090ec:	6863      	ldr	r3, [r4, #4]
 80090ee:	1ad2      	subs	r2, r2, r3
 80090f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80090f2:	b10b      	cbz	r3, 80090f8 <__sflush_r+0x44>
 80090f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80090f6:	1ad2      	subs	r2, r2, r3
 80090f8:	2300      	movs	r3, #0
 80090fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090fc:	6a21      	ldr	r1, [r4, #32]
 80090fe:	4628      	mov	r0, r5
 8009100:	47b0      	blx	r6
 8009102:	1c43      	adds	r3, r0, #1
 8009104:	89a3      	ldrh	r3, [r4, #12]
 8009106:	d106      	bne.n	8009116 <__sflush_r+0x62>
 8009108:	6829      	ldr	r1, [r5, #0]
 800910a:	291d      	cmp	r1, #29
 800910c:	d82b      	bhi.n	8009166 <__sflush_r+0xb2>
 800910e:	4a2a      	ldr	r2, [pc, #168]	@ (80091b8 <__sflush_r+0x104>)
 8009110:	40ca      	lsrs	r2, r1
 8009112:	07d6      	lsls	r6, r2, #31
 8009114:	d527      	bpl.n	8009166 <__sflush_r+0xb2>
 8009116:	2200      	movs	r2, #0
 8009118:	6062      	str	r2, [r4, #4]
 800911a:	04d9      	lsls	r1, r3, #19
 800911c:	6922      	ldr	r2, [r4, #16]
 800911e:	6022      	str	r2, [r4, #0]
 8009120:	d504      	bpl.n	800912c <__sflush_r+0x78>
 8009122:	1c42      	adds	r2, r0, #1
 8009124:	d101      	bne.n	800912a <__sflush_r+0x76>
 8009126:	682b      	ldr	r3, [r5, #0]
 8009128:	b903      	cbnz	r3, 800912c <__sflush_r+0x78>
 800912a:	6560      	str	r0, [r4, #84]	@ 0x54
 800912c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800912e:	602f      	str	r7, [r5, #0]
 8009130:	b1b9      	cbz	r1, 8009162 <__sflush_r+0xae>
 8009132:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009136:	4299      	cmp	r1, r3
 8009138:	d002      	beq.n	8009140 <__sflush_r+0x8c>
 800913a:	4628      	mov	r0, r5
 800913c:	f7fe f900 	bl	8007340 <_free_r>
 8009140:	2300      	movs	r3, #0
 8009142:	6363      	str	r3, [r4, #52]	@ 0x34
 8009144:	e00d      	b.n	8009162 <__sflush_r+0xae>
 8009146:	2301      	movs	r3, #1
 8009148:	4628      	mov	r0, r5
 800914a:	47b0      	blx	r6
 800914c:	4602      	mov	r2, r0
 800914e:	1c50      	adds	r0, r2, #1
 8009150:	d1c9      	bne.n	80090e6 <__sflush_r+0x32>
 8009152:	682b      	ldr	r3, [r5, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d0c6      	beq.n	80090e6 <__sflush_r+0x32>
 8009158:	2b1d      	cmp	r3, #29
 800915a:	d001      	beq.n	8009160 <__sflush_r+0xac>
 800915c:	2b16      	cmp	r3, #22
 800915e:	d11e      	bne.n	800919e <__sflush_r+0xea>
 8009160:	602f      	str	r7, [r5, #0]
 8009162:	2000      	movs	r0, #0
 8009164:	e022      	b.n	80091ac <__sflush_r+0xf8>
 8009166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800916a:	b21b      	sxth	r3, r3
 800916c:	e01b      	b.n	80091a6 <__sflush_r+0xf2>
 800916e:	690f      	ldr	r7, [r1, #16]
 8009170:	2f00      	cmp	r7, #0
 8009172:	d0f6      	beq.n	8009162 <__sflush_r+0xae>
 8009174:	0793      	lsls	r3, r2, #30
 8009176:	680e      	ldr	r6, [r1, #0]
 8009178:	bf08      	it	eq
 800917a:	694b      	ldreq	r3, [r1, #20]
 800917c:	600f      	str	r7, [r1, #0]
 800917e:	bf18      	it	ne
 8009180:	2300      	movne	r3, #0
 8009182:	eba6 0807 	sub.w	r8, r6, r7
 8009186:	608b      	str	r3, [r1, #8]
 8009188:	f1b8 0f00 	cmp.w	r8, #0
 800918c:	dde9      	ble.n	8009162 <__sflush_r+0xae>
 800918e:	6a21      	ldr	r1, [r4, #32]
 8009190:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009192:	4643      	mov	r3, r8
 8009194:	463a      	mov	r2, r7
 8009196:	4628      	mov	r0, r5
 8009198:	47b0      	blx	r6
 800919a:	2800      	cmp	r0, #0
 800919c:	dc08      	bgt.n	80091b0 <__sflush_r+0xfc>
 800919e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091a6:	81a3      	strh	r3, [r4, #12]
 80091a8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091b0:	4407      	add	r7, r0
 80091b2:	eba8 0800 	sub.w	r8, r8, r0
 80091b6:	e7e7      	b.n	8009188 <__sflush_r+0xd4>
 80091b8:	20400001 	.word	0x20400001

080091bc <_fflush_r>:
 80091bc:	b538      	push	{r3, r4, r5, lr}
 80091be:	690b      	ldr	r3, [r1, #16]
 80091c0:	4605      	mov	r5, r0
 80091c2:	460c      	mov	r4, r1
 80091c4:	b913      	cbnz	r3, 80091cc <_fflush_r+0x10>
 80091c6:	2500      	movs	r5, #0
 80091c8:	4628      	mov	r0, r5
 80091ca:	bd38      	pop	{r3, r4, r5, pc}
 80091cc:	b118      	cbz	r0, 80091d6 <_fflush_r+0x1a>
 80091ce:	6a03      	ldr	r3, [r0, #32]
 80091d0:	b90b      	cbnz	r3, 80091d6 <_fflush_r+0x1a>
 80091d2:	f7fc ff53 	bl	800607c <__sinit>
 80091d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0f3      	beq.n	80091c6 <_fflush_r+0xa>
 80091de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80091e0:	07d0      	lsls	r0, r2, #31
 80091e2:	d404      	bmi.n	80091ee <_fflush_r+0x32>
 80091e4:	0599      	lsls	r1, r3, #22
 80091e6:	d402      	bmi.n	80091ee <_fflush_r+0x32>
 80091e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80091ea:	f7fd fa14 	bl	8006616 <__retarget_lock_acquire_recursive>
 80091ee:	4628      	mov	r0, r5
 80091f0:	4621      	mov	r1, r4
 80091f2:	f7ff ff5f 	bl	80090b4 <__sflush_r>
 80091f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80091f8:	07da      	lsls	r2, r3, #31
 80091fa:	4605      	mov	r5, r0
 80091fc:	d4e4      	bmi.n	80091c8 <_fflush_r+0xc>
 80091fe:	89a3      	ldrh	r3, [r4, #12]
 8009200:	059b      	lsls	r3, r3, #22
 8009202:	d4e1      	bmi.n	80091c8 <_fflush_r+0xc>
 8009204:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009206:	f7fd fa07 	bl	8006618 <__retarget_lock_release_recursive>
 800920a:	e7dd      	b.n	80091c8 <_fflush_r+0xc>

0800920c <fiprintf>:
 800920c:	b40e      	push	{r1, r2, r3}
 800920e:	b503      	push	{r0, r1, lr}
 8009210:	4601      	mov	r1, r0
 8009212:	ab03      	add	r3, sp, #12
 8009214:	4805      	ldr	r0, [pc, #20]	@ (800922c <fiprintf+0x20>)
 8009216:	f853 2b04 	ldr.w	r2, [r3], #4
 800921a:	6800      	ldr	r0, [r0, #0]
 800921c:	9301      	str	r3, [sp, #4]
 800921e:	f7ff fce3 	bl	8008be8 <_vfiprintf_r>
 8009222:	b002      	add	sp, #8
 8009224:	f85d eb04 	ldr.w	lr, [sp], #4
 8009228:	b003      	add	sp, #12
 800922a:	4770      	bx	lr
 800922c:	20000190 	.word	0x20000190

08009230 <__swhatbuf_r>:
 8009230:	b570      	push	{r4, r5, r6, lr}
 8009232:	460c      	mov	r4, r1
 8009234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009238:	2900      	cmp	r1, #0
 800923a:	b096      	sub	sp, #88	@ 0x58
 800923c:	4615      	mov	r5, r2
 800923e:	461e      	mov	r6, r3
 8009240:	da0d      	bge.n	800925e <__swhatbuf_r+0x2e>
 8009242:	89a3      	ldrh	r3, [r4, #12]
 8009244:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009248:	f04f 0100 	mov.w	r1, #0
 800924c:	bf14      	ite	ne
 800924e:	2340      	movne	r3, #64	@ 0x40
 8009250:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009254:	2000      	movs	r0, #0
 8009256:	6031      	str	r1, [r6, #0]
 8009258:	602b      	str	r3, [r5, #0]
 800925a:	b016      	add	sp, #88	@ 0x58
 800925c:	bd70      	pop	{r4, r5, r6, pc}
 800925e:	466a      	mov	r2, sp
 8009260:	f000 f8d6 	bl	8009410 <_fstat_r>
 8009264:	2800      	cmp	r0, #0
 8009266:	dbec      	blt.n	8009242 <__swhatbuf_r+0x12>
 8009268:	9901      	ldr	r1, [sp, #4]
 800926a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800926e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009272:	4259      	negs	r1, r3
 8009274:	4159      	adcs	r1, r3
 8009276:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800927a:	e7eb      	b.n	8009254 <__swhatbuf_r+0x24>

0800927c <__smakebuf_r>:
 800927c:	898b      	ldrh	r3, [r1, #12]
 800927e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009280:	079d      	lsls	r5, r3, #30
 8009282:	4606      	mov	r6, r0
 8009284:	460c      	mov	r4, r1
 8009286:	d507      	bpl.n	8009298 <__smakebuf_r+0x1c>
 8009288:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800928c:	6023      	str	r3, [r4, #0]
 800928e:	6123      	str	r3, [r4, #16]
 8009290:	2301      	movs	r3, #1
 8009292:	6163      	str	r3, [r4, #20]
 8009294:	b003      	add	sp, #12
 8009296:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009298:	ab01      	add	r3, sp, #4
 800929a:	466a      	mov	r2, sp
 800929c:	f7ff ffc8 	bl	8009230 <__swhatbuf_r>
 80092a0:	9f00      	ldr	r7, [sp, #0]
 80092a2:	4605      	mov	r5, r0
 80092a4:	4639      	mov	r1, r7
 80092a6:	4630      	mov	r0, r6
 80092a8:	f7fe fbf8 	bl	8007a9c <_malloc_r>
 80092ac:	b948      	cbnz	r0, 80092c2 <__smakebuf_r+0x46>
 80092ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092b2:	059a      	lsls	r2, r3, #22
 80092b4:	d4ee      	bmi.n	8009294 <__smakebuf_r+0x18>
 80092b6:	f023 0303 	bic.w	r3, r3, #3
 80092ba:	f043 0302 	orr.w	r3, r3, #2
 80092be:	81a3      	strh	r3, [r4, #12]
 80092c0:	e7e2      	b.n	8009288 <__smakebuf_r+0xc>
 80092c2:	89a3      	ldrh	r3, [r4, #12]
 80092c4:	6020      	str	r0, [r4, #0]
 80092c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80092ca:	81a3      	strh	r3, [r4, #12]
 80092cc:	9b01      	ldr	r3, [sp, #4]
 80092ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80092d2:	b15b      	cbz	r3, 80092ec <__smakebuf_r+0x70>
 80092d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092d8:	4630      	mov	r0, r6
 80092da:	f000 f8ab 	bl	8009434 <_isatty_r>
 80092de:	b128      	cbz	r0, 80092ec <__smakebuf_r+0x70>
 80092e0:	89a3      	ldrh	r3, [r4, #12]
 80092e2:	f023 0303 	bic.w	r3, r3, #3
 80092e6:	f043 0301 	orr.w	r3, r3, #1
 80092ea:	81a3      	strh	r3, [r4, #12]
 80092ec:	89a3      	ldrh	r3, [r4, #12]
 80092ee:	431d      	orrs	r5, r3
 80092f0:	81a5      	strh	r5, [r4, #12]
 80092f2:	e7cf      	b.n	8009294 <__smakebuf_r+0x18>

080092f4 <__sccl>:
 80092f4:	b570      	push	{r4, r5, r6, lr}
 80092f6:	780b      	ldrb	r3, [r1, #0]
 80092f8:	4604      	mov	r4, r0
 80092fa:	2b5e      	cmp	r3, #94	@ 0x5e
 80092fc:	bf0b      	itete	eq
 80092fe:	784b      	ldrbeq	r3, [r1, #1]
 8009300:	1c4a      	addne	r2, r1, #1
 8009302:	1c8a      	addeq	r2, r1, #2
 8009304:	2100      	movne	r1, #0
 8009306:	bf08      	it	eq
 8009308:	2101      	moveq	r1, #1
 800930a:	3801      	subs	r0, #1
 800930c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8009310:	f800 1f01 	strb.w	r1, [r0, #1]!
 8009314:	42a8      	cmp	r0, r5
 8009316:	d1fb      	bne.n	8009310 <__sccl+0x1c>
 8009318:	b90b      	cbnz	r3, 800931e <__sccl+0x2a>
 800931a:	1e50      	subs	r0, r2, #1
 800931c:	bd70      	pop	{r4, r5, r6, pc}
 800931e:	f081 0101 	eor.w	r1, r1, #1
 8009322:	54e1      	strb	r1, [r4, r3]
 8009324:	4610      	mov	r0, r2
 8009326:	4602      	mov	r2, r0
 8009328:	f812 5b01 	ldrb.w	r5, [r2], #1
 800932c:	2d2d      	cmp	r5, #45	@ 0x2d
 800932e:	d005      	beq.n	800933c <__sccl+0x48>
 8009330:	2d5d      	cmp	r5, #93	@ 0x5d
 8009332:	d016      	beq.n	8009362 <__sccl+0x6e>
 8009334:	2d00      	cmp	r5, #0
 8009336:	d0f1      	beq.n	800931c <__sccl+0x28>
 8009338:	462b      	mov	r3, r5
 800933a:	e7f2      	b.n	8009322 <__sccl+0x2e>
 800933c:	7846      	ldrb	r6, [r0, #1]
 800933e:	2e5d      	cmp	r6, #93	@ 0x5d
 8009340:	d0fa      	beq.n	8009338 <__sccl+0x44>
 8009342:	42b3      	cmp	r3, r6
 8009344:	dcf8      	bgt.n	8009338 <__sccl+0x44>
 8009346:	3002      	adds	r0, #2
 8009348:	461a      	mov	r2, r3
 800934a:	3201      	adds	r2, #1
 800934c:	4296      	cmp	r6, r2
 800934e:	54a1      	strb	r1, [r4, r2]
 8009350:	dcfb      	bgt.n	800934a <__sccl+0x56>
 8009352:	1af2      	subs	r2, r6, r3
 8009354:	3a01      	subs	r2, #1
 8009356:	1c5d      	adds	r5, r3, #1
 8009358:	42b3      	cmp	r3, r6
 800935a:	bfa8      	it	ge
 800935c:	2200      	movge	r2, #0
 800935e:	18ab      	adds	r3, r5, r2
 8009360:	e7e1      	b.n	8009326 <__sccl+0x32>
 8009362:	4610      	mov	r0, r2
 8009364:	e7da      	b.n	800931c <__sccl+0x28>

08009366 <__submore>:
 8009366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800936a:	460c      	mov	r4, r1
 800936c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800936e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009372:	4299      	cmp	r1, r3
 8009374:	d11d      	bne.n	80093b2 <__submore+0x4c>
 8009376:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800937a:	f7fe fb8f 	bl	8007a9c <_malloc_r>
 800937e:	b918      	cbnz	r0, 8009388 <__submore+0x22>
 8009380:	f04f 30ff 	mov.w	r0, #4294967295
 8009384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009388:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800938c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800938e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8009392:	6360      	str	r0, [r4, #52]	@ 0x34
 8009394:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8009398:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800939c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80093a0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80093a4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80093a8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80093ac:	6020      	str	r0, [r4, #0]
 80093ae:	2000      	movs	r0, #0
 80093b0:	e7e8      	b.n	8009384 <__submore+0x1e>
 80093b2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80093b4:	0077      	lsls	r7, r6, #1
 80093b6:	463a      	mov	r2, r7
 80093b8:	f000 f877 	bl	80094aa <_realloc_r>
 80093bc:	4605      	mov	r5, r0
 80093be:	2800      	cmp	r0, #0
 80093c0:	d0de      	beq.n	8009380 <__submore+0x1a>
 80093c2:	eb00 0806 	add.w	r8, r0, r6
 80093c6:	4601      	mov	r1, r0
 80093c8:	4632      	mov	r2, r6
 80093ca:	4640      	mov	r0, r8
 80093cc:	f7fd f925 	bl	800661a <memcpy>
 80093d0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80093d4:	f8c4 8000 	str.w	r8, [r4]
 80093d8:	e7e9      	b.n	80093ae <__submore+0x48>

080093da <memmove>:
 80093da:	4288      	cmp	r0, r1
 80093dc:	b510      	push	{r4, lr}
 80093de:	eb01 0402 	add.w	r4, r1, r2
 80093e2:	d902      	bls.n	80093ea <memmove+0x10>
 80093e4:	4284      	cmp	r4, r0
 80093e6:	4623      	mov	r3, r4
 80093e8:	d807      	bhi.n	80093fa <memmove+0x20>
 80093ea:	1e43      	subs	r3, r0, #1
 80093ec:	42a1      	cmp	r1, r4
 80093ee:	d008      	beq.n	8009402 <memmove+0x28>
 80093f0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093f4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093f8:	e7f8      	b.n	80093ec <memmove+0x12>
 80093fa:	4402      	add	r2, r0
 80093fc:	4601      	mov	r1, r0
 80093fe:	428a      	cmp	r2, r1
 8009400:	d100      	bne.n	8009404 <memmove+0x2a>
 8009402:	bd10      	pop	{r4, pc}
 8009404:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009408:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800940c:	e7f7      	b.n	80093fe <memmove+0x24>
	...

08009410 <_fstat_r>:
 8009410:	b538      	push	{r3, r4, r5, lr}
 8009412:	4d07      	ldr	r5, [pc, #28]	@ (8009430 <_fstat_r+0x20>)
 8009414:	2300      	movs	r3, #0
 8009416:	4604      	mov	r4, r0
 8009418:	4608      	mov	r0, r1
 800941a:	4611      	mov	r1, r2
 800941c:	602b      	str	r3, [r5, #0]
 800941e:	f7f7 ffe5 	bl	80013ec <_fstat>
 8009422:	1c43      	adds	r3, r0, #1
 8009424:	d102      	bne.n	800942c <_fstat_r+0x1c>
 8009426:	682b      	ldr	r3, [r5, #0]
 8009428:	b103      	cbz	r3, 800942c <_fstat_r+0x1c>
 800942a:	6023      	str	r3, [r4, #0]
 800942c:	bd38      	pop	{r3, r4, r5, pc}
 800942e:	bf00      	nop
 8009430:	20001334 	.word	0x20001334

08009434 <_isatty_r>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	4d06      	ldr	r5, [pc, #24]	@ (8009450 <_isatty_r+0x1c>)
 8009438:	2300      	movs	r3, #0
 800943a:	4604      	mov	r4, r0
 800943c:	4608      	mov	r0, r1
 800943e:	602b      	str	r3, [r5, #0]
 8009440:	f7f7 ffe4 	bl	800140c <_isatty>
 8009444:	1c43      	adds	r3, r0, #1
 8009446:	d102      	bne.n	800944e <_isatty_r+0x1a>
 8009448:	682b      	ldr	r3, [r5, #0]
 800944a:	b103      	cbz	r3, 800944e <_isatty_r+0x1a>
 800944c:	6023      	str	r3, [r4, #0]
 800944e:	bd38      	pop	{r3, r4, r5, pc}
 8009450:	20001334 	.word	0x20001334

08009454 <_sbrk_r>:
 8009454:	b538      	push	{r3, r4, r5, lr}
 8009456:	4d06      	ldr	r5, [pc, #24]	@ (8009470 <_sbrk_r+0x1c>)
 8009458:	2300      	movs	r3, #0
 800945a:	4604      	mov	r4, r0
 800945c:	4608      	mov	r0, r1
 800945e:	602b      	str	r3, [r5, #0]
 8009460:	f7f7 ffec 	bl	800143c <_sbrk>
 8009464:	1c43      	adds	r3, r0, #1
 8009466:	d102      	bne.n	800946e <_sbrk_r+0x1a>
 8009468:	682b      	ldr	r3, [r5, #0]
 800946a:	b103      	cbz	r3, 800946e <_sbrk_r+0x1a>
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	bd38      	pop	{r3, r4, r5, pc}
 8009470:	20001334 	.word	0x20001334

08009474 <abort>:
 8009474:	b508      	push	{r3, lr}
 8009476:	2006      	movs	r0, #6
 8009478:	f000 f8de 	bl	8009638 <raise>
 800947c:	2001      	movs	r0, #1
 800947e:	f7f7 ff65 	bl	800134c <_exit>

08009482 <_calloc_r>:
 8009482:	b570      	push	{r4, r5, r6, lr}
 8009484:	fba1 5402 	umull	r5, r4, r1, r2
 8009488:	b934      	cbnz	r4, 8009498 <_calloc_r+0x16>
 800948a:	4629      	mov	r1, r5
 800948c:	f7fe fb06 	bl	8007a9c <_malloc_r>
 8009490:	4606      	mov	r6, r0
 8009492:	b928      	cbnz	r0, 80094a0 <_calloc_r+0x1e>
 8009494:	4630      	mov	r0, r6
 8009496:	bd70      	pop	{r4, r5, r6, pc}
 8009498:	220c      	movs	r2, #12
 800949a:	6002      	str	r2, [r0, #0]
 800949c:	2600      	movs	r6, #0
 800949e:	e7f9      	b.n	8009494 <_calloc_r+0x12>
 80094a0:	462a      	mov	r2, r5
 80094a2:	4621      	mov	r1, r4
 80094a4:	f7fc ffb8 	bl	8006418 <memset>
 80094a8:	e7f4      	b.n	8009494 <_calloc_r+0x12>

080094aa <_realloc_r>:
 80094aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ae:	4607      	mov	r7, r0
 80094b0:	4614      	mov	r4, r2
 80094b2:	460d      	mov	r5, r1
 80094b4:	b921      	cbnz	r1, 80094c0 <_realloc_r+0x16>
 80094b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094ba:	4611      	mov	r1, r2
 80094bc:	f7fe baee 	b.w	8007a9c <_malloc_r>
 80094c0:	b92a      	cbnz	r2, 80094ce <_realloc_r+0x24>
 80094c2:	f7fd ff3d 	bl	8007340 <_free_r>
 80094c6:	4625      	mov	r5, r4
 80094c8:	4628      	mov	r0, r5
 80094ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094ce:	f000 f8cf 	bl	8009670 <_malloc_usable_size_r>
 80094d2:	4284      	cmp	r4, r0
 80094d4:	4606      	mov	r6, r0
 80094d6:	d802      	bhi.n	80094de <_realloc_r+0x34>
 80094d8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094dc:	d8f4      	bhi.n	80094c8 <_realloc_r+0x1e>
 80094de:	4621      	mov	r1, r4
 80094e0:	4638      	mov	r0, r7
 80094e2:	f7fe fadb 	bl	8007a9c <_malloc_r>
 80094e6:	4680      	mov	r8, r0
 80094e8:	b908      	cbnz	r0, 80094ee <_realloc_r+0x44>
 80094ea:	4645      	mov	r5, r8
 80094ec:	e7ec      	b.n	80094c8 <_realloc_r+0x1e>
 80094ee:	42b4      	cmp	r4, r6
 80094f0:	4622      	mov	r2, r4
 80094f2:	4629      	mov	r1, r5
 80094f4:	bf28      	it	cs
 80094f6:	4632      	movcs	r2, r6
 80094f8:	f7fd f88f 	bl	800661a <memcpy>
 80094fc:	4629      	mov	r1, r5
 80094fe:	4638      	mov	r0, r7
 8009500:	f7fd ff1e 	bl	8007340 <_free_r>
 8009504:	e7f1      	b.n	80094ea <_realloc_r+0x40>
	...

08009508 <_strtoul_l.isra.0>:
 8009508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800950c:	4e34      	ldr	r6, [pc, #208]	@ (80095e0 <_strtoul_l.isra.0+0xd8>)
 800950e:	4686      	mov	lr, r0
 8009510:	460d      	mov	r5, r1
 8009512:	4628      	mov	r0, r5
 8009514:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009518:	5d37      	ldrb	r7, [r6, r4]
 800951a:	f017 0708 	ands.w	r7, r7, #8
 800951e:	d1f8      	bne.n	8009512 <_strtoul_l.isra.0+0xa>
 8009520:	2c2d      	cmp	r4, #45	@ 0x2d
 8009522:	d110      	bne.n	8009546 <_strtoul_l.isra.0+0x3e>
 8009524:	782c      	ldrb	r4, [r5, #0]
 8009526:	2701      	movs	r7, #1
 8009528:	1c85      	adds	r5, r0, #2
 800952a:	f033 0010 	bics.w	r0, r3, #16
 800952e:	d115      	bne.n	800955c <_strtoul_l.isra.0+0x54>
 8009530:	2c30      	cmp	r4, #48	@ 0x30
 8009532:	d10d      	bne.n	8009550 <_strtoul_l.isra.0+0x48>
 8009534:	7828      	ldrb	r0, [r5, #0]
 8009536:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800953a:	2858      	cmp	r0, #88	@ 0x58
 800953c:	d108      	bne.n	8009550 <_strtoul_l.isra.0+0x48>
 800953e:	786c      	ldrb	r4, [r5, #1]
 8009540:	3502      	adds	r5, #2
 8009542:	2310      	movs	r3, #16
 8009544:	e00a      	b.n	800955c <_strtoul_l.isra.0+0x54>
 8009546:	2c2b      	cmp	r4, #43	@ 0x2b
 8009548:	bf04      	itt	eq
 800954a:	782c      	ldrbeq	r4, [r5, #0]
 800954c:	1c85      	addeq	r5, r0, #2
 800954e:	e7ec      	b.n	800952a <_strtoul_l.isra.0+0x22>
 8009550:	2b00      	cmp	r3, #0
 8009552:	d1f6      	bne.n	8009542 <_strtoul_l.isra.0+0x3a>
 8009554:	2c30      	cmp	r4, #48	@ 0x30
 8009556:	bf14      	ite	ne
 8009558:	230a      	movne	r3, #10
 800955a:	2308      	moveq	r3, #8
 800955c:	f04f 38ff 	mov.w	r8, #4294967295
 8009560:	2600      	movs	r6, #0
 8009562:	fbb8 f8f3 	udiv	r8, r8, r3
 8009566:	fb03 f908 	mul.w	r9, r3, r8
 800956a:	ea6f 0909 	mvn.w	r9, r9
 800956e:	4630      	mov	r0, r6
 8009570:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8009574:	f1bc 0f09 	cmp.w	ip, #9
 8009578:	d810      	bhi.n	800959c <_strtoul_l.isra.0+0x94>
 800957a:	4664      	mov	r4, ip
 800957c:	42a3      	cmp	r3, r4
 800957e:	dd1e      	ble.n	80095be <_strtoul_l.isra.0+0xb6>
 8009580:	f1b6 3fff 	cmp.w	r6, #4294967295
 8009584:	d007      	beq.n	8009596 <_strtoul_l.isra.0+0x8e>
 8009586:	4580      	cmp	r8, r0
 8009588:	d316      	bcc.n	80095b8 <_strtoul_l.isra.0+0xb0>
 800958a:	d101      	bne.n	8009590 <_strtoul_l.isra.0+0x88>
 800958c:	45a1      	cmp	r9, r4
 800958e:	db13      	blt.n	80095b8 <_strtoul_l.isra.0+0xb0>
 8009590:	fb00 4003 	mla	r0, r0, r3, r4
 8009594:	2601      	movs	r6, #1
 8009596:	f815 4b01 	ldrb.w	r4, [r5], #1
 800959a:	e7e9      	b.n	8009570 <_strtoul_l.isra.0+0x68>
 800959c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80095a0:	f1bc 0f19 	cmp.w	ip, #25
 80095a4:	d801      	bhi.n	80095aa <_strtoul_l.isra.0+0xa2>
 80095a6:	3c37      	subs	r4, #55	@ 0x37
 80095a8:	e7e8      	b.n	800957c <_strtoul_l.isra.0+0x74>
 80095aa:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80095ae:	f1bc 0f19 	cmp.w	ip, #25
 80095b2:	d804      	bhi.n	80095be <_strtoul_l.isra.0+0xb6>
 80095b4:	3c57      	subs	r4, #87	@ 0x57
 80095b6:	e7e1      	b.n	800957c <_strtoul_l.isra.0+0x74>
 80095b8:	f04f 36ff 	mov.w	r6, #4294967295
 80095bc:	e7eb      	b.n	8009596 <_strtoul_l.isra.0+0x8e>
 80095be:	1c73      	adds	r3, r6, #1
 80095c0:	d106      	bne.n	80095d0 <_strtoul_l.isra.0+0xc8>
 80095c2:	2322      	movs	r3, #34	@ 0x22
 80095c4:	f8ce 3000 	str.w	r3, [lr]
 80095c8:	4630      	mov	r0, r6
 80095ca:	b932      	cbnz	r2, 80095da <_strtoul_l.isra.0+0xd2>
 80095cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095d0:	b107      	cbz	r7, 80095d4 <_strtoul_l.isra.0+0xcc>
 80095d2:	4240      	negs	r0, r0
 80095d4:	2a00      	cmp	r2, #0
 80095d6:	d0f9      	beq.n	80095cc <_strtoul_l.isra.0+0xc4>
 80095d8:	b106      	cbz	r6, 80095dc <_strtoul_l.isra.0+0xd4>
 80095da:	1e69      	subs	r1, r5, #1
 80095dc:	6011      	str	r1, [r2, #0]
 80095de:	e7f5      	b.n	80095cc <_strtoul_l.isra.0+0xc4>
 80095e0:	08009a71 	.word	0x08009a71

080095e4 <_strtoul_r>:
 80095e4:	f7ff bf90 	b.w	8009508 <_strtoul_l.isra.0>

080095e8 <_raise_r>:
 80095e8:	291f      	cmp	r1, #31
 80095ea:	b538      	push	{r3, r4, r5, lr}
 80095ec:	4605      	mov	r5, r0
 80095ee:	460c      	mov	r4, r1
 80095f0:	d904      	bls.n	80095fc <_raise_r+0x14>
 80095f2:	2316      	movs	r3, #22
 80095f4:	6003      	str	r3, [r0, #0]
 80095f6:	f04f 30ff 	mov.w	r0, #4294967295
 80095fa:	bd38      	pop	{r3, r4, r5, pc}
 80095fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80095fe:	b112      	cbz	r2, 8009606 <_raise_r+0x1e>
 8009600:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009604:	b94b      	cbnz	r3, 800961a <_raise_r+0x32>
 8009606:	4628      	mov	r0, r5
 8009608:	f000 f830 	bl	800966c <_getpid_r>
 800960c:	4622      	mov	r2, r4
 800960e:	4601      	mov	r1, r0
 8009610:	4628      	mov	r0, r5
 8009612:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009616:	f000 b817 	b.w	8009648 <_kill_r>
 800961a:	2b01      	cmp	r3, #1
 800961c:	d00a      	beq.n	8009634 <_raise_r+0x4c>
 800961e:	1c59      	adds	r1, r3, #1
 8009620:	d103      	bne.n	800962a <_raise_r+0x42>
 8009622:	2316      	movs	r3, #22
 8009624:	6003      	str	r3, [r0, #0]
 8009626:	2001      	movs	r0, #1
 8009628:	e7e7      	b.n	80095fa <_raise_r+0x12>
 800962a:	2100      	movs	r1, #0
 800962c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009630:	4620      	mov	r0, r4
 8009632:	4798      	blx	r3
 8009634:	2000      	movs	r0, #0
 8009636:	e7e0      	b.n	80095fa <_raise_r+0x12>

08009638 <raise>:
 8009638:	4b02      	ldr	r3, [pc, #8]	@ (8009644 <raise+0xc>)
 800963a:	4601      	mov	r1, r0
 800963c:	6818      	ldr	r0, [r3, #0]
 800963e:	f7ff bfd3 	b.w	80095e8 <_raise_r>
 8009642:	bf00      	nop
 8009644:	20000190 	.word	0x20000190

08009648 <_kill_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	4d07      	ldr	r5, [pc, #28]	@ (8009668 <_kill_r+0x20>)
 800964c:	2300      	movs	r3, #0
 800964e:	4604      	mov	r4, r0
 8009650:	4608      	mov	r0, r1
 8009652:	4611      	mov	r1, r2
 8009654:	602b      	str	r3, [r5, #0]
 8009656:	f7f7 fe69 	bl	800132c <_kill>
 800965a:	1c43      	adds	r3, r0, #1
 800965c:	d102      	bne.n	8009664 <_kill_r+0x1c>
 800965e:	682b      	ldr	r3, [r5, #0]
 8009660:	b103      	cbz	r3, 8009664 <_kill_r+0x1c>
 8009662:	6023      	str	r3, [r4, #0]
 8009664:	bd38      	pop	{r3, r4, r5, pc}
 8009666:	bf00      	nop
 8009668:	20001334 	.word	0x20001334

0800966c <_getpid_r>:
 800966c:	f7f7 be56 	b.w	800131c <_getpid>

08009670 <_malloc_usable_size_r>:
 8009670:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009674:	1f18      	subs	r0, r3, #4
 8009676:	2b00      	cmp	r3, #0
 8009678:	bfbc      	itt	lt
 800967a:	580b      	ldrlt	r3, [r1, r0]
 800967c:	18c0      	addlt	r0, r0, r3
 800967e:	4770      	bx	lr

08009680 <_init>:
 8009680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009682:	bf00      	nop
 8009684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009686:	bc08      	pop	{r3}
 8009688:	469e      	mov	lr, r3
 800968a:	4770      	bx	lr

0800968c <_fini>:
 800968c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968e:	bf00      	nop
 8009690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009692:	bc08      	pop	{r3}
 8009694:	469e      	mov	lr, r3
 8009696:	4770      	bx	lr
