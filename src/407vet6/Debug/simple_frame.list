
simple_frame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08007490  08007490  00008490  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078ec  080078ec  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080078ec  080078ec  000088ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078f4  080078f4  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078f4  080078f4  000088f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080078f8  080078f8  000088f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080078fc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          000001c0  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000394  20000394  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007cd2  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000176b  00000000  00000000  00010ed6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  00012648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000571  00000000  00000000  00012d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021294  00000000  00000000  00013301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009987  00000000  00000000  00034595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c461f  00000000  00000000  0003df1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010253b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000316c  00000000  00000000  00102580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  001056ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007474 	.word	0x08007474

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08007474 	.word	0x08007474

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <MX_GPIO_Init+0x68>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a16      	ldr	r2, [pc, #88]	@ (8001088 <MX_GPIO_Init+0x68>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b14      	ldr	r3, [pc, #80]	@ (8001088 <MX_GPIO_Init+0x68>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	4b10      	ldr	r3, [pc, #64]	@ (8001088 <MX_GPIO_Init+0x68>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	4a0f      	ldr	r2, [pc, #60]	@ (8001088 <MX_GPIO_Init+0x68>)
 800104c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001050:	6313      	str	r3, [r2, #48]	@ 0x30
 8001052:	4b0d      	ldr	r3, [pc, #52]	@ (8001088 <MX_GPIO_Init+0x68>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800105a:	60bb      	str	r3, [r7, #8]
 800105c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <MX_GPIO_Init+0x68>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a08      	ldr	r2, [pc, #32]	@ (8001088 <MX_GPIO_Init+0x68>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b06      	ldr	r3, [pc, #24]	@ (8001088 <MX_GPIO_Init+0x68>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

}
 800107a:	bf00      	nop
 800107c:	3714      	adds	r7, #20
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40023800 	.word	0x40023800

0800108c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1 , 0xffff);
 8001094:	1d39      	adds	r1, r7, #4
 8001096:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800109a:	2201      	movs	r2, #1
 800109c:	4803      	ldr	r0, [pc, #12]	@ (80010ac <__io_putchar+0x20>)
 800109e:	f001 fa45 	bl	800252c <HAL_UART_Transmit>
    return ch;
 80010a2:	687b      	ldr	r3, [r7, #4]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	200001f8 	.word	0x200001f8

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b4:	f000 fa5e 	bl	8001574 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b8:	f000 f820 	bl	80010fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010bc:	f7ff ffb0 	bl	8001020 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80010c0:	f000 f9bc 	bl	800143c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("this is test\r\n");
 80010c4:	480a      	ldr	r0, [pc, #40]	@ (80010f0 <main+0x40>)
 80010c6:	f002 fd8b 	bl	8003be0 <puts>
  printf("%f\r\n",1.1);
 80010ca:	a307      	add	r3, pc, #28	@ (adr r3, 80010e8 <main+0x38>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	4808      	ldr	r0, [pc, #32]	@ (80010f4 <main+0x44>)
 80010d2:	f002 fd1d 	bl	8003b10 <iprintf>
  xxxx();
 80010d6:	f001 fde5 	bl	8002ca4 <xxxx>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  a++;
 80010da:	4b07      	ldr	r3, [pc, #28]	@ (80010f8 <main+0x48>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <main+0x48>)
 80010e2:	6013      	str	r3, [r2, #0]
 80010e4:	e7f9      	b.n	80010da <main+0x2a>
 80010e6:	bf00      	nop
 80010e8:	9999999a 	.word	0x9999999a
 80010ec:	3ff19999 	.word	0x3ff19999
 80010f0:	08007490 	.word	0x08007490
 80010f4:	080074a0 	.word	0x080074a0
 80010f8:	200001f0 	.word	0x200001f0

080010fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b094      	sub	sp, #80	@ 0x50
 8001100:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001102:	f107 0320 	add.w	r3, r7, #32
 8001106:	2230      	movs	r2, #48	@ 0x30
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f002 fe6a 	bl	8003de4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001120:	2300      	movs	r3, #0
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	4b28      	ldr	r3, [pc, #160]	@ (80011c8 <SystemClock_Config+0xcc>)
 8001126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001128:	4a27      	ldr	r2, [pc, #156]	@ (80011c8 <SystemClock_Config+0xcc>)
 800112a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800112e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001130:	4b25      	ldr	r3, [pc, #148]	@ (80011c8 <SystemClock_Config+0xcc>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001134:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800113c:	2300      	movs	r3, #0
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	4b22      	ldr	r3, [pc, #136]	@ (80011cc <SystemClock_Config+0xd0>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a21      	ldr	r2, [pc, #132]	@ (80011cc <SystemClock_Config+0xd0>)
 8001146:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800114a:	6013      	str	r3, [r2, #0]
 800114c:	4b1f      	ldr	r3, [pc, #124]	@ (80011cc <SystemClock_Config+0xd0>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001154:	607b      	str	r3, [r7, #4]
 8001156:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001158:	2301      	movs	r3, #1
 800115a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800115c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001162:	2302      	movs	r3, #2
 8001164:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001166:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800116a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800116c:	2304      	movs	r3, #4
 800116e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001170:	23a8      	movs	r3, #168	@ 0xa8
 8001172:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001174:	2302      	movs	r3, #2
 8001176:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001178:	2304      	movs	r3, #4
 800117a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117c:	f107 0320 	add.w	r3, r7, #32
 8001180:	4618      	mov	r0, r3
 8001182:	f000 fceb 	bl	8001b5c <HAL_RCC_OscConfig>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800118c:	f000 f820 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001190:	230f      	movs	r3, #15
 8001192:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001194:	2302      	movs	r3, #2
 8001196:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800119c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2105      	movs	r1, #5
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 ff4c 	bl	800204c <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011ba:	f000 f809 	bl	80011d0 <Error_Handler>
  }
}
 80011be:	bf00      	nop
 80011c0:	3750      	adds	r7, #80	@ 0x50
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40007000 	.word	0x40007000

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <Error_Handler+0x8>

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	607b      	str	r3, [r7, #4]
 80011e6:	4b10      	ldr	r3, [pc, #64]	@ (8001228 <HAL_MspInit+0x4c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001228 <HAL_MspInit+0x4c>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001228 <HAL_MspInit+0x4c>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	603b      	str	r3, [r7, #0]
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <HAL_MspInit+0x4c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001206:	4a08      	ldr	r2, [pc, #32]	@ (8001228 <HAL_MspInit+0x4c>)
 8001208:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800120c:	6413      	str	r3, [r2, #64]	@ 0x40
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_MspInit+0x4c>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <NMI_Handler+0x4>

08001234 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <HardFault_Handler+0x4>

0800123c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <MemManage_Handler+0x4>

08001244 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <UsageFault_Handler+0x4>

08001254 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001282:	f000 f9c9 	bl	8001618 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}

0800128a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  return 1;
 800128e:	2301      	movs	r3, #1
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr

0800129a <_kill>:

int _kill(int pid, int sig)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
 80012a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012a4:	f002 fdf0 	bl	8003e88 <__errno>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2216      	movs	r2, #22
 80012ac:	601a      	str	r2, [r3, #0]
  return -1;
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_exit>:

void _exit (int status)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012c2:	f04f 31ff 	mov.w	r1, #4294967295
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffe7 	bl	800129a <_kill>
  while (1) {}    /* Make sure we hang here */
 80012cc:	bf00      	nop
 80012ce:	e7fd      	b.n	80012cc <_exit+0x12>

080012d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
 80012e0:	e00a      	b.n	80012f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012e2:	f3af 8000 	nop.w
 80012e6:	4601      	mov	r1, r0
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	60ba      	str	r2, [r7, #8]
 80012ee:	b2ca      	uxtb	r2, r1
 80012f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	3301      	adds	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	dbf0      	blt.n	80012e2 <_read+0x12>
  }

  return len;
 8001300:	687b      	ldr	r3, [r7, #4]
}
 8001302:	4618      	mov	r0, r3
 8001304:	3718      	adds	r7, #24
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b086      	sub	sp, #24
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	60b9      	str	r1, [r7, #8]
 8001314:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
 800131a:	e009      	b.n	8001330 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	1c5a      	adds	r2, r3, #1
 8001320:	60ba      	str	r2, [r7, #8]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff feb1 	bl	800108c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697a      	ldr	r2, [r7, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	dbf1      	blt.n	800131c <_write+0x12>
  }
  return len;
 8001338:	687b      	ldr	r3, [r7, #4]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3718      	adds	r7, #24
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <_close>:

int _close(int file)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800134a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800134e:	4618      	mov	r0, r3
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800136a:	605a      	str	r2, [r3, #4]
  return 0;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr

0800137a <_isatty>:

int _isatty(int file)
{
 800137a:	b480      	push	{r7}
 800137c:	b083      	sub	sp, #12
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001382:	2301      	movs	r3, #1
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
	...

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	@ (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	@ (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	@ (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f002 fd54 	bl	8003e88 <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20020000 	.word	0x20020000
 800140c:	00000400 	.word	0x00000400
 8001410:	200001f4 	.word	0x200001f4
 8001414:	20000398 	.word	0x20000398

08001418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <SystemInit+0x20>)
 800141e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001422:	4a05      	ldr	r2, [pc, #20]	@ (8001438 <SystemInit+0x20>)
 8001424:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001428:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <MX_USART1_UART_Init+0x4c>)
 8001442:	4a12      	ldr	r2, [pc, #72]	@ (800148c <MX_USART1_UART_Init+0x50>)
 8001444:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001446:	4b10      	ldr	r3, [pc, #64]	@ (8001488 <MX_USART1_UART_Init+0x4c>)
 8001448:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800144c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800144e:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <MX_USART1_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <MX_USART1_UART_Init+0x4c>)
 8001456:	2200      	movs	r2, #0
 8001458:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800145a:	4b0b      	ldr	r3, [pc, #44]	@ (8001488 <MX_USART1_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001460:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <MX_USART1_UART_Init+0x4c>)
 8001462:	220c      	movs	r2, #12
 8001464:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001466:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <MX_USART1_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800146c:	4b06      	ldr	r3, [pc, #24]	@ (8001488 <MX_USART1_UART_Init+0x4c>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001472:	4805      	ldr	r0, [pc, #20]	@ (8001488 <MX_USART1_UART_Init+0x4c>)
 8001474:	f001 f80a 	bl	800248c <HAL_UART_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800147e:	f7ff fea7 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200001f8 	.word	0x200001f8
 800148c:	40011000 	.word	0x40011000

08001490 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	@ 0x28
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0314 	add.w	r3, r7, #20
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a19      	ldr	r2, [pc, #100]	@ (8001514 <HAL_UART_MspInit+0x84>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d12c      	bne.n	800150c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <HAL_UART_MspInit+0x88>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	4a17      	ldr	r2, [pc, #92]	@ (8001518 <HAL_UART_MspInit+0x88>)
 80014bc:	f043 0310 	orr.w	r3, r3, #16
 80014c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c2:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <HAL_UART_MspInit+0x88>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c6:	f003 0310 	and.w	r3, r3, #16
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b11      	ldr	r3, [pc, #68]	@ (8001518 <HAL_UART_MspInit+0x88>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a10      	ldr	r2, [pc, #64]	@ (8001518 <HAL_UART_MspInit+0x88>)
 80014d8:	f043 0301 	orr.w	r3, r3, #1
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b0e      	ldr	r3, [pc, #56]	@ (8001518 <HAL_UART_MspInit+0x88>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80014ea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014fc:	2307      	movs	r3, #7
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4619      	mov	r1, r3
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <HAL_UART_MspInit+0x8c>)
 8001508:	f000 f98c 	bl	8001824 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800150c:	bf00      	nop
 800150e:	3728      	adds	r7, #40	@ 0x28
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40011000 	.word	0x40011000
 8001518:	40023800 	.word	0x40023800
 800151c:	40020000 	.word	0x40020000

08001520 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001520:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001558 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001524:	f7ff ff78 	bl	8001418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001528:	480c      	ldr	r0, [pc, #48]	@ (800155c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800152a:	490d      	ldr	r1, [pc, #52]	@ (8001560 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800152c:	4a0d      	ldr	r2, [pc, #52]	@ (8001564 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001530:	e002      	b.n	8001538 <LoopCopyDataInit>

08001532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001536:	3304      	adds	r3, #4

08001538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800153c:	d3f9      	bcc.n	8001532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153e:	4a0a      	ldr	r2, [pc, #40]	@ (8001568 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001540:	4c0a      	ldr	r4, [pc, #40]	@ (800156c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001544:	e001      	b.n	800154a <LoopFillZerobss>

08001546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001548:	3204      	adds	r2, #4

0800154a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800154c:	d3fb      	bcc.n	8001546 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800154e:	f002 fca1 	bl	8003e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001552:	f7ff fdad 	bl	80010b0 <main>
  bx  lr    
 8001556:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001558:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800155c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001560:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001564:	080078fc 	.word	0x080078fc
  ldr r2, =_sbss
 8001568:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800156c:	20000394 	.word	0x20000394

08001570 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001570:	e7fe      	b.n	8001570 <ADC_IRQHandler>
	...

08001574 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001578:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <HAL_Init+0x40>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0d      	ldr	r2, [pc, #52]	@ (80015b4 <HAL_Init+0x40>)
 800157e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001582:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001584:	4b0b      	ldr	r3, [pc, #44]	@ (80015b4 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0a      	ldr	r2, [pc, #40]	@ (80015b4 <HAL_Init+0x40>)
 800158a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800158e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a07      	ldr	r2, [pc, #28]	@ (80015b4 <HAL_Init+0x40>)
 8001596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800159a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800159c:	2003      	movs	r0, #3
 800159e:	f000 f90d 	bl	80017bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a2:	200f      	movs	r0, #15
 80015a4:	f000 f808 	bl	80015b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a8:	f7ff fe18 	bl	80011dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	40023c00 	.word	0x40023c00

080015b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <HAL_InitTick+0x54>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b12      	ldr	r3, [pc, #72]	@ (8001610 <HAL_InitTick+0x58>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d6:	4618      	mov	r0, r3
 80015d8:	f000 f917 	bl	800180a <HAL_SYSTICK_Config>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00e      	b.n	8001604 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b0f      	cmp	r3, #15
 80015ea:	d80a      	bhi.n	8001602 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ec:	2200      	movs	r2, #0
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f000 f8ed 	bl	80017d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f8:	4a06      	ldr	r2, [pc, #24]	@ (8001614 <HAL_InitTick+0x5c>)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	e000      	b.n	8001604 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	20000000 	.word	0x20000000
 8001610:	20000008 	.word	0x20000008
 8001614:	20000004 	.word	0x20000004

08001618 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800161c:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_IncTick+0x20>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	461a      	mov	r2, r3
 8001622:	4b06      	ldr	r3, [pc, #24]	@ (800163c <HAL_IncTick+0x24>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4413      	add	r3, r2
 8001628:	4a04      	ldr	r2, [pc, #16]	@ (800163c <HAL_IncTick+0x24>)
 800162a:	6013      	str	r3, [r2, #0]
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000008 	.word	0x20000008
 800163c:	20000240 	.word	0x20000240

08001640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return uwTick;
 8001644:	4b03      	ldr	r3, [pc, #12]	@ (8001654 <HAL_GetTick+0x14>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	20000240 	.word	0x20000240

08001658 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f003 0307 	and.w	r3, r3, #7
 8001666:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001674:	4013      	ands	r3, r2
 8001676:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001680:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001684:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001688:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168a:	4a04      	ldr	r2, [pc, #16]	@ (800169c <__NVIC_SetPriorityGrouping+0x44>)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	60d3      	str	r3, [r2, #12]
}
 8001690:	bf00      	nop
 8001692:	3714      	adds	r7, #20
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a4:	4b04      	ldr	r3, [pc, #16]	@ (80016b8 <__NVIC_GetPriorityGrouping+0x18>)
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	0a1b      	lsrs	r3, r3, #8
 80016aa:	f003 0307 	and.w	r3, r3, #7
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	6039      	str	r1, [r7, #0]
 80016c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	db0a      	blt.n	80016e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	b2da      	uxtb	r2, r3
 80016d4:	490c      	ldr	r1, [pc, #48]	@ (8001708 <__NVIC_SetPriority+0x4c>)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	0112      	lsls	r2, r2, #4
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	440b      	add	r3, r1
 80016e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e4:	e00a      	b.n	80016fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	b2da      	uxtb	r2, r3
 80016ea:	4908      	ldr	r1, [pc, #32]	@ (800170c <__NVIC_SetPriority+0x50>)
 80016ec:	79fb      	ldrb	r3, [r7, #7]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	3b04      	subs	r3, #4
 80016f4:	0112      	lsls	r2, r2, #4
 80016f6:	b2d2      	uxtb	r2, r2
 80016f8:	440b      	add	r3, r1
 80016fa:	761a      	strb	r2, [r3, #24]
}
 80016fc:	bf00      	nop
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000e100 	.word	0xe000e100
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	@ 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	f1c3 0307 	rsb	r3, r3, #7
 800172a:	2b04      	cmp	r3, #4
 800172c:	bf28      	it	cs
 800172e:	2304      	movcs	r3, #4
 8001730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3304      	adds	r3, #4
 8001736:	2b06      	cmp	r3, #6
 8001738:	d902      	bls.n	8001740 <NVIC_EncodePriority+0x30>
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3b03      	subs	r3, #3
 800173e:	e000      	b.n	8001742 <NVIC_EncodePriority+0x32>
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001744:	f04f 32ff 	mov.w	r2, #4294967295
 8001748:	69bb      	ldr	r3, [r7, #24]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43da      	mvns	r2, r3
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	401a      	ands	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001758:	f04f 31ff 	mov.w	r1, #4294967295
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	43d9      	mvns	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	4313      	orrs	r3, r2
         );
}
 800176a:	4618      	mov	r0, r3
 800176c:	3724      	adds	r7, #36	@ 0x24
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
	...

08001778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3b01      	subs	r3, #1
 8001784:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001788:	d301      	bcc.n	800178e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178a:	2301      	movs	r3, #1
 800178c:	e00f      	b.n	80017ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800178e:	4a0a      	ldr	r2, [pc, #40]	@ (80017b8 <SysTick_Config+0x40>)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3b01      	subs	r3, #1
 8001794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001796:	210f      	movs	r1, #15
 8001798:	f04f 30ff 	mov.w	r0, #4294967295
 800179c:	f7ff ff8e 	bl	80016bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a0:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <SysTick_Config+0x40>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017a6:	4b04      	ldr	r3, [pc, #16]	@ (80017b8 <SysTick_Config+0x40>)
 80017a8:	2207      	movs	r2, #7
 80017aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	e000e010 	.word	0xe000e010

080017bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f7ff ff47 	bl	8001658 <__NVIC_SetPriorityGrouping>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b086      	sub	sp, #24
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	4603      	mov	r3, r0
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	607a      	str	r2, [r7, #4]
 80017de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e4:	f7ff ff5c 	bl	80016a0 <__NVIC_GetPriorityGrouping>
 80017e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	68b9      	ldr	r1, [r7, #8]
 80017ee:	6978      	ldr	r0, [r7, #20]
 80017f0:	f7ff ff8e 	bl	8001710 <NVIC_EncodePriority>
 80017f4:	4602      	mov	r2, r0
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fa:	4611      	mov	r1, r2
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff5d 	bl	80016bc <__NVIC_SetPriority>
}
 8001802:	bf00      	nop
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f7ff ffb0 	bl	8001778 <SysTick_Config>
 8001818:	4603      	mov	r3, r0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
	...

08001824 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	@ 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001836:	2300      	movs	r3, #0
 8001838:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	e16b      	b.n	8001b18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001840:	2201      	movs	r2, #1
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	4013      	ands	r3, r2
 8001852:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	429a      	cmp	r2, r3
 800185a:	f040 815a 	bne.w	8001b12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	2b01      	cmp	r3, #1
 8001868:	d005      	beq.n	8001876 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001872:	2b02      	cmp	r3, #2
 8001874:	d130      	bne.n	80018d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	2203      	movs	r2, #3
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4313      	orrs	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ac:	2201      	movs	r2, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 0201 	and.w	r2, r3, #1
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4313      	orrs	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f003 0303 	and.w	r3, r3, #3
 80018e0:	2b03      	cmp	r3, #3
 80018e2:	d017      	beq.n	8001914 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4313      	orrs	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d123      	bne.n	8001968 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	08da      	lsrs	r2, r3, #3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3208      	adds	r2, #8
 8001928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800192c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	220f      	movs	r2, #15
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	4013      	ands	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	691a      	ldr	r2, [r3, #16]
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	fa02 f303 	lsl.w	r3, r2, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	08da      	lsrs	r2, r3, #3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	3208      	adds	r2, #8
 8001962:	69b9      	ldr	r1, [r7, #24]
 8001964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	005b      	lsls	r3, r3, #1
 8001972:	2203      	movs	r2, #3
 8001974:	fa02 f303 	lsl.w	r3, r2, r3
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0203 	and.w	r2, r3, #3
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4313      	orrs	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f000 80b4 	beq.w	8001b12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	4b60      	ldr	r3, [pc, #384]	@ (8001b30 <HAL_GPIO_Init+0x30c>)
 80019b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b2:	4a5f      	ldr	r2, [pc, #380]	@ (8001b30 <HAL_GPIO_Init+0x30c>)
 80019b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001b30 <HAL_GPIO_Init+0x30c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019c6:	4a5b      	ldr	r2, [pc, #364]	@ (8001b34 <HAL_GPIO_Init+0x310>)
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	089b      	lsrs	r3, r3, #2
 80019cc:	3302      	adds	r3, #2
 80019ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f003 0303 	and.w	r3, r3, #3
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	220f      	movs	r2, #15
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a52      	ldr	r2, [pc, #328]	@ (8001b38 <HAL_GPIO_Init+0x314>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d02b      	beq.n	8001a4a <HAL_GPIO_Init+0x226>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a51      	ldr	r2, [pc, #324]	@ (8001b3c <HAL_GPIO_Init+0x318>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d025      	beq.n	8001a46 <HAL_GPIO_Init+0x222>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a50      	ldr	r2, [pc, #320]	@ (8001b40 <HAL_GPIO_Init+0x31c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d01f      	beq.n	8001a42 <HAL_GPIO_Init+0x21e>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a4f      	ldr	r2, [pc, #316]	@ (8001b44 <HAL_GPIO_Init+0x320>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d019      	beq.n	8001a3e <HAL_GPIO_Init+0x21a>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001b48 <HAL_GPIO_Init+0x324>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d013      	beq.n	8001a3a <HAL_GPIO_Init+0x216>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a4d      	ldr	r2, [pc, #308]	@ (8001b4c <HAL_GPIO_Init+0x328>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00d      	beq.n	8001a36 <HAL_GPIO_Init+0x212>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001b50 <HAL_GPIO_Init+0x32c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d007      	beq.n	8001a32 <HAL_GPIO_Init+0x20e>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a4b      	ldr	r2, [pc, #300]	@ (8001b54 <HAL_GPIO_Init+0x330>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d101      	bne.n	8001a2e <HAL_GPIO_Init+0x20a>
 8001a2a:	2307      	movs	r3, #7
 8001a2c:	e00e      	b.n	8001a4c <HAL_GPIO_Init+0x228>
 8001a2e:	2308      	movs	r3, #8
 8001a30:	e00c      	b.n	8001a4c <HAL_GPIO_Init+0x228>
 8001a32:	2306      	movs	r3, #6
 8001a34:	e00a      	b.n	8001a4c <HAL_GPIO_Init+0x228>
 8001a36:	2305      	movs	r3, #5
 8001a38:	e008      	b.n	8001a4c <HAL_GPIO_Init+0x228>
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	e006      	b.n	8001a4c <HAL_GPIO_Init+0x228>
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e004      	b.n	8001a4c <HAL_GPIO_Init+0x228>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e002      	b.n	8001a4c <HAL_GPIO_Init+0x228>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_GPIO_Init+0x228>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	69fa      	ldr	r2, [r7, #28]
 8001a4e:	f002 0203 	and.w	r2, r2, #3
 8001a52:	0092      	lsls	r2, r2, #2
 8001a54:	4093      	lsls	r3, r2
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a5c:	4935      	ldr	r1, [pc, #212]	@ (8001b34 <HAL_GPIO_Init+0x310>)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	089b      	lsrs	r3, r3, #2
 8001a62:	3302      	adds	r3, #2
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b58 <HAL_GPIO_Init+0x334>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4013      	ands	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a86:	69ba      	ldr	r2, [r7, #24]
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a8e:	4a32      	ldr	r2, [pc, #200]	@ (8001b58 <HAL_GPIO_Init+0x334>)
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a94:	4b30      	ldr	r3, [pc, #192]	@ (8001b58 <HAL_GPIO_Init+0x334>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ab8:	4a27      	ldr	r2, [pc, #156]	@ (8001b58 <HAL_GPIO_Init+0x334>)
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001abe:	4b26      	ldr	r3, [pc, #152]	@ (8001b58 <HAL_GPIO_Init+0x334>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	4013      	ands	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ae2:	4a1d      	ldr	r2, [pc, #116]	@ (8001b58 <HAL_GPIO_Init+0x334>)
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b58 <HAL_GPIO_Init+0x334>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b0c:	4a12      	ldr	r2, [pc, #72]	@ (8001b58 <HAL_GPIO_Init+0x334>)
 8001b0e:	69bb      	ldr	r3, [r7, #24]
 8001b10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	3301      	adds	r3, #1
 8001b16:	61fb      	str	r3, [r7, #28]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	2b0f      	cmp	r3, #15
 8001b1c:	f67f ae90 	bls.w	8001840 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b20:	bf00      	nop
 8001b22:	bf00      	nop
 8001b24:	3724      	adds	r7, #36	@ 0x24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40013800 	.word	0x40013800
 8001b38:	40020000 	.word	0x40020000
 8001b3c:	40020400 	.word	0x40020400
 8001b40:	40020800 	.word	0x40020800
 8001b44:	40020c00 	.word	0x40020c00
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40021400 	.word	0x40021400
 8001b50:	40021800 	.word	0x40021800
 8001b54:	40021c00 	.word	0x40021c00
 8001b58:	40013c00 	.word	0x40013c00

08001b5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e267      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d075      	beq.n	8001c66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b7a:	4b88      	ldr	r3, [pc, #544]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	d00c      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b86:	4b85      	ldr	r3, [pc, #532]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001b8e:	2b08      	cmp	r3, #8
 8001b90:	d112      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b92:	4b82      	ldr	r3, [pc, #520]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001b9e:	d10b      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba0:	4b7e      	ldr	r3, [pc, #504]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d05b      	beq.n	8001c64 <HAL_RCC_OscConfig+0x108>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d157      	bne.n	8001c64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e242      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bc0:	d106      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x74>
 8001bc2:	4b76      	ldr	r3, [pc, #472]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a75      	ldr	r2, [pc, #468]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e01d      	b.n	8001c0c <HAL_RCC_OscConfig+0xb0>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x98>
 8001bda:	4b70      	ldr	r3, [pc, #448]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a6f      	ldr	r2, [pc, #444]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001be0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a6c      	ldr	r2, [pc, #432]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001bec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bf0:	6013      	str	r3, [r2, #0]
 8001bf2:	e00b      	b.n	8001c0c <HAL_RCC_OscConfig+0xb0>
 8001bf4:	4b69      	ldr	r3, [pc, #420]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a68      	ldr	r2, [pc, #416]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b66      	ldr	r3, [pc, #408]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a65      	ldr	r2, [pc, #404]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d013      	beq.n	8001c3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fd14 	bl	8001640 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fd10 	bl	8001640 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	@ 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e207      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0xc0>
 8001c3a:	e014      	b.n	8001c66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c3c:	f7ff fd00 	bl	8001640 <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c44:	f7ff fcfc 	bl	8001640 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b64      	cmp	r3, #100	@ 0x64
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e1f3      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c56:	4b51      	ldr	r3, [pc, #324]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1f0      	bne.n	8001c44 <HAL_RCC_OscConfig+0xe8>
 8001c62:	e000      	b.n	8001c66 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d063      	beq.n	8001d3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c72:	4b4a      	ldr	r3, [pc, #296]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c7e:	4b47      	ldr	r3, [pc, #284]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d11c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c8a:	4b44      	ldr	r3, [pc, #272]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d116      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c96:	4b41      	ldr	r3, [pc, #260]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_RCC_OscConfig+0x152>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d001      	beq.n	8001cae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e1c7      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cae:	4b3b      	ldr	r3, [pc, #236]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	4937      	ldr	r1, [pc, #220]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cc2:	e03a      	b.n	8001d3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d020      	beq.n	8001d0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ccc:	4b34      	ldr	r3, [pc, #208]	@ (8001da0 <HAL_RCC_OscConfig+0x244>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd2:	f7ff fcb5 	bl	8001640 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cda:	f7ff fcb1 	bl	8001640 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e1a8      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cec:	4b2b      	ldr	r3, [pc, #172]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0302 	and.w	r3, r3, #2
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cf8:	4b28      	ldr	r3, [pc, #160]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4925      	ldr	r1, [pc, #148]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
 8001d0c:	e015      	b.n	8001d3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d0e:	4b24      	ldr	r3, [pc, #144]	@ (8001da0 <HAL_RCC_OscConfig+0x244>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff fc94 	bl	8001640 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d1c:	f7ff fc90 	bl	8001640 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e187      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d036      	beq.n	8001db4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d016      	beq.n	8001d7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4e:	4b15      	ldr	r3, [pc, #84]	@ (8001da4 <HAL_RCC_OscConfig+0x248>)
 8001d50:	2201      	movs	r2, #1
 8001d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d54:	f7ff fc74 	bl	8001640 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d5c:	f7ff fc70 	bl	8001640 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e167      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <HAL_RCC_OscConfig+0x240>)
 8001d70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x200>
 8001d7a:	e01b      	b.n	8001db4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d7c:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <HAL_RCC_OscConfig+0x248>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d82:	f7ff fc5d 	bl	8001640 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	e00e      	b.n	8001da8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d8a:	f7ff fc59 	bl	8001640 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d907      	bls.n	8001da8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e150      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	42470000 	.word	0x42470000
 8001da4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da8:	4b88      	ldr	r3, [pc, #544]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001daa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d1ea      	bne.n	8001d8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0304 	and.w	r3, r3, #4
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 8097 	beq.w	8001ef0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dc6:	4b81      	ldr	r3, [pc, #516]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10f      	bne.n	8001df2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	4b7d      	ldr	r3, [pc, #500]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	4a7c      	ldr	r2, [pc, #496]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de2:	4b7a      	ldr	r3, [pc, #488]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dee:	2301      	movs	r3, #1
 8001df0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df2:	4b77      	ldr	r3, [pc, #476]	@ (8001fd0 <HAL_RCC_OscConfig+0x474>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d118      	bne.n	8001e30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dfe:	4b74      	ldr	r3, [pc, #464]	@ (8001fd0 <HAL_RCC_OscConfig+0x474>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a73      	ldr	r2, [pc, #460]	@ (8001fd0 <HAL_RCC_OscConfig+0x474>)
 8001e04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e0a:	f7ff fc19 	bl	8001640 <HAL_GetTick>
 8001e0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e12:	f7ff fc15 	bl	8001640 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e10c      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e24:	4b6a      	ldr	r3, [pc, #424]	@ (8001fd0 <HAL_RCC_OscConfig+0x474>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x2ea>
 8001e38:	4b64      	ldr	r3, [pc, #400]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e3c:	4a63      	ldr	r2, [pc, #396]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e44:	e01c      	b.n	8001e80 <HAL_RCC_OscConfig+0x324>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	2b05      	cmp	r3, #5
 8001e4c:	d10c      	bne.n	8001e68 <HAL_RCC_OscConfig+0x30c>
 8001e4e:	4b5f      	ldr	r3, [pc, #380]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e52:	4a5e      	ldr	r2, [pc, #376]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e5a:	4b5c      	ldr	r3, [pc, #368]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e5e:	4a5b      	ldr	r2, [pc, #364]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e66:	e00b      	b.n	8001e80 <HAL_RCC_OscConfig+0x324>
 8001e68:	4b58      	ldr	r3, [pc, #352]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e6c:	4a57      	ldr	r2, [pc, #348]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e6e:	f023 0301 	bic.w	r3, r3, #1
 8001e72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e74:	4b55      	ldr	r3, [pc, #340]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e78:	4a54      	ldr	r2, [pc, #336]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001e7a:	f023 0304 	bic.w	r3, r3, #4
 8001e7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d015      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e88:	f7ff fbda 	bl	8001640 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e8e:	e00a      	b.n	8001ea6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e90:	f7ff fbd6 	bl	8001640 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d901      	bls.n	8001ea6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	e0cb      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea6:	4b49      	ldr	r3, [pc, #292]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d0ee      	beq.n	8001e90 <HAL_RCC_OscConfig+0x334>
 8001eb2:	e014      	b.n	8001ede <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eb4:	f7ff fbc4 	bl	8001640 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebc:	f7ff fbc0 	bl	8001640 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e0b5      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ed2:	4b3e      	ldr	r3, [pc, #248]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1ee      	bne.n	8001ebc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ede:	7dfb      	ldrb	r3, [r7, #23]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d105      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ee4:	4b39      	ldr	r3, [pc, #228]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee8:	4a38      	ldr	r2, [pc, #224]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001eea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001eee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80a1 	beq.w	800203c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001efa:	4b34      	ldr	r3, [pc, #208]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 030c 	and.w	r3, r3, #12
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d05c      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d141      	bne.n	8001f92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f0e:	4b31      	ldr	r3, [pc, #196]	@ (8001fd4 <HAL_RCC_OscConfig+0x478>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7ff fb94 	bl	8001640 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff fb90 	bl	8001640 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e087      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2e:	4b27      	ldr	r3, [pc, #156]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	69da      	ldr	r2, [r3, #28]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	431a      	orrs	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f48:	019b      	lsls	r3, r3, #6
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f50:	085b      	lsrs	r3, r3, #1
 8001f52:	3b01      	subs	r3, #1
 8001f54:	041b      	lsls	r3, r3, #16
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5c:	061b      	lsls	r3, r3, #24
 8001f5e:	491b      	ldr	r1, [pc, #108]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f64:	4b1b      	ldr	r3, [pc, #108]	@ (8001fd4 <HAL_RCC_OscConfig+0x478>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7ff fb69 	bl	8001640 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f72:	f7ff fb65 	bl	8001640 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e05c      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f84:	4b11      	ldr	r3, [pc, #68]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x416>
 8001f90:	e054      	b.n	800203c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f92:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <HAL_RCC_OscConfig+0x478>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff fb52 	bl	8001640 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7ff fb4e 	bl	8001640 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e045      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb2:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <HAL_RCC_OscConfig+0x470>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x444>
 8001fbe:	e03d      	b.n	800203c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d107      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e038      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002048 <HAL_RCC_OscConfig+0x4ec>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d028      	beq.n	8002038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d121      	bne.n	8002038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d11a      	bne.n	8002038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002002:	68fa      	ldr	r2, [r7, #12]
 8002004:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002008:	4013      	ands	r3, r2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800200e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002010:	4293      	cmp	r3, r2
 8002012:	d111      	bne.n	8002038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201e:	085b      	lsrs	r3, r3, #1
 8002020:	3b01      	subs	r3, #1
 8002022:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002024:	429a      	cmp	r2, r3
 8002026:	d107      	bne.n	8002038 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002032:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002034:	429a      	cmp	r2, r3
 8002036:	d001      	beq.n	800203c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023800 	.word	0x40023800

0800204c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0cc      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002060:	4b68      	ldr	r3, [pc, #416]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	683a      	ldr	r2, [r7, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	d90c      	bls.n	8002088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206e:	4b65      	ldr	r3, [pc, #404]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	b2d2      	uxtb	r2, r2
 8002074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002076:	4b63      	ldr	r3, [pc, #396]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d001      	beq.n	8002088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0b8      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d020      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020a0:	4b59      	ldr	r3, [pc, #356]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	4a58      	ldr	r2, [pc, #352]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d005      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020b8:	4b53      	ldr	r3, [pc, #332]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4a52      	ldr	r2, [pc, #328]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c4:	4b50      	ldr	r3, [pc, #320]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	494d      	ldr	r1, [pc, #308]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d044      	beq.n	800216c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d107      	bne.n	80020fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	4b47      	ldr	r3, [pc, #284]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d119      	bne.n	800212a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e07f      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d003      	beq.n	800210a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002106:	2b03      	cmp	r3, #3
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210a:	4b3f      	ldr	r3, [pc, #252]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d109      	bne.n	800212a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e06f      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211a:	4b3b      	ldr	r3, [pc, #236]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0302 	and.w	r3, r3, #2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d101      	bne.n	800212a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e067      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800212a:	4b37      	ldr	r3, [pc, #220]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f023 0203 	bic.w	r2, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4934      	ldr	r1, [pc, #208]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	4313      	orrs	r3, r2
 800213a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800213c:	f7ff fa80 	bl	8001640 <HAL_GetTick>
 8002140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002142:	e00a      	b.n	800215a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002144:	f7ff fa7c 	bl	8001640 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002152:	4293      	cmp	r3, r2
 8002154:	d901      	bls.n	800215a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e04f      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215a:	4b2b      	ldr	r3, [pc, #172]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 020c 	and.w	r2, r3, #12
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	429a      	cmp	r2, r3
 800216a:	d1eb      	bne.n	8002144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800216c:	4b25      	ldr	r3, [pc, #148]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	683a      	ldr	r2, [r7, #0]
 8002176:	429a      	cmp	r2, r3
 8002178:	d20c      	bcs.n	8002194 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800217a:	4b22      	ldr	r3, [pc, #136]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b20      	ldr	r3, [pc, #128]	@ (8002204 <HAL_RCC_ClockConfig+0x1b8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e032      	b.n	80021fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	2b00      	cmp	r3, #0
 800219e:	d008      	beq.n	80021b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021a0:	4b19      	ldr	r3, [pc, #100]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	4916      	ldr	r1, [pc, #88]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d009      	beq.n	80021d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021be:	4b12      	ldr	r3, [pc, #72]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	490e      	ldr	r1, [pc, #56]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021d2:	f000 f821 	bl	8002218 <HAL_RCC_GetSysClockFreq>
 80021d6:	4602      	mov	r2, r0
 80021d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002208 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	091b      	lsrs	r3, r3, #4
 80021de:	f003 030f 	and.w	r3, r3, #15
 80021e2:	490a      	ldr	r1, [pc, #40]	@ (800220c <HAL_RCC_ClockConfig+0x1c0>)
 80021e4:	5ccb      	ldrb	r3, [r1, r3]
 80021e6:	fa22 f303 	lsr.w	r3, r2, r3
 80021ea:	4a09      	ldr	r2, [pc, #36]	@ (8002210 <HAL_RCC_ClockConfig+0x1c4>)
 80021ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021ee:	4b09      	ldr	r3, [pc, #36]	@ (8002214 <HAL_RCC_ClockConfig+0x1c8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff f9e0 	bl	80015b8 <HAL_InitTick>

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023c00 	.word	0x40023c00
 8002208:	40023800 	.word	0x40023800
 800220c:	080074a8 	.word	0x080074a8
 8002210:	20000000 	.word	0x20000000
 8002214:	20000004 	.word	0x20000004

08002218 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800221c:	b094      	sub	sp, #80	@ 0x50
 800221e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002224:	2300      	movs	r3, #0
 8002226:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002228:	2300      	movs	r3, #0
 800222a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002230:	4b79      	ldr	r3, [pc, #484]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x200>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 030c 	and.w	r3, r3, #12
 8002238:	2b08      	cmp	r3, #8
 800223a:	d00d      	beq.n	8002258 <HAL_RCC_GetSysClockFreq+0x40>
 800223c:	2b08      	cmp	r3, #8
 800223e:	f200 80e1 	bhi.w	8002404 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002242:	2b00      	cmp	r3, #0
 8002244:	d002      	beq.n	800224c <HAL_RCC_GetSysClockFreq+0x34>
 8002246:	2b04      	cmp	r3, #4
 8002248:	d003      	beq.n	8002252 <HAL_RCC_GetSysClockFreq+0x3a>
 800224a:	e0db      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800224c:	4b73      	ldr	r3, [pc, #460]	@ (800241c <HAL_RCC_GetSysClockFreq+0x204>)
 800224e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002250:	e0db      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002252:	4b73      	ldr	r3, [pc, #460]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x208>)
 8002254:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002256:	e0d8      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002258:	4b6f      	ldr	r3, [pc, #444]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x200>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002260:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002262:	4b6d      	ldr	r3, [pc, #436]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x200>)
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d063      	beq.n	8002336 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226e:	4b6a      	ldr	r3, [pc, #424]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x200>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	099b      	lsrs	r3, r3, #6
 8002274:	2200      	movs	r2, #0
 8002276:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002278:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800227a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800227c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002280:	633b      	str	r3, [r7, #48]	@ 0x30
 8002282:	2300      	movs	r3, #0
 8002284:	637b      	str	r3, [r7, #52]	@ 0x34
 8002286:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800228a:	4622      	mov	r2, r4
 800228c:	462b      	mov	r3, r5
 800228e:	f04f 0000 	mov.w	r0, #0
 8002292:	f04f 0100 	mov.w	r1, #0
 8002296:	0159      	lsls	r1, r3, #5
 8002298:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800229c:	0150      	lsls	r0, r2, #5
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4621      	mov	r1, r4
 80022a4:	1a51      	subs	r1, r2, r1
 80022a6:	6139      	str	r1, [r7, #16]
 80022a8:	4629      	mov	r1, r5
 80022aa:	eb63 0301 	sbc.w	r3, r3, r1
 80022ae:	617b      	str	r3, [r7, #20]
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80022bc:	4659      	mov	r1, fp
 80022be:	018b      	lsls	r3, r1, #6
 80022c0:	4651      	mov	r1, sl
 80022c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022c6:	4651      	mov	r1, sl
 80022c8:	018a      	lsls	r2, r1, #6
 80022ca:	4651      	mov	r1, sl
 80022cc:	ebb2 0801 	subs.w	r8, r2, r1
 80022d0:	4659      	mov	r1, fp
 80022d2:	eb63 0901 	sbc.w	r9, r3, r1
 80022d6:	f04f 0200 	mov.w	r2, #0
 80022da:	f04f 0300 	mov.w	r3, #0
 80022de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022ea:	4690      	mov	r8, r2
 80022ec:	4699      	mov	r9, r3
 80022ee:	4623      	mov	r3, r4
 80022f0:	eb18 0303 	adds.w	r3, r8, r3
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	462b      	mov	r3, r5
 80022f8:	eb49 0303 	adc.w	r3, r9, r3
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	f04f 0200 	mov.w	r2, #0
 8002302:	f04f 0300 	mov.w	r3, #0
 8002306:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800230a:	4629      	mov	r1, r5
 800230c:	024b      	lsls	r3, r1, #9
 800230e:	4621      	mov	r1, r4
 8002310:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002314:	4621      	mov	r1, r4
 8002316:	024a      	lsls	r2, r1, #9
 8002318:	4610      	mov	r0, r2
 800231a:	4619      	mov	r1, r3
 800231c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800231e:	2200      	movs	r2, #0
 8002320:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002322:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002324:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002328:	f7fe fcae 	bl	8000c88 <__aeabi_uldivmod>
 800232c:	4602      	mov	r2, r0
 800232e:	460b      	mov	r3, r1
 8002330:	4613      	mov	r3, r2
 8002332:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002334:	e058      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002336:	4b38      	ldr	r3, [pc, #224]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x200>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	099b      	lsrs	r3, r3, #6
 800233c:	2200      	movs	r2, #0
 800233e:	4618      	mov	r0, r3
 8002340:	4611      	mov	r1, r2
 8002342:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002346:	623b      	str	r3, [r7, #32]
 8002348:	2300      	movs	r3, #0
 800234a:	627b      	str	r3, [r7, #36]	@ 0x24
 800234c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002350:	4642      	mov	r2, r8
 8002352:	464b      	mov	r3, r9
 8002354:	f04f 0000 	mov.w	r0, #0
 8002358:	f04f 0100 	mov.w	r1, #0
 800235c:	0159      	lsls	r1, r3, #5
 800235e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002362:	0150      	lsls	r0, r2, #5
 8002364:	4602      	mov	r2, r0
 8002366:	460b      	mov	r3, r1
 8002368:	4641      	mov	r1, r8
 800236a:	ebb2 0a01 	subs.w	sl, r2, r1
 800236e:	4649      	mov	r1, r9
 8002370:	eb63 0b01 	sbc.w	fp, r3, r1
 8002374:	f04f 0200 	mov.w	r2, #0
 8002378:	f04f 0300 	mov.w	r3, #0
 800237c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002380:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002384:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002388:	ebb2 040a 	subs.w	r4, r2, sl
 800238c:	eb63 050b 	sbc.w	r5, r3, fp
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	f04f 0300 	mov.w	r3, #0
 8002398:	00eb      	lsls	r3, r5, #3
 800239a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800239e:	00e2      	lsls	r2, r4, #3
 80023a0:	4614      	mov	r4, r2
 80023a2:	461d      	mov	r5, r3
 80023a4:	4643      	mov	r3, r8
 80023a6:	18e3      	adds	r3, r4, r3
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	464b      	mov	r3, r9
 80023ac:	eb45 0303 	adc.w	r3, r5, r3
 80023b0:	607b      	str	r3, [r7, #4]
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023be:	4629      	mov	r1, r5
 80023c0:	028b      	lsls	r3, r1, #10
 80023c2:	4621      	mov	r1, r4
 80023c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023c8:	4621      	mov	r1, r4
 80023ca:	028a      	lsls	r2, r1, #10
 80023cc:	4610      	mov	r0, r2
 80023ce:	4619      	mov	r1, r3
 80023d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023d2:	2200      	movs	r2, #0
 80023d4:	61bb      	str	r3, [r7, #24]
 80023d6:	61fa      	str	r2, [r7, #28]
 80023d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80023dc:	f7fe fc54 	bl	8000c88 <__aeabi_uldivmod>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4613      	mov	r3, r2
 80023e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002418 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	0c1b      	lsrs	r3, r3, #16
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	3301      	adds	r3, #1
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80023f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80023fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002400:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002402:	e002      	b.n	800240a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002404:	4b05      	ldr	r3, [pc, #20]	@ (800241c <HAL_RCC_GetSysClockFreq+0x204>)
 8002406:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800240a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800240c:	4618      	mov	r0, r3
 800240e:	3750      	adds	r7, #80	@ 0x50
 8002410:	46bd      	mov	sp, r7
 8002412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002416:	bf00      	nop
 8002418:	40023800 	.word	0x40023800
 800241c:	00f42400 	.word	0x00f42400
 8002420:	007a1200 	.word	0x007a1200

08002424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002428:	4b03      	ldr	r3, [pc, #12]	@ (8002438 <HAL_RCC_GetHCLKFreq+0x14>)
 800242a:	681b      	ldr	r3, [r3, #0]
}
 800242c:	4618      	mov	r0, r3
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000000 	.word	0x20000000

0800243c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002440:	f7ff fff0 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 8002444:	4602      	mov	r2, r0
 8002446:	4b05      	ldr	r3, [pc, #20]	@ (800245c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	0a9b      	lsrs	r3, r3, #10
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	4903      	ldr	r1, [pc, #12]	@ (8002460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002452:	5ccb      	ldrb	r3, [r1, r3]
 8002454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002458:	4618      	mov	r0, r3
 800245a:	bd80      	pop	{r7, pc}
 800245c:	40023800 	.word	0x40023800
 8002460:	080074b8 	.word	0x080074b8

08002464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002468:	f7ff ffdc 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 800246c:	4602      	mov	r2, r0
 800246e:	4b05      	ldr	r3, [pc, #20]	@ (8002484 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	0b5b      	lsrs	r3, r3, #13
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	4903      	ldr	r1, [pc, #12]	@ (8002488 <HAL_RCC_GetPCLK2Freq+0x24>)
 800247a:	5ccb      	ldrb	r3, [r1, r3]
 800247c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002480:	4618      	mov	r0, r3
 8002482:	bd80      	pop	{r7, pc}
 8002484:	40023800 	.word	0x40023800
 8002488:	080074b8 	.word	0x080074b8

0800248c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d101      	bne.n	800249e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e042      	b.n	8002524 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d106      	bne.n	80024b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7fe ffec 	bl	8001490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2224      	movs	r2, #36	@ 0x24
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80024ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f973 	bl	80027bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80024e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	695a      	ldr	r2, [r3, #20]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80024f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68da      	ldr	r2, [r3, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	@ 0x28
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	4613      	mov	r3, r2
 800253a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b20      	cmp	r3, #32
 800254a:	d175      	bne.n	8002638 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d002      	beq.n	8002558 <HAL_UART_Transmit+0x2c>
 8002552:	88fb      	ldrh	r3, [r7, #6]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e06e      	b.n	800263a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2221      	movs	r2, #33	@ 0x21
 8002566:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800256a:	f7ff f869 	bl	8001640 <HAL_GetTick>
 800256e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	88fa      	ldrh	r2, [r7, #6]
 8002574:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002584:	d108      	bne.n	8002598 <HAL_UART_Transmit+0x6c>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d104      	bne.n	8002598 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800258e:	2300      	movs	r3, #0
 8002590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	61bb      	str	r3, [r7, #24]
 8002596:	e003      	b.n	80025a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800259c:	2300      	movs	r3, #0
 800259e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025a0:	e02e      	b.n	8002600 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	9300      	str	r3, [sp, #0]
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2200      	movs	r2, #0
 80025aa:	2180      	movs	r1, #128	@ 0x80
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 f848 	bl	8002642 <UART_WaitOnFlagUntilTimeout>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e03a      	b.n	800263a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10b      	bne.n	80025e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	881b      	ldrh	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025d8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025da:	69bb      	ldr	r3, [r7, #24]
 80025dc:	3302      	adds	r3, #2
 80025de:	61bb      	str	r3, [r7, #24]
 80025e0:	e007      	b.n	80025f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	781a      	ldrb	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	3301      	adds	r3, #1
 80025f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	3b01      	subs	r3, #1
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002604:	b29b      	uxth	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1cb      	bne.n	80025a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2200      	movs	r2, #0
 8002612:	2140      	movs	r1, #64	@ 0x40
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 f814 	bl	8002642 <UART_WaitOnFlagUntilTimeout>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e006      	b.n	800263a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	e000      	b.n	800263a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002638:	2302      	movs	r3, #2
  }
}
 800263a:	4618      	mov	r0, r3
 800263c:	3720      	adds	r7, #32
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b086      	sub	sp, #24
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	603b      	str	r3, [r7, #0]
 800264e:	4613      	mov	r3, r2
 8002650:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002652:	e03b      	b.n	80026cc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002654:	6a3b      	ldr	r3, [r7, #32]
 8002656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265a:	d037      	beq.n	80026cc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800265c:	f7fe fff0 	bl	8001640 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	6a3a      	ldr	r2, [r7, #32]
 8002668:	429a      	cmp	r2, r3
 800266a:	d302      	bcc.n	8002672 <UART_WaitOnFlagUntilTimeout+0x30>
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e03a      	b.n	80026ec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d023      	beq.n	80026cc <UART_WaitOnFlagUntilTimeout+0x8a>
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b80      	cmp	r3, #128	@ 0x80
 8002688:	d020      	beq.n	80026cc <UART_WaitOnFlagUntilTimeout+0x8a>
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b40      	cmp	r3, #64	@ 0x40
 800268e:	d01d      	beq.n	80026cc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	2b08      	cmp	r3, #8
 800269c:	d116      	bne.n	80026cc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80026b4:	68f8      	ldr	r0, [r7, #12]
 80026b6:	f000 f81d 	bl	80026f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2208      	movs	r2, #8
 80026be:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2200      	movs	r2, #0
 80026c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e00f      	b.n	80026ec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	4013      	ands	r3, r2
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	429a      	cmp	r2, r3
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d0b4      	beq.n	8002654 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b095      	sub	sp, #84	@ 0x54
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	330c      	adds	r3, #12
 8002702:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002706:	e853 3f00 	ldrex	r3, [r3]
 800270a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800270c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800270e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	330c      	adds	r3, #12
 800271a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800271c:	643a      	str	r2, [r7, #64]	@ 0x40
 800271e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002720:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002722:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002724:	e841 2300 	strex	r3, r2, [r1]
 8002728:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800272a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1e5      	bne.n	80026fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3314      	adds	r3, #20
 8002736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	e853 3f00 	ldrex	r3, [r3]
 800273e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f023 0301 	bic.w	r3, r3, #1
 8002746:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	3314      	adds	r3, #20
 800274e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002750:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002752:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002754:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002756:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002758:	e841 2300 	strex	r3, r2, [r1]
 800275c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	2b00      	cmp	r3, #0
 8002762:	d1e5      	bne.n	8002730 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002768:	2b01      	cmp	r3, #1
 800276a:	d119      	bne.n	80027a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	330c      	adds	r3, #12
 8002772:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	e853 3f00 	ldrex	r3, [r3]
 800277a:	60bb      	str	r3, [r7, #8]
   return(result);
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	f023 0310 	bic.w	r3, r3, #16
 8002782:	647b      	str	r3, [r7, #68]	@ 0x44
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	330c      	adds	r3, #12
 800278a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800278c:	61ba      	str	r2, [r7, #24]
 800278e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002790:	6979      	ldr	r1, [r7, #20]
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	e841 2300 	strex	r3, r2, [r1]
 8002798:	613b      	str	r3, [r7, #16]
   return(result);
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1e5      	bne.n	800276c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80027ae:	bf00      	nop
 80027b0:	3754      	adds	r7, #84	@ 0x54
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
	...

080027bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c0:	b0c0      	sub	sp, #256	@ 0x100
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80027c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d8:	68d9      	ldr	r1, [r3, #12]
 80027da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	ea40 0301 	orr.w	r3, r0, r1
 80027e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80027e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f0:	691b      	ldr	r3, [r3, #16]
 80027f2:	431a      	orrs	r2, r3
 80027f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	431a      	orrs	r2, r3
 80027fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	4313      	orrs	r3, r2
 8002804:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002814:	f021 010c 	bic.w	r1, r1, #12
 8002818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002822:	430b      	orrs	r3, r1
 8002824:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002826:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002832:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002836:	6999      	ldr	r1, [r3, #24]
 8002838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	ea40 0301 	orr.w	r3, r0, r1
 8002842:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	4b8f      	ldr	r3, [pc, #572]	@ (8002a88 <UART_SetConfig+0x2cc>)
 800284c:	429a      	cmp	r2, r3
 800284e:	d005      	beq.n	800285c <UART_SetConfig+0xa0>
 8002850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	4b8d      	ldr	r3, [pc, #564]	@ (8002a8c <UART_SetConfig+0x2d0>)
 8002858:	429a      	cmp	r2, r3
 800285a:	d104      	bne.n	8002866 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800285c:	f7ff fe02 	bl	8002464 <HAL_RCC_GetPCLK2Freq>
 8002860:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002864:	e003      	b.n	800286e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002866:	f7ff fde9 	bl	800243c <HAL_RCC_GetPCLK1Freq>
 800286a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800286e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002872:	69db      	ldr	r3, [r3, #28]
 8002874:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002878:	f040 810c 	bne.w	8002a94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800287c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002880:	2200      	movs	r2, #0
 8002882:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002886:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800288a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800288e:	4622      	mov	r2, r4
 8002890:	462b      	mov	r3, r5
 8002892:	1891      	adds	r1, r2, r2
 8002894:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002896:	415b      	adcs	r3, r3
 8002898:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800289a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800289e:	4621      	mov	r1, r4
 80028a0:	eb12 0801 	adds.w	r8, r2, r1
 80028a4:	4629      	mov	r1, r5
 80028a6:	eb43 0901 	adc.w	r9, r3, r1
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028be:	4690      	mov	r8, r2
 80028c0:	4699      	mov	r9, r3
 80028c2:	4623      	mov	r3, r4
 80028c4:	eb18 0303 	adds.w	r3, r8, r3
 80028c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80028cc:	462b      	mov	r3, r5
 80028ce:	eb49 0303 	adc.w	r3, r9, r3
 80028d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80028d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80028e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80028e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80028ea:	460b      	mov	r3, r1
 80028ec:	18db      	adds	r3, r3, r3
 80028ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80028f0:	4613      	mov	r3, r2
 80028f2:	eb42 0303 	adc.w	r3, r2, r3
 80028f6:	657b      	str	r3, [r7, #84]	@ 0x54
 80028f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80028fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002900:	f7fe f9c2 	bl	8000c88 <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4b61      	ldr	r3, [pc, #388]	@ (8002a90 <UART_SetConfig+0x2d4>)
 800290a:	fba3 2302 	umull	r2, r3, r3, r2
 800290e:	095b      	lsrs	r3, r3, #5
 8002910:	011c      	lsls	r4, r3, #4
 8002912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002916:	2200      	movs	r2, #0
 8002918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800291c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002920:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002924:	4642      	mov	r2, r8
 8002926:	464b      	mov	r3, r9
 8002928:	1891      	adds	r1, r2, r2
 800292a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800292c:	415b      	adcs	r3, r3
 800292e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002930:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002934:	4641      	mov	r1, r8
 8002936:	eb12 0a01 	adds.w	sl, r2, r1
 800293a:	4649      	mov	r1, r9
 800293c:	eb43 0b01 	adc.w	fp, r3, r1
 8002940:	f04f 0200 	mov.w	r2, #0
 8002944:	f04f 0300 	mov.w	r3, #0
 8002948:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800294c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002950:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002954:	4692      	mov	sl, r2
 8002956:	469b      	mov	fp, r3
 8002958:	4643      	mov	r3, r8
 800295a:	eb1a 0303 	adds.w	r3, sl, r3
 800295e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002962:	464b      	mov	r3, r9
 8002964:	eb4b 0303 	adc.w	r3, fp, r3
 8002968:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800296c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002978:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800297c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002980:	460b      	mov	r3, r1
 8002982:	18db      	adds	r3, r3, r3
 8002984:	643b      	str	r3, [r7, #64]	@ 0x40
 8002986:	4613      	mov	r3, r2
 8002988:	eb42 0303 	adc.w	r3, r2, r3
 800298c:	647b      	str	r3, [r7, #68]	@ 0x44
 800298e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002992:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002996:	f7fe f977 	bl	8000c88 <__aeabi_uldivmod>
 800299a:	4602      	mov	r2, r0
 800299c:	460b      	mov	r3, r1
 800299e:	4611      	mov	r1, r2
 80029a0:	4b3b      	ldr	r3, [pc, #236]	@ (8002a90 <UART_SetConfig+0x2d4>)
 80029a2:	fba3 2301 	umull	r2, r3, r3, r1
 80029a6:	095b      	lsrs	r3, r3, #5
 80029a8:	2264      	movs	r2, #100	@ 0x64
 80029aa:	fb02 f303 	mul.w	r3, r2, r3
 80029ae:	1acb      	subs	r3, r1, r3
 80029b0:	00db      	lsls	r3, r3, #3
 80029b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80029b6:	4b36      	ldr	r3, [pc, #216]	@ (8002a90 <UART_SetConfig+0x2d4>)
 80029b8:	fba3 2302 	umull	r2, r3, r3, r2
 80029bc:	095b      	lsrs	r3, r3, #5
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80029c4:	441c      	add	r4, r3
 80029c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029ca:	2200      	movs	r2, #0
 80029cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80029d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80029d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80029d8:	4642      	mov	r2, r8
 80029da:	464b      	mov	r3, r9
 80029dc:	1891      	adds	r1, r2, r2
 80029de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80029e0:	415b      	adcs	r3, r3
 80029e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80029e8:	4641      	mov	r1, r8
 80029ea:	1851      	adds	r1, r2, r1
 80029ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80029ee:	4649      	mov	r1, r9
 80029f0:	414b      	adcs	r3, r1
 80029f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80029f4:	f04f 0200 	mov.w	r2, #0
 80029f8:	f04f 0300 	mov.w	r3, #0
 80029fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a00:	4659      	mov	r1, fp
 8002a02:	00cb      	lsls	r3, r1, #3
 8002a04:	4651      	mov	r1, sl
 8002a06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a0a:	4651      	mov	r1, sl
 8002a0c:	00ca      	lsls	r2, r1, #3
 8002a0e:	4610      	mov	r0, r2
 8002a10:	4619      	mov	r1, r3
 8002a12:	4603      	mov	r3, r0
 8002a14:	4642      	mov	r2, r8
 8002a16:	189b      	adds	r3, r3, r2
 8002a18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a1c:	464b      	mov	r3, r9
 8002a1e:	460a      	mov	r2, r1
 8002a20:	eb42 0303 	adc.w	r3, r2, r3
 8002a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002a34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002a38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	18db      	adds	r3, r3, r3
 8002a40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a42:	4613      	mov	r3, r2
 8002a44:	eb42 0303 	adc.w	r3, r2, r3
 8002a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002a4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002a52:	f7fe f919 	bl	8000c88 <__aeabi_uldivmod>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a90 <UART_SetConfig+0x2d4>)
 8002a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8002a60:	095b      	lsrs	r3, r3, #5
 8002a62:	2164      	movs	r1, #100	@ 0x64
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	3332      	adds	r3, #50	@ 0x32
 8002a6e:	4a08      	ldr	r2, [pc, #32]	@ (8002a90 <UART_SetConfig+0x2d4>)
 8002a70:	fba2 2303 	umull	r2, r3, r2, r3
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	f003 0207 	and.w	r2, r3, #7
 8002a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4422      	add	r2, r4
 8002a82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a84:	e106      	b.n	8002c94 <UART_SetConfig+0x4d8>
 8002a86:	bf00      	nop
 8002a88:	40011000 	.word	0x40011000
 8002a8c:	40011400 	.word	0x40011400
 8002a90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002aa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002aa6:	4642      	mov	r2, r8
 8002aa8:	464b      	mov	r3, r9
 8002aaa:	1891      	adds	r1, r2, r2
 8002aac:	6239      	str	r1, [r7, #32]
 8002aae:	415b      	adcs	r3, r3
 8002ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ab2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ab6:	4641      	mov	r1, r8
 8002ab8:	1854      	adds	r4, r2, r1
 8002aba:	4649      	mov	r1, r9
 8002abc:	eb43 0501 	adc.w	r5, r3, r1
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	00eb      	lsls	r3, r5, #3
 8002aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ace:	00e2      	lsls	r2, r4, #3
 8002ad0:	4614      	mov	r4, r2
 8002ad2:	461d      	mov	r5, r3
 8002ad4:	4643      	mov	r3, r8
 8002ad6:	18e3      	adds	r3, r4, r3
 8002ad8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002adc:	464b      	mov	r3, r9
 8002ade:	eb45 0303 	adc.w	r3, r5, r3
 8002ae2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ae6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002af2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b02:	4629      	mov	r1, r5
 8002b04:	008b      	lsls	r3, r1, #2
 8002b06:	4621      	mov	r1, r4
 8002b08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	008a      	lsls	r2, r1, #2
 8002b10:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002b14:	f7fe f8b8 	bl	8000c88 <__aeabi_uldivmod>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4b60      	ldr	r3, [pc, #384]	@ (8002ca0 <UART_SetConfig+0x4e4>)
 8002b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	011c      	lsls	r4, r3, #4
 8002b26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b30:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b34:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002b38:	4642      	mov	r2, r8
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	1891      	adds	r1, r2, r2
 8002b3e:	61b9      	str	r1, [r7, #24]
 8002b40:	415b      	adcs	r3, r3
 8002b42:	61fb      	str	r3, [r7, #28]
 8002b44:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b48:	4641      	mov	r1, r8
 8002b4a:	1851      	adds	r1, r2, r1
 8002b4c:	6139      	str	r1, [r7, #16]
 8002b4e:	4649      	mov	r1, r9
 8002b50:	414b      	adcs	r3, r1
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	f04f 0300 	mov.w	r3, #0
 8002b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b60:	4659      	mov	r1, fp
 8002b62:	00cb      	lsls	r3, r1, #3
 8002b64:	4651      	mov	r1, sl
 8002b66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b6a:	4651      	mov	r1, sl
 8002b6c:	00ca      	lsls	r2, r1, #3
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	4603      	mov	r3, r0
 8002b74:	4642      	mov	r2, r8
 8002b76:	189b      	adds	r3, r3, r2
 8002b78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b7c:	464b      	mov	r3, r9
 8002b7e:	460a      	mov	r2, r1
 8002b80:	eb42 0303 	adc.w	r3, r2, r3
 8002b84:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b92:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002ba0:	4649      	mov	r1, r9
 8002ba2:	008b      	lsls	r3, r1, #2
 8002ba4:	4641      	mov	r1, r8
 8002ba6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002baa:	4641      	mov	r1, r8
 8002bac:	008a      	lsls	r2, r1, #2
 8002bae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002bb2:	f7fe f869 	bl	8000c88 <__aeabi_uldivmod>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4611      	mov	r1, r2
 8002bbc:	4b38      	ldr	r3, [pc, #224]	@ (8002ca0 <UART_SetConfig+0x4e4>)
 8002bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	2264      	movs	r2, #100	@ 0x64
 8002bc6:	fb02 f303 	mul.w	r3, r2, r3
 8002bca:	1acb      	subs	r3, r1, r3
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	3332      	adds	r3, #50	@ 0x32
 8002bd0:	4a33      	ldr	r2, [pc, #204]	@ (8002ca0 <UART_SetConfig+0x4e4>)
 8002bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd6:	095b      	lsrs	r3, r3, #5
 8002bd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002bdc:	441c      	add	r4, r3
 8002bde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002be2:	2200      	movs	r2, #0
 8002be4:	673b      	str	r3, [r7, #112]	@ 0x70
 8002be6:	677a      	str	r2, [r7, #116]	@ 0x74
 8002be8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002bec:	4642      	mov	r2, r8
 8002bee:	464b      	mov	r3, r9
 8002bf0:	1891      	adds	r1, r2, r2
 8002bf2:	60b9      	str	r1, [r7, #8]
 8002bf4:	415b      	adcs	r3, r3
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bfc:	4641      	mov	r1, r8
 8002bfe:	1851      	adds	r1, r2, r1
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	4649      	mov	r1, r9
 8002c04:	414b      	adcs	r3, r1
 8002c06:	607b      	str	r3, [r7, #4]
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c14:	4659      	mov	r1, fp
 8002c16:	00cb      	lsls	r3, r1, #3
 8002c18:	4651      	mov	r1, sl
 8002c1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c1e:	4651      	mov	r1, sl
 8002c20:	00ca      	lsls	r2, r1, #3
 8002c22:	4610      	mov	r0, r2
 8002c24:	4619      	mov	r1, r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	4642      	mov	r2, r8
 8002c2a:	189b      	adds	r3, r3, r2
 8002c2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c2e:	464b      	mov	r3, r9
 8002c30:	460a      	mov	r2, r1
 8002c32:	eb42 0303 	adc.w	r3, r2, r3
 8002c36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c42:	667a      	str	r2, [r7, #100]	@ 0x64
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002c50:	4649      	mov	r1, r9
 8002c52:	008b      	lsls	r3, r1, #2
 8002c54:	4641      	mov	r1, r8
 8002c56:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c5a:	4641      	mov	r1, r8
 8002c5c:	008a      	lsls	r2, r1, #2
 8002c5e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002c62:	f7fe f811 	bl	8000c88 <__aeabi_uldivmod>
 8002c66:	4602      	mov	r2, r0
 8002c68:	460b      	mov	r3, r1
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca0 <UART_SetConfig+0x4e4>)
 8002c6c:	fba3 1302 	umull	r1, r3, r3, r2
 8002c70:	095b      	lsrs	r3, r3, #5
 8002c72:	2164      	movs	r1, #100	@ 0x64
 8002c74:	fb01 f303 	mul.w	r3, r1, r3
 8002c78:	1ad3      	subs	r3, r2, r3
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	3332      	adds	r3, #50	@ 0x32
 8002c7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ca0 <UART_SetConfig+0x4e4>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	095b      	lsrs	r3, r3, #5
 8002c86:	f003 020f 	and.w	r2, r3, #15
 8002c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4422      	add	r2, r4
 8002c92:	609a      	str	r2, [r3, #8]
}
 8002c94:	bf00      	nop
 8002c96:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ca0:	51eb851f 	.word	0x51eb851f

08002ca4 <xxxx>:
 *      Author: Jarvis
 */
#include "test.h"


void xxxx(void){
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
	static uint8_t xxx = 0;
	xxx++;
 8002ca8:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <xxxx+0x1c>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	4b03      	ldr	r3, [pc, #12]	@ (8002cc0 <xxxx+0x1c>)
 8002cb2:	701a      	strb	r2, [r3, #0]


}
 8002cb4:	bf00      	nop
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	20000244 	.word	0x20000244

08002cc4 <__cvt>:
 8002cc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cc8:	ec57 6b10 	vmov	r6, r7, d0
 8002ccc:	2f00      	cmp	r7, #0
 8002cce:	460c      	mov	r4, r1
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	463b      	mov	r3, r7
 8002cd4:	bfbb      	ittet	lt
 8002cd6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8002cda:	461f      	movlt	r7, r3
 8002cdc:	2300      	movge	r3, #0
 8002cde:	232d      	movlt	r3, #45	@ 0x2d
 8002ce0:	700b      	strb	r3, [r1, #0]
 8002ce2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8002ce4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8002ce8:	4691      	mov	r9, r2
 8002cea:	f023 0820 	bic.w	r8, r3, #32
 8002cee:	bfbc      	itt	lt
 8002cf0:	4632      	movlt	r2, r6
 8002cf2:	4616      	movlt	r6, r2
 8002cf4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002cf8:	d005      	beq.n	8002d06 <__cvt+0x42>
 8002cfa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8002cfe:	d100      	bne.n	8002d02 <__cvt+0x3e>
 8002d00:	3401      	adds	r4, #1
 8002d02:	2102      	movs	r1, #2
 8002d04:	e000      	b.n	8002d08 <__cvt+0x44>
 8002d06:	2103      	movs	r1, #3
 8002d08:	ab03      	add	r3, sp, #12
 8002d0a:	9301      	str	r3, [sp, #4]
 8002d0c:	ab02      	add	r3, sp, #8
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	ec47 6b10 	vmov	d0, r6, r7
 8002d14:	4653      	mov	r3, sl
 8002d16:	4622      	mov	r2, r4
 8002d18:	f001 f972 	bl	8004000 <_dtoa_r>
 8002d1c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8002d20:	4605      	mov	r5, r0
 8002d22:	d119      	bne.n	8002d58 <__cvt+0x94>
 8002d24:	f019 0f01 	tst.w	r9, #1
 8002d28:	d00e      	beq.n	8002d48 <__cvt+0x84>
 8002d2a:	eb00 0904 	add.w	r9, r0, r4
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2300      	movs	r3, #0
 8002d32:	4630      	mov	r0, r6
 8002d34:	4639      	mov	r1, r7
 8002d36:	f7fd fec7 	bl	8000ac8 <__aeabi_dcmpeq>
 8002d3a:	b108      	cbz	r0, 8002d40 <__cvt+0x7c>
 8002d3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8002d40:	2230      	movs	r2, #48	@ 0x30
 8002d42:	9b03      	ldr	r3, [sp, #12]
 8002d44:	454b      	cmp	r3, r9
 8002d46:	d31e      	bcc.n	8002d86 <__cvt+0xc2>
 8002d48:	9b03      	ldr	r3, [sp, #12]
 8002d4a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8002d4c:	1b5b      	subs	r3, r3, r5
 8002d4e:	4628      	mov	r0, r5
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	b004      	add	sp, #16
 8002d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d58:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8002d5c:	eb00 0904 	add.w	r9, r0, r4
 8002d60:	d1e5      	bne.n	8002d2e <__cvt+0x6a>
 8002d62:	7803      	ldrb	r3, [r0, #0]
 8002d64:	2b30      	cmp	r3, #48	@ 0x30
 8002d66:	d10a      	bne.n	8002d7e <__cvt+0xba>
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	4630      	mov	r0, r6
 8002d6e:	4639      	mov	r1, r7
 8002d70:	f7fd feaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8002d74:	b918      	cbnz	r0, 8002d7e <__cvt+0xba>
 8002d76:	f1c4 0401 	rsb	r4, r4, #1
 8002d7a:	f8ca 4000 	str.w	r4, [sl]
 8002d7e:	f8da 3000 	ldr.w	r3, [sl]
 8002d82:	4499      	add	r9, r3
 8002d84:	e7d3      	b.n	8002d2e <__cvt+0x6a>
 8002d86:	1c59      	adds	r1, r3, #1
 8002d88:	9103      	str	r1, [sp, #12]
 8002d8a:	701a      	strb	r2, [r3, #0]
 8002d8c:	e7d9      	b.n	8002d42 <__cvt+0x7e>

08002d8e <__exponent>:
 8002d8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d90:	2900      	cmp	r1, #0
 8002d92:	bfba      	itte	lt
 8002d94:	4249      	neglt	r1, r1
 8002d96:	232d      	movlt	r3, #45	@ 0x2d
 8002d98:	232b      	movge	r3, #43	@ 0x2b
 8002d9a:	2909      	cmp	r1, #9
 8002d9c:	7002      	strb	r2, [r0, #0]
 8002d9e:	7043      	strb	r3, [r0, #1]
 8002da0:	dd29      	ble.n	8002df6 <__exponent+0x68>
 8002da2:	f10d 0307 	add.w	r3, sp, #7
 8002da6:	461d      	mov	r5, r3
 8002da8:	270a      	movs	r7, #10
 8002daa:	461a      	mov	r2, r3
 8002dac:	fbb1 f6f7 	udiv	r6, r1, r7
 8002db0:	fb07 1416 	mls	r4, r7, r6, r1
 8002db4:	3430      	adds	r4, #48	@ 0x30
 8002db6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8002dba:	460c      	mov	r4, r1
 8002dbc:	2c63      	cmp	r4, #99	@ 0x63
 8002dbe:	f103 33ff 	add.w	r3, r3, #4294967295
 8002dc2:	4631      	mov	r1, r6
 8002dc4:	dcf1      	bgt.n	8002daa <__exponent+0x1c>
 8002dc6:	3130      	adds	r1, #48	@ 0x30
 8002dc8:	1e94      	subs	r4, r2, #2
 8002dca:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002dce:	1c41      	adds	r1, r0, #1
 8002dd0:	4623      	mov	r3, r4
 8002dd2:	42ab      	cmp	r3, r5
 8002dd4:	d30a      	bcc.n	8002dec <__exponent+0x5e>
 8002dd6:	f10d 0309 	add.w	r3, sp, #9
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	42ac      	cmp	r4, r5
 8002dde:	bf88      	it	hi
 8002de0:	2300      	movhi	r3, #0
 8002de2:	3302      	adds	r3, #2
 8002de4:	4403      	add	r3, r0
 8002de6:	1a18      	subs	r0, r3, r0
 8002de8:	b003      	add	sp, #12
 8002dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dec:	f813 6b01 	ldrb.w	r6, [r3], #1
 8002df0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8002df4:	e7ed      	b.n	8002dd2 <__exponent+0x44>
 8002df6:	2330      	movs	r3, #48	@ 0x30
 8002df8:	3130      	adds	r1, #48	@ 0x30
 8002dfa:	7083      	strb	r3, [r0, #2]
 8002dfc:	70c1      	strb	r1, [r0, #3]
 8002dfe:	1d03      	adds	r3, r0, #4
 8002e00:	e7f1      	b.n	8002de6 <__exponent+0x58>
	...

08002e04 <_printf_float>:
 8002e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e08:	b08d      	sub	sp, #52	@ 0x34
 8002e0a:	460c      	mov	r4, r1
 8002e0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8002e10:	4616      	mov	r6, r2
 8002e12:	461f      	mov	r7, r3
 8002e14:	4605      	mov	r5, r0
 8002e16:	f000 ffed 	bl	8003df4 <_localeconv_r>
 8002e1a:	6803      	ldr	r3, [r0, #0]
 8002e1c:	9304      	str	r3, [sp, #16]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd fa26 	bl	8000270 <strlen>
 8002e24:	2300      	movs	r3, #0
 8002e26:	930a      	str	r3, [sp, #40]	@ 0x28
 8002e28:	f8d8 3000 	ldr.w	r3, [r8]
 8002e2c:	9005      	str	r0, [sp, #20]
 8002e2e:	3307      	adds	r3, #7
 8002e30:	f023 0307 	bic.w	r3, r3, #7
 8002e34:	f103 0208 	add.w	r2, r3, #8
 8002e38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002e3c:	f8d4 b000 	ldr.w	fp, [r4]
 8002e40:	f8c8 2000 	str.w	r2, [r8]
 8002e44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002e48:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8002e4c:	9307      	str	r3, [sp, #28]
 8002e4e:	f8cd 8018 	str.w	r8, [sp, #24]
 8002e52:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8002e56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e5a:	4b9c      	ldr	r3, [pc, #624]	@ (80030cc <_printf_float+0x2c8>)
 8002e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e60:	f7fd fe64 	bl	8000b2c <__aeabi_dcmpun>
 8002e64:	bb70      	cbnz	r0, 8002ec4 <_printf_float+0xc0>
 8002e66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e6a:	4b98      	ldr	r3, [pc, #608]	@ (80030cc <_printf_float+0x2c8>)
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	f7fd fe3e 	bl	8000af0 <__aeabi_dcmple>
 8002e74:	bb30      	cbnz	r0, 8002ec4 <_printf_float+0xc0>
 8002e76:	2200      	movs	r2, #0
 8002e78:	2300      	movs	r3, #0
 8002e7a:	4640      	mov	r0, r8
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	f7fd fe2d 	bl	8000adc <__aeabi_dcmplt>
 8002e82:	b110      	cbz	r0, 8002e8a <_printf_float+0x86>
 8002e84:	232d      	movs	r3, #45	@ 0x2d
 8002e86:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e8a:	4a91      	ldr	r2, [pc, #580]	@ (80030d0 <_printf_float+0x2cc>)
 8002e8c:	4b91      	ldr	r3, [pc, #580]	@ (80030d4 <_printf_float+0x2d0>)
 8002e8e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8002e92:	bf8c      	ite	hi
 8002e94:	4690      	movhi	r8, r2
 8002e96:	4698      	movls	r8, r3
 8002e98:	2303      	movs	r3, #3
 8002e9a:	6123      	str	r3, [r4, #16]
 8002e9c:	f02b 0304 	bic.w	r3, fp, #4
 8002ea0:	6023      	str	r3, [r4, #0]
 8002ea2:	f04f 0900 	mov.w	r9, #0
 8002ea6:	9700      	str	r7, [sp, #0]
 8002ea8:	4633      	mov	r3, r6
 8002eaa:	aa0b      	add	r2, sp, #44	@ 0x2c
 8002eac:	4621      	mov	r1, r4
 8002eae:	4628      	mov	r0, r5
 8002eb0:	f000 f9d2 	bl	8003258 <_printf_common>
 8002eb4:	3001      	adds	r0, #1
 8002eb6:	f040 808d 	bne.w	8002fd4 <_printf_float+0x1d0>
 8002eba:	f04f 30ff 	mov.w	r0, #4294967295
 8002ebe:	b00d      	add	sp, #52	@ 0x34
 8002ec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ec4:	4642      	mov	r2, r8
 8002ec6:	464b      	mov	r3, r9
 8002ec8:	4640      	mov	r0, r8
 8002eca:	4649      	mov	r1, r9
 8002ecc:	f7fd fe2e 	bl	8000b2c <__aeabi_dcmpun>
 8002ed0:	b140      	cbz	r0, 8002ee4 <_printf_float+0xe0>
 8002ed2:	464b      	mov	r3, r9
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	bfbc      	itt	lt
 8002ed8:	232d      	movlt	r3, #45	@ 0x2d
 8002eda:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8002ede:	4a7e      	ldr	r2, [pc, #504]	@ (80030d8 <_printf_float+0x2d4>)
 8002ee0:	4b7e      	ldr	r3, [pc, #504]	@ (80030dc <_printf_float+0x2d8>)
 8002ee2:	e7d4      	b.n	8002e8e <_printf_float+0x8a>
 8002ee4:	6863      	ldr	r3, [r4, #4]
 8002ee6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8002eea:	9206      	str	r2, [sp, #24]
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	d13b      	bne.n	8002f68 <_printf_float+0x164>
 8002ef0:	2306      	movs	r3, #6
 8002ef2:	6063      	str	r3, [r4, #4]
 8002ef4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8002ef8:	2300      	movs	r3, #0
 8002efa:	6022      	str	r2, [r4, #0]
 8002efc:	9303      	str	r3, [sp, #12]
 8002efe:	ab0a      	add	r3, sp, #40	@ 0x28
 8002f00:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002f04:	ab09      	add	r3, sp, #36	@ 0x24
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	6861      	ldr	r1, [r4, #4]
 8002f0a:	ec49 8b10 	vmov	d0, r8, r9
 8002f0e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8002f12:	4628      	mov	r0, r5
 8002f14:	f7ff fed6 	bl	8002cc4 <__cvt>
 8002f18:	9b06      	ldr	r3, [sp, #24]
 8002f1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002f1c:	2b47      	cmp	r3, #71	@ 0x47
 8002f1e:	4680      	mov	r8, r0
 8002f20:	d129      	bne.n	8002f76 <_printf_float+0x172>
 8002f22:	1cc8      	adds	r0, r1, #3
 8002f24:	db02      	blt.n	8002f2c <_printf_float+0x128>
 8002f26:	6863      	ldr	r3, [r4, #4]
 8002f28:	4299      	cmp	r1, r3
 8002f2a:	dd41      	ble.n	8002fb0 <_printf_float+0x1ac>
 8002f2c:	f1aa 0a02 	sub.w	sl, sl, #2
 8002f30:	fa5f fa8a 	uxtb.w	sl, sl
 8002f34:	3901      	subs	r1, #1
 8002f36:	4652      	mov	r2, sl
 8002f38:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8002f3c:	9109      	str	r1, [sp, #36]	@ 0x24
 8002f3e:	f7ff ff26 	bl	8002d8e <__exponent>
 8002f42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8002f44:	1813      	adds	r3, r2, r0
 8002f46:	2a01      	cmp	r2, #1
 8002f48:	4681      	mov	r9, r0
 8002f4a:	6123      	str	r3, [r4, #16]
 8002f4c:	dc02      	bgt.n	8002f54 <_printf_float+0x150>
 8002f4e:	6822      	ldr	r2, [r4, #0]
 8002f50:	07d2      	lsls	r2, r2, #31
 8002f52:	d501      	bpl.n	8002f58 <_printf_float+0x154>
 8002f54:	3301      	adds	r3, #1
 8002f56:	6123      	str	r3, [r4, #16]
 8002f58:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0a2      	beq.n	8002ea6 <_printf_float+0xa2>
 8002f60:	232d      	movs	r3, #45	@ 0x2d
 8002f62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002f66:	e79e      	b.n	8002ea6 <_printf_float+0xa2>
 8002f68:	9a06      	ldr	r2, [sp, #24]
 8002f6a:	2a47      	cmp	r2, #71	@ 0x47
 8002f6c:	d1c2      	bne.n	8002ef4 <_printf_float+0xf0>
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1c0      	bne.n	8002ef4 <_printf_float+0xf0>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e7bd      	b.n	8002ef2 <_printf_float+0xee>
 8002f76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002f7a:	d9db      	bls.n	8002f34 <_printf_float+0x130>
 8002f7c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8002f80:	d118      	bne.n	8002fb4 <_printf_float+0x1b0>
 8002f82:	2900      	cmp	r1, #0
 8002f84:	6863      	ldr	r3, [r4, #4]
 8002f86:	dd0b      	ble.n	8002fa0 <_printf_float+0x19c>
 8002f88:	6121      	str	r1, [r4, #16]
 8002f8a:	b913      	cbnz	r3, 8002f92 <_printf_float+0x18e>
 8002f8c:	6822      	ldr	r2, [r4, #0]
 8002f8e:	07d0      	lsls	r0, r2, #31
 8002f90:	d502      	bpl.n	8002f98 <_printf_float+0x194>
 8002f92:	3301      	adds	r3, #1
 8002f94:	440b      	add	r3, r1
 8002f96:	6123      	str	r3, [r4, #16]
 8002f98:	65a1      	str	r1, [r4, #88]	@ 0x58
 8002f9a:	f04f 0900 	mov.w	r9, #0
 8002f9e:	e7db      	b.n	8002f58 <_printf_float+0x154>
 8002fa0:	b913      	cbnz	r3, 8002fa8 <_printf_float+0x1a4>
 8002fa2:	6822      	ldr	r2, [r4, #0]
 8002fa4:	07d2      	lsls	r2, r2, #31
 8002fa6:	d501      	bpl.n	8002fac <_printf_float+0x1a8>
 8002fa8:	3302      	adds	r3, #2
 8002faa:	e7f4      	b.n	8002f96 <_printf_float+0x192>
 8002fac:	2301      	movs	r3, #1
 8002fae:	e7f2      	b.n	8002f96 <_printf_float+0x192>
 8002fb0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8002fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8002fb6:	4299      	cmp	r1, r3
 8002fb8:	db05      	blt.n	8002fc6 <_printf_float+0x1c2>
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	6121      	str	r1, [r4, #16]
 8002fbe:	07d8      	lsls	r0, r3, #31
 8002fc0:	d5ea      	bpl.n	8002f98 <_printf_float+0x194>
 8002fc2:	1c4b      	adds	r3, r1, #1
 8002fc4:	e7e7      	b.n	8002f96 <_printf_float+0x192>
 8002fc6:	2900      	cmp	r1, #0
 8002fc8:	bfd4      	ite	le
 8002fca:	f1c1 0202 	rsble	r2, r1, #2
 8002fce:	2201      	movgt	r2, #1
 8002fd0:	4413      	add	r3, r2
 8002fd2:	e7e0      	b.n	8002f96 <_printf_float+0x192>
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	055a      	lsls	r2, r3, #21
 8002fd8:	d407      	bmi.n	8002fea <_printf_float+0x1e6>
 8002fda:	6923      	ldr	r3, [r4, #16]
 8002fdc:	4642      	mov	r2, r8
 8002fde:	4631      	mov	r1, r6
 8002fe0:	4628      	mov	r0, r5
 8002fe2:	47b8      	blx	r7
 8002fe4:	3001      	adds	r0, #1
 8002fe6:	d12b      	bne.n	8003040 <_printf_float+0x23c>
 8002fe8:	e767      	b.n	8002eba <_printf_float+0xb6>
 8002fea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8002fee:	f240 80dd 	bls.w	80031ac <_printf_float+0x3a8>
 8002ff2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f7fd fd65 	bl	8000ac8 <__aeabi_dcmpeq>
 8002ffe:	2800      	cmp	r0, #0
 8003000:	d033      	beq.n	800306a <_printf_float+0x266>
 8003002:	4a37      	ldr	r2, [pc, #220]	@ (80030e0 <_printf_float+0x2dc>)
 8003004:	2301      	movs	r3, #1
 8003006:	4631      	mov	r1, r6
 8003008:	4628      	mov	r0, r5
 800300a:	47b8      	blx	r7
 800300c:	3001      	adds	r0, #1
 800300e:	f43f af54 	beq.w	8002eba <_printf_float+0xb6>
 8003012:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003016:	4543      	cmp	r3, r8
 8003018:	db02      	blt.n	8003020 <_printf_float+0x21c>
 800301a:	6823      	ldr	r3, [r4, #0]
 800301c:	07d8      	lsls	r0, r3, #31
 800301e:	d50f      	bpl.n	8003040 <_printf_float+0x23c>
 8003020:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003024:	4631      	mov	r1, r6
 8003026:	4628      	mov	r0, r5
 8003028:	47b8      	blx	r7
 800302a:	3001      	adds	r0, #1
 800302c:	f43f af45 	beq.w	8002eba <_printf_float+0xb6>
 8003030:	f04f 0900 	mov.w	r9, #0
 8003034:	f108 38ff 	add.w	r8, r8, #4294967295
 8003038:	f104 0a1a 	add.w	sl, r4, #26
 800303c:	45c8      	cmp	r8, r9
 800303e:	dc09      	bgt.n	8003054 <_printf_float+0x250>
 8003040:	6823      	ldr	r3, [r4, #0]
 8003042:	079b      	lsls	r3, r3, #30
 8003044:	f100 8103 	bmi.w	800324e <_printf_float+0x44a>
 8003048:	68e0      	ldr	r0, [r4, #12]
 800304a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800304c:	4298      	cmp	r0, r3
 800304e:	bfb8      	it	lt
 8003050:	4618      	movlt	r0, r3
 8003052:	e734      	b.n	8002ebe <_printf_float+0xba>
 8003054:	2301      	movs	r3, #1
 8003056:	4652      	mov	r2, sl
 8003058:	4631      	mov	r1, r6
 800305a:	4628      	mov	r0, r5
 800305c:	47b8      	blx	r7
 800305e:	3001      	adds	r0, #1
 8003060:	f43f af2b 	beq.w	8002eba <_printf_float+0xb6>
 8003064:	f109 0901 	add.w	r9, r9, #1
 8003068:	e7e8      	b.n	800303c <_printf_float+0x238>
 800306a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800306c:	2b00      	cmp	r3, #0
 800306e:	dc39      	bgt.n	80030e4 <_printf_float+0x2e0>
 8003070:	4a1b      	ldr	r2, [pc, #108]	@ (80030e0 <_printf_float+0x2dc>)
 8003072:	2301      	movs	r3, #1
 8003074:	4631      	mov	r1, r6
 8003076:	4628      	mov	r0, r5
 8003078:	47b8      	blx	r7
 800307a:	3001      	adds	r0, #1
 800307c:	f43f af1d 	beq.w	8002eba <_printf_float+0xb6>
 8003080:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003084:	ea59 0303 	orrs.w	r3, r9, r3
 8003088:	d102      	bne.n	8003090 <_printf_float+0x28c>
 800308a:	6823      	ldr	r3, [r4, #0]
 800308c:	07d9      	lsls	r1, r3, #31
 800308e:	d5d7      	bpl.n	8003040 <_printf_float+0x23c>
 8003090:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003094:	4631      	mov	r1, r6
 8003096:	4628      	mov	r0, r5
 8003098:	47b8      	blx	r7
 800309a:	3001      	adds	r0, #1
 800309c:	f43f af0d 	beq.w	8002eba <_printf_float+0xb6>
 80030a0:	f04f 0a00 	mov.w	sl, #0
 80030a4:	f104 0b1a 	add.w	fp, r4, #26
 80030a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80030aa:	425b      	negs	r3, r3
 80030ac:	4553      	cmp	r3, sl
 80030ae:	dc01      	bgt.n	80030b4 <_printf_float+0x2b0>
 80030b0:	464b      	mov	r3, r9
 80030b2:	e793      	b.n	8002fdc <_printf_float+0x1d8>
 80030b4:	2301      	movs	r3, #1
 80030b6:	465a      	mov	r2, fp
 80030b8:	4631      	mov	r1, r6
 80030ba:	4628      	mov	r0, r5
 80030bc:	47b8      	blx	r7
 80030be:	3001      	adds	r0, #1
 80030c0:	f43f aefb 	beq.w	8002eba <_printf_float+0xb6>
 80030c4:	f10a 0a01 	add.w	sl, sl, #1
 80030c8:	e7ee      	b.n	80030a8 <_printf_float+0x2a4>
 80030ca:	bf00      	nop
 80030cc:	7fefffff 	.word	0x7fefffff
 80030d0:	080074c4 	.word	0x080074c4
 80030d4:	080074c0 	.word	0x080074c0
 80030d8:	080074cc 	.word	0x080074cc
 80030dc:	080074c8 	.word	0x080074c8
 80030e0:	080074d0 	.word	0x080074d0
 80030e4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80030e6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80030ea:	4553      	cmp	r3, sl
 80030ec:	bfa8      	it	ge
 80030ee:	4653      	movge	r3, sl
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	4699      	mov	r9, r3
 80030f4:	dc36      	bgt.n	8003164 <_printf_float+0x360>
 80030f6:	f04f 0b00 	mov.w	fp, #0
 80030fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030fe:	f104 021a 	add.w	r2, r4, #26
 8003102:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003104:	9306      	str	r3, [sp, #24]
 8003106:	eba3 0309 	sub.w	r3, r3, r9
 800310a:	455b      	cmp	r3, fp
 800310c:	dc31      	bgt.n	8003172 <_printf_float+0x36e>
 800310e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003110:	459a      	cmp	sl, r3
 8003112:	dc3a      	bgt.n	800318a <_printf_float+0x386>
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	07da      	lsls	r2, r3, #31
 8003118:	d437      	bmi.n	800318a <_printf_float+0x386>
 800311a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800311c:	ebaa 0903 	sub.w	r9, sl, r3
 8003120:	9b06      	ldr	r3, [sp, #24]
 8003122:	ebaa 0303 	sub.w	r3, sl, r3
 8003126:	4599      	cmp	r9, r3
 8003128:	bfa8      	it	ge
 800312a:	4699      	movge	r9, r3
 800312c:	f1b9 0f00 	cmp.w	r9, #0
 8003130:	dc33      	bgt.n	800319a <_printf_float+0x396>
 8003132:	f04f 0800 	mov.w	r8, #0
 8003136:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800313a:	f104 0b1a 	add.w	fp, r4, #26
 800313e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003140:	ebaa 0303 	sub.w	r3, sl, r3
 8003144:	eba3 0309 	sub.w	r3, r3, r9
 8003148:	4543      	cmp	r3, r8
 800314a:	f77f af79 	ble.w	8003040 <_printf_float+0x23c>
 800314e:	2301      	movs	r3, #1
 8003150:	465a      	mov	r2, fp
 8003152:	4631      	mov	r1, r6
 8003154:	4628      	mov	r0, r5
 8003156:	47b8      	blx	r7
 8003158:	3001      	adds	r0, #1
 800315a:	f43f aeae 	beq.w	8002eba <_printf_float+0xb6>
 800315e:	f108 0801 	add.w	r8, r8, #1
 8003162:	e7ec      	b.n	800313e <_printf_float+0x33a>
 8003164:	4642      	mov	r2, r8
 8003166:	4631      	mov	r1, r6
 8003168:	4628      	mov	r0, r5
 800316a:	47b8      	blx	r7
 800316c:	3001      	adds	r0, #1
 800316e:	d1c2      	bne.n	80030f6 <_printf_float+0x2f2>
 8003170:	e6a3      	b.n	8002eba <_printf_float+0xb6>
 8003172:	2301      	movs	r3, #1
 8003174:	4631      	mov	r1, r6
 8003176:	4628      	mov	r0, r5
 8003178:	9206      	str	r2, [sp, #24]
 800317a:	47b8      	blx	r7
 800317c:	3001      	adds	r0, #1
 800317e:	f43f ae9c 	beq.w	8002eba <_printf_float+0xb6>
 8003182:	9a06      	ldr	r2, [sp, #24]
 8003184:	f10b 0b01 	add.w	fp, fp, #1
 8003188:	e7bb      	b.n	8003102 <_printf_float+0x2fe>
 800318a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800318e:	4631      	mov	r1, r6
 8003190:	4628      	mov	r0, r5
 8003192:	47b8      	blx	r7
 8003194:	3001      	adds	r0, #1
 8003196:	d1c0      	bne.n	800311a <_printf_float+0x316>
 8003198:	e68f      	b.n	8002eba <_printf_float+0xb6>
 800319a:	9a06      	ldr	r2, [sp, #24]
 800319c:	464b      	mov	r3, r9
 800319e:	4442      	add	r2, r8
 80031a0:	4631      	mov	r1, r6
 80031a2:	4628      	mov	r0, r5
 80031a4:	47b8      	blx	r7
 80031a6:	3001      	adds	r0, #1
 80031a8:	d1c3      	bne.n	8003132 <_printf_float+0x32e>
 80031aa:	e686      	b.n	8002eba <_printf_float+0xb6>
 80031ac:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80031b0:	f1ba 0f01 	cmp.w	sl, #1
 80031b4:	dc01      	bgt.n	80031ba <_printf_float+0x3b6>
 80031b6:	07db      	lsls	r3, r3, #31
 80031b8:	d536      	bpl.n	8003228 <_printf_float+0x424>
 80031ba:	2301      	movs	r3, #1
 80031bc:	4642      	mov	r2, r8
 80031be:	4631      	mov	r1, r6
 80031c0:	4628      	mov	r0, r5
 80031c2:	47b8      	blx	r7
 80031c4:	3001      	adds	r0, #1
 80031c6:	f43f ae78 	beq.w	8002eba <_printf_float+0xb6>
 80031ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031ce:	4631      	mov	r1, r6
 80031d0:	4628      	mov	r0, r5
 80031d2:	47b8      	blx	r7
 80031d4:	3001      	adds	r0, #1
 80031d6:	f43f ae70 	beq.w	8002eba <_printf_float+0xb6>
 80031da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80031de:	2200      	movs	r2, #0
 80031e0:	2300      	movs	r3, #0
 80031e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80031e6:	f7fd fc6f 	bl	8000ac8 <__aeabi_dcmpeq>
 80031ea:	b9c0      	cbnz	r0, 800321e <_printf_float+0x41a>
 80031ec:	4653      	mov	r3, sl
 80031ee:	f108 0201 	add.w	r2, r8, #1
 80031f2:	4631      	mov	r1, r6
 80031f4:	4628      	mov	r0, r5
 80031f6:	47b8      	blx	r7
 80031f8:	3001      	adds	r0, #1
 80031fa:	d10c      	bne.n	8003216 <_printf_float+0x412>
 80031fc:	e65d      	b.n	8002eba <_printf_float+0xb6>
 80031fe:	2301      	movs	r3, #1
 8003200:	465a      	mov	r2, fp
 8003202:	4631      	mov	r1, r6
 8003204:	4628      	mov	r0, r5
 8003206:	47b8      	blx	r7
 8003208:	3001      	adds	r0, #1
 800320a:	f43f ae56 	beq.w	8002eba <_printf_float+0xb6>
 800320e:	f108 0801 	add.w	r8, r8, #1
 8003212:	45d0      	cmp	r8, sl
 8003214:	dbf3      	blt.n	80031fe <_printf_float+0x3fa>
 8003216:	464b      	mov	r3, r9
 8003218:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800321c:	e6df      	b.n	8002fde <_printf_float+0x1da>
 800321e:	f04f 0800 	mov.w	r8, #0
 8003222:	f104 0b1a 	add.w	fp, r4, #26
 8003226:	e7f4      	b.n	8003212 <_printf_float+0x40e>
 8003228:	2301      	movs	r3, #1
 800322a:	4642      	mov	r2, r8
 800322c:	e7e1      	b.n	80031f2 <_printf_float+0x3ee>
 800322e:	2301      	movs	r3, #1
 8003230:	464a      	mov	r2, r9
 8003232:	4631      	mov	r1, r6
 8003234:	4628      	mov	r0, r5
 8003236:	47b8      	blx	r7
 8003238:	3001      	adds	r0, #1
 800323a:	f43f ae3e 	beq.w	8002eba <_printf_float+0xb6>
 800323e:	f108 0801 	add.w	r8, r8, #1
 8003242:	68e3      	ldr	r3, [r4, #12]
 8003244:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003246:	1a5b      	subs	r3, r3, r1
 8003248:	4543      	cmp	r3, r8
 800324a:	dcf0      	bgt.n	800322e <_printf_float+0x42a>
 800324c:	e6fc      	b.n	8003048 <_printf_float+0x244>
 800324e:	f04f 0800 	mov.w	r8, #0
 8003252:	f104 0919 	add.w	r9, r4, #25
 8003256:	e7f4      	b.n	8003242 <_printf_float+0x43e>

08003258 <_printf_common>:
 8003258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800325c:	4616      	mov	r6, r2
 800325e:	4698      	mov	r8, r3
 8003260:	688a      	ldr	r2, [r1, #8]
 8003262:	690b      	ldr	r3, [r1, #16]
 8003264:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003268:	4293      	cmp	r3, r2
 800326a:	bfb8      	it	lt
 800326c:	4613      	movlt	r3, r2
 800326e:	6033      	str	r3, [r6, #0]
 8003270:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003274:	4607      	mov	r7, r0
 8003276:	460c      	mov	r4, r1
 8003278:	b10a      	cbz	r2, 800327e <_printf_common+0x26>
 800327a:	3301      	adds	r3, #1
 800327c:	6033      	str	r3, [r6, #0]
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	0699      	lsls	r1, r3, #26
 8003282:	bf42      	ittt	mi
 8003284:	6833      	ldrmi	r3, [r6, #0]
 8003286:	3302      	addmi	r3, #2
 8003288:	6033      	strmi	r3, [r6, #0]
 800328a:	6825      	ldr	r5, [r4, #0]
 800328c:	f015 0506 	ands.w	r5, r5, #6
 8003290:	d106      	bne.n	80032a0 <_printf_common+0x48>
 8003292:	f104 0a19 	add.w	sl, r4, #25
 8003296:	68e3      	ldr	r3, [r4, #12]
 8003298:	6832      	ldr	r2, [r6, #0]
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	42ab      	cmp	r3, r5
 800329e:	dc26      	bgt.n	80032ee <_printf_common+0x96>
 80032a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80032a4:	6822      	ldr	r2, [r4, #0]
 80032a6:	3b00      	subs	r3, #0
 80032a8:	bf18      	it	ne
 80032aa:	2301      	movne	r3, #1
 80032ac:	0692      	lsls	r2, r2, #26
 80032ae:	d42b      	bmi.n	8003308 <_printf_common+0xb0>
 80032b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80032b4:	4641      	mov	r1, r8
 80032b6:	4638      	mov	r0, r7
 80032b8:	47c8      	blx	r9
 80032ba:	3001      	adds	r0, #1
 80032bc:	d01e      	beq.n	80032fc <_printf_common+0xa4>
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	6922      	ldr	r2, [r4, #16]
 80032c2:	f003 0306 	and.w	r3, r3, #6
 80032c6:	2b04      	cmp	r3, #4
 80032c8:	bf02      	ittt	eq
 80032ca:	68e5      	ldreq	r5, [r4, #12]
 80032cc:	6833      	ldreq	r3, [r6, #0]
 80032ce:	1aed      	subeq	r5, r5, r3
 80032d0:	68a3      	ldr	r3, [r4, #8]
 80032d2:	bf0c      	ite	eq
 80032d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80032d8:	2500      	movne	r5, #0
 80032da:	4293      	cmp	r3, r2
 80032dc:	bfc4      	itt	gt
 80032de:	1a9b      	subgt	r3, r3, r2
 80032e0:	18ed      	addgt	r5, r5, r3
 80032e2:	2600      	movs	r6, #0
 80032e4:	341a      	adds	r4, #26
 80032e6:	42b5      	cmp	r5, r6
 80032e8:	d11a      	bne.n	8003320 <_printf_common+0xc8>
 80032ea:	2000      	movs	r0, #0
 80032ec:	e008      	b.n	8003300 <_printf_common+0xa8>
 80032ee:	2301      	movs	r3, #1
 80032f0:	4652      	mov	r2, sl
 80032f2:	4641      	mov	r1, r8
 80032f4:	4638      	mov	r0, r7
 80032f6:	47c8      	blx	r9
 80032f8:	3001      	adds	r0, #1
 80032fa:	d103      	bne.n	8003304 <_printf_common+0xac>
 80032fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003304:	3501      	adds	r5, #1
 8003306:	e7c6      	b.n	8003296 <_printf_common+0x3e>
 8003308:	18e1      	adds	r1, r4, r3
 800330a:	1c5a      	adds	r2, r3, #1
 800330c:	2030      	movs	r0, #48	@ 0x30
 800330e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003312:	4422      	add	r2, r4
 8003314:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003318:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800331c:	3302      	adds	r3, #2
 800331e:	e7c7      	b.n	80032b0 <_printf_common+0x58>
 8003320:	2301      	movs	r3, #1
 8003322:	4622      	mov	r2, r4
 8003324:	4641      	mov	r1, r8
 8003326:	4638      	mov	r0, r7
 8003328:	47c8      	blx	r9
 800332a:	3001      	adds	r0, #1
 800332c:	d0e6      	beq.n	80032fc <_printf_common+0xa4>
 800332e:	3601      	adds	r6, #1
 8003330:	e7d9      	b.n	80032e6 <_printf_common+0x8e>
	...

08003334 <_printf_i>:
 8003334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003338:	7e0f      	ldrb	r7, [r1, #24]
 800333a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800333c:	2f78      	cmp	r7, #120	@ 0x78
 800333e:	4691      	mov	r9, r2
 8003340:	4680      	mov	r8, r0
 8003342:	460c      	mov	r4, r1
 8003344:	469a      	mov	sl, r3
 8003346:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800334a:	d807      	bhi.n	800335c <_printf_i+0x28>
 800334c:	2f62      	cmp	r7, #98	@ 0x62
 800334e:	d80a      	bhi.n	8003366 <_printf_i+0x32>
 8003350:	2f00      	cmp	r7, #0
 8003352:	f000 80d1 	beq.w	80034f8 <_printf_i+0x1c4>
 8003356:	2f58      	cmp	r7, #88	@ 0x58
 8003358:	f000 80b8 	beq.w	80034cc <_printf_i+0x198>
 800335c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003360:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003364:	e03a      	b.n	80033dc <_printf_i+0xa8>
 8003366:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800336a:	2b15      	cmp	r3, #21
 800336c:	d8f6      	bhi.n	800335c <_printf_i+0x28>
 800336e:	a101      	add	r1, pc, #4	@ (adr r1, 8003374 <_printf_i+0x40>)
 8003370:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003374:	080033cd 	.word	0x080033cd
 8003378:	080033e1 	.word	0x080033e1
 800337c:	0800335d 	.word	0x0800335d
 8003380:	0800335d 	.word	0x0800335d
 8003384:	0800335d 	.word	0x0800335d
 8003388:	0800335d 	.word	0x0800335d
 800338c:	080033e1 	.word	0x080033e1
 8003390:	0800335d 	.word	0x0800335d
 8003394:	0800335d 	.word	0x0800335d
 8003398:	0800335d 	.word	0x0800335d
 800339c:	0800335d 	.word	0x0800335d
 80033a0:	080034df 	.word	0x080034df
 80033a4:	0800340b 	.word	0x0800340b
 80033a8:	08003499 	.word	0x08003499
 80033ac:	0800335d 	.word	0x0800335d
 80033b0:	0800335d 	.word	0x0800335d
 80033b4:	08003501 	.word	0x08003501
 80033b8:	0800335d 	.word	0x0800335d
 80033bc:	0800340b 	.word	0x0800340b
 80033c0:	0800335d 	.word	0x0800335d
 80033c4:	0800335d 	.word	0x0800335d
 80033c8:	080034a1 	.word	0x080034a1
 80033cc:	6833      	ldr	r3, [r6, #0]
 80033ce:	1d1a      	adds	r2, r3, #4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6032      	str	r2, [r6, #0]
 80033d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80033d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80033dc:	2301      	movs	r3, #1
 80033de:	e09c      	b.n	800351a <_printf_i+0x1e6>
 80033e0:	6833      	ldr	r3, [r6, #0]
 80033e2:	6820      	ldr	r0, [r4, #0]
 80033e4:	1d19      	adds	r1, r3, #4
 80033e6:	6031      	str	r1, [r6, #0]
 80033e8:	0606      	lsls	r6, r0, #24
 80033ea:	d501      	bpl.n	80033f0 <_printf_i+0xbc>
 80033ec:	681d      	ldr	r5, [r3, #0]
 80033ee:	e003      	b.n	80033f8 <_printf_i+0xc4>
 80033f0:	0645      	lsls	r5, r0, #25
 80033f2:	d5fb      	bpl.n	80033ec <_printf_i+0xb8>
 80033f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80033f8:	2d00      	cmp	r5, #0
 80033fa:	da03      	bge.n	8003404 <_printf_i+0xd0>
 80033fc:	232d      	movs	r3, #45	@ 0x2d
 80033fe:	426d      	negs	r5, r5
 8003400:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003404:	4858      	ldr	r0, [pc, #352]	@ (8003568 <_printf_i+0x234>)
 8003406:	230a      	movs	r3, #10
 8003408:	e011      	b.n	800342e <_printf_i+0xfa>
 800340a:	6821      	ldr	r1, [r4, #0]
 800340c:	6833      	ldr	r3, [r6, #0]
 800340e:	0608      	lsls	r0, r1, #24
 8003410:	f853 5b04 	ldr.w	r5, [r3], #4
 8003414:	d402      	bmi.n	800341c <_printf_i+0xe8>
 8003416:	0649      	lsls	r1, r1, #25
 8003418:	bf48      	it	mi
 800341a:	b2ad      	uxthmi	r5, r5
 800341c:	2f6f      	cmp	r7, #111	@ 0x6f
 800341e:	4852      	ldr	r0, [pc, #328]	@ (8003568 <_printf_i+0x234>)
 8003420:	6033      	str	r3, [r6, #0]
 8003422:	bf14      	ite	ne
 8003424:	230a      	movne	r3, #10
 8003426:	2308      	moveq	r3, #8
 8003428:	2100      	movs	r1, #0
 800342a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800342e:	6866      	ldr	r6, [r4, #4]
 8003430:	60a6      	str	r6, [r4, #8]
 8003432:	2e00      	cmp	r6, #0
 8003434:	db05      	blt.n	8003442 <_printf_i+0x10e>
 8003436:	6821      	ldr	r1, [r4, #0]
 8003438:	432e      	orrs	r6, r5
 800343a:	f021 0104 	bic.w	r1, r1, #4
 800343e:	6021      	str	r1, [r4, #0]
 8003440:	d04b      	beq.n	80034da <_printf_i+0x1a6>
 8003442:	4616      	mov	r6, r2
 8003444:	fbb5 f1f3 	udiv	r1, r5, r3
 8003448:	fb03 5711 	mls	r7, r3, r1, r5
 800344c:	5dc7      	ldrb	r7, [r0, r7]
 800344e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003452:	462f      	mov	r7, r5
 8003454:	42bb      	cmp	r3, r7
 8003456:	460d      	mov	r5, r1
 8003458:	d9f4      	bls.n	8003444 <_printf_i+0x110>
 800345a:	2b08      	cmp	r3, #8
 800345c:	d10b      	bne.n	8003476 <_printf_i+0x142>
 800345e:	6823      	ldr	r3, [r4, #0]
 8003460:	07df      	lsls	r7, r3, #31
 8003462:	d508      	bpl.n	8003476 <_printf_i+0x142>
 8003464:	6923      	ldr	r3, [r4, #16]
 8003466:	6861      	ldr	r1, [r4, #4]
 8003468:	4299      	cmp	r1, r3
 800346a:	bfde      	ittt	le
 800346c:	2330      	movle	r3, #48	@ 0x30
 800346e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003472:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003476:	1b92      	subs	r2, r2, r6
 8003478:	6122      	str	r2, [r4, #16]
 800347a:	f8cd a000 	str.w	sl, [sp]
 800347e:	464b      	mov	r3, r9
 8003480:	aa03      	add	r2, sp, #12
 8003482:	4621      	mov	r1, r4
 8003484:	4640      	mov	r0, r8
 8003486:	f7ff fee7 	bl	8003258 <_printf_common>
 800348a:	3001      	adds	r0, #1
 800348c:	d14a      	bne.n	8003524 <_printf_i+0x1f0>
 800348e:	f04f 30ff 	mov.w	r0, #4294967295
 8003492:	b004      	add	sp, #16
 8003494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003498:	6823      	ldr	r3, [r4, #0]
 800349a:	f043 0320 	orr.w	r3, r3, #32
 800349e:	6023      	str	r3, [r4, #0]
 80034a0:	4832      	ldr	r0, [pc, #200]	@ (800356c <_printf_i+0x238>)
 80034a2:	2778      	movs	r7, #120	@ 0x78
 80034a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80034a8:	6823      	ldr	r3, [r4, #0]
 80034aa:	6831      	ldr	r1, [r6, #0]
 80034ac:	061f      	lsls	r7, r3, #24
 80034ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80034b2:	d402      	bmi.n	80034ba <_printf_i+0x186>
 80034b4:	065f      	lsls	r7, r3, #25
 80034b6:	bf48      	it	mi
 80034b8:	b2ad      	uxthmi	r5, r5
 80034ba:	6031      	str	r1, [r6, #0]
 80034bc:	07d9      	lsls	r1, r3, #31
 80034be:	bf44      	itt	mi
 80034c0:	f043 0320 	orrmi.w	r3, r3, #32
 80034c4:	6023      	strmi	r3, [r4, #0]
 80034c6:	b11d      	cbz	r5, 80034d0 <_printf_i+0x19c>
 80034c8:	2310      	movs	r3, #16
 80034ca:	e7ad      	b.n	8003428 <_printf_i+0xf4>
 80034cc:	4826      	ldr	r0, [pc, #152]	@ (8003568 <_printf_i+0x234>)
 80034ce:	e7e9      	b.n	80034a4 <_printf_i+0x170>
 80034d0:	6823      	ldr	r3, [r4, #0]
 80034d2:	f023 0320 	bic.w	r3, r3, #32
 80034d6:	6023      	str	r3, [r4, #0]
 80034d8:	e7f6      	b.n	80034c8 <_printf_i+0x194>
 80034da:	4616      	mov	r6, r2
 80034dc:	e7bd      	b.n	800345a <_printf_i+0x126>
 80034de:	6833      	ldr	r3, [r6, #0]
 80034e0:	6825      	ldr	r5, [r4, #0]
 80034e2:	6961      	ldr	r1, [r4, #20]
 80034e4:	1d18      	adds	r0, r3, #4
 80034e6:	6030      	str	r0, [r6, #0]
 80034e8:	062e      	lsls	r6, r5, #24
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	d501      	bpl.n	80034f2 <_printf_i+0x1be>
 80034ee:	6019      	str	r1, [r3, #0]
 80034f0:	e002      	b.n	80034f8 <_printf_i+0x1c4>
 80034f2:	0668      	lsls	r0, r5, #25
 80034f4:	d5fb      	bpl.n	80034ee <_printf_i+0x1ba>
 80034f6:	8019      	strh	r1, [r3, #0]
 80034f8:	2300      	movs	r3, #0
 80034fa:	6123      	str	r3, [r4, #16]
 80034fc:	4616      	mov	r6, r2
 80034fe:	e7bc      	b.n	800347a <_printf_i+0x146>
 8003500:	6833      	ldr	r3, [r6, #0]
 8003502:	1d1a      	adds	r2, r3, #4
 8003504:	6032      	str	r2, [r6, #0]
 8003506:	681e      	ldr	r6, [r3, #0]
 8003508:	6862      	ldr	r2, [r4, #4]
 800350a:	2100      	movs	r1, #0
 800350c:	4630      	mov	r0, r6
 800350e:	f7fc fe5f 	bl	80001d0 <memchr>
 8003512:	b108      	cbz	r0, 8003518 <_printf_i+0x1e4>
 8003514:	1b80      	subs	r0, r0, r6
 8003516:	6060      	str	r0, [r4, #4]
 8003518:	6863      	ldr	r3, [r4, #4]
 800351a:	6123      	str	r3, [r4, #16]
 800351c:	2300      	movs	r3, #0
 800351e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003522:	e7aa      	b.n	800347a <_printf_i+0x146>
 8003524:	6923      	ldr	r3, [r4, #16]
 8003526:	4632      	mov	r2, r6
 8003528:	4649      	mov	r1, r9
 800352a:	4640      	mov	r0, r8
 800352c:	47d0      	blx	sl
 800352e:	3001      	adds	r0, #1
 8003530:	d0ad      	beq.n	800348e <_printf_i+0x15a>
 8003532:	6823      	ldr	r3, [r4, #0]
 8003534:	079b      	lsls	r3, r3, #30
 8003536:	d413      	bmi.n	8003560 <_printf_i+0x22c>
 8003538:	68e0      	ldr	r0, [r4, #12]
 800353a:	9b03      	ldr	r3, [sp, #12]
 800353c:	4298      	cmp	r0, r3
 800353e:	bfb8      	it	lt
 8003540:	4618      	movlt	r0, r3
 8003542:	e7a6      	b.n	8003492 <_printf_i+0x15e>
 8003544:	2301      	movs	r3, #1
 8003546:	4632      	mov	r2, r6
 8003548:	4649      	mov	r1, r9
 800354a:	4640      	mov	r0, r8
 800354c:	47d0      	blx	sl
 800354e:	3001      	adds	r0, #1
 8003550:	d09d      	beq.n	800348e <_printf_i+0x15a>
 8003552:	3501      	adds	r5, #1
 8003554:	68e3      	ldr	r3, [r4, #12]
 8003556:	9903      	ldr	r1, [sp, #12]
 8003558:	1a5b      	subs	r3, r3, r1
 800355a:	42ab      	cmp	r3, r5
 800355c:	dcf2      	bgt.n	8003544 <_printf_i+0x210>
 800355e:	e7eb      	b.n	8003538 <_printf_i+0x204>
 8003560:	2500      	movs	r5, #0
 8003562:	f104 0619 	add.w	r6, r4, #25
 8003566:	e7f5      	b.n	8003554 <_printf_i+0x220>
 8003568:	080074d2 	.word	0x080074d2
 800356c:	080074e3 	.word	0x080074e3

08003570 <_scanf_float>:
 8003570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003574:	b087      	sub	sp, #28
 8003576:	4691      	mov	r9, r2
 8003578:	9303      	str	r3, [sp, #12]
 800357a:	688b      	ldr	r3, [r1, #8]
 800357c:	1e5a      	subs	r2, r3, #1
 800357e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8003582:	bf81      	itttt	hi
 8003584:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8003588:	eb03 0b05 	addhi.w	fp, r3, r5
 800358c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8003590:	608b      	strhi	r3, [r1, #8]
 8003592:	680b      	ldr	r3, [r1, #0]
 8003594:	460a      	mov	r2, r1
 8003596:	f04f 0500 	mov.w	r5, #0
 800359a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800359e:	f842 3b1c 	str.w	r3, [r2], #28
 80035a2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80035a6:	4680      	mov	r8, r0
 80035a8:	460c      	mov	r4, r1
 80035aa:	bf98      	it	ls
 80035ac:	f04f 0b00 	movls.w	fp, #0
 80035b0:	9201      	str	r2, [sp, #4]
 80035b2:	4616      	mov	r6, r2
 80035b4:	46aa      	mov	sl, r5
 80035b6:	462f      	mov	r7, r5
 80035b8:	9502      	str	r5, [sp, #8]
 80035ba:	68a2      	ldr	r2, [r4, #8]
 80035bc:	b15a      	cbz	r2, 80035d6 <_scanf_float+0x66>
 80035be:	f8d9 3000 	ldr.w	r3, [r9]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b4e      	cmp	r3, #78	@ 0x4e
 80035c6:	d863      	bhi.n	8003690 <_scanf_float+0x120>
 80035c8:	2b40      	cmp	r3, #64	@ 0x40
 80035ca:	d83b      	bhi.n	8003644 <_scanf_float+0xd4>
 80035cc:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80035d0:	b2c8      	uxtb	r0, r1
 80035d2:	280e      	cmp	r0, #14
 80035d4:	d939      	bls.n	800364a <_scanf_float+0xda>
 80035d6:	b11f      	cbz	r7, 80035e0 <_scanf_float+0x70>
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035de:	6023      	str	r3, [r4, #0]
 80035e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80035e4:	f1ba 0f01 	cmp.w	sl, #1
 80035e8:	f200 8114 	bhi.w	8003814 <_scanf_float+0x2a4>
 80035ec:	9b01      	ldr	r3, [sp, #4]
 80035ee:	429e      	cmp	r6, r3
 80035f0:	f200 8105 	bhi.w	80037fe <_scanf_float+0x28e>
 80035f4:	2001      	movs	r0, #1
 80035f6:	b007      	add	sp, #28
 80035f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035fc:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8003600:	2a0d      	cmp	r2, #13
 8003602:	d8e8      	bhi.n	80035d6 <_scanf_float+0x66>
 8003604:	a101      	add	r1, pc, #4	@ (adr r1, 800360c <_scanf_float+0x9c>)
 8003606:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800360a:	bf00      	nop
 800360c:	08003755 	.word	0x08003755
 8003610:	080035d7 	.word	0x080035d7
 8003614:	080035d7 	.word	0x080035d7
 8003618:	080035d7 	.word	0x080035d7
 800361c:	080037b1 	.word	0x080037b1
 8003620:	0800378b 	.word	0x0800378b
 8003624:	080035d7 	.word	0x080035d7
 8003628:	080035d7 	.word	0x080035d7
 800362c:	08003763 	.word	0x08003763
 8003630:	080035d7 	.word	0x080035d7
 8003634:	080035d7 	.word	0x080035d7
 8003638:	080035d7 	.word	0x080035d7
 800363c:	080035d7 	.word	0x080035d7
 8003640:	0800371f 	.word	0x0800371f
 8003644:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8003648:	e7da      	b.n	8003600 <_scanf_float+0x90>
 800364a:	290e      	cmp	r1, #14
 800364c:	d8c3      	bhi.n	80035d6 <_scanf_float+0x66>
 800364e:	a001      	add	r0, pc, #4	@ (adr r0, 8003654 <_scanf_float+0xe4>)
 8003650:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003654:	0800370f 	.word	0x0800370f
 8003658:	080035d7 	.word	0x080035d7
 800365c:	0800370f 	.word	0x0800370f
 8003660:	0800379f 	.word	0x0800379f
 8003664:	080035d7 	.word	0x080035d7
 8003668:	080036b1 	.word	0x080036b1
 800366c:	080036f5 	.word	0x080036f5
 8003670:	080036f5 	.word	0x080036f5
 8003674:	080036f5 	.word	0x080036f5
 8003678:	080036f5 	.word	0x080036f5
 800367c:	080036f5 	.word	0x080036f5
 8003680:	080036f5 	.word	0x080036f5
 8003684:	080036f5 	.word	0x080036f5
 8003688:	080036f5 	.word	0x080036f5
 800368c:	080036f5 	.word	0x080036f5
 8003690:	2b6e      	cmp	r3, #110	@ 0x6e
 8003692:	d809      	bhi.n	80036a8 <_scanf_float+0x138>
 8003694:	2b60      	cmp	r3, #96	@ 0x60
 8003696:	d8b1      	bhi.n	80035fc <_scanf_float+0x8c>
 8003698:	2b54      	cmp	r3, #84	@ 0x54
 800369a:	d07b      	beq.n	8003794 <_scanf_float+0x224>
 800369c:	2b59      	cmp	r3, #89	@ 0x59
 800369e:	d19a      	bne.n	80035d6 <_scanf_float+0x66>
 80036a0:	2d07      	cmp	r5, #7
 80036a2:	d198      	bne.n	80035d6 <_scanf_float+0x66>
 80036a4:	2508      	movs	r5, #8
 80036a6:	e02f      	b.n	8003708 <_scanf_float+0x198>
 80036a8:	2b74      	cmp	r3, #116	@ 0x74
 80036aa:	d073      	beq.n	8003794 <_scanf_float+0x224>
 80036ac:	2b79      	cmp	r3, #121	@ 0x79
 80036ae:	e7f6      	b.n	800369e <_scanf_float+0x12e>
 80036b0:	6821      	ldr	r1, [r4, #0]
 80036b2:	05c8      	lsls	r0, r1, #23
 80036b4:	d51e      	bpl.n	80036f4 <_scanf_float+0x184>
 80036b6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80036ba:	6021      	str	r1, [r4, #0]
 80036bc:	3701      	adds	r7, #1
 80036be:	f1bb 0f00 	cmp.w	fp, #0
 80036c2:	d003      	beq.n	80036cc <_scanf_float+0x15c>
 80036c4:	3201      	adds	r2, #1
 80036c6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80036ca:	60a2      	str	r2, [r4, #8]
 80036cc:	68a3      	ldr	r3, [r4, #8]
 80036ce:	3b01      	subs	r3, #1
 80036d0:	60a3      	str	r3, [r4, #8]
 80036d2:	6923      	ldr	r3, [r4, #16]
 80036d4:	3301      	adds	r3, #1
 80036d6:	6123      	str	r3, [r4, #16]
 80036d8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80036dc:	3b01      	subs	r3, #1
 80036de:	2b00      	cmp	r3, #0
 80036e0:	f8c9 3004 	str.w	r3, [r9, #4]
 80036e4:	f340 8082 	ble.w	80037ec <_scanf_float+0x27c>
 80036e8:	f8d9 3000 	ldr.w	r3, [r9]
 80036ec:	3301      	adds	r3, #1
 80036ee:	f8c9 3000 	str.w	r3, [r9]
 80036f2:	e762      	b.n	80035ba <_scanf_float+0x4a>
 80036f4:	eb1a 0105 	adds.w	r1, sl, r5
 80036f8:	f47f af6d 	bne.w	80035d6 <_scanf_float+0x66>
 80036fc:	6822      	ldr	r2, [r4, #0]
 80036fe:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8003702:	6022      	str	r2, [r4, #0]
 8003704:	460d      	mov	r5, r1
 8003706:	468a      	mov	sl, r1
 8003708:	f806 3b01 	strb.w	r3, [r6], #1
 800370c:	e7de      	b.n	80036cc <_scanf_float+0x15c>
 800370e:	6822      	ldr	r2, [r4, #0]
 8003710:	0610      	lsls	r0, r2, #24
 8003712:	f57f af60 	bpl.w	80035d6 <_scanf_float+0x66>
 8003716:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800371a:	6022      	str	r2, [r4, #0]
 800371c:	e7f4      	b.n	8003708 <_scanf_float+0x198>
 800371e:	f1ba 0f00 	cmp.w	sl, #0
 8003722:	d10c      	bne.n	800373e <_scanf_float+0x1ce>
 8003724:	b977      	cbnz	r7, 8003744 <_scanf_float+0x1d4>
 8003726:	6822      	ldr	r2, [r4, #0]
 8003728:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800372c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003730:	d108      	bne.n	8003744 <_scanf_float+0x1d4>
 8003732:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8003736:	6022      	str	r2, [r4, #0]
 8003738:	f04f 0a01 	mov.w	sl, #1
 800373c:	e7e4      	b.n	8003708 <_scanf_float+0x198>
 800373e:	f1ba 0f02 	cmp.w	sl, #2
 8003742:	d050      	beq.n	80037e6 <_scanf_float+0x276>
 8003744:	2d01      	cmp	r5, #1
 8003746:	d002      	beq.n	800374e <_scanf_float+0x1de>
 8003748:	2d04      	cmp	r5, #4
 800374a:	f47f af44 	bne.w	80035d6 <_scanf_float+0x66>
 800374e:	3501      	adds	r5, #1
 8003750:	b2ed      	uxtb	r5, r5
 8003752:	e7d9      	b.n	8003708 <_scanf_float+0x198>
 8003754:	f1ba 0f01 	cmp.w	sl, #1
 8003758:	f47f af3d 	bne.w	80035d6 <_scanf_float+0x66>
 800375c:	f04f 0a02 	mov.w	sl, #2
 8003760:	e7d2      	b.n	8003708 <_scanf_float+0x198>
 8003762:	b975      	cbnz	r5, 8003782 <_scanf_float+0x212>
 8003764:	2f00      	cmp	r7, #0
 8003766:	f47f af37 	bne.w	80035d8 <_scanf_float+0x68>
 800376a:	6822      	ldr	r2, [r4, #0]
 800376c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8003770:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8003774:	f040 8103 	bne.w	800397e <_scanf_float+0x40e>
 8003778:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800377c:	6022      	str	r2, [r4, #0]
 800377e:	2501      	movs	r5, #1
 8003780:	e7c2      	b.n	8003708 <_scanf_float+0x198>
 8003782:	2d03      	cmp	r5, #3
 8003784:	d0e3      	beq.n	800374e <_scanf_float+0x1de>
 8003786:	2d05      	cmp	r5, #5
 8003788:	e7df      	b.n	800374a <_scanf_float+0x1da>
 800378a:	2d02      	cmp	r5, #2
 800378c:	f47f af23 	bne.w	80035d6 <_scanf_float+0x66>
 8003790:	2503      	movs	r5, #3
 8003792:	e7b9      	b.n	8003708 <_scanf_float+0x198>
 8003794:	2d06      	cmp	r5, #6
 8003796:	f47f af1e 	bne.w	80035d6 <_scanf_float+0x66>
 800379a:	2507      	movs	r5, #7
 800379c:	e7b4      	b.n	8003708 <_scanf_float+0x198>
 800379e:	6822      	ldr	r2, [r4, #0]
 80037a0:	0591      	lsls	r1, r2, #22
 80037a2:	f57f af18 	bpl.w	80035d6 <_scanf_float+0x66>
 80037a6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80037aa:	6022      	str	r2, [r4, #0]
 80037ac:	9702      	str	r7, [sp, #8]
 80037ae:	e7ab      	b.n	8003708 <_scanf_float+0x198>
 80037b0:	6822      	ldr	r2, [r4, #0]
 80037b2:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80037b6:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80037ba:	d005      	beq.n	80037c8 <_scanf_float+0x258>
 80037bc:	0550      	lsls	r0, r2, #21
 80037be:	f57f af0a 	bpl.w	80035d6 <_scanf_float+0x66>
 80037c2:	2f00      	cmp	r7, #0
 80037c4:	f000 80db 	beq.w	800397e <_scanf_float+0x40e>
 80037c8:	0591      	lsls	r1, r2, #22
 80037ca:	bf58      	it	pl
 80037cc:	9902      	ldrpl	r1, [sp, #8]
 80037ce:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80037d2:	bf58      	it	pl
 80037d4:	1a79      	subpl	r1, r7, r1
 80037d6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80037da:	bf58      	it	pl
 80037dc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80037e0:	6022      	str	r2, [r4, #0]
 80037e2:	2700      	movs	r7, #0
 80037e4:	e790      	b.n	8003708 <_scanf_float+0x198>
 80037e6:	f04f 0a03 	mov.w	sl, #3
 80037ea:	e78d      	b.n	8003708 <_scanf_float+0x198>
 80037ec:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80037f0:	4649      	mov	r1, r9
 80037f2:	4640      	mov	r0, r8
 80037f4:	4798      	blx	r3
 80037f6:	2800      	cmp	r0, #0
 80037f8:	f43f aedf 	beq.w	80035ba <_scanf_float+0x4a>
 80037fc:	e6eb      	b.n	80035d6 <_scanf_float+0x66>
 80037fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003802:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8003806:	464a      	mov	r2, r9
 8003808:	4640      	mov	r0, r8
 800380a:	4798      	blx	r3
 800380c:	6923      	ldr	r3, [r4, #16]
 800380e:	3b01      	subs	r3, #1
 8003810:	6123      	str	r3, [r4, #16]
 8003812:	e6eb      	b.n	80035ec <_scanf_float+0x7c>
 8003814:	1e6b      	subs	r3, r5, #1
 8003816:	2b06      	cmp	r3, #6
 8003818:	d824      	bhi.n	8003864 <_scanf_float+0x2f4>
 800381a:	2d02      	cmp	r5, #2
 800381c:	d836      	bhi.n	800388c <_scanf_float+0x31c>
 800381e:	9b01      	ldr	r3, [sp, #4]
 8003820:	429e      	cmp	r6, r3
 8003822:	f67f aee7 	bls.w	80035f4 <_scanf_float+0x84>
 8003826:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800382a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800382e:	464a      	mov	r2, r9
 8003830:	4640      	mov	r0, r8
 8003832:	4798      	blx	r3
 8003834:	6923      	ldr	r3, [r4, #16]
 8003836:	3b01      	subs	r3, #1
 8003838:	6123      	str	r3, [r4, #16]
 800383a:	e7f0      	b.n	800381e <_scanf_float+0x2ae>
 800383c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8003840:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8003844:	464a      	mov	r2, r9
 8003846:	4640      	mov	r0, r8
 8003848:	4798      	blx	r3
 800384a:	6923      	ldr	r3, [r4, #16]
 800384c:	3b01      	subs	r3, #1
 800384e:	6123      	str	r3, [r4, #16]
 8003850:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003854:	fa5f fa8a 	uxtb.w	sl, sl
 8003858:	f1ba 0f02 	cmp.w	sl, #2
 800385c:	d1ee      	bne.n	800383c <_scanf_float+0x2cc>
 800385e:	3d03      	subs	r5, #3
 8003860:	b2ed      	uxtb	r5, r5
 8003862:	1b76      	subs	r6, r6, r5
 8003864:	6823      	ldr	r3, [r4, #0]
 8003866:	05da      	lsls	r2, r3, #23
 8003868:	d530      	bpl.n	80038cc <_scanf_float+0x35c>
 800386a:	055b      	lsls	r3, r3, #21
 800386c:	d511      	bpl.n	8003892 <_scanf_float+0x322>
 800386e:	9b01      	ldr	r3, [sp, #4]
 8003870:	429e      	cmp	r6, r3
 8003872:	f67f aebf 	bls.w	80035f4 <_scanf_float+0x84>
 8003876:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800387a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800387e:	464a      	mov	r2, r9
 8003880:	4640      	mov	r0, r8
 8003882:	4798      	blx	r3
 8003884:	6923      	ldr	r3, [r4, #16]
 8003886:	3b01      	subs	r3, #1
 8003888:	6123      	str	r3, [r4, #16]
 800388a:	e7f0      	b.n	800386e <_scanf_float+0x2fe>
 800388c:	46aa      	mov	sl, r5
 800388e:	46b3      	mov	fp, r6
 8003890:	e7de      	b.n	8003850 <_scanf_float+0x2e0>
 8003892:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8003896:	6923      	ldr	r3, [r4, #16]
 8003898:	2965      	cmp	r1, #101	@ 0x65
 800389a:	f103 33ff 	add.w	r3, r3, #4294967295
 800389e:	f106 35ff 	add.w	r5, r6, #4294967295
 80038a2:	6123      	str	r3, [r4, #16]
 80038a4:	d00c      	beq.n	80038c0 <_scanf_float+0x350>
 80038a6:	2945      	cmp	r1, #69	@ 0x45
 80038a8:	d00a      	beq.n	80038c0 <_scanf_float+0x350>
 80038aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80038ae:	464a      	mov	r2, r9
 80038b0:	4640      	mov	r0, r8
 80038b2:	4798      	blx	r3
 80038b4:	6923      	ldr	r3, [r4, #16]
 80038b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	1eb5      	subs	r5, r6, #2
 80038be:	6123      	str	r3, [r4, #16]
 80038c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80038c4:	464a      	mov	r2, r9
 80038c6:	4640      	mov	r0, r8
 80038c8:	4798      	blx	r3
 80038ca:	462e      	mov	r6, r5
 80038cc:	6822      	ldr	r2, [r4, #0]
 80038ce:	f012 0210 	ands.w	r2, r2, #16
 80038d2:	d001      	beq.n	80038d8 <_scanf_float+0x368>
 80038d4:	2000      	movs	r0, #0
 80038d6:	e68e      	b.n	80035f6 <_scanf_float+0x86>
 80038d8:	7032      	strb	r2, [r6, #0]
 80038da:	6823      	ldr	r3, [r4, #0]
 80038dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80038e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038e4:	d125      	bne.n	8003932 <_scanf_float+0x3c2>
 80038e6:	9b02      	ldr	r3, [sp, #8]
 80038e8:	429f      	cmp	r7, r3
 80038ea:	d00a      	beq.n	8003902 <_scanf_float+0x392>
 80038ec:	1bda      	subs	r2, r3, r7
 80038ee:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80038f2:	429e      	cmp	r6, r3
 80038f4:	bf28      	it	cs
 80038f6:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80038fa:	4922      	ldr	r1, [pc, #136]	@ (8003984 <_scanf_float+0x414>)
 80038fc:	4630      	mov	r0, r6
 80038fe:	f000 f977 	bl	8003bf0 <siprintf>
 8003902:	9901      	ldr	r1, [sp, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	4640      	mov	r0, r8
 8003908:	f002 fcf6 	bl	80062f8 <_strtod_r>
 800390c:	9b03      	ldr	r3, [sp, #12]
 800390e:	6821      	ldr	r1, [r4, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f011 0f02 	tst.w	r1, #2
 8003916:	ec57 6b10 	vmov	r6, r7, d0
 800391a:	f103 0204 	add.w	r2, r3, #4
 800391e:	d015      	beq.n	800394c <_scanf_float+0x3dc>
 8003920:	9903      	ldr	r1, [sp, #12]
 8003922:	600a      	str	r2, [r1, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	e9c3 6700 	strd	r6, r7, [r3]
 800392a:	68e3      	ldr	r3, [r4, #12]
 800392c:	3301      	adds	r3, #1
 800392e:	60e3      	str	r3, [r4, #12]
 8003930:	e7d0      	b.n	80038d4 <_scanf_float+0x364>
 8003932:	9b04      	ldr	r3, [sp, #16]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d0e4      	beq.n	8003902 <_scanf_float+0x392>
 8003938:	9905      	ldr	r1, [sp, #20]
 800393a:	230a      	movs	r3, #10
 800393c:	3101      	adds	r1, #1
 800393e:	4640      	mov	r0, r8
 8003940:	f002 fd5a 	bl	80063f8 <_strtol_r>
 8003944:	9b04      	ldr	r3, [sp, #16]
 8003946:	9e05      	ldr	r6, [sp, #20]
 8003948:	1ac2      	subs	r2, r0, r3
 800394a:	e7d0      	b.n	80038ee <_scanf_float+0x37e>
 800394c:	f011 0f04 	tst.w	r1, #4
 8003950:	9903      	ldr	r1, [sp, #12]
 8003952:	600a      	str	r2, [r1, #0]
 8003954:	d1e6      	bne.n	8003924 <_scanf_float+0x3b4>
 8003956:	681d      	ldr	r5, [r3, #0]
 8003958:	4632      	mov	r2, r6
 800395a:	463b      	mov	r3, r7
 800395c:	4630      	mov	r0, r6
 800395e:	4639      	mov	r1, r7
 8003960:	f7fd f8e4 	bl	8000b2c <__aeabi_dcmpun>
 8003964:	b128      	cbz	r0, 8003972 <_scanf_float+0x402>
 8003966:	4808      	ldr	r0, [pc, #32]	@ (8003988 <_scanf_float+0x418>)
 8003968:	f000 fabc 	bl	8003ee4 <nanf>
 800396c:	ed85 0a00 	vstr	s0, [r5]
 8003970:	e7db      	b.n	800392a <_scanf_float+0x3ba>
 8003972:	4630      	mov	r0, r6
 8003974:	4639      	mov	r1, r7
 8003976:	f7fd f937 	bl	8000be8 <__aeabi_d2f>
 800397a:	6028      	str	r0, [r5, #0]
 800397c:	e7d5      	b.n	800392a <_scanf_float+0x3ba>
 800397e:	2700      	movs	r7, #0
 8003980:	e62e      	b.n	80035e0 <_scanf_float+0x70>
 8003982:	bf00      	nop
 8003984:	080074f4 	.word	0x080074f4
 8003988:	08007635 	.word	0x08007635

0800398c <std>:
 800398c:	2300      	movs	r3, #0
 800398e:	b510      	push	{r4, lr}
 8003990:	4604      	mov	r4, r0
 8003992:	e9c0 3300 	strd	r3, r3, [r0]
 8003996:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800399a:	6083      	str	r3, [r0, #8]
 800399c:	8181      	strh	r1, [r0, #12]
 800399e:	6643      	str	r3, [r0, #100]	@ 0x64
 80039a0:	81c2      	strh	r2, [r0, #14]
 80039a2:	6183      	str	r3, [r0, #24]
 80039a4:	4619      	mov	r1, r3
 80039a6:	2208      	movs	r2, #8
 80039a8:	305c      	adds	r0, #92	@ 0x5c
 80039aa:	f000 fa1b 	bl	8003de4 <memset>
 80039ae:	4b0d      	ldr	r3, [pc, #52]	@ (80039e4 <std+0x58>)
 80039b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80039b2:	4b0d      	ldr	r3, [pc, #52]	@ (80039e8 <std+0x5c>)
 80039b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80039b6:	4b0d      	ldr	r3, [pc, #52]	@ (80039ec <std+0x60>)
 80039b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80039ba:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <std+0x64>)
 80039bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80039be:	4b0d      	ldr	r3, [pc, #52]	@ (80039f4 <std+0x68>)
 80039c0:	6224      	str	r4, [r4, #32]
 80039c2:	429c      	cmp	r4, r3
 80039c4:	d006      	beq.n	80039d4 <std+0x48>
 80039c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80039ca:	4294      	cmp	r4, r2
 80039cc:	d002      	beq.n	80039d4 <std+0x48>
 80039ce:	33d0      	adds	r3, #208	@ 0xd0
 80039d0:	429c      	cmp	r4, r3
 80039d2:	d105      	bne.n	80039e0 <std+0x54>
 80039d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80039d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039dc:	f000 ba7e 	b.w	8003edc <__retarget_lock_init_recursive>
 80039e0:	bd10      	pop	{r4, pc}
 80039e2:	bf00      	nop
 80039e4:	08003c35 	.word	0x08003c35
 80039e8:	08003c57 	.word	0x08003c57
 80039ec:	08003c8f 	.word	0x08003c8f
 80039f0:	08003cb3 	.word	0x08003cb3
 80039f4:	20000248 	.word	0x20000248

080039f8 <stdio_exit_handler>:
 80039f8:	4a02      	ldr	r2, [pc, #8]	@ (8003a04 <stdio_exit_handler+0xc>)
 80039fa:	4903      	ldr	r1, [pc, #12]	@ (8003a08 <stdio_exit_handler+0x10>)
 80039fc:	4803      	ldr	r0, [pc, #12]	@ (8003a0c <stdio_exit_handler+0x14>)
 80039fe:	f000 b869 	b.w	8003ad4 <_fwalk_sglue>
 8003a02:	bf00      	nop
 8003a04:	2000000c 	.word	0x2000000c
 8003a08:	08006a39 	.word	0x08006a39
 8003a0c:	2000001c 	.word	0x2000001c

08003a10 <cleanup_stdio>:
 8003a10:	6841      	ldr	r1, [r0, #4]
 8003a12:	4b0c      	ldr	r3, [pc, #48]	@ (8003a44 <cleanup_stdio+0x34>)
 8003a14:	4299      	cmp	r1, r3
 8003a16:	b510      	push	{r4, lr}
 8003a18:	4604      	mov	r4, r0
 8003a1a:	d001      	beq.n	8003a20 <cleanup_stdio+0x10>
 8003a1c:	f003 f80c 	bl	8006a38 <_fflush_r>
 8003a20:	68a1      	ldr	r1, [r4, #8]
 8003a22:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <cleanup_stdio+0x38>)
 8003a24:	4299      	cmp	r1, r3
 8003a26:	d002      	beq.n	8003a2e <cleanup_stdio+0x1e>
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f003 f805 	bl	8006a38 <_fflush_r>
 8003a2e:	68e1      	ldr	r1, [r4, #12]
 8003a30:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <cleanup_stdio+0x3c>)
 8003a32:	4299      	cmp	r1, r3
 8003a34:	d004      	beq.n	8003a40 <cleanup_stdio+0x30>
 8003a36:	4620      	mov	r0, r4
 8003a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a3c:	f002 bffc 	b.w	8006a38 <_fflush_r>
 8003a40:	bd10      	pop	{r4, pc}
 8003a42:	bf00      	nop
 8003a44:	20000248 	.word	0x20000248
 8003a48:	200002b0 	.word	0x200002b0
 8003a4c:	20000318 	.word	0x20000318

08003a50 <global_stdio_init.part.0>:
 8003a50:	b510      	push	{r4, lr}
 8003a52:	4b0b      	ldr	r3, [pc, #44]	@ (8003a80 <global_stdio_init.part.0+0x30>)
 8003a54:	4c0b      	ldr	r4, [pc, #44]	@ (8003a84 <global_stdio_init.part.0+0x34>)
 8003a56:	4a0c      	ldr	r2, [pc, #48]	@ (8003a88 <global_stdio_init.part.0+0x38>)
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	2104      	movs	r1, #4
 8003a60:	f7ff ff94 	bl	800398c <std>
 8003a64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003a68:	2201      	movs	r2, #1
 8003a6a:	2109      	movs	r1, #9
 8003a6c:	f7ff ff8e 	bl	800398c <std>
 8003a70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003a74:	2202      	movs	r2, #2
 8003a76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a7a:	2112      	movs	r1, #18
 8003a7c:	f7ff bf86 	b.w	800398c <std>
 8003a80:	20000380 	.word	0x20000380
 8003a84:	20000248 	.word	0x20000248
 8003a88:	080039f9 	.word	0x080039f9

08003a8c <__sfp_lock_acquire>:
 8003a8c:	4801      	ldr	r0, [pc, #4]	@ (8003a94 <__sfp_lock_acquire+0x8>)
 8003a8e:	f000 ba26 	b.w	8003ede <__retarget_lock_acquire_recursive>
 8003a92:	bf00      	nop
 8003a94:	20000389 	.word	0x20000389

08003a98 <__sfp_lock_release>:
 8003a98:	4801      	ldr	r0, [pc, #4]	@ (8003aa0 <__sfp_lock_release+0x8>)
 8003a9a:	f000 ba21 	b.w	8003ee0 <__retarget_lock_release_recursive>
 8003a9e:	bf00      	nop
 8003aa0:	20000389 	.word	0x20000389

08003aa4 <__sinit>:
 8003aa4:	b510      	push	{r4, lr}
 8003aa6:	4604      	mov	r4, r0
 8003aa8:	f7ff fff0 	bl	8003a8c <__sfp_lock_acquire>
 8003aac:	6a23      	ldr	r3, [r4, #32]
 8003aae:	b11b      	cbz	r3, 8003ab8 <__sinit+0x14>
 8003ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ab4:	f7ff bff0 	b.w	8003a98 <__sfp_lock_release>
 8003ab8:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <__sinit+0x28>)
 8003aba:	6223      	str	r3, [r4, #32]
 8003abc:	4b04      	ldr	r3, [pc, #16]	@ (8003ad0 <__sinit+0x2c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f5      	bne.n	8003ab0 <__sinit+0xc>
 8003ac4:	f7ff ffc4 	bl	8003a50 <global_stdio_init.part.0>
 8003ac8:	e7f2      	b.n	8003ab0 <__sinit+0xc>
 8003aca:	bf00      	nop
 8003acc:	08003a11 	.word	0x08003a11
 8003ad0:	20000380 	.word	0x20000380

08003ad4 <_fwalk_sglue>:
 8003ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ad8:	4607      	mov	r7, r0
 8003ada:	4688      	mov	r8, r1
 8003adc:	4614      	mov	r4, r2
 8003ade:	2600      	movs	r6, #0
 8003ae0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ae4:	f1b9 0901 	subs.w	r9, r9, #1
 8003ae8:	d505      	bpl.n	8003af6 <_fwalk_sglue+0x22>
 8003aea:	6824      	ldr	r4, [r4, #0]
 8003aec:	2c00      	cmp	r4, #0
 8003aee:	d1f7      	bne.n	8003ae0 <_fwalk_sglue+0xc>
 8003af0:	4630      	mov	r0, r6
 8003af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003af6:	89ab      	ldrh	r3, [r5, #12]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d907      	bls.n	8003b0c <_fwalk_sglue+0x38>
 8003afc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b00:	3301      	adds	r3, #1
 8003b02:	d003      	beq.n	8003b0c <_fwalk_sglue+0x38>
 8003b04:	4629      	mov	r1, r5
 8003b06:	4638      	mov	r0, r7
 8003b08:	47c0      	blx	r8
 8003b0a:	4306      	orrs	r6, r0
 8003b0c:	3568      	adds	r5, #104	@ 0x68
 8003b0e:	e7e9      	b.n	8003ae4 <_fwalk_sglue+0x10>

08003b10 <iprintf>:
 8003b10:	b40f      	push	{r0, r1, r2, r3}
 8003b12:	b507      	push	{r0, r1, r2, lr}
 8003b14:	4906      	ldr	r1, [pc, #24]	@ (8003b30 <iprintf+0x20>)
 8003b16:	ab04      	add	r3, sp, #16
 8003b18:	6808      	ldr	r0, [r1, #0]
 8003b1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b1e:	6881      	ldr	r1, [r0, #8]
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	f002 fded 	bl	8006700 <_vfiprintf_r>
 8003b26:	b003      	add	sp, #12
 8003b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b2c:	b004      	add	sp, #16
 8003b2e:	4770      	bx	lr
 8003b30:	20000018 	.word	0x20000018

08003b34 <_puts_r>:
 8003b34:	6a03      	ldr	r3, [r0, #32]
 8003b36:	b570      	push	{r4, r5, r6, lr}
 8003b38:	6884      	ldr	r4, [r0, #8]
 8003b3a:	4605      	mov	r5, r0
 8003b3c:	460e      	mov	r6, r1
 8003b3e:	b90b      	cbnz	r3, 8003b44 <_puts_r+0x10>
 8003b40:	f7ff ffb0 	bl	8003aa4 <__sinit>
 8003b44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b46:	07db      	lsls	r3, r3, #31
 8003b48:	d405      	bmi.n	8003b56 <_puts_r+0x22>
 8003b4a:	89a3      	ldrh	r3, [r4, #12]
 8003b4c:	0598      	lsls	r0, r3, #22
 8003b4e:	d402      	bmi.n	8003b56 <_puts_r+0x22>
 8003b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b52:	f000 f9c4 	bl	8003ede <__retarget_lock_acquire_recursive>
 8003b56:	89a3      	ldrh	r3, [r4, #12]
 8003b58:	0719      	lsls	r1, r3, #28
 8003b5a:	d502      	bpl.n	8003b62 <_puts_r+0x2e>
 8003b5c:	6923      	ldr	r3, [r4, #16]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d135      	bne.n	8003bce <_puts_r+0x9a>
 8003b62:	4621      	mov	r1, r4
 8003b64:	4628      	mov	r0, r5
 8003b66:	f000 f8e7 	bl	8003d38 <__swsetup_r>
 8003b6a:	b380      	cbz	r0, 8003bce <_puts_r+0x9a>
 8003b6c:	f04f 35ff 	mov.w	r5, #4294967295
 8003b70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003b72:	07da      	lsls	r2, r3, #31
 8003b74:	d405      	bmi.n	8003b82 <_puts_r+0x4e>
 8003b76:	89a3      	ldrh	r3, [r4, #12]
 8003b78:	059b      	lsls	r3, r3, #22
 8003b7a:	d402      	bmi.n	8003b82 <_puts_r+0x4e>
 8003b7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003b7e:	f000 f9af 	bl	8003ee0 <__retarget_lock_release_recursive>
 8003b82:	4628      	mov	r0, r5
 8003b84:	bd70      	pop	{r4, r5, r6, pc}
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	da04      	bge.n	8003b94 <_puts_r+0x60>
 8003b8a:	69a2      	ldr	r2, [r4, #24]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	dc17      	bgt.n	8003bc0 <_puts_r+0x8c>
 8003b90:	290a      	cmp	r1, #10
 8003b92:	d015      	beq.n	8003bc0 <_puts_r+0x8c>
 8003b94:	6823      	ldr	r3, [r4, #0]
 8003b96:	1c5a      	adds	r2, r3, #1
 8003b98:	6022      	str	r2, [r4, #0]
 8003b9a:	7019      	strb	r1, [r3, #0]
 8003b9c:	68a3      	ldr	r3, [r4, #8]
 8003b9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	60a3      	str	r3, [r4, #8]
 8003ba6:	2900      	cmp	r1, #0
 8003ba8:	d1ed      	bne.n	8003b86 <_puts_r+0x52>
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	da11      	bge.n	8003bd2 <_puts_r+0x9e>
 8003bae:	4622      	mov	r2, r4
 8003bb0:	210a      	movs	r1, #10
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	f000 f881 	bl	8003cba <__swbuf_r>
 8003bb8:	3001      	adds	r0, #1
 8003bba:	d0d7      	beq.n	8003b6c <_puts_r+0x38>
 8003bbc:	250a      	movs	r5, #10
 8003bbe:	e7d7      	b.n	8003b70 <_puts_r+0x3c>
 8003bc0:	4622      	mov	r2, r4
 8003bc2:	4628      	mov	r0, r5
 8003bc4:	f000 f879 	bl	8003cba <__swbuf_r>
 8003bc8:	3001      	adds	r0, #1
 8003bca:	d1e7      	bne.n	8003b9c <_puts_r+0x68>
 8003bcc:	e7ce      	b.n	8003b6c <_puts_r+0x38>
 8003bce:	3e01      	subs	r6, #1
 8003bd0:	e7e4      	b.n	8003b9c <_puts_r+0x68>
 8003bd2:	6823      	ldr	r3, [r4, #0]
 8003bd4:	1c5a      	adds	r2, r3, #1
 8003bd6:	6022      	str	r2, [r4, #0]
 8003bd8:	220a      	movs	r2, #10
 8003bda:	701a      	strb	r2, [r3, #0]
 8003bdc:	e7ee      	b.n	8003bbc <_puts_r+0x88>
	...

08003be0 <puts>:
 8003be0:	4b02      	ldr	r3, [pc, #8]	@ (8003bec <puts+0xc>)
 8003be2:	4601      	mov	r1, r0
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	f7ff bfa5 	b.w	8003b34 <_puts_r>
 8003bea:	bf00      	nop
 8003bec:	20000018 	.word	0x20000018

08003bf0 <siprintf>:
 8003bf0:	b40e      	push	{r1, r2, r3}
 8003bf2:	b510      	push	{r4, lr}
 8003bf4:	b09d      	sub	sp, #116	@ 0x74
 8003bf6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003bf8:	9002      	str	r0, [sp, #8]
 8003bfa:	9006      	str	r0, [sp, #24]
 8003bfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c00:	480a      	ldr	r0, [pc, #40]	@ (8003c2c <siprintf+0x3c>)
 8003c02:	9107      	str	r1, [sp, #28]
 8003c04:	9104      	str	r1, [sp, #16]
 8003c06:	490a      	ldr	r1, [pc, #40]	@ (8003c30 <siprintf+0x40>)
 8003c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c0c:	9105      	str	r1, [sp, #20]
 8003c0e:	2400      	movs	r4, #0
 8003c10:	a902      	add	r1, sp, #8
 8003c12:	6800      	ldr	r0, [r0, #0]
 8003c14:	9301      	str	r3, [sp, #4]
 8003c16:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003c18:	f002 fc4c 	bl	80064b4 <_svfiprintf_r>
 8003c1c:	9b02      	ldr	r3, [sp, #8]
 8003c1e:	701c      	strb	r4, [r3, #0]
 8003c20:	b01d      	add	sp, #116	@ 0x74
 8003c22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c26:	b003      	add	sp, #12
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000018 	.word	0x20000018
 8003c30:	ffff0208 	.word	0xffff0208

08003c34 <__sread>:
 8003c34:	b510      	push	{r4, lr}
 8003c36:	460c      	mov	r4, r1
 8003c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c3c:	f000 f900 	bl	8003e40 <_read_r>
 8003c40:	2800      	cmp	r0, #0
 8003c42:	bfab      	itete	ge
 8003c44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003c46:	89a3      	ldrhlt	r3, [r4, #12]
 8003c48:	181b      	addge	r3, r3, r0
 8003c4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003c4e:	bfac      	ite	ge
 8003c50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003c52:	81a3      	strhlt	r3, [r4, #12]
 8003c54:	bd10      	pop	{r4, pc}

08003c56 <__swrite>:
 8003c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c5a:	461f      	mov	r7, r3
 8003c5c:	898b      	ldrh	r3, [r1, #12]
 8003c5e:	05db      	lsls	r3, r3, #23
 8003c60:	4605      	mov	r5, r0
 8003c62:	460c      	mov	r4, r1
 8003c64:	4616      	mov	r6, r2
 8003c66:	d505      	bpl.n	8003c74 <__swrite+0x1e>
 8003c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f000 f8d4 	bl	8003e1c <_lseek_r>
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c7e:	81a3      	strh	r3, [r4, #12]
 8003c80:	4632      	mov	r2, r6
 8003c82:	463b      	mov	r3, r7
 8003c84:	4628      	mov	r0, r5
 8003c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c8a:	f000 b8eb 	b.w	8003e64 <_write_r>

08003c8e <__sseek>:
 8003c8e:	b510      	push	{r4, lr}
 8003c90:	460c      	mov	r4, r1
 8003c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c96:	f000 f8c1 	bl	8003e1c <_lseek_r>
 8003c9a:	1c43      	adds	r3, r0, #1
 8003c9c:	89a3      	ldrh	r3, [r4, #12]
 8003c9e:	bf15      	itete	ne
 8003ca0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003ca2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003ca6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003caa:	81a3      	strheq	r3, [r4, #12]
 8003cac:	bf18      	it	ne
 8003cae:	81a3      	strhne	r3, [r4, #12]
 8003cb0:	bd10      	pop	{r4, pc}

08003cb2 <__sclose>:
 8003cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cb6:	f000 b8a1 	b.w	8003dfc <_close_r>

08003cba <__swbuf_r>:
 8003cba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cbc:	460e      	mov	r6, r1
 8003cbe:	4614      	mov	r4, r2
 8003cc0:	4605      	mov	r5, r0
 8003cc2:	b118      	cbz	r0, 8003ccc <__swbuf_r+0x12>
 8003cc4:	6a03      	ldr	r3, [r0, #32]
 8003cc6:	b90b      	cbnz	r3, 8003ccc <__swbuf_r+0x12>
 8003cc8:	f7ff feec 	bl	8003aa4 <__sinit>
 8003ccc:	69a3      	ldr	r3, [r4, #24]
 8003cce:	60a3      	str	r3, [r4, #8]
 8003cd0:	89a3      	ldrh	r3, [r4, #12]
 8003cd2:	071a      	lsls	r2, r3, #28
 8003cd4:	d501      	bpl.n	8003cda <__swbuf_r+0x20>
 8003cd6:	6923      	ldr	r3, [r4, #16]
 8003cd8:	b943      	cbnz	r3, 8003cec <__swbuf_r+0x32>
 8003cda:	4621      	mov	r1, r4
 8003cdc:	4628      	mov	r0, r5
 8003cde:	f000 f82b 	bl	8003d38 <__swsetup_r>
 8003ce2:	b118      	cbz	r0, 8003cec <__swbuf_r+0x32>
 8003ce4:	f04f 37ff 	mov.w	r7, #4294967295
 8003ce8:	4638      	mov	r0, r7
 8003cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cec:	6823      	ldr	r3, [r4, #0]
 8003cee:	6922      	ldr	r2, [r4, #16]
 8003cf0:	1a98      	subs	r0, r3, r2
 8003cf2:	6963      	ldr	r3, [r4, #20]
 8003cf4:	b2f6      	uxtb	r6, r6
 8003cf6:	4283      	cmp	r3, r0
 8003cf8:	4637      	mov	r7, r6
 8003cfa:	dc05      	bgt.n	8003d08 <__swbuf_r+0x4e>
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	4628      	mov	r0, r5
 8003d00:	f002 fe9a 	bl	8006a38 <_fflush_r>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	d1ed      	bne.n	8003ce4 <__swbuf_r+0x2a>
 8003d08:	68a3      	ldr	r3, [r4, #8]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	60a3      	str	r3, [r4, #8]
 8003d0e:	6823      	ldr	r3, [r4, #0]
 8003d10:	1c5a      	adds	r2, r3, #1
 8003d12:	6022      	str	r2, [r4, #0]
 8003d14:	701e      	strb	r6, [r3, #0]
 8003d16:	6962      	ldr	r2, [r4, #20]
 8003d18:	1c43      	adds	r3, r0, #1
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d004      	beq.n	8003d28 <__swbuf_r+0x6e>
 8003d1e:	89a3      	ldrh	r3, [r4, #12]
 8003d20:	07db      	lsls	r3, r3, #31
 8003d22:	d5e1      	bpl.n	8003ce8 <__swbuf_r+0x2e>
 8003d24:	2e0a      	cmp	r6, #10
 8003d26:	d1df      	bne.n	8003ce8 <__swbuf_r+0x2e>
 8003d28:	4621      	mov	r1, r4
 8003d2a:	4628      	mov	r0, r5
 8003d2c:	f002 fe84 	bl	8006a38 <_fflush_r>
 8003d30:	2800      	cmp	r0, #0
 8003d32:	d0d9      	beq.n	8003ce8 <__swbuf_r+0x2e>
 8003d34:	e7d6      	b.n	8003ce4 <__swbuf_r+0x2a>
	...

08003d38 <__swsetup_r>:
 8003d38:	b538      	push	{r3, r4, r5, lr}
 8003d3a:	4b29      	ldr	r3, [pc, #164]	@ (8003de0 <__swsetup_r+0xa8>)
 8003d3c:	4605      	mov	r5, r0
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	460c      	mov	r4, r1
 8003d42:	b118      	cbz	r0, 8003d4c <__swsetup_r+0x14>
 8003d44:	6a03      	ldr	r3, [r0, #32]
 8003d46:	b90b      	cbnz	r3, 8003d4c <__swsetup_r+0x14>
 8003d48:	f7ff feac 	bl	8003aa4 <__sinit>
 8003d4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d50:	0719      	lsls	r1, r3, #28
 8003d52:	d422      	bmi.n	8003d9a <__swsetup_r+0x62>
 8003d54:	06da      	lsls	r2, r3, #27
 8003d56:	d407      	bmi.n	8003d68 <__swsetup_r+0x30>
 8003d58:	2209      	movs	r2, #9
 8003d5a:	602a      	str	r2, [r5, #0]
 8003d5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d60:	81a3      	strh	r3, [r4, #12]
 8003d62:	f04f 30ff 	mov.w	r0, #4294967295
 8003d66:	e033      	b.n	8003dd0 <__swsetup_r+0x98>
 8003d68:	0758      	lsls	r0, r3, #29
 8003d6a:	d512      	bpl.n	8003d92 <__swsetup_r+0x5a>
 8003d6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d6e:	b141      	cbz	r1, 8003d82 <__swsetup_r+0x4a>
 8003d70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d74:	4299      	cmp	r1, r3
 8003d76:	d002      	beq.n	8003d7e <__swsetup_r+0x46>
 8003d78:	4628      	mov	r0, r5
 8003d7a:	f000 ff11 	bl	8004ba0 <_free_r>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d82:	89a3      	ldrh	r3, [r4, #12]
 8003d84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003d88:	81a3      	strh	r3, [r4, #12]
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	6063      	str	r3, [r4, #4]
 8003d8e:	6923      	ldr	r3, [r4, #16]
 8003d90:	6023      	str	r3, [r4, #0]
 8003d92:	89a3      	ldrh	r3, [r4, #12]
 8003d94:	f043 0308 	orr.w	r3, r3, #8
 8003d98:	81a3      	strh	r3, [r4, #12]
 8003d9a:	6923      	ldr	r3, [r4, #16]
 8003d9c:	b94b      	cbnz	r3, 8003db2 <__swsetup_r+0x7a>
 8003d9e:	89a3      	ldrh	r3, [r4, #12]
 8003da0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003da4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003da8:	d003      	beq.n	8003db2 <__swsetup_r+0x7a>
 8003daa:	4621      	mov	r1, r4
 8003dac:	4628      	mov	r0, r5
 8003dae:	f002 fe91 	bl	8006ad4 <__smakebuf_r>
 8003db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003db6:	f013 0201 	ands.w	r2, r3, #1
 8003dba:	d00a      	beq.n	8003dd2 <__swsetup_r+0x9a>
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	60a2      	str	r2, [r4, #8]
 8003dc0:	6962      	ldr	r2, [r4, #20]
 8003dc2:	4252      	negs	r2, r2
 8003dc4:	61a2      	str	r2, [r4, #24]
 8003dc6:	6922      	ldr	r2, [r4, #16]
 8003dc8:	b942      	cbnz	r2, 8003ddc <__swsetup_r+0xa4>
 8003dca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003dce:	d1c5      	bne.n	8003d5c <__swsetup_r+0x24>
 8003dd0:	bd38      	pop	{r3, r4, r5, pc}
 8003dd2:	0799      	lsls	r1, r3, #30
 8003dd4:	bf58      	it	pl
 8003dd6:	6962      	ldrpl	r2, [r4, #20]
 8003dd8:	60a2      	str	r2, [r4, #8]
 8003dda:	e7f4      	b.n	8003dc6 <__swsetup_r+0x8e>
 8003ddc:	2000      	movs	r0, #0
 8003dde:	e7f7      	b.n	8003dd0 <__swsetup_r+0x98>
 8003de0:	20000018 	.word	0x20000018

08003de4 <memset>:
 8003de4:	4402      	add	r2, r0
 8003de6:	4603      	mov	r3, r0
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d100      	bne.n	8003dee <memset+0xa>
 8003dec:	4770      	bx	lr
 8003dee:	f803 1b01 	strb.w	r1, [r3], #1
 8003df2:	e7f9      	b.n	8003de8 <memset+0x4>

08003df4 <_localeconv_r>:
 8003df4:	4800      	ldr	r0, [pc, #0]	@ (8003df8 <_localeconv_r+0x4>)
 8003df6:	4770      	bx	lr
 8003df8:	20000158 	.word	0x20000158

08003dfc <_close_r>:
 8003dfc:	b538      	push	{r3, r4, r5, lr}
 8003dfe:	4d06      	ldr	r5, [pc, #24]	@ (8003e18 <_close_r+0x1c>)
 8003e00:	2300      	movs	r3, #0
 8003e02:	4604      	mov	r4, r0
 8003e04:	4608      	mov	r0, r1
 8003e06:	602b      	str	r3, [r5, #0]
 8003e08:	f7fd fa9b 	bl	8001342 <_close>
 8003e0c:	1c43      	adds	r3, r0, #1
 8003e0e:	d102      	bne.n	8003e16 <_close_r+0x1a>
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	b103      	cbz	r3, 8003e16 <_close_r+0x1a>
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	bd38      	pop	{r3, r4, r5, pc}
 8003e18:	20000384 	.word	0x20000384

08003e1c <_lseek_r>:
 8003e1c:	b538      	push	{r3, r4, r5, lr}
 8003e1e:	4d07      	ldr	r5, [pc, #28]	@ (8003e3c <_lseek_r+0x20>)
 8003e20:	4604      	mov	r4, r0
 8003e22:	4608      	mov	r0, r1
 8003e24:	4611      	mov	r1, r2
 8003e26:	2200      	movs	r2, #0
 8003e28:	602a      	str	r2, [r5, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f7fd fab0 	bl	8001390 <_lseek>
 8003e30:	1c43      	adds	r3, r0, #1
 8003e32:	d102      	bne.n	8003e3a <_lseek_r+0x1e>
 8003e34:	682b      	ldr	r3, [r5, #0]
 8003e36:	b103      	cbz	r3, 8003e3a <_lseek_r+0x1e>
 8003e38:	6023      	str	r3, [r4, #0]
 8003e3a:	bd38      	pop	{r3, r4, r5, pc}
 8003e3c:	20000384 	.word	0x20000384

08003e40 <_read_r>:
 8003e40:	b538      	push	{r3, r4, r5, lr}
 8003e42:	4d07      	ldr	r5, [pc, #28]	@ (8003e60 <_read_r+0x20>)
 8003e44:	4604      	mov	r4, r0
 8003e46:	4608      	mov	r0, r1
 8003e48:	4611      	mov	r1, r2
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	602a      	str	r2, [r5, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	f7fd fa3e 	bl	80012d0 <_read>
 8003e54:	1c43      	adds	r3, r0, #1
 8003e56:	d102      	bne.n	8003e5e <_read_r+0x1e>
 8003e58:	682b      	ldr	r3, [r5, #0]
 8003e5a:	b103      	cbz	r3, 8003e5e <_read_r+0x1e>
 8003e5c:	6023      	str	r3, [r4, #0]
 8003e5e:	bd38      	pop	{r3, r4, r5, pc}
 8003e60:	20000384 	.word	0x20000384

08003e64 <_write_r>:
 8003e64:	b538      	push	{r3, r4, r5, lr}
 8003e66:	4d07      	ldr	r5, [pc, #28]	@ (8003e84 <_write_r+0x20>)
 8003e68:	4604      	mov	r4, r0
 8003e6a:	4608      	mov	r0, r1
 8003e6c:	4611      	mov	r1, r2
 8003e6e:	2200      	movs	r2, #0
 8003e70:	602a      	str	r2, [r5, #0]
 8003e72:	461a      	mov	r2, r3
 8003e74:	f7fd fa49 	bl	800130a <_write>
 8003e78:	1c43      	adds	r3, r0, #1
 8003e7a:	d102      	bne.n	8003e82 <_write_r+0x1e>
 8003e7c:	682b      	ldr	r3, [r5, #0]
 8003e7e:	b103      	cbz	r3, 8003e82 <_write_r+0x1e>
 8003e80:	6023      	str	r3, [r4, #0]
 8003e82:	bd38      	pop	{r3, r4, r5, pc}
 8003e84:	20000384 	.word	0x20000384

08003e88 <__errno>:
 8003e88:	4b01      	ldr	r3, [pc, #4]	@ (8003e90 <__errno+0x8>)
 8003e8a:	6818      	ldr	r0, [r3, #0]
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	20000018 	.word	0x20000018

08003e94 <__libc_init_array>:
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	4d0d      	ldr	r5, [pc, #52]	@ (8003ecc <__libc_init_array+0x38>)
 8003e98:	4c0d      	ldr	r4, [pc, #52]	@ (8003ed0 <__libc_init_array+0x3c>)
 8003e9a:	1b64      	subs	r4, r4, r5
 8003e9c:	10a4      	asrs	r4, r4, #2
 8003e9e:	2600      	movs	r6, #0
 8003ea0:	42a6      	cmp	r6, r4
 8003ea2:	d109      	bne.n	8003eb8 <__libc_init_array+0x24>
 8003ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8003ed4 <__libc_init_array+0x40>)
 8003ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8003ed8 <__libc_init_array+0x44>)
 8003ea8:	f003 fae4 	bl	8007474 <_init>
 8003eac:	1b64      	subs	r4, r4, r5
 8003eae:	10a4      	asrs	r4, r4, #2
 8003eb0:	2600      	movs	r6, #0
 8003eb2:	42a6      	cmp	r6, r4
 8003eb4:	d105      	bne.n	8003ec2 <__libc_init_array+0x2e>
 8003eb6:	bd70      	pop	{r4, r5, r6, pc}
 8003eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ebc:	4798      	blx	r3
 8003ebe:	3601      	adds	r6, #1
 8003ec0:	e7ee      	b.n	8003ea0 <__libc_init_array+0xc>
 8003ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ec6:	4798      	blx	r3
 8003ec8:	3601      	adds	r6, #1
 8003eca:	e7f2      	b.n	8003eb2 <__libc_init_array+0x1e>
 8003ecc:	080078f4 	.word	0x080078f4
 8003ed0:	080078f4 	.word	0x080078f4
 8003ed4:	080078f4 	.word	0x080078f4
 8003ed8:	080078f8 	.word	0x080078f8

08003edc <__retarget_lock_init_recursive>:
 8003edc:	4770      	bx	lr

08003ede <__retarget_lock_acquire_recursive>:
 8003ede:	4770      	bx	lr

08003ee0 <__retarget_lock_release_recursive>:
 8003ee0:	4770      	bx	lr
	...

08003ee4 <nanf>:
 8003ee4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003eec <nanf+0x8>
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	7fc00000 	.word	0x7fc00000

08003ef0 <quorem>:
 8003ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef4:	6903      	ldr	r3, [r0, #16]
 8003ef6:	690c      	ldr	r4, [r1, #16]
 8003ef8:	42a3      	cmp	r3, r4
 8003efa:	4607      	mov	r7, r0
 8003efc:	db7e      	blt.n	8003ffc <quorem+0x10c>
 8003efe:	3c01      	subs	r4, #1
 8003f00:	f101 0814 	add.w	r8, r1, #20
 8003f04:	00a3      	lsls	r3, r4, #2
 8003f06:	f100 0514 	add.w	r5, r0, #20
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003f16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003f22:	fbb2 f6f3 	udiv	r6, r2, r3
 8003f26:	d32e      	bcc.n	8003f86 <quorem+0x96>
 8003f28:	f04f 0a00 	mov.w	sl, #0
 8003f2c:	46c4      	mov	ip, r8
 8003f2e:	46ae      	mov	lr, r5
 8003f30:	46d3      	mov	fp, sl
 8003f32:	f85c 3b04 	ldr.w	r3, [ip], #4
 8003f36:	b298      	uxth	r0, r3
 8003f38:	fb06 a000 	mla	r0, r6, r0, sl
 8003f3c:	0c02      	lsrs	r2, r0, #16
 8003f3e:	0c1b      	lsrs	r3, r3, #16
 8003f40:	fb06 2303 	mla	r3, r6, r3, r2
 8003f44:	f8de 2000 	ldr.w	r2, [lr]
 8003f48:	b280      	uxth	r0, r0
 8003f4a:	b292      	uxth	r2, r2
 8003f4c:	1a12      	subs	r2, r2, r0
 8003f4e:	445a      	add	r2, fp
 8003f50:	f8de 0000 	ldr.w	r0, [lr]
 8003f54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8003f5e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8003f62:	b292      	uxth	r2, r2
 8003f64:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003f68:	45e1      	cmp	r9, ip
 8003f6a:	f84e 2b04 	str.w	r2, [lr], #4
 8003f6e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8003f72:	d2de      	bcs.n	8003f32 <quorem+0x42>
 8003f74:	9b00      	ldr	r3, [sp, #0]
 8003f76:	58eb      	ldr	r3, [r5, r3]
 8003f78:	b92b      	cbnz	r3, 8003f86 <quorem+0x96>
 8003f7a:	9b01      	ldr	r3, [sp, #4]
 8003f7c:	3b04      	subs	r3, #4
 8003f7e:	429d      	cmp	r5, r3
 8003f80:	461a      	mov	r2, r3
 8003f82:	d32f      	bcc.n	8003fe4 <quorem+0xf4>
 8003f84:	613c      	str	r4, [r7, #16]
 8003f86:	4638      	mov	r0, r7
 8003f88:	f001 f9c6 	bl	8005318 <__mcmp>
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	db25      	blt.n	8003fdc <quorem+0xec>
 8003f90:	4629      	mov	r1, r5
 8003f92:	2000      	movs	r0, #0
 8003f94:	f858 2b04 	ldr.w	r2, [r8], #4
 8003f98:	f8d1 c000 	ldr.w	ip, [r1]
 8003f9c:	fa1f fe82 	uxth.w	lr, r2
 8003fa0:	fa1f f38c 	uxth.w	r3, ip
 8003fa4:	eba3 030e 	sub.w	r3, r3, lr
 8003fa8:	4403      	add	r3, r0
 8003faa:	0c12      	lsrs	r2, r2, #16
 8003fac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8003fb0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003fba:	45c1      	cmp	r9, r8
 8003fbc:	f841 3b04 	str.w	r3, [r1], #4
 8003fc0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003fc4:	d2e6      	bcs.n	8003f94 <quorem+0xa4>
 8003fc6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003fca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003fce:	b922      	cbnz	r2, 8003fda <quorem+0xea>
 8003fd0:	3b04      	subs	r3, #4
 8003fd2:	429d      	cmp	r5, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	d30b      	bcc.n	8003ff0 <quorem+0x100>
 8003fd8:	613c      	str	r4, [r7, #16]
 8003fda:	3601      	adds	r6, #1
 8003fdc:	4630      	mov	r0, r6
 8003fde:	b003      	add	sp, #12
 8003fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	3b04      	subs	r3, #4
 8003fe8:	2a00      	cmp	r2, #0
 8003fea:	d1cb      	bne.n	8003f84 <quorem+0x94>
 8003fec:	3c01      	subs	r4, #1
 8003fee:	e7c6      	b.n	8003f7e <quorem+0x8e>
 8003ff0:	6812      	ldr	r2, [r2, #0]
 8003ff2:	3b04      	subs	r3, #4
 8003ff4:	2a00      	cmp	r2, #0
 8003ff6:	d1ef      	bne.n	8003fd8 <quorem+0xe8>
 8003ff8:	3c01      	subs	r4, #1
 8003ffa:	e7ea      	b.n	8003fd2 <quorem+0xe2>
 8003ffc:	2000      	movs	r0, #0
 8003ffe:	e7ee      	b.n	8003fde <quorem+0xee>

08004000 <_dtoa_r>:
 8004000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004004:	69c7      	ldr	r7, [r0, #28]
 8004006:	b097      	sub	sp, #92	@ 0x5c
 8004008:	ed8d 0b04 	vstr	d0, [sp, #16]
 800400c:	ec55 4b10 	vmov	r4, r5, d0
 8004010:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004012:	9107      	str	r1, [sp, #28]
 8004014:	4681      	mov	r9, r0
 8004016:	920c      	str	r2, [sp, #48]	@ 0x30
 8004018:	9311      	str	r3, [sp, #68]	@ 0x44
 800401a:	b97f      	cbnz	r7, 800403c <_dtoa_r+0x3c>
 800401c:	2010      	movs	r0, #16
 800401e:	f000 fe09 	bl	8004c34 <malloc>
 8004022:	4602      	mov	r2, r0
 8004024:	f8c9 001c 	str.w	r0, [r9, #28]
 8004028:	b920      	cbnz	r0, 8004034 <_dtoa_r+0x34>
 800402a:	4ba9      	ldr	r3, [pc, #676]	@ (80042d0 <_dtoa_r+0x2d0>)
 800402c:	21ef      	movs	r1, #239	@ 0xef
 800402e:	48a9      	ldr	r0, [pc, #676]	@ (80042d4 <_dtoa_r+0x2d4>)
 8004030:	f002 fe02 	bl	8006c38 <__assert_func>
 8004034:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004038:	6007      	str	r7, [r0, #0]
 800403a:	60c7      	str	r7, [r0, #12]
 800403c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004040:	6819      	ldr	r1, [r3, #0]
 8004042:	b159      	cbz	r1, 800405c <_dtoa_r+0x5c>
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	604a      	str	r2, [r1, #4]
 8004048:	2301      	movs	r3, #1
 800404a:	4093      	lsls	r3, r2
 800404c:	608b      	str	r3, [r1, #8]
 800404e:	4648      	mov	r0, r9
 8004050:	f000 fee6 	bl	8004e20 <_Bfree>
 8004054:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]
 800405c:	1e2b      	subs	r3, r5, #0
 800405e:	bfb9      	ittee	lt
 8004060:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004064:	9305      	strlt	r3, [sp, #20]
 8004066:	2300      	movge	r3, #0
 8004068:	6033      	strge	r3, [r6, #0]
 800406a:	9f05      	ldr	r7, [sp, #20]
 800406c:	4b9a      	ldr	r3, [pc, #616]	@ (80042d8 <_dtoa_r+0x2d8>)
 800406e:	bfbc      	itt	lt
 8004070:	2201      	movlt	r2, #1
 8004072:	6032      	strlt	r2, [r6, #0]
 8004074:	43bb      	bics	r3, r7
 8004076:	d112      	bne.n	800409e <_dtoa_r+0x9e>
 8004078:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800407a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800407e:	6013      	str	r3, [r2, #0]
 8004080:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004084:	4323      	orrs	r3, r4
 8004086:	f000 855a 	beq.w	8004b3e <_dtoa_r+0xb3e>
 800408a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800408c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80042ec <_dtoa_r+0x2ec>
 8004090:	2b00      	cmp	r3, #0
 8004092:	f000 855c 	beq.w	8004b4e <_dtoa_r+0xb4e>
 8004096:	f10a 0303 	add.w	r3, sl, #3
 800409a:	f000 bd56 	b.w	8004b4a <_dtoa_r+0xb4a>
 800409e:	ed9d 7b04 	vldr	d7, [sp, #16]
 80040a2:	2200      	movs	r2, #0
 80040a4:	ec51 0b17 	vmov	r0, r1, d7
 80040a8:	2300      	movs	r3, #0
 80040aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80040ae:	f7fc fd0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80040b2:	4680      	mov	r8, r0
 80040b4:	b158      	cbz	r0, 80040ce <_dtoa_r+0xce>
 80040b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80040b8:	2301      	movs	r3, #1
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80040be:	b113      	cbz	r3, 80040c6 <_dtoa_r+0xc6>
 80040c0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80040c2:	4b86      	ldr	r3, [pc, #536]	@ (80042dc <_dtoa_r+0x2dc>)
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80042f0 <_dtoa_r+0x2f0>
 80040ca:	f000 bd40 	b.w	8004b4e <_dtoa_r+0xb4e>
 80040ce:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80040d2:	aa14      	add	r2, sp, #80	@ 0x50
 80040d4:	a915      	add	r1, sp, #84	@ 0x54
 80040d6:	4648      	mov	r0, r9
 80040d8:	f001 fa3e 	bl	8005558 <__d2b>
 80040dc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80040e0:	9002      	str	r0, [sp, #8]
 80040e2:	2e00      	cmp	r6, #0
 80040e4:	d078      	beq.n	80041d8 <_dtoa_r+0x1d8>
 80040e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80040e8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80040ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80040f4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80040f8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80040fc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004100:	4619      	mov	r1, r3
 8004102:	2200      	movs	r2, #0
 8004104:	4b76      	ldr	r3, [pc, #472]	@ (80042e0 <_dtoa_r+0x2e0>)
 8004106:	f7fc f8bf 	bl	8000288 <__aeabi_dsub>
 800410a:	a36b      	add	r3, pc, #428	@ (adr r3, 80042b8 <_dtoa_r+0x2b8>)
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f7fc fa72 	bl	80005f8 <__aeabi_dmul>
 8004114:	a36a      	add	r3, pc, #424	@ (adr r3, 80042c0 <_dtoa_r+0x2c0>)
 8004116:	e9d3 2300 	ldrd	r2, r3, [r3]
 800411a:	f7fc f8b7 	bl	800028c <__adddf3>
 800411e:	4604      	mov	r4, r0
 8004120:	4630      	mov	r0, r6
 8004122:	460d      	mov	r5, r1
 8004124:	f7fc f9fe 	bl	8000524 <__aeabi_i2d>
 8004128:	a367      	add	r3, pc, #412	@ (adr r3, 80042c8 <_dtoa_r+0x2c8>)
 800412a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800412e:	f7fc fa63 	bl	80005f8 <__aeabi_dmul>
 8004132:	4602      	mov	r2, r0
 8004134:	460b      	mov	r3, r1
 8004136:	4620      	mov	r0, r4
 8004138:	4629      	mov	r1, r5
 800413a:	f7fc f8a7 	bl	800028c <__adddf3>
 800413e:	4604      	mov	r4, r0
 8004140:	460d      	mov	r5, r1
 8004142:	f7fc fd09 	bl	8000b58 <__aeabi_d2iz>
 8004146:	2200      	movs	r2, #0
 8004148:	4607      	mov	r7, r0
 800414a:	2300      	movs	r3, #0
 800414c:	4620      	mov	r0, r4
 800414e:	4629      	mov	r1, r5
 8004150:	f7fc fcc4 	bl	8000adc <__aeabi_dcmplt>
 8004154:	b140      	cbz	r0, 8004168 <_dtoa_r+0x168>
 8004156:	4638      	mov	r0, r7
 8004158:	f7fc f9e4 	bl	8000524 <__aeabi_i2d>
 800415c:	4622      	mov	r2, r4
 800415e:	462b      	mov	r3, r5
 8004160:	f7fc fcb2 	bl	8000ac8 <__aeabi_dcmpeq>
 8004164:	b900      	cbnz	r0, 8004168 <_dtoa_r+0x168>
 8004166:	3f01      	subs	r7, #1
 8004168:	2f16      	cmp	r7, #22
 800416a:	d852      	bhi.n	8004212 <_dtoa_r+0x212>
 800416c:	4b5d      	ldr	r3, [pc, #372]	@ (80042e4 <_dtoa_r+0x2e4>)
 800416e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800417a:	f7fc fcaf 	bl	8000adc <__aeabi_dcmplt>
 800417e:	2800      	cmp	r0, #0
 8004180:	d049      	beq.n	8004216 <_dtoa_r+0x216>
 8004182:	3f01      	subs	r7, #1
 8004184:	2300      	movs	r3, #0
 8004186:	9310      	str	r3, [sp, #64]	@ 0x40
 8004188:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800418a:	1b9b      	subs	r3, r3, r6
 800418c:	1e5a      	subs	r2, r3, #1
 800418e:	bf45      	ittet	mi
 8004190:	f1c3 0301 	rsbmi	r3, r3, #1
 8004194:	9300      	strmi	r3, [sp, #0]
 8004196:	2300      	movpl	r3, #0
 8004198:	2300      	movmi	r3, #0
 800419a:	9206      	str	r2, [sp, #24]
 800419c:	bf54      	ite	pl
 800419e:	9300      	strpl	r3, [sp, #0]
 80041a0:	9306      	strmi	r3, [sp, #24]
 80041a2:	2f00      	cmp	r7, #0
 80041a4:	db39      	blt.n	800421a <_dtoa_r+0x21a>
 80041a6:	9b06      	ldr	r3, [sp, #24]
 80041a8:	970d      	str	r7, [sp, #52]	@ 0x34
 80041aa:	443b      	add	r3, r7
 80041ac:	9306      	str	r3, [sp, #24]
 80041ae:	2300      	movs	r3, #0
 80041b0:	9308      	str	r3, [sp, #32]
 80041b2:	9b07      	ldr	r3, [sp, #28]
 80041b4:	2b09      	cmp	r3, #9
 80041b6:	d863      	bhi.n	8004280 <_dtoa_r+0x280>
 80041b8:	2b05      	cmp	r3, #5
 80041ba:	bfc4      	itt	gt
 80041bc:	3b04      	subgt	r3, #4
 80041be:	9307      	strgt	r3, [sp, #28]
 80041c0:	9b07      	ldr	r3, [sp, #28]
 80041c2:	f1a3 0302 	sub.w	r3, r3, #2
 80041c6:	bfcc      	ite	gt
 80041c8:	2400      	movgt	r4, #0
 80041ca:	2401      	movle	r4, #1
 80041cc:	2b03      	cmp	r3, #3
 80041ce:	d863      	bhi.n	8004298 <_dtoa_r+0x298>
 80041d0:	e8df f003 	tbb	[pc, r3]
 80041d4:	2b375452 	.word	0x2b375452
 80041d8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80041dc:	441e      	add	r6, r3
 80041de:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	bfc1      	itttt	gt
 80041e6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80041ea:	409f      	lslgt	r7, r3
 80041ec:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80041f0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80041f4:	bfd6      	itet	le
 80041f6:	f1c3 0320 	rsble	r3, r3, #32
 80041fa:	ea47 0003 	orrgt.w	r0, r7, r3
 80041fe:	fa04 f003 	lslle.w	r0, r4, r3
 8004202:	f7fc f97f 	bl	8000504 <__aeabi_ui2d>
 8004206:	2201      	movs	r2, #1
 8004208:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800420c:	3e01      	subs	r6, #1
 800420e:	9212      	str	r2, [sp, #72]	@ 0x48
 8004210:	e776      	b.n	8004100 <_dtoa_r+0x100>
 8004212:	2301      	movs	r3, #1
 8004214:	e7b7      	b.n	8004186 <_dtoa_r+0x186>
 8004216:	9010      	str	r0, [sp, #64]	@ 0x40
 8004218:	e7b6      	b.n	8004188 <_dtoa_r+0x188>
 800421a:	9b00      	ldr	r3, [sp, #0]
 800421c:	1bdb      	subs	r3, r3, r7
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	427b      	negs	r3, r7
 8004222:	9308      	str	r3, [sp, #32]
 8004224:	2300      	movs	r3, #0
 8004226:	930d      	str	r3, [sp, #52]	@ 0x34
 8004228:	e7c3      	b.n	80041b2 <_dtoa_r+0x1b2>
 800422a:	2301      	movs	r3, #1
 800422c:	9309      	str	r3, [sp, #36]	@ 0x24
 800422e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004230:	eb07 0b03 	add.w	fp, r7, r3
 8004234:	f10b 0301 	add.w	r3, fp, #1
 8004238:	2b01      	cmp	r3, #1
 800423a:	9303      	str	r3, [sp, #12]
 800423c:	bfb8      	it	lt
 800423e:	2301      	movlt	r3, #1
 8004240:	e006      	b.n	8004250 <_dtoa_r+0x250>
 8004242:	2301      	movs	r3, #1
 8004244:	9309      	str	r3, [sp, #36]	@ 0x24
 8004246:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004248:	2b00      	cmp	r3, #0
 800424a:	dd28      	ble.n	800429e <_dtoa_r+0x29e>
 800424c:	469b      	mov	fp, r3
 800424e:	9303      	str	r3, [sp, #12]
 8004250:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004254:	2100      	movs	r1, #0
 8004256:	2204      	movs	r2, #4
 8004258:	f102 0514 	add.w	r5, r2, #20
 800425c:	429d      	cmp	r5, r3
 800425e:	d926      	bls.n	80042ae <_dtoa_r+0x2ae>
 8004260:	6041      	str	r1, [r0, #4]
 8004262:	4648      	mov	r0, r9
 8004264:	f000 fd9c 	bl	8004da0 <_Balloc>
 8004268:	4682      	mov	sl, r0
 800426a:	2800      	cmp	r0, #0
 800426c:	d142      	bne.n	80042f4 <_dtoa_r+0x2f4>
 800426e:	4b1e      	ldr	r3, [pc, #120]	@ (80042e8 <_dtoa_r+0x2e8>)
 8004270:	4602      	mov	r2, r0
 8004272:	f240 11af 	movw	r1, #431	@ 0x1af
 8004276:	e6da      	b.n	800402e <_dtoa_r+0x2e>
 8004278:	2300      	movs	r3, #0
 800427a:	e7e3      	b.n	8004244 <_dtoa_r+0x244>
 800427c:	2300      	movs	r3, #0
 800427e:	e7d5      	b.n	800422c <_dtoa_r+0x22c>
 8004280:	2401      	movs	r4, #1
 8004282:	2300      	movs	r3, #0
 8004284:	9307      	str	r3, [sp, #28]
 8004286:	9409      	str	r4, [sp, #36]	@ 0x24
 8004288:	f04f 3bff 	mov.w	fp, #4294967295
 800428c:	2200      	movs	r2, #0
 800428e:	f8cd b00c 	str.w	fp, [sp, #12]
 8004292:	2312      	movs	r3, #18
 8004294:	920c      	str	r2, [sp, #48]	@ 0x30
 8004296:	e7db      	b.n	8004250 <_dtoa_r+0x250>
 8004298:	2301      	movs	r3, #1
 800429a:	9309      	str	r3, [sp, #36]	@ 0x24
 800429c:	e7f4      	b.n	8004288 <_dtoa_r+0x288>
 800429e:	f04f 0b01 	mov.w	fp, #1
 80042a2:	f8cd b00c 	str.w	fp, [sp, #12]
 80042a6:	465b      	mov	r3, fp
 80042a8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80042ac:	e7d0      	b.n	8004250 <_dtoa_r+0x250>
 80042ae:	3101      	adds	r1, #1
 80042b0:	0052      	lsls	r2, r2, #1
 80042b2:	e7d1      	b.n	8004258 <_dtoa_r+0x258>
 80042b4:	f3af 8000 	nop.w
 80042b8:	636f4361 	.word	0x636f4361
 80042bc:	3fd287a7 	.word	0x3fd287a7
 80042c0:	8b60c8b3 	.word	0x8b60c8b3
 80042c4:	3fc68a28 	.word	0x3fc68a28
 80042c8:	509f79fb 	.word	0x509f79fb
 80042cc:	3fd34413 	.word	0x3fd34413
 80042d0:	08007506 	.word	0x08007506
 80042d4:	0800751d 	.word	0x0800751d
 80042d8:	7ff00000 	.word	0x7ff00000
 80042dc:	080074d1 	.word	0x080074d1
 80042e0:	3ff80000 	.word	0x3ff80000
 80042e4:	080076d0 	.word	0x080076d0
 80042e8:	08007575 	.word	0x08007575
 80042ec:	08007502 	.word	0x08007502
 80042f0:	080074d0 	.word	0x080074d0
 80042f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80042f8:	6018      	str	r0, [r3, #0]
 80042fa:	9b03      	ldr	r3, [sp, #12]
 80042fc:	2b0e      	cmp	r3, #14
 80042fe:	f200 80a1 	bhi.w	8004444 <_dtoa_r+0x444>
 8004302:	2c00      	cmp	r4, #0
 8004304:	f000 809e 	beq.w	8004444 <_dtoa_r+0x444>
 8004308:	2f00      	cmp	r7, #0
 800430a:	dd33      	ble.n	8004374 <_dtoa_r+0x374>
 800430c:	4b9c      	ldr	r3, [pc, #624]	@ (8004580 <_dtoa_r+0x580>)
 800430e:	f007 020f 	and.w	r2, r7, #15
 8004312:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004316:	ed93 7b00 	vldr	d7, [r3]
 800431a:	05f8      	lsls	r0, r7, #23
 800431c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004320:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004324:	d516      	bpl.n	8004354 <_dtoa_r+0x354>
 8004326:	4b97      	ldr	r3, [pc, #604]	@ (8004584 <_dtoa_r+0x584>)
 8004328:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800432c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004330:	f7fc fa8c 	bl	800084c <__aeabi_ddiv>
 8004334:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004338:	f004 040f 	and.w	r4, r4, #15
 800433c:	2603      	movs	r6, #3
 800433e:	4d91      	ldr	r5, [pc, #580]	@ (8004584 <_dtoa_r+0x584>)
 8004340:	b954      	cbnz	r4, 8004358 <_dtoa_r+0x358>
 8004342:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004346:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800434a:	f7fc fa7f 	bl	800084c <__aeabi_ddiv>
 800434e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004352:	e028      	b.n	80043a6 <_dtoa_r+0x3a6>
 8004354:	2602      	movs	r6, #2
 8004356:	e7f2      	b.n	800433e <_dtoa_r+0x33e>
 8004358:	07e1      	lsls	r1, r4, #31
 800435a:	d508      	bpl.n	800436e <_dtoa_r+0x36e>
 800435c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004360:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004364:	f7fc f948 	bl	80005f8 <__aeabi_dmul>
 8004368:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800436c:	3601      	adds	r6, #1
 800436e:	1064      	asrs	r4, r4, #1
 8004370:	3508      	adds	r5, #8
 8004372:	e7e5      	b.n	8004340 <_dtoa_r+0x340>
 8004374:	f000 80af 	beq.w	80044d6 <_dtoa_r+0x4d6>
 8004378:	427c      	negs	r4, r7
 800437a:	4b81      	ldr	r3, [pc, #516]	@ (8004580 <_dtoa_r+0x580>)
 800437c:	4d81      	ldr	r5, [pc, #516]	@ (8004584 <_dtoa_r+0x584>)
 800437e:	f004 020f 	and.w	r2, r4, #15
 8004382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800438e:	f7fc f933 	bl	80005f8 <__aeabi_dmul>
 8004392:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004396:	1124      	asrs	r4, r4, #4
 8004398:	2300      	movs	r3, #0
 800439a:	2602      	movs	r6, #2
 800439c:	2c00      	cmp	r4, #0
 800439e:	f040 808f 	bne.w	80044c0 <_dtoa_r+0x4c0>
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1d3      	bne.n	800434e <_dtoa_r+0x34e>
 80043a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80043a8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 8094 	beq.w	80044da <_dtoa_r+0x4da>
 80043b2:	4b75      	ldr	r3, [pc, #468]	@ (8004588 <_dtoa_r+0x588>)
 80043b4:	2200      	movs	r2, #0
 80043b6:	4620      	mov	r0, r4
 80043b8:	4629      	mov	r1, r5
 80043ba:	f7fc fb8f 	bl	8000adc <__aeabi_dcmplt>
 80043be:	2800      	cmp	r0, #0
 80043c0:	f000 808b 	beq.w	80044da <_dtoa_r+0x4da>
 80043c4:	9b03      	ldr	r3, [sp, #12]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 8087 	beq.w	80044da <_dtoa_r+0x4da>
 80043cc:	f1bb 0f00 	cmp.w	fp, #0
 80043d0:	dd34      	ble.n	800443c <_dtoa_r+0x43c>
 80043d2:	4620      	mov	r0, r4
 80043d4:	4b6d      	ldr	r3, [pc, #436]	@ (800458c <_dtoa_r+0x58c>)
 80043d6:	2200      	movs	r2, #0
 80043d8:	4629      	mov	r1, r5
 80043da:	f7fc f90d 	bl	80005f8 <__aeabi_dmul>
 80043de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043e2:	f107 38ff 	add.w	r8, r7, #4294967295
 80043e6:	3601      	adds	r6, #1
 80043e8:	465c      	mov	r4, fp
 80043ea:	4630      	mov	r0, r6
 80043ec:	f7fc f89a 	bl	8000524 <__aeabi_i2d>
 80043f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043f4:	f7fc f900 	bl	80005f8 <__aeabi_dmul>
 80043f8:	4b65      	ldr	r3, [pc, #404]	@ (8004590 <_dtoa_r+0x590>)
 80043fa:	2200      	movs	r2, #0
 80043fc:	f7fb ff46 	bl	800028c <__adddf3>
 8004400:	4605      	mov	r5, r0
 8004402:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004406:	2c00      	cmp	r4, #0
 8004408:	d16a      	bne.n	80044e0 <_dtoa_r+0x4e0>
 800440a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800440e:	4b61      	ldr	r3, [pc, #388]	@ (8004594 <_dtoa_r+0x594>)
 8004410:	2200      	movs	r2, #0
 8004412:	f7fb ff39 	bl	8000288 <__aeabi_dsub>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800441e:	462a      	mov	r2, r5
 8004420:	4633      	mov	r3, r6
 8004422:	f7fc fb79 	bl	8000b18 <__aeabi_dcmpgt>
 8004426:	2800      	cmp	r0, #0
 8004428:	f040 8298 	bne.w	800495c <_dtoa_r+0x95c>
 800442c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004430:	462a      	mov	r2, r5
 8004432:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004436:	f7fc fb51 	bl	8000adc <__aeabi_dcmplt>
 800443a:	bb38      	cbnz	r0, 800448c <_dtoa_r+0x48c>
 800443c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004440:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004444:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004446:	2b00      	cmp	r3, #0
 8004448:	f2c0 8157 	blt.w	80046fa <_dtoa_r+0x6fa>
 800444c:	2f0e      	cmp	r7, #14
 800444e:	f300 8154 	bgt.w	80046fa <_dtoa_r+0x6fa>
 8004452:	4b4b      	ldr	r3, [pc, #300]	@ (8004580 <_dtoa_r+0x580>)
 8004454:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004458:	ed93 7b00 	vldr	d7, [r3]
 800445c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800445e:	2b00      	cmp	r3, #0
 8004460:	ed8d 7b00 	vstr	d7, [sp]
 8004464:	f280 80e5 	bge.w	8004632 <_dtoa_r+0x632>
 8004468:	9b03      	ldr	r3, [sp, #12]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f300 80e1 	bgt.w	8004632 <_dtoa_r+0x632>
 8004470:	d10c      	bne.n	800448c <_dtoa_r+0x48c>
 8004472:	4b48      	ldr	r3, [pc, #288]	@ (8004594 <_dtoa_r+0x594>)
 8004474:	2200      	movs	r2, #0
 8004476:	ec51 0b17 	vmov	r0, r1, d7
 800447a:	f7fc f8bd 	bl	80005f8 <__aeabi_dmul>
 800447e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004482:	f7fc fb3f 	bl	8000b04 <__aeabi_dcmpge>
 8004486:	2800      	cmp	r0, #0
 8004488:	f000 8266 	beq.w	8004958 <_dtoa_r+0x958>
 800448c:	2400      	movs	r4, #0
 800448e:	4625      	mov	r5, r4
 8004490:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004492:	4656      	mov	r6, sl
 8004494:	ea6f 0803 	mvn.w	r8, r3
 8004498:	2700      	movs	r7, #0
 800449a:	4621      	mov	r1, r4
 800449c:	4648      	mov	r0, r9
 800449e:	f000 fcbf 	bl	8004e20 <_Bfree>
 80044a2:	2d00      	cmp	r5, #0
 80044a4:	f000 80bd 	beq.w	8004622 <_dtoa_r+0x622>
 80044a8:	b12f      	cbz	r7, 80044b6 <_dtoa_r+0x4b6>
 80044aa:	42af      	cmp	r7, r5
 80044ac:	d003      	beq.n	80044b6 <_dtoa_r+0x4b6>
 80044ae:	4639      	mov	r1, r7
 80044b0:	4648      	mov	r0, r9
 80044b2:	f000 fcb5 	bl	8004e20 <_Bfree>
 80044b6:	4629      	mov	r1, r5
 80044b8:	4648      	mov	r0, r9
 80044ba:	f000 fcb1 	bl	8004e20 <_Bfree>
 80044be:	e0b0      	b.n	8004622 <_dtoa_r+0x622>
 80044c0:	07e2      	lsls	r2, r4, #31
 80044c2:	d505      	bpl.n	80044d0 <_dtoa_r+0x4d0>
 80044c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80044c8:	f7fc f896 	bl	80005f8 <__aeabi_dmul>
 80044cc:	3601      	adds	r6, #1
 80044ce:	2301      	movs	r3, #1
 80044d0:	1064      	asrs	r4, r4, #1
 80044d2:	3508      	adds	r5, #8
 80044d4:	e762      	b.n	800439c <_dtoa_r+0x39c>
 80044d6:	2602      	movs	r6, #2
 80044d8:	e765      	b.n	80043a6 <_dtoa_r+0x3a6>
 80044da:	9c03      	ldr	r4, [sp, #12]
 80044dc:	46b8      	mov	r8, r7
 80044de:	e784      	b.n	80043ea <_dtoa_r+0x3ea>
 80044e0:	4b27      	ldr	r3, [pc, #156]	@ (8004580 <_dtoa_r+0x580>)
 80044e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80044e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80044e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80044ec:	4454      	add	r4, sl
 80044ee:	2900      	cmp	r1, #0
 80044f0:	d054      	beq.n	800459c <_dtoa_r+0x59c>
 80044f2:	4929      	ldr	r1, [pc, #164]	@ (8004598 <_dtoa_r+0x598>)
 80044f4:	2000      	movs	r0, #0
 80044f6:	f7fc f9a9 	bl	800084c <__aeabi_ddiv>
 80044fa:	4633      	mov	r3, r6
 80044fc:	462a      	mov	r2, r5
 80044fe:	f7fb fec3 	bl	8000288 <__aeabi_dsub>
 8004502:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004506:	4656      	mov	r6, sl
 8004508:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800450c:	f7fc fb24 	bl	8000b58 <__aeabi_d2iz>
 8004510:	4605      	mov	r5, r0
 8004512:	f7fc f807 	bl	8000524 <__aeabi_i2d>
 8004516:	4602      	mov	r2, r0
 8004518:	460b      	mov	r3, r1
 800451a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800451e:	f7fb feb3 	bl	8000288 <__aeabi_dsub>
 8004522:	3530      	adds	r5, #48	@ 0x30
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800452c:	f806 5b01 	strb.w	r5, [r6], #1
 8004530:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004534:	f7fc fad2 	bl	8000adc <__aeabi_dcmplt>
 8004538:	2800      	cmp	r0, #0
 800453a:	d172      	bne.n	8004622 <_dtoa_r+0x622>
 800453c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004540:	4911      	ldr	r1, [pc, #68]	@ (8004588 <_dtoa_r+0x588>)
 8004542:	2000      	movs	r0, #0
 8004544:	f7fb fea0 	bl	8000288 <__aeabi_dsub>
 8004548:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800454c:	f7fc fac6 	bl	8000adc <__aeabi_dcmplt>
 8004550:	2800      	cmp	r0, #0
 8004552:	f040 80b4 	bne.w	80046be <_dtoa_r+0x6be>
 8004556:	42a6      	cmp	r6, r4
 8004558:	f43f af70 	beq.w	800443c <_dtoa_r+0x43c>
 800455c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004560:	4b0a      	ldr	r3, [pc, #40]	@ (800458c <_dtoa_r+0x58c>)
 8004562:	2200      	movs	r2, #0
 8004564:	f7fc f848 	bl	80005f8 <__aeabi_dmul>
 8004568:	4b08      	ldr	r3, [pc, #32]	@ (800458c <_dtoa_r+0x58c>)
 800456a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800456e:	2200      	movs	r2, #0
 8004570:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004574:	f7fc f840 	bl	80005f8 <__aeabi_dmul>
 8004578:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800457c:	e7c4      	b.n	8004508 <_dtoa_r+0x508>
 800457e:	bf00      	nop
 8004580:	080076d0 	.word	0x080076d0
 8004584:	080076a8 	.word	0x080076a8
 8004588:	3ff00000 	.word	0x3ff00000
 800458c:	40240000 	.word	0x40240000
 8004590:	401c0000 	.word	0x401c0000
 8004594:	40140000 	.word	0x40140000
 8004598:	3fe00000 	.word	0x3fe00000
 800459c:	4631      	mov	r1, r6
 800459e:	4628      	mov	r0, r5
 80045a0:	f7fc f82a 	bl	80005f8 <__aeabi_dmul>
 80045a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80045a8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80045aa:	4656      	mov	r6, sl
 80045ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045b0:	f7fc fad2 	bl	8000b58 <__aeabi_d2iz>
 80045b4:	4605      	mov	r5, r0
 80045b6:	f7fb ffb5 	bl	8000524 <__aeabi_i2d>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045c2:	f7fb fe61 	bl	8000288 <__aeabi_dsub>
 80045c6:	3530      	adds	r5, #48	@ 0x30
 80045c8:	f806 5b01 	strb.w	r5, [r6], #1
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	42a6      	cmp	r6, r4
 80045d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	d124      	bne.n	8004626 <_dtoa_r+0x626>
 80045dc:	4baf      	ldr	r3, [pc, #700]	@ (800489c <_dtoa_r+0x89c>)
 80045de:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80045e2:	f7fb fe53 	bl	800028c <__adddf3>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80045ee:	f7fc fa93 	bl	8000b18 <__aeabi_dcmpgt>
 80045f2:	2800      	cmp	r0, #0
 80045f4:	d163      	bne.n	80046be <_dtoa_r+0x6be>
 80045f6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80045fa:	49a8      	ldr	r1, [pc, #672]	@ (800489c <_dtoa_r+0x89c>)
 80045fc:	2000      	movs	r0, #0
 80045fe:	f7fb fe43 	bl	8000288 <__aeabi_dsub>
 8004602:	4602      	mov	r2, r0
 8004604:	460b      	mov	r3, r1
 8004606:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800460a:	f7fc fa67 	bl	8000adc <__aeabi_dcmplt>
 800460e:	2800      	cmp	r0, #0
 8004610:	f43f af14 	beq.w	800443c <_dtoa_r+0x43c>
 8004614:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004616:	1e73      	subs	r3, r6, #1
 8004618:	9313      	str	r3, [sp, #76]	@ 0x4c
 800461a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800461e:	2b30      	cmp	r3, #48	@ 0x30
 8004620:	d0f8      	beq.n	8004614 <_dtoa_r+0x614>
 8004622:	4647      	mov	r7, r8
 8004624:	e03b      	b.n	800469e <_dtoa_r+0x69e>
 8004626:	4b9e      	ldr	r3, [pc, #632]	@ (80048a0 <_dtoa_r+0x8a0>)
 8004628:	f7fb ffe6 	bl	80005f8 <__aeabi_dmul>
 800462c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004630:	e7bc      	b.n	80045ac <_dtoa_r+0x5ac>
 8004632:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004636:	4656      	mov	r6, sl
 8004638:	e9dd 2300 	ldrd	r2, r3, [sp]
 800463c:	4620      	mov	r0, r4
 800463e:	4629      	mov	r1, r5
 8004640:	f7fc f904 	bl	800084c <__aeabi_ddiv>
 8004644:	f7fc fa88 	bl	8000b58 <__aeabi_d2iz>
 8004648:	4680      	mov	r8, r0
 800464a:	f7fb ff6b 	bl	8000524 <__aeabi_i2d>
 800464e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004652:	f7fb ffd1 	bl	80005f8 <__aeabi_dmul>
 8004656:	4602      	mov	r2, r0
 8004658:	460b      	mov	r3, r1
 800465a:	4620      	mov	r0, r4
 800465c:	4629      	mov	r1, r5
 800465e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004662:	f7fb fe11 	bl	8000288 <__aeabi_dsub>
 8004666:	f806 4b01 	strb.w	r4, [r6], #1
 800466a:	9d03      	ldr	r5, [sp, #12]
 800466c:	eba6 040a 	sub.w	r4, r6, sl
 8004670:	42a5      	cmp	r5, r4
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	d133      	bne.n	80046e0 <_dtoa_r+0x6e0>
 8004678:	f7fb fe08 	bl	800028c <__adddf3>
 800467c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004680:	4604      	mov	r4, r0
 8004682:	460d      	mov	r5, r1
 8004684:	f7fc fa48 	bl	8000b18 <__aeabi_dcmpgt>
 8004688:	b9c0      	cbnz	r0, 80046bc <_dtoa_r+0x6bc>
 800468a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800468e:	4620      	mov	r0, r4
 8004690:	4629      	mov	r1, r5
 8004692:	f7fc fa19 	bl	8000ac8 <__aeabi_dcmpeq>
 8004696:	b110      	cbz	r0, 800469e <_dtoa_r+0x69e>
 8004698:	f018 0f01 	tst.w	r8, #1
 800469c:	d10e      	bne.n	80046bc <_dtoa_r+0x6bc>
 800469e:	9902      	ldr	r1, [sp, #8]
 80046a0:	4648      	mov	r0, r9
 80046a2:	f000 fbbd 	bl	8004e20 <_Bfree>
 80046a6:	2300      	movs	r3, #0
 80046a8:	7033      	strb	r3, [r6, #0]
 80046aa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80046ac:	3701      	adds	r7, #1
 80046ae:	601f      	str	r7, [r3, #0]
 80046b0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	f000 824b 	beq.w	8004b4e <_dtoa_r+0xb4e>
 80046b8:	601e      	str	r6, [r3, #0]
 80046ba:	e248      	b.n	8004b4e <_dtoa_r+0xb4e>
 80046bc:	46b8      	mov	r8, r7
 80046be:	4633      	mov	r3, r6
 80046c0:	461e      	mov	r6, r3
 80046c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80046c6:	2a39      	cmp	r2, #57	@ 0x39
 80046c8:	d106      	bne.n	80046d8 <_dtoa_r+0x6d8>
 80046ca:	459a      	cmp	sl, r3
 80046cc:	d1f8      	bne.n	80046c0 <_dtoa_r+0x6c0>
 80046ce:	2230      	movs	r2, #48	@ 0x30
 80046d0:	f108 0801 	add.w	r8, r8, #1
 80046d4:	f88a 2000 	strb.w	r2, [sl]
 80046d8:	781a      	ldrb	r2, [r3, #0]
 80046da:	3201      	adds	r2, #1
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	e7a0      	b.n	8004622 <_dtoa_r+0x622>
 80046e0:	4b6f      	ldr	r3, [pc, #444]	@ (80048a0 <_dtoa_r+0x8a0>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	f7fb ff88 	bl	80005f8 <__aeabi_dmul>
 80046e8:	2200      	movs	r2, #0
 80046ea:	2300      	movs	r3, #0
 80046ec:	4604      	mov	r4, r0
 80046ee:	460d      	mov	r5, r1
 80046f0:	f7fc f9ea 	bl	8000ac8 <__aeabi_dcmpeq>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	d09f      	beq.n	8004638 <_dtoa_r+0x638>
 80046f8:	e7d1      	b.n	800469e <_dtoa_r+0x69e>
 80046fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046fc:	2a00      	cmp	r2, #0
 80046fe:	f000 80ea 	beq.w	80048d6 <_dtoa_r+0x8d6>
 8004702:	9a07      	ldr	r2, [sp, #28]
 8004704:	2a01      	cmp	r2, #1
 8004706:	f300 80cd 	bgt.w	80048a4 <_dtoa_r+0x8a4>
 800470a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800470c:	2a00      	cmp	r2, #0
 800470e:	f000 80c1 	beq.w	8004894 <_dtoa_r+0x894>
 8004712:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004716:	9c08      	ldr	r4, [sp, #32]
 8004718:	9e00      	ldr	r6, [sp, #0]
 800471a:	9a00      	ldr	r2, [sp, #0]
 800471c:	441a      	add	r2, r3
 800471e:	9200      	str	r2, [sp, #0]
 8004720:	9a06      	ldr	r2, [sp, #24]
 8004722:	2101      	movs	r1, #1
 8004724:	441a      	add	r2, r3
 8004726:	4648      	mov	r0, r9
 8004728:	9206      	str	r2, [sp, #24]
 800472a:	f000 fc77 	bl	800501c <__i2b>
 800472e:	4605      	mov	r5, r0
 8004730:	b166      	cbz	r6, 800474c <_dtoa_r+0x74c>
 8004732:	9b06      	ldr	r3, [sp, #24]
 8004734:	2b00      	cmp	r3, #0
 8004736:	dd09      	ble.n	800474c <_dtoa_r+0x74c>
 8004738:	42b3      	cmp	r3, r6
 800473a:	9a00      	ldr	r2, [sp, #0]
 800473c:	bfa8      	it	ge
 800473e:	4633      	movge	r3, r6
 8004740:	1ad2      	subs	r2, r2, r3
 8004742:	9200      	str	r2, [sp, #0]
 8004744:	9a06      	ldr	r2, [sp, #24]
 8004746:	1af6      	subs	r6, r6, r3
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	9306      	str	r3, [sp, #24]
 800474c:	9b08      	ldr	r3, [sp, #32]
 800474e:	b30b      	cbz	r3, 8004794 <_dtoa_r+0x794>
 8004750:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 80c6 	beq.w	80048e4 <_dtoa_r+0x8e4>
 8004758:	2c00      	cmp	r4, #0
 800475a:	f000 80c0 	beq.w	80048de <_dtoa_r+0x8de>
 800475e:	4629      	mov	r1, r5
 8004760:	4622      	mov	r2, r4
 8004762:	4648      	mov	r0, r9
 8004764:	f000 fd12 	bl	800518c <__pow5mult>
 8004768:	9a02      	ldr	r2, [sp, #8]
 800476a:	4601      	mov	r1, r0
 800476c:	4605      	mov	r5, r0
 800476e:	4648      	mov	r0, r9
 8004770:	f000 fc6a 	bl	8005048 <__multiply>
 8004774:	9902      	ldr	r1, [sp, #8]
 8004776:	4680      	mov	r8, r0
 8004778:	4648      	mov	r0, r9
 800477a:	f000 fb51 	bl	8004e20 <_Bfree>
 800477e:	9b08      	ldr	r3, [sp, #32]
 8004780:	1b1b      	subs	r3, r3, r4
 8004782:	9308      	str	r3, [sp, #32]
 8004784:	f000 80b1 	beq.w	80048ea <_dtoa_r+0x8ea>
 8004788:	9a08      	ldr	r2, [sp, #32]
 800478a:	4641      	mov	r1, r8
 800478c:	4648      	mov	r0, r9
 800478e:	f000 fcfd 	bl	800518c <__pow5mult>
 8004792:	9002      	str	r0, [sp, #8]
 8004794:	2101      	movs	r1, #1
 8004796:	4648      	mov	r0, r9
 8004798:	f000 fc40 	bl	800501c <__i2b>
 800479c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800479e:	4604      	mov	r4, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 81d8 	beq.w	8004b56 <_dtoa_r+0xb56>
 80047a6:	461a      	mov	r2, r3
 80047a8:	4601      	mov	r1, r0
 80047aa:	4648      	mov	r0, r9
 80047ac:	f000 fcee 	bl	800518c <__pow5mult>
 80047b0:	9b07      	ldr	r3, [sp, #28]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	4604      	mov	r4, r0
 80047b6:	f300 809f 	bgt.w	80048f8 <_dtoa_r+0x8f8>
 80047ba:	9b04      	ldr	r3, [sp, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f040 8097 	bne.w	80048f0 <_dtoa_r+0x8f0>
 80047c2:	9b05      	ldr	r3, [sp, #20]
 80047c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f040 8093 	bne.w	80048f4 <_dtoa_r+0x8f4>
 80047ce:	9b05      	ldr	r3, [sp, #20]
 80047d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80047d4:	0d1b      	lsrs	r3, r3, #20
 80047d6:	051b      	lsls	r3, r3, #20
 80047d8:	b133      	cbz	r3, 80047e8 <_dtoa_r+0x7e8>
 80047da:	9b00      	ldr	r3, [sp, #0]
 80047dc:	3301      	adds	r3, #1
 80047de:	9300      	str	r3, [sp, #0]
 80047e0:	9b06      	ldr	r3, [sp, #24]
 80047e2:	3301      	adds	r3, #1
 80047e4:	9306      	str	r3, [sp, #24]
 80047e6:	2301      	movs	r3, #1
 80047e8:	9308      	str	r3, [sp, #32]
 80047ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 81b8 	beq.w	8004b62 <_dtoa_r+0xb62>
 80047f2:	6923      	ldr	r3, [r4, #16]
 80047f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80047f8:	6918      	ldr	r0, [r3, #16]
 80047fa:	f000 fbc3 	bl	8004f84 <__hi0bits>
 80047fe:	f1c0 0020 	rsb	r0, r0, #32
 8004802:	9b06      	ldr	r3, [sp, #24]
 8004804:	4418      	add	r0, r3
 8004806:	f010 001f 	ands.w	r0, r0, #31
 800480a:	f000 8082 	beq.w	8004912 <_dtoa_r+0x912>
 800480e:	f1c0 0320 	rsb	r3, r0, #32
 8004812:	2b04      	cmp	r3, #4
 8004814:	dd73      	ble.n	80048fe <_dtoa_r+0x8fe>
 8004816:	9b00      	ldr	r3, [sp, #0]
 8004818:	f1c0 001c 	rsb	r0, r0, #28
 800481c:	4403      	add	r3, r0
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	9b06      	ldr	r3, [sp, #24]
 8004822:	4403      	add	r3, r0
 8004824:	4406      	add	r6, r0
 8004826:	9306      	str	r3, [sp, #24]
 8004828:	9b00      	ldr	r3, [sp, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	dd05      	ble.n	800483a <_dtoa_r+0x83a>
 800482e:	9902      	ldr	r1, [sp, #8]
 8004830:	461a      	mov	r2, r3
 8004832:	4648      	mov	r0, r9
 8004834:	f000 fd04 	bl	8005240 <__lshift>
 8004838:	9002      	str	r0, [sp, #8]
 800483a:	9b06      	ldr	r3, [sp, #24]
 800483c:	2b00      	cmp	r3, #0
 800483e:	dd05      	ble.n	800484c <_dtoa_r+0x84c>
 8004840:	4621      	mov	r1, r4
 8004842:	461a      	mov	r2, r3
 8004844:	4648      	mov	r0, r9
 8004846:	f000 fcfb 	bl	8005240 <__lshift>
 800484a:	4604      	mov	r4, r0
 800484c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800484e:	2b00      	cmp	r3, #0
 8004850:	d061      	beq.n	8004916 <_dtoa_r+0x916>
 8004852:	9802      	ldr	r0, [sp, #8]
 8004854:	4621      	mov	r1, r4
 8004856:	f000 fd5f 	bl	8005318 <__mcmp>
 800485a:	2800      	cmp	r0, #0
 800485c:	da5b      	bge.n	8004916 <_dtoa_r+0x916>
 800485e:	2300      	movs	r3, #0
 8004860:	9902      	ldr	r1, [sp, #8]
 8004862:	220a      	movs	r2, #10
 8004864:	4648      	mov	r0, r9
 8004866:	f000 fafd 	bl	8004e64 <__multadd>
 800486a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800486c:	9002      	str	r0, [sp, #8]
 800486e:	f107 38ff 	add.w	r8, r7, #4294967295
 8004872:	2b00      	cmp	r3, #0
 8004874:	f000 8177 	beq.w	8004b66 <_dtoa_r+0xb66>
 8004878:	4629      	mov	r1, r5
 800487a:	2300      	movs	r3, #0
 800487c:	220a      	movs	r2, #10
 800487e:	4648      	mov	r0, r9
 8004880:	f000 faf0 	bl	8004e64 <__multadd>
 8004884:	f1bb 0f00 	cmp.w	fp, #0
 8004888:	4605      	mov	r5, r0
 800488a:	dc6f      	bgt.n	800496c <_dtoa_r+0x96c>
 800488c:	9b07      	ldr	r3, [sp, #28]
 800488e:	2b02      	cmp	r3, #2
 8004890:	dc49      	bgt.n	8004926 <_dtoa_r+0x926>
 8004892:	e06b      	b.n	800496c <_dtoa_r+0x96c>
 8004894:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004896:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800489a:	e73c      	b.n	8004716 <_dtoa_r+0x716>
 800489c:	3fe00000 	.word	0x3fe00000
 80048a0:	40240000 	.word	0x40240000
 80048a4:	9b03      	ldr	r3, [sp, #12]
 80048a6:	1e5c      	subs	r4, r3, #1
 80048a8:	9b08      	ldr	r3, [sp, #32]
 80048aa:	42a3      	cmp	r3, r4
 80048ac:	db09      	blt.n	80048c2 <_dtoa_r+0x8c2>
 80048ae:	1b1c      	subs	r4, r3, r4
 80048b0:	9b03      	ldr	r3, [sp, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	f6bf af30 	bge.w	8004718 <_dtoa_r+0x718>
 80048b8:	9b00      	ldr	r3, [sp, #0]
 80048ba:	9a03      	ldr	r2, [sp, #12]
 80048bc:	1a9e      	subs	r6, r3, r2
 80048be:	2300      	movs	r3, #0
 80048c0:	e72b      	b.n	800471a <_dtoa_r+0x71a>
 80048c2:	9b08      	ldr	r3, [sp, #32]
 80048c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80048c6:	9408      	str	r4, [sp, #32]
 80048c8:	1ae3      	subs	r3, r4, r3
 80048ca:	441a      	add	r2, r3
 80048cc:	9e00      	ldr	r6, [sp, #0]
 80048ce:	9b03      	ldr	r3, [sp, #12]
 80048d0:	920d      	str	r2, [sp, #52]	@ 0x34
 80048d2:	2400      	movs	r4, #0
 80048d4:	e721      	b.n	800471a <_dtoa_r+0x71a>
 80048d6:	9c08      	ldr	r4, [sp, #32]
 80048d8:	9e00      	ldr	r6, [sp, #0]
 80048da:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80048dc:	e728      	b.n	8004730 <_dtoa_r+0x730>
 80048de:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80048e2:	e751      	b.n	8004788 <_dtoa_r+0x788>
 80048e4:	9a08      	ldr	r2, [sp, #32]
 80048e6:	9902      	ldr	r1, [sp, #8]
 80048e8:	e750      	b.n	800478c <_dtoa_r+0x78c>
 80048ea:	f8cd 8008 	str.w	r8, [sp, #8]
 80048ee:	e751      	b.n	8004794 <_dtoa_r+0x794>
 80048f0:	2300      	movs	r3, #0
 80048f2:	e779      	b.n	80047e8 <_dtoa_r+0x7e8>
 80048f4:	9b04      	ldr	r3, [sp, #16]
 80048f6:	e777      	b.n	80047e8 <_dtoa_r+0x7e8>
 80048f8:	2300      	movs	r3, #0
 80048fa:	9308      	str	r3, [sp, #32]
 80048fc:	e779      	b.n	80047f2 <_dtoa_r+0x7f2>
 80048fe:	d093      	beq.n	8004828 <_dtoa_r+0x828>
 8004900:	9a00      	ldr	r2, [sp, #0]
 8004902:	331c      	adds	r3, #28
 8004904:	441a      	add	r2, r3
 8004906:	9200      	str	r2, [sp, #0]
 8004908:	9a06      	ldr	r2, [sp, #24]
 800490a:	441a      	add	r2, r3
 800490c:	441e      	add	r6, r3
 800490e:	9206      	str	r2, [sp, #24]
 8004910:	e78a      	b.n	8004828 <_dtoa_r+0x828>
 8004912:	4603      	mov	r3, r0
 8004914:	e7f4      	b.n	8004900 <_dtoa_r+0x900>
 8004916:	9b03      	ldr	r3, [sp, #12]
 8004918:	2b00      	cmp	r3, #0
 800491a:	46b8      	mov	r8, r7
 800491c:	dc20      	bgt.n	8004960 <_dtoa_r+0x960>
 800491e:	469b      	mov	fp, r3
 8004920:	9b07      	ldr	r3, [sp, #28]
 8004922:	2b02      	cmp	r3, #2
 8004924:	dd1e      	ble.n	8004964 <_dtoa_r+0x964>
 8004926:	f1bb 0f00 	cmp.w	fp, #0
 800492a:	f47f adb1 	bne.w	8004490 <_dtoa_r+0x490>
 800492e:	4621      	mov	r1, r4
 8004930:	465b      	mov	r3, fp
 8004932:	2205      	movs	r2, #5
 8004934:	4648      	mov	r0, r9
 8004936:	f000 fa95 	bl	8004e64 <__multadd>
 800493a:	4601      	mov	r1, r0
 800493c:	4604      	mov	r4, r0
 800493e:	9802      	ldr	r0, [sp, #8]
 8004940:	f000 fcea 	bl	8005318 <__mcmp>
 8004944:	2800      	cmp	r0, #0
 8004946:	f77f ada3 	ble.w	8004490 <_dtoa_r+0x490>
 800494a:	4656      	mov	r6, sl
 800494c:	2331      	movs	r3, #49	@ 0x31
 800494e:	f806 3b01 	strb.w	r3, [r6], #1
 8004952:	f108 0801 	add.w	r8, r8, #1
 8004956:	e59f      	b.n	8004498 <_dtoa_r+0x498>
 8004958:	9c03      	ldr	r4, [sp, #12]
 800495a:	46b8      	mov	r8, r7
 800495c:	4625      	mov	r5, r4
 800495e:	e7f4      	b.n	800494a <_dtoa_r+0x94a>
 8004960:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004964:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 8101 	beq.w	8004b6e <_dtoa_r+0xb6e>
 800496c:	2e00      	cmp	r6, #0
 800496e:	dd05      	ble.n	800497c <_dtoa_r+0x97c>
 8004970:	4629      	mov	r1, r5
 8004972:	4632      	mov	r2, r6
 8004974:	4648      	mov	r0, r9
 8004976:	f000 fc63 	bl	8005240 <__lshift>
 800497a:	4605      	mov	r5, r0
 800497c:	9b08      	ldr	r3, [sp, #32]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d05c      	beq.n	8004a3c <_dtoa_r+0xa3c>
 8004982:	6869      	ldr	r1, [r5, #4]
 8004984:	4648      	mov	r0, r9
 8004986:	f000 fa0b 	bl	8004da0 <_Balloc>
 800498a:	4606      	mov	r6, r0
 800498c:	b928      	cbnz	r0, 800499a <_dtoa_r+0x99a>
 800498e:	4b82      	ldr	r3, [pc, #520]	@ (8004b98 <_dtoa_r+0xb98>)
 8004990:	4602      	mov	r2, r0
 8004992:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8004996:	f7ff bb4a 	b.w	800402e <_dtoa_r+0x2e>
 800499a:	692a      	ldr	r2, [r5, #16]
 800499c:	3202      	adds	r2, #2
 800499e:	0092      	lsls	r2, r2, #2
 80049a0:	f105 010c 	add.w	r1, r5, #12
 80049a4:	300c      	adds	r0, #12
 80049a6:	f002 f92f 	bl	8006c08 <memcpy>
 80049aa:	2201      	movs	r2, #1
 80049ac:	4631      	mov	r1, r6
 80049ae:	4648      	mov	r0, r9
 80049b0:	f000 fc46 	bl	8005240 <__lshift>
 80049b4:	f10a 0301 	add.w	r3, sl, #1
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	eb0a 030b 	add.w	r3, sl, fp
 80049be:	9308      	str	r3, [sp, #32]
 80049c0:	9b04      	ldr	r3, [sp, #16]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	462f      	mov	r7, r5
 80049c8:	9306      	str	r3, [sp, #24]
 80049ca:	4605      	mov	r5, r0
 80049cc:	9b00      	ldr	r3, [sp, #0]
 80049ce:	9802      	ldr	r0, [sp, #8]
 80049d0:	4621      	mov	r1, r4
 80049d2:	f103 3bff 	add.w	fp, r3, #4294967295
 80049d6:	f7ff fa8b 	bl	8003ef0 <quorem>
 80049da:	4603      	mov	r3, r0
 80049dc:	3330      	adds	r3, #48	@ 0x30
 80049de:	9003      	str	r0, [sp, #12]
 80049e0:	4639      	mov	r1, r7
 80049e2:	9802      	ldr	r0, [sp, #8]
 80049e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80049e6:	f000 fc97 	bl	8005318 <__mcmp>
 80049ea:	462a      	mov	r2, r5
 80049ec:	9004      	str	r0, [sp, #16]
 80049ee:	4621      	mov	r1, r4
 80049f0:	4648      	mov	r0, r9
 80049f2:	f000 fcad 	bl	8005350 <__mdiff>
 80049f6:	68c2      	ldr	r2, [r0, #12]
 80049f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80049fa:	4606      	mov	r6, r0
 80049fc:	bb02      	cbnz	r2, 8004a40 <_dtoa_r+0xa40>
 80049fe:	4601      	mov	r1, r0
 8004a00:	9802      	ldr	r0, [sp, #8]
 8004a02:	f000 fc89 	bl	8005318 <__mcmp>
 8004a06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4631      	mov	r1, r6
 8004a0c:	4648      	mov	r0, r9
 8004a0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004a10:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a12:	f000 fa05 	bl	8004e20 <_Bfree>
 8004a16:	9b07      	ldr	r3, [sp, #28]
 8004a18:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8004a1a:	9e00      	ldr	r6, [sp, #0]
 8004a1c:	ea42 0103 	orr.w	r1, r2, r3
 8004a20:	9b06      	ldr	r3, [sp, #24]
 8004a22:	4319      	orrs	r1, r3
 8004a24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a26:	d10d      	bne.n	8004a44 <_dtoa_r+0xa44>
 8004a28:	2b39      	cmp	r3, #57	@ 0x39
 8004a2a:	d027      	beq.n	8004a7c <_dtoa_r+0xa7c>
 8004a2c:	9a04      	ldr	r2, [sp, #16]
 8004a2e:	2a00      	cmp	r2, #0
 8004a30:	dd01      	ble.n	8004a36 <_dtoa_r+0xa36>
 8004a32:	9b03      	ldr	r3, [sp, #12]
 8004a34:	3331      	adds	r3, #49	@ 0x31
 8004a36:	f88b 3000 	strb.w	r3, [fp]
 8004a3a:	e52e      	b.n	800449a <_dtoa_r+0x49a>
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	e7b9      	b.n	80049b4 <_dtoa_r+0x9b4>
 8004a40:	2201      	movs	r2, #1
 8004a42:	e7e2      	b.n	8004a0a <_dtoa_r+0xa0a>
 8004a44:	9904      	ldr	r1, [sp, #16]
 8004a46:	2900      	cmp	r1, #0
 8004a48:	db04      	blt.n	8004a54 <_dtoa_r+0xa54>
 8004a4a:	9807      	ldr	r0, [sp, #28]
 8004a4c:	4301      	orrs	r1, r0
 8004a4e:	9806      	ldr	r0, [sp, #24]
 8004a50:	4301      	orrs	r1, r0
 8004a52:	d120      	bne.n	8004a96 <_dtoa_r+0xa96>
 8004a54:	2a00      	cmp	r2, #0
 8004a56:	ddee      	ble.n	8004a36 <_dtoa_r+0xa36>
 8004a58:	9902      	ldr	r1, [sp, #8]
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	4648      	mov	r0, r9
 8004a60:	f000 fbee 	bl	8005240 <__lshift>
 8004a64:	4621      	mov	r1, r4
 8004a66:	9002      	str	r0, [sp, #8]
 8004a68:	f000 fc56 	bl	8005318 <__mcmp>
 8004a6c:	2800      	cmp	r0, #0
 8004a6e:	9b00      	ldr	r3, [sp, #0]
 8004a70:	dc02      	bgt.n	8004a78 <_dtoa_r+0xa78>
 8004a72:	d1e0      	bne.n	8004a36 <_dtoa_r+0xa36>
 8004a74:	07da      	lsls	r2, r3, #31
 8004a76:	d5de      	bpl.n	8004a36 <_dtoa_r+0xa36>
 8004a78:	2b39      	cmp	r3, #57	@ 0x39
 8004a7a:	d1da      	bne.n	8004a32 <_dtoa_r+0xa32>
 8004a7c:	2339      	movs	r3, #57	@ 0x39
 8004a7e:	f88b 3000 	strb.w	r3, [fp]
 8004a82:	4633      	mov	r3, r6
 8004a84:	461e      	mov	r6, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004a8c:	2a39      	cmp	r2, #57	@ 0x39
 8004a8e:	d04e      	beq.n	8004b2e <_dtoa_r+0xb2e>
 8004a90:	3201      	adds	r2, #1
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	e501      	b.n	800449a <_dtoa_r+0x49a>
 8004a96:	2a00      	cmp	r2, #0
 8004a98:	dd03      	ble.n	8004aa2 <_dtoa_r+0xaa2>
 8004a9a:	2b39      	cmp	r3, #57	@ 0x39
 8004a9c:	d0ee      	beq.n	8004a7c <_dtoa_r+0xa7c>
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	e7c9      	b.n	8004a36 <_dtoa_r+0xa36>
 8004aa2:	9a00      	ldr	r2, [sp, #0]
 8004aa4:	9908      	ldr	r1, [sp, #32]
 8004aa6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004aaa:	428a      	cmp	r2, r1
 8004aac:	d028      	beq.n	8004b00 <_dtoa_r+0xb00>
 8004aae:	9902      	ldr	r1, [sp, #8]
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	220a      	movs	r2, #10
 8004ab4:	4648      	mov	r0, r9
 8004ab6:	f000 f9d5 	bl	8004e64 <__multadd>
 8004aba:	42af      	cmp	r7, r5
 8004abc:	9002      	str	r0, [sp, #8]
 8004abe:	f04f 0300 	mov.w	r3, #0
 8004ac2:	f04f 020a 	mov.w	r2, #10
 8004ac6:	4639      	mov	r1, r7
 8004ac8:	4648      	mov	r0, r9
 8004aca:	d107      	bne.n	8004adc <_dtoa_r+0xadc>
 8004acc:	f000 f9ca 	bl	8004e64 <__multadd>
 8004ad0:	4607      	mov	r7, r0
 8004ad2:	4605      	mov	r5, r0
 8004ad4:	9b00      	ldr	r3, [sp, #0]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	9300      	str	r3, [sp, #0]
 8004ada:	e777      	b.n	80049cc <_dtoa_r+0x9cc>
 8004adc:	f000 f9c2 	bl	8004e64 <__multadd>
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	4607      	mov	r7, r0
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	220a      	movs	r2, #10
 8004ae8:	4648      	mov	r0, r9
 8004aea:	f000 f9bb 	bl	8004e64 <__multadd>
 8004aee:	4605      	mov	r5, r0
 8004af0:	e7f0      	b.n	8004ad4 <_dtoa_r+0xad4>
 8004af2:	f1bb 0f00 	cmp.w	fp, #0
 8004af6:	bfcc      	ite	gt
 8004af8:	465e      	movgt	r6, fp
 8004afa:	2601      	movle	r6, #1
 8004afc:	4456      	add	r6, sl
 8004afe:	2700      	movs	r7, #0
 8004b00:	9902      	ldr	r1, [sp, #8]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	2201      	movs	r2, #1
 8004b06:	4648      	mov	r0, r9
 8004b08:	f000 fb9a 	bl	8005240 <__lshift>
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	9002      	str	r0, [sp, #8]
 8004b10:	f000 fc02 	bl	8005318 <__mcmp>
 8004b14:	2800      	cmp	r0, #0
 8004b16:	dcb4      	bgt.n	8004a82 <_dtoa_r+0xa82>
 8004b18:	d102      	bne.n	8004b20 <_dtoa_r+0xb20>
 8004b1a:	9b00      	ldr	r3, [sp, #0]
 8004b1c:	07db      	lsls	r3, r3, #31
 8004b1e:	d4b0      	bmi.n	8004a82 <_dtoa_r+0xa82>
 8004b20:	4633      	mov	r3, r6
 8004b22:	461e      	mov	r6, r3
 8004b24:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004b28:	2a30      	cmp	r2, #48	@ 0x30
 8004b2a:	d0fa      	beq.n	8004b22 <_dtoa_r+0xb22>
 8004b2c:	e4b5      	b.n	800449a <_dtoa_r+0x49a>
 8004b2e:	459a      	cmp	sl, r3
 8004b30:	d1a8      	bne.n	8004a84 <_dtoa_r+0xa84>
 8004b32:	2331      	movs	r3, #49	@ 0x31
 8004b34:	f108 0801 	add.w	r8, r8, #1
 8004b38:	f88a 3000 	strb.w	r3, [sl]
 8004b3c:	e4ad      	b.n	800449a <_dtoa_r+0x49a>
 8004b3e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004b40:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8004b9c <_dtoa_r+0xb9c>
 8004b44:	b11b      	cbz	r3, 8004b4e <_dtoa_r+0xb4e>
 8004b46:	f10a 0308 	add.w	r3, sl, #8
 8004b4a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	4650      	mov	r0, sl
 8004b50:	b017      	add	sp, #92	@ 0x5c
 8004b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b56:	9b07      	ldr	r3, [sp, #28]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	f77f ae2e 	ble.w	80047ba <_dtoa_r+0x7ba>
 8004b5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004b60:	9308      	str	r3, [sp, #32]
 8004b62:	2001      	movs	r0, #1
 8004b64:	e64d      	b.n	8004802 <_dtoa_r+0x802>
 8004b66:	f1bb 0f00 	cmp.w	fp, #0
 8004b6a:	f77f aed9 	ble.w	8004920 <_dtoa_r+0x920>
 8004b6e:	4656      	mov	r6, sl
 8004b70:	9802      	ldr	r0, [sp, #8]
 8004b72:	4621      	mov	r1, r4
 8004b74:	f7ff f9bc 	bl	8003ef0 <quorem>
 8004b78:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8004b7c:	f806 3b01 	strb.w	r3, [r6], #1
 8004b80:	eba6 020a 	sub.w	r2, r6, sl
 8004b84:	4593      	cmp	fp, r2
 8004b86:	ddb4      	ble.n	8004af2 <_dtoa_r+0xaf2>
 8004b88:	9902      	ldr	r1, [sp, #8]
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	220a      	movs	r2, #10
 8004b8e:	4648      	mov	r0, r9
 8004b90:	f000 f968 	bl	8004e64 <__multadd>
 8004b94:	9002      	str	r0, [sp, #8]
 8004b96:	e7eb      	b.n	8004b70 <_dtoa_r+0xb70>
 8004b98:	08007575 	.word	0x08007575
 8004b9c:	080074f9 	.word	0x080074f9

08004ba0 <_free_r>:
 8004ba0:	b538      	push	{r3, r4, r5, lr}
 8004ba2:	4605      	mov	r5, r0
 8004ba4:	2900      	cmp	r1, #0
 8004ba6:	d041      	beq.n	8004c2c <_free_r+0x8c>
 8004ba8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bac:	1f0c      	subs	r4, r1, #4
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	bfb8      	it	lt
 8004bb2:	18e4      	addlt	r4, r4, r3
 8004bb4:	f000 f8e8 	bl	8004d88 <__malloc_lock>
 8004bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004c30 <_free_r+0x90>)
 8004bba:	6813      	ldr	r3, [r2, #0]
 8004bbc:	b933      	cbnz	r3, 8004bcc <_free_r+0x2c>
 8004bbe:	6063      	str	r3, [r4, #4]
 8004bc0:	6014      	str	r4, [r2, #0]
 8004bc2:	4628      	mov	r0, r5
 8004bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004bc8:	f000 b8e4 	b.w	8004d94 <__malloc_unlock>
 8004bcc:	42a3      	cmp	r3, r4
 8004bce:	d908      	bls.n	8004be2 <_free_r+0x42>
 8004bd0:	6820      	ldr	r0, [r4, #0]
 8004bd2:	1821      	adds	r1, r4, r0
 8004bd4:	428b      	cmp	r3, r1
 8004bd6:	bf01      	itttt	eq
 8004bd8:	6819      	ldreq	r1, [r3, #0]
 8004bda:	685b      	ldreq	r3, [r3, #4]
 8004bdc:	1809      	addeq	r1, r1, r0
 8004bde:	6021      	streq	r1, [r4, #0]
 8004be0:	e7ed      	b.n	8004bbe <_free_r+0x1e>
 8004be2:	461a      	mov	r2, r3
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	b10b      	cbz	r3, 8004bec <_free_r+0x4c>
 8004be8:	42a3      	cmp	r3, r4
 8004bea:	d9fa      	bls.n	8004be2 <_free_r+0x42>
 8004bec:	6811      	ldr	r1, [r2, #0]
 8004bee:	1850      	adds	r0, r2, r1
 8004bf0:	42a0      	cmp	r0, r4
 8004bf2:	d10b      	bne.n	8004c0c <_free_r+0x6c>
 8004bf4:	6820      	ldr	r0, [r4, #0]
 8004bf6:	4401      	add	r1, r0
 8004bf8:	1850      	adds	r0, r2, r1
 8004bfa:	4283      	cmp	r3, r0
 8004bfc:	6011      	str	r1, [r2, #0]
 8004bfe:	d1e0      	bne.n	8004bc2 <_free_r+0x22>
 8004c00:	6818      	ldr	r0, [r3, #0]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	6053      	str	r3, [r2, #4]
 8004c06:	4408      	add	r0, r1
 8004c08:	6010      	str	r0, [r2, #0]
 8004c0a:	e7da      	b.n	8004bc2 <_free_r+0x22>
 8004c0c:	d902      	bls.n	8004c14 <_free_r+0x74>
 8004c0e:	230c      	movs	r3, #12
 8004c10:	602b      	str	r3, [r5, #0]
 8004c12:	e7d6      	b.n	8004bc2 <_free_r+0x22>
 8004c14:	6820      	ldr	r0, [r4, #0]
 8004c16:	1821      	adds	r1, r4, r0
 8004c18:	428b      	cmp	r3, r1
 8004c1a:	bf04      	itt	eq
 8004c1c:	6819      	ldreq	r1, [r3, #0]
 8004c1e:	685b      	ldreq	r3, [r3, #4]
 8004c20:	6063      	str	r3, [r4, #4]
 8004c22:	bf04      	itt	eq
 8004c24:	1809      	addeq	r1, r1, r0
 8004c26:	6021      	streq	r1, [r4, #0]
 8004c28:	6054      	str	r4, [r2, #4]
 8004c2a:	e7ca      	b.n	8004bc2 <_free_r+0x22>
 8004c2c:	bd38      	pop	{r3, r4, r5, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000390 	.word	0x20000390

08004c34 <malloc>:
 8004c34:	4b02      	ldr	r3, [pc, #8]	@ (8004c40 <malloc+0xc>)
 8004c36:	4601      	mov	r1, r0
 8004c38:	6818      	ldr	r0, [r3, #0]
 8004c3a:	f000 b825 	b.w	8004c88 <_malloc_r>
 8004c3e:	bf00      	nop
 8004c40:	20000018 	.word	0x20000018

08004c44 <sbrk_aligned>:
 8004c44:	b570      	push	{r4, r5, r6, lr}
 8004c46:	4e0f      	ldr	r6, [pc, #60]	@ (8004c84 <sbrk_aligned+0x40>)
 8004c48:	460c      	mov	r4, r1
 8004c4a:	6831      	ldr	r1, [r6, #0]
 8004c4c:	4605      	mov	r5, r0
 8004c4e:	b911      	cbnz	r1, 8004c56 <sbrk_aligned+0x12>
 8004c50:	f001 ffca 	bl	8006be8 <_sbrk_r>
 8004c54:	6030      	str	r0, [r6, #0]
 8004c56:	4621      	mov	r1, r4
 8004c58:	4628      	mov	r0, r5
 8004c5a:	f001 ffc5 	bl	8006be8 <_sbrk_r>
 8004c5e:	1c43      	adds	r3, r0, #1
 8004c60:	d103      	bne.n	8004c6a <sbrk_aligned+0x26>
 8004c62:	f04f 34ff 	mov.w	r4, #4294967295
 8004c66:	4620      	mov	r0, r4
 8004c68:	bd70      	pop	{r4, r5, r6, pc}
 8004c6a:	1cc4      	adds	r4, r0, #3
 8004c6c:	f024 0403 	bic.w	r4, r4, #3
 8004c70:	42a0      	cmp	r0, r4
 8004c72:	d0f8      	beq.n	8004c66 <sbrk_aligned+0x22>
 8004c74:	1a21      	subs	r1, r4, r0
 8004c76:	4628      	mov	r0, r5
 8004c78:	f001 ffb6 	bl	8006be8 <_sbrk_r>
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	d1f2      	bne.n	8004c66 <sbrk_aligned+0x22>
 8004c80:	e7ef      	b.n	8004c62 <sbrk_aligned+0x1e>
 8004c82:	bf00      	nop
 8004c84:	2000038c 	.word	0x2000038c

08004c88 <_malloc_r>:
 8004c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c8c:	1ccd      	adds	r5, r1, #3
 8004c8e:	f025 0503 	bic.w	r5, r5, #3
 8004c92:	3508      	adds	r5, #8
 8004c94:	2d0c      	cmp	r5, #12
 8004c96:	bf38      	it	cc
 8004c98:	250c      	movcc	r5, #12
 8004c9a:	2d00      	cmp	r5, #0
 8004c9c:	4606      	mov	r6, r0
 8004c9e:	db01      	blt.n	8004ca4 <_malloc_r+0x1c>
 8004ca0:	42a9      	cmp	r1, r5
 8004ca2:	d904      	bls.n	8004cae <_malloc_r+0x26>
 8004ca4:	230c      	movs	r3, #12
 8004ca6:	6033      	str	r3, [r6, #0]
 8004ca8:	2000      	movs	r0, #0
 8004caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004d84 <_malloc_r+0xfc>
 8004cb2:	f000 f869 	bl	8004d88 <__malloc_lock>
 8004cb6:	f8d8 3000 	ldr.w	r3, [r8]
 8004cba:	461c      	mov	r4, r3
 8004cbc:	bb44      	cbnz	r4, 8004d10 <_malloc_r+0x88>
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	f7ff ffbf 	bl	8004c44 <sbrk_aligned>
 8004cc6:	1c43      	adds	r3, r0, #1
 8004cc8:	4604      	mov	r4, r0
 8004cca:	d158      	bne.n	8004d7e <_malloc_r+0xf6>
 8004ccc:	f8d8 4000 	ldr.w	r4, [r8]
 8004cd0:	4627      	mov	r7, r4
 8004cd2:	2f00      	cmp	r7, #0
 8004cd4:	d143      	bne.n	8004d5e <_malloc_r+0xd6>
 8004cd6:	2c00      	cmp	r4, #0
 8004cd8:	d04b      	beq.n	8004d72 <_malloc_r+0xea>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	4639      	mov	r1, r7
 8004cde:	4630      	mov	r0, r6
 8004ce0:	eb04 0903 	add.w	r9, r4, r3
 8004ce4:	f001 ff80 	bl	8006be8 <_sbrk_r>
 8004ce8:	4581      	cmp	r9, r0
 8004cea:	d142      	bne.n	8004d72 <_malloc_r+0xea>
 8004cec:	6821      	ldr	r1, [r4, #0]
 8004cee:	1a6d      	subs	r5, r5, r1
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	4630      	mov	r0, r6
 8004cf4:	f7ff ffa6 	bl	8004c44 <sbrk_aligned>
 8004cf8:	3001      	adds	r0, #1
 8004cfa:	d03a      	beq.n	8004d72 <_malloc_r+0xea>
 8004cfc:	6823      	ldr	r3, [r4, #0]
 8004cfe:	442b      	add	r3, r5
 8004d00:	6023      	str	r3, [r4, #0]
 8004d02:	f8d8 3000 	ldr.w	r3, [r8]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	bb62      	cbnz	r2, 8004d64 <_malloc_r+0xdc>
 8004d0a:	f8c8 7000 	str.w	r7, [r8]
 8004d0e:	e00f      	b.n	8004d30 <_malloc_r+0xa8>
 8004d10:	6822      	ldr	r2, [r4, #0]
 8004d12:	1b52      	subs	r2, r2, r5
 8004d14:	d420      	bmi.n	8004d58 <_malloc_r+0xd0>
 8004d16:	2a0b      	cmp	r2, #11
 8004d18:	d917      	bls.n	8004d4a <_malloc_r+0xc2>
 8004d1a:	1961      	adds	r1, r4, r5
 8004d1c:	42a3      	cmp	r3, r4
 8004d1e:	6025      	str	r5, [r4, #0]
 8004d20:	bf18      	it	ne
 8004d22:	6059      	strne	r1, [r3, #4]
 8004d24:	6863      	ldr	r3, [r4, #4]
 8004d26:	bf08      	it	eq
 8004d28:	f8c8 1000 	streq.w	r1, [r8]
 8004d2c:	5162      	str	r2, [r4, r5]
 8004d2e:	604b      	str	r3, [r1, #4]
 8004d30:	4630      	mov	r0, r6
 8004d32:	f000 f82f 	bl	8004d94 <__malloc_unlock>
 8004d36:	f104 000b 	add.w	r0, r4, #11
 8004d3a:	1d23      	adds	r3, r4, #4
 8004d3c:	f020 0007 	bic.w	r0, r0, #7
 8004d40:	1ac2      	subs	r2, r0, r3
 8004d42:	bf1c      	itt	ne
 8004d44:	1a1b      	subne	r3, r3, r0
 8004d46:	50a3      	strne	r3, [r4, r2]
 8004d48:	e7af      	b.n	8004caa <_malloc_r+0x22>
 8004d4a:	6862      	ldr	r2, [r4, #4]
 8004d4c:	42a3      	cmp	r3, r4
 8004d4e:	bf0c      	ite	eq
 8004d50:	f8c8 2000 	streq.w	r2, [r8]
 8004d54:	605a      	strne	r2, [r3, #4]
 8004d56:	e7eb      	b.n	8004d30 <_malloc_r+0xa8>
 8004d58:	4623      	mov	r3, r4
 8004d5a:	6864      	ldr	r4, [r4, #4]
 8004d5c:	e7ae      	b.n	8004cbc <_malloc_r+0x34>
 8004d5e:	463c      	mov	r4, r7
 8004d60:	687f      	ldr	r7, [r7, #4]
 8004d62:	e7b6      	b.n	8004cd2 <_malloc_r+0x4a>
 8004d64:	461a      	mov	r2, r3
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	42a3      	cmp	r3, r4
 8004d6a:	d1fb      	bne.n	8004d64 <_malloc_r+0xdc>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	6053      	str	r3, [r2, #4]
 8004d70:	e7de      	b.n	8004d30 <_malloc_r+0xa8>
 8004d72:	230c      	movs	r3, #12
 8004d74:	6033      	str	r3, [r6, #0]
 8004d76:	4630      	mov	r0, r6
 8004d78:	f000 f80c 	bl	8004d94 <__malloc_unlock>
 8004d7c:	e794      	b.n	8004ca8 <_malloc_r+0x20>
 8004d7e:	6005      	str	r5, [r0, #0]
 8004d80:	e7d6      	b.n	8004d30 <_malloc_r+0xa8>
 8004d82:	bf00      	nop
 8004d84:	20000390 	.word	0x20000390

08004d88 <__malloc_lock>:
 8004d88:	4801      	ldr	r0, [pc, #4]	@ (8004d90 <__malloc_lock+0x8>)
 8004d8a:	f7ff b8a8 	b.w	8003ede <__retarget_lock_acquire_recursive>
 8004d8e:	bf00      	nop
 8004d90:	20000388 	.word	0x20000388

08004d94 <__malloc_unlock>:
 8004d94:	4801      	ldr	r0, [pc, #4]	@ (8004d9c <__malloc_unlock+0x8>)
 8004d96:	f7ff b8a3 	b.w	8003ee0 <__retarget_lock_release_recursive>
 8004d9a:	bf00      	nop
 8004d9c:	20000388 	.word	0x20000388

08004da0 <_Balloc>:
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	69c6      	ldr	r6, [r0, #28]
 8004da4:	4604      	mov	r4, r0
 8004da6:	460d      	mov	r5, r1
 8004da8:	b976      	cbnz	r6, 8004dc8 <_Balloc+0x28>
 8004daa:	2010      	movs	r0, #16
 8004dac:	f7ff ff42 	bl	8004c34 <malloc>
 8004db0:	4602      	mov	r2, r0
 8004db2:	61e0      	str	r0, [r4, #28]
 8004db4:	b920      	cbnz	r0, 8004dc0 <_Balloc+0x20>
 8004db6:	4b18      	ldr	r3, [pc, #96]	@ (8004e18 <_Balloc+0x78>)
 8004db8:	4818      	ldr	r0, [pc, #96]	@ (8004e1c <_Balloc+0x7c>)
 8004dba:	216b      	movs	r1, #107	@ 0x6b
 8004dbc:	f001 ff3c 	bl	8006c38 <__assert_func>
 8004dc0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004dc4:	6006      	str	r6, [r0, #0]
 8004dc6:	60c6      	str	r6, [r0, #12]
 8004dc8:	69e6      	ldr	r6, [r4, #28]
 8004dca:	68f3      	ldr	r3, [r6, #12]
 8004dcc:	b183      	cbz	r3, 8004df0 <_Balloc+0x50>
 8004dce:	69e3      	ldr	r3, [r4, #28]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004dd6:	b9b8      	cbnz	r0, 8004e08 <_Balloc+0x68>
 8004dd8:	2101      	movs	r1, #1
 8004dda:	fa01 f605 	lsl.w	r6, r1, r5
 8004dde:	1d72      	adds	r2, r6, #5
 8004de0:	0092      	lsls	r2, r2, #2
 8004de2:	4620      	mov	r0, r4
 8004de4:	f001 ff46 	bl	8006c74 <_calloc_r>
 8004de8:	b160      	cbz	r0, 8004e04 <_Balloc+0x64>
 8004dea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004dee:	e00e      	b.n	8004e0e <_Balloc+0x6e>
 8004df0:	2221      	movs	r2, #33	@ 0x21
 8004df2:	2104      	movs	r1, #4
 8004df4:	4620      	mov	r0, r4
 8004df6:	f001 ff3d 	bl	8006c74 <_calloc_r>
 8004dfa:	69e3      	ldr	r3, [r4, #28]
 8004dfc:	60f0      	str	r0, [r6, #12]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e4      	bne.n	8004dce <_Balloc+0x2e>
 8004e04:	2000      	movs	r0, #0
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	6802      	ldr	r2, [r0, #0]
 8004e0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004e0e:	2300      	movs	r3, #0
 8004e10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004e14:	e7f7      	b.n	8004e06 <_Balloc+0x66>
 8004e16:	bf00      	nop
 8004e18:	08007506 	.word	0x08007506
 8004e1c:	08007586 	.word	0x08007586

08004e20 <_Bfree>:
 8004e20:	b570      	push	{r4, r5, r6, lr}
 8004e22:	69c6      	ldr	r6, [r0, #28]
 8004e24:	4605      	mov	r5, r0
 8004e26:	460c      	mov	r4, r1
 8004e28:	b976      	cbnz	r6, 8004e48 <_Bfree+0x28>
 8004e2a:	2010      	movs	r0, #16
 8004e2c:	f7ff ff02 	bl	8004c34 <malloc>
 8004e30:	4602      	mov	r2, r0
 8004e32:	61e8      	str	r0, [r5, #28]
 8004e34:	b920      	cbnz	r0, 8004e40 <_Bfree+0x20>
 8004e36:	4b09      	ldr	r3, [pc, #36]	@ (8004e5c <_Bfree+0x3c>)
 8004e38:	4809      	ldr	r0, [pc, #36]	@ (8004e60 <_Bfree+0x40>)
 8004e3a:	218f      	movs	r1, #143	@ 0x8f
 8004e3c:	f001 fefc 	bl	8006c38 <__assert_func>
 8004e40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004e44:	6006      	str	r6, [r0, #0]
 8004e46:	60c6      	str	r6, [r0, #12]
 8004e48:	b13c      	cbz	r4, 8004e5a <_Bfree+0x3a>
 8004e4a:	69eb      	ldr	r3, [r5, #28]
 8004e4c:	6862      	ldr	r2, [r4, #4]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e54:	6021      	str	r1, [r4, #0]
 8004e56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}
 8004e5c:	08007506 	.word	0x08007506
 8004e60:	08007586 	.word	0x08007586

08004e64 <__multadd>:
 8004e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e68:	690d      	ldr	r5, [r1, #16]
 8004e6a:	4607      	mov	r7, r0
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	461e      	mov	r6, r3
 8004e70:	f101 0c14 	add.w	ip, r1, #20
 8004e74:	2000      	movs	r0, #0
 8004e76:	f8dc 3000 	ldr.w	r3, [ip]
 8004e7a:	b299      	uxth	r1, r3
 8004e7c:	fb02 6101 	mla	r1, r2, r1, r6
 8004e80:	0c1e      	lsrs	r6, r3, #16
 8004e82:	0c0b      	lsrs	r3, r1, #16
 8004e84:	fb02 3306 	mla	r3, r2, r6, r3
 8004e88:	b289      	uxth	r1, r1
 8004e8a:	3001      	adds	r0, #1
 8004e8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004e90:	4285      	cmp	r5, r0
 8004e92:	f84c 1b04 	str.w	r1, [ip], #4
 8004e96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004e9a:	dcec      	bgt.n	8004e76 <__multadd+0x12>
 8004e9c:	b30e      	cbz	r6, 8004ee2 <__multadd+0x7e>
 8004e9e:	68a3      	ldr	r3, [r4, #8]
 8004ea0:	42ab      	cmp	r3, r5
 8004ea2:	dc19      	bgt.n	8004ed8 <__multadd+0x74>
 8004ea4:	6861      	ldr	r1, [r4, #4]
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	3101      	adds	r1, #1
 8004eaa:	f7ff ff79 	bl	8004da0 <_Balloc>
 8004eae:	4680      	mov	r8, r0
 8004eb0:	b928      	cbnz	r0, 8004ebe <__multadd+0x5a>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004ee8 <__multadd+0x84>)
 8004eb6:	480d      	ldr	r0, [pc, #52]	@ (8004eec <__multadd+0x88>)
 8004eb8:	21ba      	movs	r1, #186	@ 0xba
 8004eba:	f001 febd 	bl	8006c38 <__assert_func>
 8004ebe:	6922      	ldr	r2, [r4, #16]
 8004ec0:	3202      	adds	r2, #2
 8004ec2:	f104 010c 	add.w	r1, r4, #12
 8004ec6:	0092      	lsls	r2, r2, #2
 8004ec8:	300c      	adds	r0, #12
 8004eca:	f001 fe9d 	bl	8006c08 <memcpy>
 8004ece:	4621      	mov	r1, r4
 8004ed0:	4638      	mov	r0, r7
 8004ed2:	f7ff ffa5 	bl	8004e20 <_Bfree>
 8004ed6:	4644      	mov	r4, r8
 8004ed8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004edc:	3501      	adds	r5, #1
 8004ede:	615e      	str	r6, [r3, #20]
 8004ee0:	6125      	str	r5, [r4, #16]
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ee8:	08007575 	.word	0x08007575
 8004eec:	08007586 	.word	0x08007586

08004ef0 <__s2b>:
 8004ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ef4:	460c      	mov	r4, r1
 8004ef6:	4615      	mov	r5, r2
 8004ef8:	461f      	mov	r7, r3
 8004efa:	2209      	movs	r2, #9
 8004efc:	3308      	adds	r3, #8
 8004efe:	4606      	mov	r6, r0
 8004f00:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f04:	2100      	movs	r1, #0
 8004f06:	2201      	movs	r2, #1
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	db09      	blt.n	8004f20 <__s2b+0x30>
 8004f0c:	4630      	mov	r0, r6
 8004f0e:	f7ff ff47 	bl	8004da0 <_Balloc>
 8004f12:	b940      	cbnz	r0, 8004f26 <__s2b+0x36>
 8004f14:	4602      	mov	r2, r0
 8004f16:	4b19      	ldr	r3, [pc, #100]	@ (8004f7c <__s2b+0x8c>)
 8004f18:	4819      	ldr	r0, [pc, #100]	@ (8004f80 <__s2b+0x90>)
 8004f1a:	21d3      	movs	r1, #211	@ 0xd3
 8004f1c:	f001 fe8c 	bl	8006c38 <__assert_func>
 8004f20:	0052      	lsls	r2, r2, #1
 8004f22:	3101      	adds	r1, #1
 8004f24:	e7f0      	b.n	8004f08 <__s2b+0x18>
 8004f26:	9b08      	ldr	r3, [sp, #32]
 8004f28:	6143      	str	r3, [r0, #20]
 8004f2a:	2d09      	cmp	r5, #9
 8004f2c:	f04f 0301 	mov.w	r3, #1
 8004f30:	6103      	str	r3, [r0, #16]
 8004f32:	dd16      	ble.n	8004f62 <__s2b+0x72>
 8004f34:	f104 0909 	add.w	r9, r4, #9
 8004f38:	46c8      	mov	r8, r9
 8004f3a:	442c      	add	r4, r5
 8004f3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8004f40:	4601      	mov	r1, r0
 8004f42:	3b30      	subs	r3, #48	@ 0x30
 8004f44:	220a      	movs	r2, #10
 8004f46:	4630      	mov	r0, r6
 8004f48:	f7ff ff8c 	bl	8004e64 <__multadd>
 8004f4c:	45a0      	cmp	r8, r4
 8004f4e:	d1f5      	bne.n	8004f3c <__s2b+0x4c>
 8004f50:	f1a5 0408 	sub.w	r4, r5, #8
 8004f54:	444c      	add	r4, r9
 8004f56:	1b2d      	subs	r5, r5, r4
 8004f58:	1963      	adds	r3, r4, r5
 8004f5a:	42bb      	cmp	r3, r7
 8004f5c:	db04      	blt.n	8004f68 <__s2b+0x78>
 8004f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f62:	340a      	adds	r4, #10
 8004f64:	2509      	movs	r5, #9
 8004f66:	e7f6      	b.n	8004f56 <__s2b+0x66>
 8004f68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004f6c:	4601      	mov	r1, r0
 8004f6e:	3b30      	subs	r3, #48	@ 0x30
 8004f70:	220a      	movs	r2, #10
 8004f72:	4630      	mov	r0, r6
 8004f74:	f7ff ff76 	bl	8004e64 <__multadd>
 8004f78:	e7ee      	b.n	8004f58 <__s2b+0x68>
 8004f7a:	bf00      	nop
 8004f7c:	08007575 	.word	0x08007575
 8004f80:	08007586 	.word	0x08007586

08004f84 <__hi0bits>:
 8004f84:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004f88:	4603      	mov	r3, r0
 8004f8a:	bf36      	itet	cc
 8004f8c:	0403      	lslcc	r3, r0, #16
 8004f8e:	2000      	movcs	r0, #0
 8004f90:	2010      	movcc	r0, #16
 8004f92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f96:	bf3c      	itt	cc
 8004f98:	021b      	lslcc	r3, r3, #8
 8004f9a:	3008      	addcc	r0, #8
 8004f9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004fa0:	bf3c      	itt	cc
 8004fa2:	011b      	lslcc	r3, r3, #4
 8004fa4:	3004      	addcc	r0, #4
 8004fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004faa:	bf3c      	itt	cc
 8004fac:	009b      	lslcc	r3, r3, #2
 8004fae:	3002      	addcc	r0, #2
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	db05      	blt.n	8004fc0 <__hi0bits+0x3c>
 8004fb4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8004fb8:	f100 0001 	add.w	r0, r0, #1
 8004fbc:	bf08      	it	eq
 8004fbe:	2020      	moveq	r0, #32
 8004fc0:	4770      	bx	lr

08004fc2 <__lo0bits>:
 8004fc2:	6803      	ldr	r3, [r0, #0]
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	f013 0007 	ands.w	r0, r3, #7
 8004fca:	d00b      	beq.n	8004fe4 <__lo0bits+0x22>
 8004fcc:	07d9      	lsls	r1, r3, #31
 8004fce:	d421      	bmi.n	8005014 <__lo0bits+0x52>
 8004fd0:	0798      	lsls	r0, r3, #30
 8004fd2:	bf49      	itett	mi
 8004fd4:	085b      	lsrmi	r3, r3, #1
 8004fd6:	089b      	lsrpl	r3, r3, #2
 8004fd8:	2001      	movmi	r0, #1
 8004fda:	6013      	strmi	r3, [r2, #0]
 8004fdc:	bf5c      	itt	pl
 8004fde:	6013      	strpl	r3, [r2, #0]
 8004fe0:	2002      	movpl	r0, #2
 8004fe2:	4770      	bx	lr
 8004fe4:	b299      	uxth	r1, r3
 8004fe6:	b909      	cbnz	r1, 8004fec <__lo0bits+0x2a>
 8004fe8:	0c1b      	lsrs	r3, r3, #16
 8004fea:	2010      	movs	r0, #16
 8004fec:	b2d9      	uxtb	r1, r3
 8004fee:	b909      	cbnz	r1, 8004ff4 <__lo0bits+0x32>
 8004ff0:	3008      	adds	r0, #8
 8004ff2:	0a1b      	lsrs	r3, r3, #8
 8004ff4:	0719      	lsls	r1, r3, #28
 8004ff6:	bf04      	itt	eq
 8004ff8:	091b      	lsreq	r3, r3, #4
 8004ffa:	3004      	addeq	r0, #4
 8004ffc:	0799      	lsls	r1, r3, #30
 8004ffe:	bf04      	itt	eq
 8005000:	089b      	lsreq	r3, r3, #2
 8005002:	3002      	addeq	r0, #2
 8005004:	07d9      	lsls	r1, r3, #31
 8005006:	d403      	bmi.n	8005010 <__lo0bits+0x4e>
 8005008:	085b      	lsrs	r3, r3, #1
 800500a:	f100 0001 	add.w	r0, r0, #1
 800500e:	d003      	beq.n	8005018 <__lo0bits+0x56>
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4770      	bx	lr
 8005014:	2000      	movs	r0, #0
 8005016:	4770      	bx	lr
 8005018:	2020      	movs	r0, #32
 800501a:	4770      	bx	lr

0800501c <__i2b>:
 800501c:	b510      	push	{r4, lr}
 800501e:	460c      	mov	r4, r1
 8005020:	2101      	movs	r1, #1
 8005022:	f7ff febd 	bl	8004da0 <_Balloc>
 8005026:	4602      	mov	r2, r0
 8005028:	b928      	cbnz	r0, 8005036 <__i2b+0x1a>
 800502a:	4b05      	ldr	r3, [pc, #20]	@ (8005040 <__i2b+0x24>)
 800502c:	4805      	ldr	r0, [pc, #20]	@ (8005044 <__i2b+0x28>)
 800502e:	f240 1145 	movw	r1, #325	@ 0x145
 8005032:	f001 fe01 	bl	8006c38 <__assert_func>
 8005036:	2301      	movs	r3, #1
 8005038:	6144      	str	r4, [r0, #20]
 800503a:	6103      	str	r3, [r0, #16]
 800503c:	bd10      	pop	{r4, pc}
 800503e:	bf00      	nop
 8005040:	08007575 	.word	0x08007575
 8005044:	08007586 	.word	0x08007586

08005048 <__multiply>:
 8005048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800504c:	4617      	mov	r7, r2
 800504e:	690a      	ldr	r2, [r1, #16]
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	429a      	cmp	r2, r3
 8005054:	bfa8      	it	ge
 8005056:	463b      	movge	r3, r7
 8005058:	4689      	mov	r9, r1
 800505a:	bfa4      	itt	ge
 800505c:	460f      	movge	r7, r1
 800505e:	4699      	movge	r9, r3
 8005060:	693d      	ldr	r5, [r7, #16]
 8005062:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	eb05 060a 	add.w	r6, r5, sl
 800506e:	42b3      	cmp	r3, r6
 8005070:	b085      	sub	sp, #20
 8005072:	bfb8      	it	lt
 8005074:	3101      	addlt	r1, #1
 8005076:	f7ff fe93 	bl	8004da0 <_Balloc>
 800507a:	b930      	cbnz	r0, 800508a <__multiply+0x42>
 800507c:	4602      	mov	r2, r0
 800507e:	4b41      	ldr	r3, [pc, #260]	@ (8005184 <__multiply+0x13c>)
 8005080:	4841      	ldr	r0, [pc, #260]	@ (8005188 <__multiply+0x140>)
 8005082:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005086:	f001 fdd7 	bl	8006c38 <__assert_func>
 800508a:	f100 0414 	add.w	r4, r0, #20
 800508e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005092:	4623      	mov	r3, r4
 8005094:	2200      	movs	r2, #0
 8005096:	4573      	cmp	r3, lr
 8005098:	d320      	bcc.n	80050dc <__multiply+0x94>
 800509a:	f107 0814 	add.w	r8, r7, #20
 800509e:	f109 0114 	add.w	r1, r9, #20
 80050a2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80050a6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80050aa:	9302      	str	r3, [sp, #8]
 80050ac:	1beb      	subs	r3, r5, r7
 80050ae:	3b15      	subs	r3, #21
 80050b0:	f023 0303 	bic.w	r3, r3, #3
 80050b4:	3304      	adds	r3, #4
 80050b6:	3715      	adds	r7, #21
 80050b8:	42bd      	cmp	r5, r7
 80050ba:	bf38      	it	cc
 80050bc:	2304      	movcc	r3, #4
 80050be:	9301      	str	r3, [sp, #4]
 80050c0:	9b02      	ldr	r3, [sp, #8]
 80050c2:	9103      	str	r1, [sp, #12]
 80050c4:	428b      	cmp	r3, r1
 80050c6:	d80c      	bhi.n	80050e2 <__multiply+0x9a>
 80050c8:	2e00      	cmp	r6, #0
 80050ca:	dd03      	ble.n	80050d4 <__multiply+0x8c>
 80050cc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d055      	beq.n	8005180 <__multiply+0x138>
 80050d4:	6106      	str	r6, [r0, #16]
 80050d6:	b005      	add	sp, #20
 80050d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050dc:	f843 2b04 	str.w	r2, [r3], #4
 80050e0:	e7d9      	b.n	8005096 <__multiply+0x4e>
 80050e2:	f8b1 a000 	ldrh.w	sl, [r1]
 80050e6:	f1ba 0f00 	cmp.w	sl, #0
 80050ea:	d01f      	beq.n	800512c <__multiply+0xe4>
 80050ec:	46c4      	mov	ip, r8
 80050ee:	46a1      	mov	r9, r4
 80050f0:	2700      	movs	r7, #0
 80050f2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80050f6:	f8d9 3000 	ldr.w	r3, [r9]
 80050fa:	fa1f fb82 	uxth.w	fp, r2
 80050fe:	b29b      	uxth	r3, r3
 8005100:	fb0a 330b 	mla	r3, sl, fp, r3
 8005104:	443b      	add	r3, r7
 8005106:	f8d9 7000 	ldr.w	r7, [r9]
 800510a:	0c12      	lsrs	r2, r2, #16
 800510c:	0c3f      	lsrs	r7, r7, #16
 800510e:	fb0a 7202 	mla	r2, sl, r2, r7
 8005112:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005116:	b29b      	uxth	r3, r3
 8005118:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800511c:	4565      	cmp	r5, ip
 800511e:	f849 3b04 	str.w	r3, [r9], #4
 8005122:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005126:	d8e4      	bhi.n	80050f2 <__multiply+0xaa>
 8005128:	9b01      	ldr	r3, [sp, #4]
 800512a:	50e7      	str	r7, [r4, r3]
 800512c:	9b03      	ldr	r3, [sp, #12]
 800512e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005132:	3104      	adds	r1, #4
 8005134:	f1b9 0f00 	cmp.w	r9, #0
 8005138:	d020      	beq.n	800517c <__multiply+0x134>
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	4647      	mov	r7, r8
 800513e:	46a4      	mov	ip, r4
 8005140:	f04f 0a00 	mov.w	sl, #0
 8005144:	f8b7 b000 	ldrh.w	fp, [r7]
 8005148:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800514c:	fb09 220b 	mla	r2, r9, fp, r2
 8005150:	4452      	add	r2, sl
 8005152:	b29b      	uxth	r3, r3
 8005154:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005158:	f84c 3b04 	str.w	r3, [ip], #4
 800515c:	f857 3b04 	ldr.w	r3, [r7], #4
 8005160:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005164:	f8bc 3000 	ldrh.w	r3, [ip]
 8005168:	fb09 330a 	mla	r3, r9, sl, r3
 800516c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005170:	42bd      	cmp	r5, r7
 8005172:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005176:	d8e5      	bhi.n	8005144 <__multiply+0xfc>
 8005178:	9a01      	ldr	r2, [sp, #4]
 800517a:	50a3      	str	r3, [r4, r2]
 800517c:	3404      	adds	r4, #4
 800517e:	e79f      	b.n	80050c0 <__multiply+0x78>
 8005180:	3e01      	subs	r6, #1
 8005182:	e7a1      	b.n	80050c8 <__multiply+0x80>
 8005184:	08007575 	.word	0x08007575
 8005188:	08007586 	.word	0x08007586

0800518c <__pow5mult>:
 800518c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005190:	4615      	mov	r5, r2
 8005192:	f012 0203 	ands.w	r2, r2, #3
 8005196:	4607      	mov	r7, r0
 8005198:	460e      	mov	r6, r1
 800519a:	d007      	beq.n	80051ac <__pow5mult+0x20>
 800519c:	4c25      	ldr	r4, [pc, #148]	@ (8005234 <__pow5mult+0xa8>)
 800519e:	3a01      	subs	r2, #1
 80051a0:	2300      	movs	r3, #0
 80051a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80051a6:	f7ff fe5d 	bl	8004e64 <__multadd>
 80051aa:	4606      	mov	r6, r0
 80051ac:	10ad      	asrs	r5, r5, #2
 80051ae:	d03d      	beq.n	800522c <__pow5mult+0xa0>
 80051b0:	69fc      	ldr	r4, [r7, #28]
 80051b2:	b97c      	cbnz	r4, 80051d4 <__pow5mult+0x48>
 80051b4:	2010      	movs	r0, #16
 80051b6:	f7ff fd3d 	bl	8004c34 <malloc>
 80051ba:	4602      	mov	r2, r0
 80051bc:	61f8      	str	r0, [r7, #28]
 80051be:	b928      	cbnz	r0, 80051cc <__pow5mult+0x40>
 80051c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005238 <__pow5mult+0xac>)
 80051c2:	481e      	ldr	r0, [pc, #120]	@ (800523c <__pow5mult+0xb0>)
 80051c4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80051c8:	f001 fd36 	bl	8006c38 <__assert_func>
 80051cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80051d0:	6004      	str	r4, [r0, #0]
 80051d2:	60c4      	str	r4, [r0, #12]
 80051d4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80051d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80051dc:	b94c      	cbnz	r4, 80051f2 <__pow5mult+0x66>
 80051de:	f240 2171 	movw	r1, #625	@ 0x271
 80051e2:	4638      	mov	r0, r7
 80051e4:	f7ff ff1a 	bl	800501c <__i2b>
 80051e8:	2300      	movs	r3, #0
 80051ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80051ee:	4604      	mov	r4, r0
 80051f0:	6003      	str	r3, [r0, #0]
 80051f2:	f04f 0900 	mov.w	r9, #0
 80051f6:	07eb      	lsls	r3, r5, #31
 80051f8:	d50a      	bpl.n	8005210 <__pow5mult+0x84>
 80051fa:	4631      	mov	r1, r6
 80051fc:	4622      	mov	r2, r4
 80051fe:	4638      	mov	r0, r7
 8005200:	f7ff ff22 	bl	8005048 <__multiply>
 8005204:	4631      	mov	r1, r6
 8005206:	4680      	mov	r8, r0
 8005208:	4638      	mov	r0, r7
 800520a:	f7ff fe09 	bl	8004e20 <_Bfree>
 800520e:	4646      	mov	r6, r8
 8005210:	106d      	asrs	r5, r5, #1
 8005212:	d00b      	beq.n	800522c <__pow5mult+0xa0>
 8005214:	6820      	ldr	r0, [r4, #0]
 8005216:	b938      	cbnz	r0, 8005228 <__pow5mult+0x9c>
 8005218:	4622      	mov	r2, r4
 800521a:	4621      	mov	r1, r4
 800521c:	4638      	mov	r0, r7
 800521e:	f7ff ff13 	bl	8005048 <__multiply>
 8005222:	6020      	str	r0, [r4, #0]
 8005224:	f8c0 9000 	str.w	r9, [r0]
 8005228:	4604      	mov	r4, r0
 800522a:	e7e4      	b.n	80051f6 <__pow5mult+0x6a>
 800522c:	4630      	mov	r0, r6
 800522e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005232:	bf00      	nop
 8005234:	08007698 	.word	0x08007698
 8005238:	08007506 	.word	0x08007506
 800523c:	08007586 	.word	0x08007586

08005240 <__lshift>:
 8005240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005244:	460c      	mov	r4, r1
 8005246:	6849      	ldr	r1, [r1, #4]
 8005248:	6923      	ldr	r3, [r4, #16]
 800524a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800524e:	68a3      	ldr	r3, [r4, #8]
 8005250:	4607      	mov	r7, r0
 8005252:	4691      	mov	r9, r2
 8005254:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005258:	f108 0601 	add.w	r6, r8, #1
 800525c:	42b3      	cmp	r3, r6
 800525e:	db0b      	blt.n	8005278 <__lshift+0x38>
 8005260:	4638      	mov	r0, r7
 8005262:	f7ff fd9d 	bl	8004da0 <_Balloc>
 8005266:	4605      	mov	r5, r0
 8005268:	b948      	cbnz	r0, 800527e <__lshift+0x3e>
 800526a:	4602      	mov	r2, r0
 800526c:	4b28      	ldr	r3, [pc, #160]	@ (8005310 <__lshift+0xd0>)
 800526e:	4829      	ldr	r0, [pc, #164]	@ (8005314 <__lshift+0xd4>)
 8005270:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005274:	f001 fce0 	bl	8006c38 <__assert_func>
 8005278:	3101      	adds	r1, #1
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	e7ee      	b.n	800525c <__lshift+0x1c>
 800527e:	2300      	movs	r3, #0
 8005280:	f100 0114 	add.w	r1, r0, #20
 8005284:	f100 0210 	add.w	r2, r0, #16
 8005288:	4618      	mov	r0, r3
 800528a:	4553      	cmp	r3, sl
 800528c:	db33      	blt.n	80052f6 <__lshift+0xb6>
 800528e:	6920      	ldr	r0, [r4, #16]
 8005290:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005294:	f104 0314 	add.w	r3, r4, #20
 8005298:	f019 091f 	ands.w	r9, r9, #31
 800529c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80052a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80052a4:	d02b      	beq.n	80052fe <__lshift+0xbe>
 80052a6:	f1c9 0e20 	rsb	lr, r9, #32
 80052aa:	468a      	mov	sl, r1
 80052ac:	2200      	movs	r2, #0
 80052ae:	6818      	ldr	r0, [r3, #0]
 80052b0:	fa00 f009 	lsl.w	r0, r0, r9
 80052b4:	4310      	orrs	r0, r2
 80052b6:	f84a 0b04 	str.w	r0, [sl], #4
 80052ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80052be:	459c      	cmp	ip, r3
 80052c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80052c4:	d8f3      	bhi.n	80052ae <__lshift+0x6e>
 80052c6:	ebac 0304 	sub.w	r3, ip, r4
 80052ca:	3b15      	subs	r3, #21
 80052cc:	f023 0303 	bic.w	r3, r3, #3
 80052d0:	3304      	adds	r3, #4
 80052d2:	f104 0015 	add.w	r0, r4, #21
 80052d6:	4560      	cmp	r0, ip
 80052d8:	bf88      	it	hi
 80052da:	2304      	movhi	r3, #4
 80052dc:	50ca      	str	r2, [r1, r3]
 80052de:	b10a      	cbz	r2, 80052e4 <__lshift+0xa4>
 80052e0:	f108 0602 	add.w	r6, r8, #2
 80052e4:	3e01      	subs	r6, #1
 80052e6:	4638      	mov	r0, r7
 80052e8:	612e      	str	r6, [r5, #16]
 80052ea:	4621      	mov	r1, r4
 80052ec:	f7ff fd98 	bl	8004e20 <_Bfree>
 80052f0:	4628      	mov	r0, r5
 80052f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80052fa:	3301      	adds	r3, #1
 80052fc:	e7c5      	b.n	800528a <__lshift+0x4a>
 80052fe:	3904      	subs	r1, #4
 8005300:	f853 2b04 	ldr.w	r2, [r3], #4
 8005304:	f841 2f04 	str.w	r2, [r1, #4]!
 8005308:	459c      	cmp	ip, r3
 800530a:	d8f9      	bhi.n	8005300 <__lshift+0xc0>
 800530c:	e7ea      	b.n	80052e4 <__lshift+0xa4>
 800530e:	bf00      	nop
 8005310:	08007575 	.word	0x08007575
 8005314:	08007586 	.word	0x08007586

08005318 <__mcmp>:
 8005318:	690a      	ldr	r2, [r1, #16]
 800531a:	4603      	mov	r3, r0
 800531c:	6900      	ldr	r0, [r0, #16]
 800531e:	1a80      	subs	r0, r0, r2
 8005320:	b530      	push	{r4, r5, lr}
 8005322:	d10e      	bne.n	8005342 <__mcmp+0x2a>
 8005324:	3314      	adds	r3, #20
 8005326:	3114      	adds	r1, #20
 8005328:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800532c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005330:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005334:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005338:	4295      	cmp	r5, r2
 800533a:	d003      	beq.n	8005344 <__mcmp+0x2c>
 800533c:	d205      	bcs.n	800534a <__mcmp+0x32>
 800533e:	f04f 30ff 	mov.w	r0, #4294967295
 8005342:	bd30      	pop	{r4, r5, pc}
 8005344:	42a3      	cmp	r3, r4
 8005346:	d3f3      	bcc.n	8005330 <__mcmp+0x18>
 8005348:	e7fb      	b.n	8005342 <__mcmp+0x2a>
 800534a:	2001      	movs	r0, #1
 800534c:	e7f9      	b.n	8005342 <__mcmp+0x2a>
	...

08005350 <__mdiff>:
 8005350:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005354:	4689      	mov	r9, r1
 8005356:	4606      	mov	r6, r0
 8005358:	4611      	mov	r1, r2
 800535a:	4648      	mov	r0, r9
 800535c:	4614      	mov	r4, r2
 800535e:	f7ff ffdb 	bl	8005318 <__mcmp>
 8005362:	1e05      	subs	r5, r0, #0
 8005364:	d112      	bne.n	800538c <__mdiff+0x3c>
 8005366:	4629      	mov	r1, r5
 8005368:	4630      	mov	r0, r6
 800536a:	f7ff fd19 	bl	8004da0 <_Balloc>
 800536e:	4602      	mov	r2, r0
 8005370:	b928      	cbnz	r0, 800537e <__mdiff+0x2e>
 8005372:	4b3f      	ldr	r3, [pc, #252]	@ (8005470 <__mdiff+0x120>)
 8005374:	f240 2137 	movw	r1, #567	@ 0x237
 8005378:	483e      	ldr	r0, [pc, #248]	@ (8005474 <__mdiff+0x124>)
 800537a:	f001 fc5d 	bl	8006c38 <__assert_func>
 800537e:	2301      	movs	r3, #1
 8005380:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005384:	4610      	mov	r0, r2
 8005386:	b003      	add	sp, #12
 8005388:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800538c:	bfbc      	itt	lt
 800538e:	464b      	movlt	r3, r9
 8005390:	46a1      	movlt	r9, r4
 8005392:	4630      	mov	r0, r6
 8005394:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005398:	bfba      	itte	lt
 800539a:	461c      	movlt	r4, r3
 800539c:	2501      	movlt	r5, #1
 800539e:	2500      	movge	r5, #0
 80053a0:	f7ff fcfe 	bl	8004da0 <_Balloc>
 80053a4:	4602      	mov	r2, r0
 80053a6:	b918      	cbnz	r0, 80053b0 <__mdiff+0x60>
 80053a8:	4b31      	ldr	r3, [pc, #196]	@ (8005470 <__mdiff+0x120>)
 80053aa:	f240 2145 	movw	r1, #581	@ 0x245
 80053ae:	e7e3      	b.n	8005378 <__mdiff+0x28>
 80053b0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80053b4:	6926      	ldr	r6, [r4, #16]
 80053b6:	60c5      	str	r5, [r0, #12]
 80053b8:	f109 0310 	add.w	r3, r9, #16
 80053bc:	f109 0514 	add.w	r5, r9, #20
 80053c0:	f104 0e14 	add.w	lr, r4, #20
 80053c4:	f100 0b14 	add.w	fp, r0, #20
 80053c8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80053cc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	46d9      	mov	r9, fp
 80053d4:	f04f 0c00 	mov.w	ip, #0
 80053d8:	9b01      	ldr	r3, [sp, #4]
 80053da:	f85e 0b04 	ldr.w	r0, [lr], #4
 80053de:	f853 af04 	ldr.w	sl, [r3, #4]!
 80053e2:	9301      	str	r3, [sp, #4]
 80053e4:	fa1f f38a 	uxth.w	r3, sl
 80053e8:	4619      	mov	r1, r3
 80053ea:	b283      	uxth	r3, r0
 80053ec:	1acb      	subs	r3, r1, r3
 80053ee:	0c00      	lsrs	r0, r0, #16
 80053f0:	4463      	add	r3, ip
 80053f2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80053f6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005400:	4576      	cmp	r6, lr
 8005402:	f849 3b04 	str.w	r3, [r9], #4
 8005406:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800540a:	d8e5      	bhi.n	80053d8 <__mdiff+0x88>
 800540c:	1b33      	subs	r3, r6, r4
 800540e:	3b15      	subs	r3, #21
 8005410:	f023 0303 	bic.w	r3, r3, #3
 8005414:	3415      	adds	r4, #21
 8005416:	3304      	adds	r3, #4
 8005418:	42a6      	cmp	r6, r4
 800541a:	bf38      	it	cc
 800541c:	2304      	movcc	r3, #4
 800541e:	441d      	add	r5, r3
 8005420:	445b      	add	r3, fp
 8005422:	461e      	mov	r6, r3
 8005424:	462c      	mov	r4, r5
 8005426:	4544      	cmp	r4, r8
 8005428:	d30e      	bcc.n	8005448 <__mdiff+0xf8>
 800542a:	f108 0103 	add.w	r1, r8, #3
 800542e:	1b49      	subs	r1, r1, r5
 8005430:	f021 0103 	bic.w	r1, r1, #3
 8005434:	3d03      	subs	r5, #3
 8005436:	45a8      	cmp	r8, r5
 8005438:	bf38      	it	cc
 800543a:	2100      	movcc	r1, #0
 800543c:	440b      	add	r3, r1
 800543e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005442:	b191      	cbz	r1, 800546a <__mdiff+0x11a>
 8005444:	6117      	str	r7, [r2, #16]
 8005446:	e79d      	b.n	8005384 <__mdiff+0x34>
 8005448:	f854 1b04 	ldr.w	r1, [r4], #4
 800544c:	46e6      	mov	lr, ip
 800544e:	0c08      	lsrs	r0, r1, #16
 8005450:	fa1c fc81 	uxtah	ip, ip, r1
 8005454:	4471      	add	r1, lr
 8005456:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800545a:	b289      	uxth	r1, r1
 800545c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005460:	f846 1b04 	str.w	r1, [r6], #4
 8005464:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005468:	e7dd      	b.n	8005426 <__mdiff+0xd6>
 800546a:	3f01      	subs	r7, #1
 800546c:	e7e7      	b.n	800543e <__mdiff+0xee>
 800546e:	bf00      	nop
 8005470:	08007575 	.word	0x08007575
 8005474:	08007586 	.word	0x08007586

08005478 <__ulp>:
 8005478:	b082      	sub	sp, #8
 800547a:	ed8d 0b00 	vstr	d0, [sp]
 800547e:	9a01      	ldr	r2, [sp, #4]
 8005480:	4b0f      	ldr	r3, [pc, #60]	@ (80054c0 <__ulp+0x48>)
 8005482:	4013      	ands	r3, r2
 8005484:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8005488:	2b00      	cmp	r3, #0
 800548a:	dc08      	bgt.n	800549e <__ulp+0x26>
 800548c:	425b      	negs	r3, r3
 800548e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8005492:	ea4f 5223 	mov.w	r2, r3, asr #20
 8005496:	da04      	bge.n	80054a2 <__ulp+0x2a>
 8005498:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800549c:	4113      	asrs	r3, r2
 800549e:	2200      	movs	r2, #0
 80054a0:	e008      	b.n	80054b4 <__ulp+0x3c>
 80054a2:	f1a2 0314 	sub.w	r3, r2, #20
 80054a6:	2b1e      	cmp	r3, #30
 80054a8:	bfda      	itte	le
 80054aa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80054ae:	40da      	lsrle	r2, r3
 80054b0:	2201      	movgt	r2, #1
 80054b2:	2300      	movs	r3, #0
 80054b4:	4619      	mov	r1, r3
 80054b6:	4610      	mov	r0, r2
 80054b8:	ec41 0b10 	vmov	d0, r0, r1
 80054bc:	b002      	add	sp, #8
 80054be:	4770      	bx	lr
 80054c0:	7ff00000 	.word	0x7ff00000

080054c4 <__b2d>:
 80054c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c8:	6906      	ldr	r6, [r0, #16]
 80054ca:	f100 0814 	add.w	r8, r0, #20
 80054ce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80054d2:	1f37      	subs	r7, r6, #4
 80054d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80054d8:	4610      	mov	r0, r2
 80054da:	f7ff fd53 	bl	8004f84 <__hi0bits>
 80054de:	f1c0 0320 	rsb	r3, r0, #32
 80054e2:	280a      	cmp	r0, #10
 80054e4:	600b      	str	r3, [r1, #0]
 80054e6:	491b      	ldr	r1, [pc, #108]	@ (8005554 <__b2d+0x90>)
 80054e8:	dc15      	bgt.n	8005516 <__b2d+0x52>
 80054ea:	f1c0 0c0b 	rsb	ip, r0, #11
 80054ee:	fa22 f30c 	lsr.w	r3, r2, ip
 80054f2:	45b8      	cmp	r8, r7
 80054f4:	ea43 0501 	orr.w	r5, r3, r1
 80054f8:	bf34      	ite	cc
 80054fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80054fe:	2300      	movcs	r3, #0
 8005500:	3015      	adds	r0, #21
 8005502:	fa02 f000 	lsl.w	r0, r2, r0
 8005506:	fa23 f30c 	lsr.w	r3, r3, ip
 800550a:	4303      	orrs	r3, r0
 800550c:	461c      	mov	r4, r3
 800550e:	ec45 4b10 	vmov	d0, r4, r5
 8005512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005516:	45b8      	cmp	r8, r7
 8005518:	bf3a      	itte	cc
 800551a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800551e:	f1a6 0708 	subcc.w	r7, r6, #8
 8005522:	2300      	movcs	r3, #0
 8005524:	380b      	subs	r0, #11
 8005526:	d012      	beq.n	800554e <__b2d+0x8a>
 8005528:	f1c0 0120 	rsb	r1, r0, #32
 800552c:	fa23 f401 	lsr.w	r4, r3, r1
 8005530:	4082      	lsls	r2, r0
 8005532:	4322      	orrs	r2, r4
 8005534:	4547      	cmp	r7, r8
 8005536:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800553a:	bf8c      	ite	hi
 800553c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8005540:	2200      	movls	r2, #0
 8005542:	4083      	lsls	r3, r0
 8005544:	40ca      	lsrs	r2, r1
 8005546:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800554a:	4313      	orrs	r3, r2
 800554c:	e7de      	b.n	800550c <__b2d+0x48>
 800554e:	ea42 0501 	orr.w	r5, r2, r1
 8005552:	e7db      	b.n	800550c <__b2d+0x48>
 8005554:	3ff00000 	.word	0x3ff00000

08005558 <__d2b>:
 8005558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800555c:	460f      	mov	r7, r1
 800555e:	2101      	movs	r1, #1
 8005560:	ec59 8b10 	vmov	r8, r9, d0
 8005564:	4616      	mov	r6, r2
 8005566:	f7ff fc1b 	bl	8004da0 <_Balloc>
 800556a:	4604      	mov	r4, r0
 800556c:	b930      	cbnz	r0, 800557c <__d2b+0x24>
 800556e:	4602      	mov	r2, r0
 8005570:	4b23      	ldr	r3, [pc, #140]	@ (8005600 <__d2b+0xa8>)
 8005572:	4824      	ldr	r0, [pc, #144]	@ (8005604 <__d2b+0xac>)
 8005574:	f240 310f 	movw	r1, #783	@ 0x30f
 8005578:	f001 fb5e 	bl	8006c38 <__assert_func>
 800557c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005580:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005584:	b10d      	cbz	r5, 800558a <__d2b+0x32>
 8005586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800558a:	9301      	str	r3, [sp, #4]
 800558c:	f1b8 0300 	subs.w	r3, r8, #0
 8005590:	d023      	beq.n	80055da <__d2b+0x82>
 8005592:	4668      	mov	r0, sp
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	f7ff fd14 	bl	8004fc2 <__lo0bits>
 800559a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800559e:	b1d0      	cbz	r0, 80055d6 <__d2b+0x7e>
 80055a0:	f1c0 0320 	rsb	r3, r0, #32
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	430b      	orrs	r3, r1
 80055aa:	40c2      	lsrs	r2, r0
 80055ac:	6163      	str	r3, [r4, #20]
 80055ae:	9201      	str	r2, [sp, #4]
 80055b0:	9b01      	ldr	r3, [sp, #4]
 80055b2:	61a3      	str	r3, [r4, #24]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	bf0c      	ite	eq
 80055b8:	2201      	moveq	r2, #1
 80055ba:	2202      	movne	r2, #2
 80055bc:	6122      	str	r2, [r4, #16]
 80055be:	b1a5      	cbz	r5, 80055ea <__d2b+0x92>
 80055c0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80055c4:	4405      	add	r5, r0
 80055c6:	603d      	str	r5, [r7, #0]
 80055c8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80055cc:	6030      	str	r0, [r6, #0]
 80055ce:	4620      	mov	r0, r4
 80055d0:	b003      	add	sp, #12
 80055d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055d6:	6161      	str	r1, [r4, #20]
 80055d8:	e7ea      	b.n	80055b0 <__d2b+0x58>
 80055da:	a801      	add	r0, sp, #4
 80055dc:	f7ff fcf1 	bl	8004fc2 <__lo0bits>
 80055e0:	9b01      	ldr	r3, [sp, #4]
 80055e2:	6163      	str	r3, [r4, #20]
 80055e4:	3020      	adds	r0, #32
 80055e6:	2201      	movs	r2, #1
 80055e8:	e7e8      	b.n	80055bc <__d2b+0x64>
 80055ea:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80055ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80055f2:	6038      	str	r0, [r7, #0]
 80055f4:	6918      	ldr	r0, [r3, #16]
 80055f6:	f7ff fcc5 	bl	8004f84 <__hi0bits>
 80055fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80055fe:	e7e5      	b.n	80055cc <__d2b+0x74>
 8005600:	08007575 	.word	0x08007575
 8005604:	08007586 	.word	0x08007586

08005608 <__ratio>:
 8005608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800560c:	b085      	sub	sp, #20
 800560e:	e9cd 1000 	strd	r1, r0, [sp]
 8005612:	a902      	add	r1, sp, #8
 8005614:	f7ff ff56 	bl	80054c4 <__b2d>
 8005618:	9800      	ldr	r0, [sp, #0]
 800561a:	a903      	add	r1, sp, #12
 800561c:	ec55 4b10 	vmov	r4, r5, d0
 8005620:	f7ff ff50 	bl	80054c4 <__b2d>
 8005624:	9b01      	ldr	r3, [sp, #4]
 8005626:	6919      	ldr	r1, [r3, #16]
 8005628:	9b00      	ldr	r3, [sp, #0]
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	1ac9      	subs	r1, r1, r3
 800562e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8005632:	1a9b      	subs	r3, r3, r2
 8005634:	ec5b ab10 	vmov	sl, fp, d0
 8005638:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800563c:	2b00      	cmp	r3, #0
 800563e:	bfce      	itee	gt
 8005640:	462a      	movgt	r2, r5
 8005642:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005646:	465a      	movle	r2, fp
 8005648:	462f      	mov	r7, r5
 800564a:	46d9      	mov	r9, fp
 800564c:	bfcc      	ite	gt
 800564e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8005652:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8005656:	464b      	mov	r3, r9
 8005658:	4652      	mov	r2, sl
 800565a:	4620      	mov	r0, r4
 800565c:	4639      	mov	r1, r7
 800565e:	f7fb f8f5 	bl	800084c <__aeabi_ddiv>
 8005662:	ec41 0b10 	vmov	d0, r0, r1
 8005666:	b005      	add	sp, #20
 8005668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800566c <__copybits>:
 800566c:	3901      	subs	r1, #1
 800566e:	b570      	push	{r4, r5, r6, lr}
 8005670:	1149      	asrs	r1, r1, #5
 8005672:	6914      	ldr	r4, [r2, #16]
 8005674:	3101      	adds	r1, #1
 8005676:	f102 0314 	add.w	r3, r2, #20
 800567a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800567e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005682:	1f05      	subs	r5, r0, #4
 8005684:	42a3      	cmp	r3, r4
 8005686:	d30c      	bcc.n	80056a2 <__copybits+0x36>
 8005688:	1aa3      	subs	r3, r4, r2
 800568a:	3b11      	subs	r3, #17
 800568c:	f023 0303 	bic.w	r3, r3, #3
 8005690:	3211      	adds	r2, #17
 8005692:	42a2      	cmp	r2, r4
 8005694:	bf88      	it	hi
 8005696:	2300      	movhi	r3, #0
 8005698:	4418      	add	r0, r3
 800569a:	2300      	movs	r3, #0
 800569c:	4288      	cmp	r0, r1
 800569e:	d305      	bcc.n	80056ac <__copybits+0x40>
 80056a0:	bd70      	pop	{r4, r5, r6, pc}
 80056a2:	f853 6b04 	ldr.w	r6, [r3], #4
 80056a6:	f845 6f04 	str.w	r6, [r5, #4]!
 80056aa:	e7eb      	b.n	8005684 <__copybits+0x18>
 80056ac:	f840 3b04 	str.w	r3, [r0], #4
 80056b0:	e7f4      	b.n	800569c <__copybits+0x30>

080056b2 <__any_on>:
 80056b2:	f100 0214 	add.w	r2, r0, #20
 80056b6:	6900      	ldr	r0, [r0, #16]
 80056b8:	114b      	asrs	r3, r1, #5
 80056ba:	4298      	cmp	r0, r3
 80056bc:	b510      	push	{r4, lr}
 80056be:	db11      	blt.n	80056e4 <__any_on+0x32>
 80056c0:	dd0a      	ble.n	80056d8 <__any_on+0x26>
 80056c2:	f011 011f 	ands.w	r1, r1, #31
 80056c6:	d007      	beq.n	80056d8 <__any_on+0x26>
 80056c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80056cc:	fa24 f001 	lsr.w	r0, r4, r1
 80056d0:	fa00 f101 	lsl.w	r1, r0, r1
 80056d4:	428c      	cmp	r4, r1
 80056d6:	d10b      	bne.n	80056f0 <__any_on+0x3e>
 80056d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80056dc:	4293      	cmp	r3, r2
 80056de:	d803      	bhi.n	80056e8 <__any_on+0x36>
 80056e0:	2000      	movs	r0, #0
 80056e2:	bd10      	pop	{r4, pc}
 80056e4:	4603      	mov	r3, r0
 80056e6:	e7f7      	b.n	80056d8 <__any_on+0x26>
 80056e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80056ec:	2900      	cmp	r1, #0
 80056ee:	d0f5      	beq.n	80056dc <__any_on+0x2a>
 80056f0:	2001      	movs	r0, #1
 80056f2:	e7f6      	b.n	80056e2 <__any_on+0x30>

080056f4 <sulp>:
 80056f4:	b570      	push	{r4, r5, r6, lr}
 80056f6:	4604      	mov	r4, r0
 80056f8:	460d      	mov	r5, r1
 80056fa:	ec45 4b10 	vmov	d0, r4, r5
 80056fe:	4616      	mov	r6, r2
 8005700:	f7ff feba 	bl	8005478 <__ulp>
 8005704:	ec51 0b10 	vmov	r0, r1, d0
 8005708:	b17e      	cbz	r6, 800572a <sulp+0x36>
 800570a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800570e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005712:	2b00      	cmp	r3, #0
 8005714:	dd09      	ble.n	800572a <sulp+0x36>
 8005716:	051b      	lsls	r3, r3, #20
 8005718:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800571c:	2400      	movs	r4, #0
 800571e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005722:	4622      	mov	r2, r4
 8005724:	462b      	mov	r3, r5
 8005726:	f7fa ff67 	bl	80005f8 <__aeabi_dmul>
 800572a:	ec41 0b10 	vmov	d0, r0, r1
 800572e:	bd70      	pop	{r4, r5, r6, pc}

08005730 <_strtod_l>:
 8005730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005734:	b09f      	sub	sp, #124	@ 0x7c
 8005736:	460c      	mov	r4, r1
 8005738:	9217      	str	r2, [sp, #92]	@ 0x5c
 800573a:	2200      	movs	r2, #0
 800573c:	921a      	str	r2, [sp, #104]	@ 0x68
 800573e:	9005      	str	r0, [sp, #20]
 8005740:	f04f 0a00 	mov.w	sl, #0
 8005744:	f04f 0b00 	mov.w	fp, #0
 8005748:	460a      	mov	r2, r1
 800574a:	9219      	str	r2, [sp, #100]	@ 0x64
 800574c:	7811      	ldrb	r1, [r2, #0]
 800574e:	292b      	cmp	r1, #43	@ 0x2b
 8005750:	d04a      	beq.n	80057e8 <_strtod_l+0xb8>
 8005752:	d838      	bhi.n	80057c6 <_strtod_l+0x96>
 8005754:	290d      	cmp	r1, #13
 8005756:	d832      	bhi.n	80057be <_strtod_l+0x8e>
 8005758:	2908      	cmp	r1, #8
 800575a:	d832      	bhi.n	80057c2 <_strtod_l+0x92>
 800575c:	2900      	cmp	r1, #0
 800575e:	d03b      	beq.n	80057d8 <_strtod_l+0xa8>
 8005760:	2200      	movs	r2, #0
 8005762:	920e      	str	r2, [sp, #56]	@ 0x38
 8005764:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005766:	782a      	ldrb	r2, [r5, #0]
 8005768:	2a30      	cmp	r2, #48	@ 0x30
 800576a:	f040 80b2 	bne.w	80058d2 <_strtod_l+0x1a2>
 800576e:	786a      	ldrb	r2, [r5, #1]
 8005770:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005774:	2a58      	cmp	r2, #88	@ 0x58
 8005776:	d16e      	bne.n	8005856 <_strtod_l+0x126>
 8005778:	9302      	str	r3, [sp, #8]
 800577a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800577c:	9301      	str	r3, [sp, #4]
 800577e:	ab1a      	add	r3, sp, #104	@ 0x68
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	4a8f      	ldr	r2, [pc, #572]	@ (80059c0 <_strtod_l+0x290>)
 8005784:	9805      	ldr	r0, [sp, #20]
 8005786:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005788:	a919      	add	r1, sp, #100	@ 0x64
 800578a:	f001 faef 	bl	8006d6c <__gethex>
 800578e:	f010 060f 	ands.w	r6, r0, #15
 8005792:	4604      	mov	r4, r0
 8005794:	d005      	beq.n	80057a2 <_strtod_l+0x72>
 8005796:	2e06      	cmp	r6, #6
 8005798:	d128      	bne.n	80057ec <_strtod_l+0xbc>
 800579a:	3501      	adds	r5, #1
 800579c:	2300      	movs	r3, #0
 800579e:	9519      	str	r5, [sp, #100]	@ 0x64
 80057a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80057a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	f040 858e 	bne.w	80062c6 <_strtod_l+0xb96>
 80057aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80057ac:	b1cb      	cbz	r3, 80057e2 <_strtod_l+0xb2>
 80057ae:	4652      	mov	r2, sl
 80057b0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80057b4:	ec43 2b10 	vmov	d0, r2, r3
 80057b8:	b01f      	add	sp, #124	@ 0x7c
 80057ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057be:	2920      	cmp	r1, #32
 80057c0:	d1ce      	bne.n	8005760 <_strtod_l+0x30>
 80057c2:	3201      	adds	r2, #1
 80057c4:	e7c1      	b.n	800574a <_strtod_l+0x1a>
 80057c6:	292d      	cmp	r1, #45	@ 0x2d
 80057c8:	d1ca      	bne.n	8005760 <_strtod_l+0x30>
 80057ca:	2101      	movs	r1, #1
 80057cc:	910e      	str	r1, [sp, #56]	@ 0x38
 80057ce:	1c51      	adds	r1, r2, #1
 80057d0:	9119      	str	r1, [sp, #100]	@ 0x64
 80057d2:	7852      	ldrb	r2, [r2, #1]
 80057d4:	2a00      	cmp	r2, #0
 80057d6:	d1c5      	bne.n	8005764 <_strtod_l+0x34>
 80057d8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80057da:	9419      	str	r4, [sp, #100]	@ 0x64
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f040 8570 	bne.w	80062c2 <_strtod_l+0xb92>
 80057e2:	4652      	mov	r2, sl
 80057e4:	465b      	mov	r3, fp
 80057e6:	e7e5      	b.n	80057b4 <_strtod_l+0x84>
 80057e8:	2100      	movs	r1, #0
 80057ea:	e7ef      	b.n	80057cc <_strtod_l+0x9c>
 80057ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80057ee:	b13a      	cbz	r2, 8005800 <_strtod_l+0xd0>
 80057f0:	2135      	movs	r1, #53	@ 0x35
 80057f2:	a81c      	add	r0, sp, #112	@ 0x70
 80057f4:	f7ff ff3a 	bl	800566c <__copybits>
 80057f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80057fa:	9805      	ldr	r0, [sp, #20]
 80057fc:	f7ff fb10 	bl	8004e20 <_Bfree>
 8005800:	3e01      	subs	r6, #1
 8005802:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005804:	2e04      	cmp	r6, #4
 8005806:	d806      	bhi.n	8005816 <_strtod_l+0xe6>
 8005808:	e8df f006 	tbb	[pc, r6]
 800580c:	201d0314 	.word	0x201d0314
 8005810:	14          	.byte	0x14
 8005811:	00          	.byte	0x00
 8005812:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005816:	05e1      	lsls	r1, r4, #23
 8005818:	bf48      	it	mi
 800581a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800581e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005822:	0d1b      	lsrs	r3, r3, #20
 8005824:	051b      	lsls	r3, r3, #20
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1bb      	bne.n	80057a2 <_strtod_l+0x72>
 800582a:	f7fe fb2d 	bl	8003e88 <__errno>
 800582e:	2322      	movs	r3, #34	@ 0x22
 8005830:	6003      	str	r3, [r0, #0]
 8005832:	e7b6      	b.n	80057a2 <_strtod_l+0x72>
 8005834:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005838:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800583c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005840:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005844:	e7e7      	b.n	8005816 <_strtod_l+0xe6>
 8005846:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80059c8 <_strtod_l+0x298>
 800584a:	e7e4      	b.n	8005816 <_strtod_l+0xe6>
 800584c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005850:	f04f 3aff 	mov.w	sl, #4294967295
 8005854:	e7df      	b.n	8005816 <_strtod_l+0xe6>
 8005856:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	9219      	str	r2, [sp, #100]	@ 0x64
 800585c:	785b      	ldrb	r3, [r3, #1]
 800585e:	2b30      	cmp	r3, #48	@ 0x30
 8005860:	d0f9      	beq.n	8005856 <_strtod_l+0x126>
 8005862:	2b00      	cmp	r3, #0
 8005864:	d09d      	beq.n	80057a2 <_strtod_l+0x72>
 8005866:	2301      	movs	r3, #1
 8005868:	2700      	movs	r7, #0
 800586a:	9308      	str	r3, [sp, #32]
 800586c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800586e:	930c      	str	r3, [sp, #48]	@ 0x30
 8005870:	970b      	str	r7, [sp, #44]	@ 0x2c
 8005872:	46b9      	mov	r9, r7
 8005874:	220a      	movs	r2, #10
 8005876:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005878:	7805      	ldrb	r5, [r0, #0]
 800587a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800587e:	b2d9      	uxtb	r1, r3
 8005880:	2909      	cmp	r1, #9
 8005882:	d928      	bls.n	80058d6 <_strtod_l+0x1a6>
 8005884:	494f      	ldr	r1, [pc, #316]	@ (80059c4 <_strtod_l+0x294>)
 8005886:	2201      	movs	r2, #1
 8005888:	f001 f97a 	bl	8006b80 <strncmp>
 800588c:	2800      	cmp	r0, #0
 800588e:	d032      	beq.n	80058f6 <_strtod_l+0x1c6>
 8005890:	2000      	movs	r0, #0
 8005892:	462a      	mov	r2, r5
 8005894:	900a      	str	r0, [sp, #40]	@ 0x28
 8005896:	464d      	mov	r5, r9
 8005898:	4603      	mov	r3, r0
 800589a:	2a65      	cmp	r2, #101	@ 0x65
 800589c:	d001      	beq.n	80058a2 <_strtod_l+0x172>
 800589e:	2a45      	cmp	r2, #69	@ 0x45
 80058a0:	d114      	bne.n	80058cc <_strtod_l+0x19c>
 80058a2:	b91d      	cbnz	r5, 80058ac <_strtod_l+0x17c>
 80058a4:	9a08      	ldr	r2, [sp, #32]
 80058a6:	4302      	orrs	r2, r0
 80058a8:	d096      	beq.n	80057d8 <_strtod_l+0xa8>
 80058aa:	2500      	movs	r5, #0
 80058ac:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80058ae:	1c62      	adds	r2, r4, #1
 80058b0:	9219      	str	r2, [sp, #100]	@ 0x64
 80058b2:	7862      	ldrb	r2, [r4, #1]
 80058b4:	2a2b      	cmp	r2, #43	@ 0x2b
 80058b6:	d07a      	beq.n	80059ae <_strtod_l+0x27e>
 80058b8:	2a2d      	cmp	r2, #45	@ 0x2d
 80058ba:	d07e      	beq.n	80059ba <_strtod_l+0x28a>
 80058bc:	f04f 0c00 	mov.w	ip, #0
 80058c0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80058c4:	2909      	cmp	r1, #9
 80058c6:	f240 8085 	bls.w	80059d4 <_strtod_l+0x2a4>
 80058ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80058cc:	f04f 0800 	mov.w	r8, #0
 80058d0:	e0a5      	b.n	8005a1e <_strtod_l+0x2ee>
 80058d2:	2300      	movs	r3, #0
 80058d4:	e7c8      	b.n	8005868 <_strtod_l+0x138>
 80058d6:	f1b9 0f08 	cmp.w	r9, #8
 80058da:	bfd8      	it	le
 80058dc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80058de:	f100 0001 	add.w	r0, r0, #1
 80058e2:	bfda      	itte	le
 80058e4:	fb02 3301 	mlale	r3, r2, r1, r3
 80058e8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80058ea:	fb02 3707 	mlagt	r7, r2, r7, r3
 80058ee:	f109 0901 	add.w	r9, r9, #1
 80058f2:	9019      	str	r0, [sp, #100]	@ 0x64
 80058f4:	e7bf      	b.n	8005876 <_strtod_l+0x146>
 80058f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80058fc:	785a      	ldrb	r2, [r3, #1]
 80058fe:	f1b9 0f00 	cmp.w	r9, #0
 8005902:	d03b      	beq.n	800597c <_strtod_l+0x24c>
 8005904:	900a      	str	r0, [sp, #40]	@ 0x28
 8005906:	464d      	mov	r5, r9
 8005908:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800590c:	2b09      	cmp	r3, #9
 800590e:	d912      	bls.n	8005936 <_strtod_l+0x206>
 8005910:	2301      	movs	r3, #1
 8005912:	e7c2      	b.n	800589a <_strtod_l+0x16a>
 8005914:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	9219      	str	r2, [sp, #100]	@ 0x64
 800591a:	785a      	ldrb	r2, [r3, #1]
 800591c:	3001      	adds	r0, #1
 800591e:	2a30      	cmp	r2, #48	@ 0x30
 8005920:	d0f8      	beq.n	8005914 <_strtod_l+0x1e4>
 8005922:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005926:	2b08      	cmp	r3, #8
 8005928:	f200 84d2 	bhi.w	80062d0 <_strtod_l+0xba0>
 800592c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800592e:	900a      	str	r0, [sp, #40]	@ 0x28
 8005930:	2000      	movs	r0, #0
 8005932:	930c      	str	r3, [sp, #48]	@ 0x30
 8005934:	4605      	mov	r5, r0
 8005936:	3a30      	subs	r2, #48	@ 0x30
 8005938:	f100 0301 	add.w	r3, r0, #1
 800593c:	d018      	beq.n	8005970 <_strtod_l+0x240>
 800593e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005940:	4419      	add	r1, r3
 8005942:	910a      	str	r1, [sp, #40]	@ 0x28
 8005944:	462e      	mov	r6, r5
 8005946:	f04f 0e0a 	mov.w	lr, #10
 800594a:	1c71      	adds	r1, r6, #1
 800594c:	eba1 0c05 	sub.w	ip, r1, r5
 8005950:	4563      	cmp	r3, ip
 8005952:	dc15      	bgt.n	8005980 <_strtod_l+0x250>
 8005954:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005958:	182b      	adds	r3, r5, r0
 800595a:	2b08      	cmp	r3, #8
 800595c:	f105 0501 	add.w	r5, r5, #1
 8005960:	4405      	add	r5, r0
 8005962:	dc1a      	bgt.n	800599a <_strtod_l+0x26a>
 8005964:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005966:	230a      	movs	r3, #10
 8005968:	fb03 2301 	mla	r3, r3, r1, r2
 800596c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800596e:	2300      	movs	r3, #0
 8005970:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005972:	1c51      	adds	r1, r2, #1
 8005974:	9119      	str	r1, [sp, #100]	@ 0x64
 8005976:	7852      	ldrb	r2, [r2, #1]
 8005978:	4618      	mov	r0, r3
 800597a:	e7c5      	b.n	8005908 <_strtod_l+0x1d8>
 800597c:	4648      	mov	r0, r9
 800597e:	e7ce      	b.n	800591e <_strtod_l+0x1ee>
 8005980:	2e08      	cmp	r6, #8
 8005982:	dc05      	bgt.n	8005990 <_strtod_l+0x260>
 8005984:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8005986:	fb0e f606 	mul.w	r6, lr, r6
 800598a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800598c:	460e      	mov	r6, r1
 800598e:	e7dc      	b.n	800594a <_strtod_l+0x21a>
 8005990:	2910      	cmp	r1, #16
 8005992:	bfd8      	it	le
 8005994:	fb0e f707 	mulle.w	r7, lr, r7
 8005998:	e7f8      	b.n	800598c <_strtod_l+0x25c>
 800599a:	2b0f      	cmp	r3, #15
 800599c:	bfdc      	itt	le
 800599e:	230a      	movle	r3, #10
 80059a0:	fb03 2707 	mlale	r7, r3, r7, r2
 80059a4:	e7e3      	b.n	800596e <_strtod_l+0x23e>
 80059a6:	2300      	movs	r3, #0
 80059a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80059aa:	2301      	movs	r3, #1
 80059ac:	e77a      	b.n	80058a4 <_strtod_l+0x174>
 80059ae:	f04f 0c00 	mov.w	ip, #0
 80059b2:	1ca2      	adds	r2, r4, #2
 80059b4:	9219      	str	r2, [sp, #100]	@ 0x64
 80059b6:	78a2      	ldrb	r2, [r4, #2]
 80059b8:	e782      	b.n	80058c0 <_strtod_l+0x190>
 80059ba:	f04f 0c01 	mov.w	ip, #1
 80059be:	e7f8      	b.n	80059b2 <_strtod_l+0x282>
 80059c0:	080077ac 	.word	0x080077ac
 80059c4:	080075df 	.word	0x080075df
 80059c8:	7ff00000 	.word	0x7ff00000
 80059cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80059ce:	1c51      	adds	r1, r2, #1
 80059d0:	9119      	str	r1, [sp, #100]	@ 0x64
 80059d2:	7852      	ldrb	r2, [r2, #1]
 80059d4:	2a30      	cmp	r2, #48	@ 0x30
 80059d6:	d0f9      	beq.n	80059cc <_strtod_l+0x29c>
 80059d8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80059dc:	2908      	cmp	r1, #8
 80059de:	f63f af75 	bhi.w	80058cc <_strtod_l+0x19c>
 80059e2:	3a30      	subs	r2, #48	@ 0x30
 80059e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80059e6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80059e8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80059ea:	f04f 080a 	mov.w	r8, #10
 80059ee:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80059f0:	1c56      	adds	r6, r2, #1
 80059f2:	9619      	str	r6, [sp, #100]	@ 0x64
 80059f4:	7852      	ldrb	r2, [r2, #1]
 80059f6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80059fa:	f1be 0f09 	cmp.w	lr, #9
 80059fe:	d939      	bls.n	8005a74 <_strtod_l+0x344>
 8005a00:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005a02:	1a76      	subs	r6, r6, r1
 8005a04:	2e08      	cmp	r6, #8
 8005a06:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005a0a:	dc03      	bgt.n	8005a14 <_strtod_l+0x2e4>
 8005a0c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a0e:	4588      	cmp	r8, r1
 8005a10:	bfa8      	it	ge
 8005a12:	4688      	movge	r8, r1
 8005a14:	f1bc 0f00 	cmp.w	ip, #0
 8005a18:	d001      	beq.n	8005a1e <_strtod_l+0x2ee>
 8005a1a:	f1c8 0800 	rsb	r8, r8, #0
 8005a1e:	2d00      	cmp	r5, #0
 8005a20:	d14e      	bne.n	8005ac0 <_strtod_l+0x390>
 8005a22:	9908      	ldr	r1, [sp, #32]
 8005a24:	4308      	orrs	r0, r1
 8005a26:	f47f aebc 	bne.w	80057a2 <_strtod_l+0x72>
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f47f aed4 	bne.w	80057d8 <_strtod_l+0xa8>
 8005a30:	2a69      	cmp	r2, #105	@ 0x69
 8005a32:	d028      	beq.n	8005a86 <_strtod_l+0x356>
 8005a34:	dc25      	bgt.n	8005a82 <_strtod_l+0x352>
 8005a36:	2a49      	cmp	r2, #73	@ 0x49
 8005a38:	d025      	beq.n	8005a86 <_strtod_l+0x356>
 8005a3a:	2a4e      	cmp	r2, #78	@ 0x4e
 8005a3c:	f47f aecc 	bne.w	80057d8 <_strtod_l+0xa8>
 8005a40:	499a      	ldr	r1, [pc, #616]	@ (8005cac <_strtod_l+0x57c>)
 8005a42:	a819      	add	r0, sp, #100	@ 0x64
 8005a44:	f001 fbb4 	bl	80071b0 <__match>
 8005a48:	2800      	cmp	r0, #0
 8005a4a:	f43f aec5 	beq.w	80057d8 <_strtod_l+0xa8>
 8005a4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b28      	cmp	r3, #40	@ 0x28
 8005a54:	d12e      	bne.n	8005ab4 <_strtod_l+0x384>
 8005a56:	4996      	ldr	r1, [pc, #600]	@ (8005cb0 <_strtod_l+0x580>)
 8005a58:	aa1c      	add	r2, sp, #112	@ 0x70
 8005a5a:	a819      	add	r0, sp, #100	@ 0x64
 8005a5c:	f001 fbbc 	bl	80071d8 <__hexnan>
 8005a60:	2805      	cmp	r0, #5
 8005a62:	d127      	bne.n	8005ab4 <_strtod_l+0x384>
 8005a64:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005a66:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005a6a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005a6e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005a72:	e696      	b.n	80057a2 <_strtod_l+0x72>
 8005a74:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a76:	fb08 2101 	mla	r1, r8, r1, r2
 8005a7a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005a7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a80:	e7b5      	b.n	80059ee <_strtod_l+0x2be>
 8005a82:	2a6e      	cmp	r2, #110	@ 0x6e
 8005a84:	e7da      	b.n	8005a3c <_strtod_l+0x30c>
 8005a86:	498b      	ldr	r1, [pc, #556]	@ (8005cb4 <_strtod_l+0x584>)
 8005a88:	a819      	add	r0, sp, #100	@ 0x64
 8005a8a:	f001 fb91 	bl	80071b0 <__match>
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	f43f aea2 	beq.w	80057d8 <_strtod_l+0xa8>
 8005a94:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a96:	4988      	ldr	r1, [pc, #544]	@ (8005cb8 <_strtod_l+0x588>)
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	a819      	add	r0, sp, #100	@ 0x64
 8005a9c:	9319      	str	r3, [sp, #100]	@ 0x64
 8005a9e:	f001 fb87 	bl	80071b0 <__match>
 8005aa2:	b910      	cbnz	r0, 8005aaa <_strtod_l+0x37a>
 8005aa4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	9319      	str	r3, [sp, #100]	@ 0x64
 8005aaa:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8005cc8 <_strtod_l+0x598>
 8005aae:	f04f 0a00 	mov.w	sl, #0
 8005ab2:	e676      	b.n	80057a2 <_strtod_l+0x72>
 8005ab4:	4881      	ldr	r0, [pc, #516]	@ (8005cbc <_strtod_l+0x58c>)
 8005ab6:	f001 f8b7 	bl	8006c28 <nan>
 8005aba:	ec5b ab10 	vmov	sl, fp, d0
 8005abe:	e670      	b.n	80057a2 <_strtod_l+0x72>
 8005ac0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ac2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005ac4:	eba8 0303 	sub.w	r3, r8, r3
 8005ac8:	f1b9 0f00 	cmp.w	r9, #0
 8005acc:	bf08      	it	eq
 8005ace:	46a9      	moveq	r9, r5
 8005ad0:	2d10      	cmp	r5, #16
 8005ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ad4:	462c      	mov	r4, r5
 8005ad6:	bfa8      	it	ge
 8005ad8:	2410      	movge	r4, #16
 8005ada:	f7fa fd13 	bl	8000504 <__aeabi_ui2d>
 8005ade:	2d09      	cmp	r5, #9
 8005ae0:	4682      	mov	sl, r0
 8005ae2:	468b      	mov	fp, r1
 8005ae4:	dc13      	bgt.n	8005b0e <_strtod_l+0x3de>
 8005ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f43f ae5a 	beq.w	80057a2 <_strtod_l+0x72>
 8005aee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005af0:	dd78      	ble.n	8005be4 <_strtod_l+0x4b4>
 8005af2:	2b16      	cmp	r3, #22
 8005af4:	dc5f      	bgt.n	8005bb6 <_strtod_l+0x486>
 8005af6:	4972      	ldr	r1, [pc, #456]	@ (8005cc0 <_strtod_l+0x590>)
 8005af8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005afc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b00:	4652      	mov	r2, sl
 8005b02:	465b      	mov	r3, fp
 8005b04:	f7fa fd78 	bl	80005f8 <__aeabi_dmul>
 8005b08:	4682      	mov	sl, r0
 8005b0a:	468b      	mov	fp, r1
 8005b0c:	e649      	b.n	80057a2 <_strtod_l+0x72>
 8005b0e:	4b6c      	ldr	r3, [pc, #432]	@ (8005cc0 <_strtod_l+0x590>)
 8005b10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005b18:	f7fa fd6e 	bl	80005f8 <__aeabi_dmul>
 8005b1c:	4682      	mov	sl, r0
 8005b1e:	4638      	mov	r0, r7
 8005b20:	468b      	mov	fp, r1
 8005b22:	f7fa fcef 	bl	8000504 <__aeabi_ui2d>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4650      	mov	r0, sl
 8005b2c:	4659      	mov	r1, fp
 8005b2e:	f7fa fbad 	bl	800028c <__adddf3>
 8005b32:	2d0f      	cmp	r5, #15
 8005b34:	4682      	mov	sl, r0
 8005b36:	468b      	mov	fp, r1
 8005b38:	ddd5      	ble.n	8005ae6 <_strtod_l+0x3b6>
 8005b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b3c:	1b2c      	subs	r4, r5, r4
 8005b3e:	441c      	add	r4, r3
 8005b40:	2c00      	cmp	r4, #0
 8005b42:	f340 8093 	ble.w	8005c6c <_strtod_l+0x53c>
 8005b46:	f014 030f 	ands.w	r3, r4, #15
 8005b4a:	d00a      	beq.n	8005b62 <_strtod_l+0x432>
 8005b4c:	495c      	ldr	r1, [pc, #368]	@ (8005cc0 <_strtod_l+0x590>)
 8005b4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b52:	4652      	mov	r2, sl
 8005b54:	465b      	mov	r3, fp
 8005b56:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b5a:	f7fa fd4d 	bl	80005f8 <__aeabi_dmul>
 8005b5e:	4682      	mov	sl, r0
 8005b60:	468b      	mov	fp, r1
 8005b62:	f034 040f 	bics.w	r4, r4, #15
 8005b66:	d073      	beq.n	8005c50 <_strtod_l+0x520>
 8005b68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005b6c:	dd49      	ble.n	8005c02 <_strtod_l+0x4d2>
 8005b6e:	2400      	movs	r4, #0
 8005b70:	46a0      	mov	r8, r4
 8005b72:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005b74:	46a1      	mov	r9, r4
 8005b76:	9a05      	ldr	r2, [sp, #20]
 8005b78:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8005cc8 <_strtod_l+0x598>
 8005b7c:	2322      	movs	r3, #34	@ 0x22
 8005b7e:	6013      	str	r3, [r2, #0]
 8005b80:	f04f 0a00 	mov.w	sl, #0
 8005b84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f43f ae0b 	beq.w	80057a2 <_strtod_l+0x72>
 8005b8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b8e:	9805      	ldr	r0, [sp, #20]
 8005b90:	f7ff f946 	bl	8004e20 <_Bfree>
 8005b94:	9805      	ldr	r0, [sp, #20]
 8005b96:	4649      	mov	r1, r9
 8005b98:	f7ff f942 	bl	8004e20 <_Bfree>
 8005b9c:	9805      	ldr	r0, [sp, #20]
 8005b9e:	4641      	mov	r1, r8
 8005ba0:	f7ff f93e 	bl	8004e20 <_Bfree>
 8005ba4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005ba6:	9805      	ldr	r0, [sp, #20]
 8005ba8:	f7ff f93a 	bl	8004e20 <_Bfree>
 8005bac:	9805      	ldr	r0, [sp, #20]
 8005bae:	4621      	mov	r1, r4
 8005bb0:	f7ff f936 	bl	8004e20 <_Bfree>
 8005bb4:	e5f5      	b.n	80057a2 <_strtod_l+0x72>
 8005bb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	dbbc      	blt.n	8005b3a <_strtod_l+0x40a>
 8005bc0:	4c3f      	ldr	r4, [pc, #252]	@ (8005cc0 <_strtod_l+0x590>)
 8005bc2:	f1c5 050f 	rsb	r5, r5, #15
 8005bc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005bca:	4652      	mov	r2, sl
 8005bcc:	465b      	mov	r3, fp
 8005bce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005bd2:	f7fa fd11 	bl	80005f8 <__aeabi_dmul>
 8005bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bd8:	1b5d      	subs	r5, r3, r5
 8005bda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005bde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005be2:	e78f      	b.n	8005b04 <_strtod_l+0x3d4>
 8005be4:	3316      	adds	r3, #22
 8005be6:	dba8      	blt.n	8005b3a <_strtod_l+0x40a>
 8005be8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005bea:	eba3 0808 	sub.w	r8, r3, r8
 8005bee:	4b34      	ldr	r3, [pc, #208]	@ (8005cc0 <_strtod_l+0x590>)
 8005bf0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005bf4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005bf8:	4650      	mov	r0, sl
 8005bfa:	4659      	mov	r1, fp
 8005bfc:	f7fa fe26 	bl	800084c <__aeabi_ddiv>
 8005c00:	e782      	b.n	8005b08 <_strtod_l+0x3d8>
 8005c02:	2300      	movs	r3, #0
 8005c04:	4f2f      	ldr	r7, [pc, #188]	@ (8005cc4 <_strtod_l+0x594>)
 8005c06:	1124      	asrs	r4, r4, #4
 8005c08:	4650      	mov	r0, sl
 8005c0a:	4659      	mov	r1, fp
 8005c0c:	461e      	mov	r6, r3
 8005c0e:	2c01      	cmp	r4, #1
 8005c10:	dc21      	bgt.n	8005c56 <_strtod_l+0x526>
 8005c12:	b10b      	cbz	r3, 8005c18 <_strtod_l+0x4e8>
 8005c14:	4682      	mov	sl, r0
 8005c16:	468b      	mov	fp, r1
 8005c18:	492a      	ldr	r1, [pc, #168]	@ (8005cc4 <_strtod_l+0x594>)
 8005c1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005c1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005c22:	4652      	mov	r2, sl
 8005c24:	465b      	mov	r3, fp
 8005c26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c2a:	f7fa fce5 	bl	80005f8 <__aeabi_dmul>
 8005c2e:	4b26      	ldr	r3, [pc, #152]	@ (8005cc8 <_strtod_l+0x598>)
 8005c30:	460a      	mov	r2, r1
 8005c32:	400b      	ands	r3, r1
 8005c34:	4925      	ldr	r1, [pc, #148]	@ (8005ccc <_strtod_l+0x59c>)
 8005c36:	428b      	cmp	r3, r1
 8005c38:	4682      	mov	sl, r0
 8005c3a:	d898      	bhi.n	8005b6e <_strtod_l+0x43e>
 8005c3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005c40:	428b      	cmp	r3, r1
 8005c42:	bf86      	itte	hi
 8005c44:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8005cd0 <_strtod_l+0x5a0>
 8005c48:	f04f 3aff 	movhi.w	sl, #4294967295
 8005c4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005c50:	2300      	movs	r3, #0
 8005c52:	9308      	str	r3, [sp, #32]
 8005c54:	e076      	b.n	8005d44 <_strtod_l+0x614>
 8005c56:	07e2      	lsls	r2, r4, #31
 8005c58:	d504      	bpl.n	8005c64 <_strtod_l+0x534>
 8005c5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c5e:	f7fa fccb 	bl	80005f8 <__aeabi_dmul>
 8005c62:	2301      	movs	r3, #1
 8005c64:	3601      	adds	r6, #1
 8005c66:	1064      	asrs	r4, r4, #1
 8005c68:	3708      	adds	r7, #8
 8005c6a:	e7d0      	b.n	8005c0e <_strtod_l+0x4de>
 8005c6c:	d0f0      	beq.n	8005c50 <_strtod_l+0x520>
 8005c6e:	4264      	negs	r4, r4
 8005c70:	f014 020f 	ands.w	r2, r4, #15
 8005c74:	d00a      	beq.n	8005c8c <_strtod_l+0x55c>
 8005c76:	4b12      	ldr	r3, [pc, #72]	@ (8005cc0 <_strtod_l+0x590>)
 8005c78:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c7c:	4650      	mov	r0, sl
 8005c7e:	4659      	mov	r1, fp
 8005c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c84:	f7fa fde2 	bl	800084c <__aeabi_ddiv>
 8005c88:	4682      	mov	sl, r0
 8005c8a:	468b      	mov	fp, r1
 8005c8c:	1124      	asrs	r4, r4, #4
 8005c8e:	d0df      	beq.n	8005c50 <_strtod_l+0x520>
 8005c90:	2c1f      	cmp	r4, #31
 8005c92:	dd1f      	ble.n	8005cd4 <_strtod_l+0x5a4>
 8005c94:	2400      	movs	r4, #0
 8005c96:	46a0      	mov	r8, r4
 8005c98:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005c9a:	46a1      	mov	r9, r4
 8005c9c:	9a05      	ldr	r2, [sp, #20]
 8005c9e:	2322      	movs	r3, #34	@ 0x22
 8005ca0:	f04f 0a00 	mov.w	sl, #0
 8005ca4:	f04f 0b00 	mov.w	fp, #0
 8005ca8:	6013      	str	r3, [r2, #0]
 8005caa:	e76b      	b.n	8005b84 <_strtod_l+0x454>
 8005cac:	080074cd 	.word	0x080074cd
 8005cb0:	08007798 	.word	0x08007798
 8005cb4:	080074c5 	.word	0x080074c5
 8005cb8:	080074fc 	.word	0x080074fc
 8005cbc:	08007635 	.word	0x08007635
 8005cc0:	080076d0 	.word	0x080076d0
 8005cc4:	080076a8 	.word	0x080076a8
 8005cc8:	7ff00000 	.word	0x7ff00000
 8005ccc:	7ca00000 	.word	0x7ca00000
 8005cd0:	7fefffff 	.word	0x7fefffff
 8005cd4:	f014 0310 	ands.w	r3, r4, #16
 8005cd8:	bf18      	it	ne
 8005cda:	236a      	movne	r3, #106	@ 0x6a
 8005cdc:	4ea9      	ldr	r6, [pc, #676]	@ (8005f84 <_strtod_l+0x854>)
 8005cde:	9308      	str	r3, [sp, #32]
 8005ce0:	4650      	mov	r0, sl
 8005ce2:	4659      	mov	r1, fp
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	07e7      	lsls	r7, r4, #31
 8005ce8:	d504      	bpl.n	8005cf4 <_strtod_l+0x5c4>
 8005cea:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005cee:	f7fa fc83 	bl	80005f8 <__aeabi_dmul>
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	1064      	asrs	r4, r4, #1
 8005cf6:	f106 0608 	add.w	r6, r6, #8
 8005cfa:	d1f4      	bne.n	8005ce6 <_strtod_l+0x5b6>
 8005cfc:	b10b      	cbz	r3, 8005d02 <_strtod_l+0x5d2>
 8005cfe:	4682      	mov	sl, r0
 8005d00:	468b      	mov	fp, r1
 8005d02:	9b08      	ldr	r3, [sp, #32]
 8005d04:	b1b3      	cbz	r3, 8005d34 <_strtod_l+0x604>
 8005d06:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005d0a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	4659      	mov	r1, fp
 8005d12:	dd0f      	ble.n	8005d34 <_strtod_l+0x604>
 8005d14:	2b1f      	cmp	r3, #31
 8005d16:	dd56      	ble.n	8005dc6 <_strtod_l+0x696>
 8005d18:	2b34      	cmp	r3, #52	@ 0x34
 8005d1a:	bfde      	ittt	le
 8005d1c:	f04f 33ff 	movle.w	r3, #4294967295
 8005d20:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005d24:	4093      	lslle	r3, r2
 8005d26:	f04f 0a00 	mov.w	sl, #0
 8005d2a:	bfcc      	ite	gt
 8005d2c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005d30:	ea03 0b01 	andle.w	fp, r3, r1
 8005d34:	2200      	movs	r2, #0
 8005d36:	2300      	movs	r3, #0
 8005d38:	4650      	mov	r0, sl
 8005d3a:	4659      	mov	r1, fp
 8005d3c:	f7fa fec4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d40:	2800      	cmp	r0, #0
 8005d42:	d1a7      	bne.n	8005c94 <_strtod_l+0x564>
 8005d44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005d4a:	9805      	ldr	r0, [sp, #20]
 8005d4c:	462b      	mov	r3, r5
 8005d4e:	464a      	mov	r2, r9
 8005d50:	f7ff f8ce 	bl	8004ef0 <__s2b>
 8005d54:	900b      	str	r0, [sp, #44]	@ 0x2c
 8005d56:	2800      	cmp	r0, #0
 8005d58:	f43f af09 	beq.w	8005b6e <_strtod_l+0x43e>
 8005d5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d60:	2a00      	cmp	r2, #0
 8005d62:	eba3 0308 	sub.w	r3, r3, r8
 8005d66:	bfa8      	it	ge
 8005d68:	2300      	movge	r3, #0
 8005d6a:	9312      	str	r3, [sp, #72]	@ 0x48
 8005d6c:	2400      	movs	r4, #0
 8005d6e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005d72:	9316      	str	r3, [sp, #88]	@ 0x58
 8005d74:	46a0      	mov	r8, r4
 8005d76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d78:	9805      	ldr	r0, [sp, #20]
 8005d7a:	6859      	ldr	r1, [r3, #4]
 8005d7c:	f7ff f810 	bl	8004da0 <_Balloc>
 8005d80:	4681      	mov	r9, r0
 8005d82:	2800      	cmp	r0, #0
 8005d84:	f43f aef7 	beq.w	8005b76 <_strtod_l+0x446>
 8005d88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d8a:	691a      	ldr	r2, [r3, #16]
 8005d8c:	3202      	adds	r2, #2
 8005d8e:	f103 010c 	add.w	r1, r3, #12
 8005d92:	0092      	lsls	r2, r2, #2
 8005d94:	300c      	adds	r0, #12
 8005d96:	f000 ff37 	bl	8006c08 <memcpy>
 8005d9a:	ec4b ab10 	vmov	d0, sl, fp
 8005d9e:	9805      	ldr	r0, [sp, #20]
 8005da0:	aa1c      	add	r2, sp, #112	@ 0x70
 8005da2:	a91b      	add	r1, sp, #108	@ 0x6c
 8005da4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005da8:	f7ff fbd6 	bl	8005558 <__d2b>
 8005dac:	901a      	str	r0, [sp, #104]	@ 0x68
 8005dae:	2800      	cmp	r0, #0
 8005db0:	f43f aee1 	beq.w	8005b76 <_strtod_l+0x446>
 8005db4:	9805      	ldr	r0, [sp, #20]
 8005db6:	2101      	movs	r1, #1
 8005db8:	f7ff f930 	bl	800501c <__i2b>
 8005dbc:	4680      	mov	r8, r0
 8005dbe:	b948      	cbnz	r0, 8005dd4 <_strtod_l+0x6a4>
 8005dc0:	f04f 0800 	mov.w	r8, #0
 8005dc4:	e6d7      	b.n	8005b76 <_strtod_l+0x446>
 8005dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	ea03 0a0a 	and.w	sl, r3, sl
 8005dd2:	e7af      	b.n	8005d34 <_strtod_l+0x604>
 8005dd4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005dd6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005dd8:	2d00      	cmp	r5, #0
 8005dda:	bfab      	itete	ge
 8005ddc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005dde:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005de0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005de2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005de4:	bfac      	ite	ge
 8005de6:	18ef      	addge	r7, r5, r3
 8005de8:	1b5e      	sublt	r6, r3, r5
 8005dea:	9b08      	ldr	r3, [sp, #32]
 8005dec:	1aed      	subs	r5, r5, r3
 8005dee:	4415      	add	r5, r2
 8005df0:	4b65      	ldr	r3, [pc, #404]	@ (8005f88 <_strtod_l+0x858>)
 8005df2:	3d01      	subs	r5, #1
 8005df4:	429d      	cmp	r5, r3
 8005df6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005dfa:	da50      	bge.n	8005e9e <_strtod_l+0x76e>
 8005dfc:	1b5b      	subs	r3, r3, r5
 8005dfe:	2b1f      	cmp	r3, #31
 8005e00:	eba2 0203 	sub.w	r2, r2, r3
 8005e04:	f04f 0101 	mov.w	r1, #1
 8005e08:	dc3d      	bgt.n	8005e86 <_strtod_l+0x756>
 8005e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e0e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e10:	2300      	movs	r3, #0
 8005e12:	9310      	str	r3, [sp, #64]	@ 0x40
 8005e14:	18bd      	adds	r5, r7, r2
 8005e16:	9b08      	ldr	r3, [sp, #32]
 8005e18:	42af      	cmp	r7, r5
 8005e1a:	4416      	add	r6, r2
 8005e1c:	441e      	add	r6, r3
 8005e1e:	463b      	mov	r3, r7
 8005e20:	bfa8      	it	ge
 8005e22:	462b      	movge	r3, r5
 8005e24:	42b3      	cmp	r3, r6
 8005e26:	bfa8      	it	ge
 8005e28:	4633      	movge	r3, r6
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	bfc2      	ittt	gt
 8005e2e:	1aed      	subgt	r5, r5, r3
 8005e30:	1af6      	subgt	r6, r6, r3
 8005e32:	1aff      	subgt	r7, r7, r3
 8005e34:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	dd16      	ble.n	8005e68 <_strtod_l+0x738>
 8005e3a:	4641      	mov	r1, r8
 8005e3c:	9805      	ldr	r0, [sp, #20]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f7ff f9a4 	bl	800518c <__pow5mult>
 8005e44:	4680      	mov	r8, r0
 8005e46:	2800      	cmp	r0, #0
 8005e48:	d0ba      	beq.n	8005dc0 <_strtod_l+0x690>
 8005e4a:	4601      	mov	r1, r0
 8005e4c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005e4e:	9805      	ldr	r0, [sp, #20]
 8005e50:	f7ff f8fa 	bl	8005048 <__multiply>
 8005e54:	900a      	str	r0, [sp, #40]	@ 0x28
 8005e56:	2800      	cmp	r0, #0
 8005e58:	f43f ae8d 	beq.w	8005b76 <_strtod_l+0x446>
 8005e5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e5e:	9805      	ldr	r0, [sp, #20]
 8005e60:	f7fe ffde 	bl	8004e20 <_Bfree>
 8005e64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e66:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e68:	2d00      	cmp	r5, #0
 8005e6a:	dc1d      	bgt.n	8005ea8 <_strtod_l+0x778>
 8005e6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	dd23      	ble.n	8005eba <_strtod_l+0x78a>
 8005e72:	4649      	mov	r1, r9
 8005e74:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005e76:	9805      	ldr	r0, [sp, #20]
 8005e78:	f7ff f988 	bl	800518c <__pow5mult>
 8005e7c:	4681      	mov	r9, r0
 8005e7e:	b9e0      	cbnz	r0, 8005eba <_strtod_l+0x78a>
 8005e80:	f04f 0900 	mov.w	r9, #0
 8005e84:	e677      	b.n	8005b76 <_strtod_l+0x446>
 8005e86:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005e8a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005e8e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005e92:	35e2      	adds	r5, #226	@ 0xe2
 8005e94:	fa01 f305 	lsl.w	r3, r1, r5
 8005e98:	9310      	str	r3, [sp, #64]	@ 0x40
 8005e9a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005e9c:	e7ba      	b.n	8005e14 <_strtod_l+0x6e4>
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	9310      	str	r3, [sp, #64]	@ 0x40
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005ea6:	e7b5      	b.n	8005e14 <_strtod_l+0x6e4>
 8005ea8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005eaa:	9805      	ldr	r0, [sp, #20]
 8005eac:	462a      	mov	r2, r5
 8005eae:	f7ff f9c7 	bl	8005240 <__lshift>
 8005eb2:	901a      	str	r0, [sp, #104]	@ 0x68
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d1d9      	bne.n	8005e6c <_strtod_l+0x73c>
 8005eb8:	e65d      	b.n	8005b76 <_strtod_l+0x446>
 8005eba:	2e00      	cmp	r6, #0
 8005ebc:	dd07      	ble.n	8005ece <_strtod_l+0x79e>
 8005ebe:	4649      	mov	r1, r9
 8005ec0:	9805      	ldr	r0, [sp, #20]
 8005ec2:	4632      	mov	r2, r6
 8005ec4:	f7ff f9bc 	bl	8005240 <__lshift>
 8005ec8:	4681      	mov	r9, r0
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d0d8      	beq.n	8005e80 <_strtod_l+0x750>
 8005ece:	2f00      	cmp	r7, #0
 8005ed0:	dd08      	ble.n	8005ee4 <_strtod_l+0x7b4>
 8005ed2:	4641      	mov	r1, r8
 8005ed4:	9805      	ldr	r0, [sp, #20]
 8005ed6:	463a      	mov	r2, r7
 8005ed8:	f7ff f9b2 	bl	8005240 <__lshift>
 8005edc:	4680      	mov	r8, r0
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	f43f ae49 	beq.w	8005b76 <_strtod_l+0x446>
 8005ee4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005ee6:	9805      	ldr	r0, [sp, #20]
 8005ee8:	464a      	mov	r2, r9
 8005eea:	f7ff fa31 	bl	8005350 <__mdiff>
 8005eee:	4604      	mov	r4, r0
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	f43f ae40 	beq.w	8005b76 <_strtod_l+0x446>
 8005ef6:	68c3      	ldr	r3, [r0, #12]
 8005ef8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005efa:	2300      	movs	r3, #0
 8005efc:	60c3      	str	r3, [r0, #12]
 8005efe:	4641      	mov	r1, r8
 8005f00:	f7ff fa0a 	bl	8005318 <__mcmp>
 8005f04:	2800      	cmp	r0, #0
 8005f06:	da45      	bge.n	8005f94 <_strtod_l+0x864>
 8005f08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f0a:	ea53 030a 	orrs.w	r3, r3, sl
 8005f0e:	d16b      	bne.n	8005fe8 <_strtod_l+0x8b8>
 8005f10:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d167      	bne.n	8005fe8 <_strtod_l+0x8b8>
 8005f18:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005f1c:	0d1b      	lsrs	r3, r3, #20
 8005f1e:	051b      	lsls	r3, r3, #20
 8005f20:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005f24:	d960      	bls.n	8005fe8 <_strtod_l+0x8b8>
 8005f26:	6963      	ldr	r3, [r4, #20]
 8005f28:	b913      	cbnz	r3, 8005f30 <_strtod_l+0x800>
 8005f2a:	6923      	ldr	r3, [r4, #16]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	dd5b      	ble.n	8005fe8 <_strtod_l+0x8b8>
 8005f30:	4621      	mov	r1, r4
 8005f32:	2201      	movs	r2, #1
 8005f34:	9805      	ldr	r0, [sp, #20]
 8005f36:	f7ff f983 	bl	8005240 <__lshift>
 8005f3a:	4641      	mov	r1, r8
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	f7ff f9eb 	bl	8005318 <__mcmp>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	dd50      	ble.n	8005fe8 <_strtod_l+0x8b8>
 8005f46:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005f4a:	9a08      	ldr	r2, [sp, #32]
 8005f4c:	0d1b      	lsrs	r3, r3, #20
 8005f4e:	051b      	lsls	r3, r3, #20
 8005f50:	2a00      	cmp	r2, #0
 8005f52:	d06a      	beq.n	800602a <_strtod_l+0x8fa>
 8005f54:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005f58:	d867      	bhi.n	800602a <_strtod_l+0x8fa>
 8005f5a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005f5e:	f67f ae9d 	bls.w	8005c9c <_strtod_l+0x56c>
 8005f62:	4b0a      	ldr	r3, [pc, #40]	@ (8005f8c <_strtod_l+0x85c>)
 8005f64:	4650      	mov	r0, sl
 8005f66:	4659      	mov	r1, fp
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f7fa fb45 	bl	80005f8 <__aeabi_dmul>
 8005f6e:	4b08      	ldr	r3, [pc, #32]	@ (8005f90 <_strtod_l+0x860>)
 8005f70:	400b      	ands	r3, r1
 8005f72:	4682      	mov	sl, r0
 8005f74:	468b      	mov	fp, r1
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f47f ae08 	bne.w	8005b8c <_strtod_l+0x45c>
 8005f7c:	9a05      	ldr	r2, [sp, #20]
 8005f7e:	2322      	movs	r3, #34	@ 0x22
 8005f80:	6013      	str	r3, [r2, #0]
 8005f82:	e603      	b.n	8005b8c <_strtod_l+0x45c>
 8005f84:	080077c0 	.word	0x080077c0
 8005f88:	fffffc02 	.word	0xfffffc02
 8005f8c:	39500000 	.word	0x39500000
 8005f90:	7ff00000 	.word	0x7ff00000
 8005f94:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8005f98:	d165      	bne.n	8006066 <_strtod_l+0x936>
 8005f9a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005f9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005fa0:	b35a      	cbz	r2, 8005ffa <_strtod_l+0x8ca>
 8005fa2:	4a9f      	ldr	r2, [pc, #636]	@ (8006220 <_strtod_l+0xaf0>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d12b      	bne.n	8006000 <_strtod_l+0x8d0>
 8005fa8:	9b08      	ldr	r3, [sp, #32]
 8005faa:	4651      	mov	r1, sl
 8005fac:	b303      	cbz	r3, 8005ff0 <_strtod_l+0x8c0>
 8005fae:	4b9d      	ldr	r3, [pc, #628]	@ (8006224 <_strtod_l+0xaf4>)
 8005fb0:	465a      	mov	r2, fp
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8005fbc:	d81b      	bhi.n	8005ff6 <_strtod_l+0x8c6>
 8005fbe:	0d1b      	lsrs	r3, r3, #20
 8005fc0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	4299      	cmp	r1, r3
 8005fca:	d119      	bne.n	8006000 <_strtod_l+0x8d0>
 8005fcc:	4b96      	ldr	r3, [pc, #600]	@ (8006228 <_strtod_l+0xaf8>)
 8005fce:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	d102      	bne.n	8005fda <_strtod_l+0x8aa>
 8005fd4:	3101      	adds	r1, #1
 8005fd6:	f43f adce 	beq.w	8005b76 <_strtod_l+0x446>
 8005fda:	4b92      	ldr	r3, [pc, #584]	@ (8006224 <_strtod_l+0xaf4>)
 8005fdc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fde:	401a      	ands	r2, r3
 8005fe0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005fe4:	f04f 0a00 	mov.w	sl, #0
 8005fe8:	9b08      	ldr	r3, [sp, #32]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1b9      	bne.n	8005f62 <_strtod_l+0x832>
 8005fee:	e5cd      	b.n	8005b8c <_strtod_l+0x45c>
 8005ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff4:	e7e8      	b.n	8005fc8 <_strtod_l+0x898>
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	e7e6      	b.n	8005fc8 <_strtod_l+0x898>
 8005ffa:	ea53 030a 	orrs.w	r3, r3, sl
 8005ffe:	d0a2      	beq.n	8005f46 <_strtod_l+0x816>
 8006000:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006002:	b1db      	cbz	r3, 800603c <_strtod_l+0x90c>
 8006004:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006006:	4213      	tst	r3, r2
 8006008:	d0ee      	beq.n	8005fe8 <_strtod_l+0x8b8>
 800600a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800600c:	9a08      	ldr	r2, [sp, #32]
 800600e:	4650      	mov	r0, sl
 8006010:	4659      	mov	r1, fp
 8006012:	b1bb      	cbz	r3, 8006044 <_strtod_l+0x914>
 8006014:	f7ff fb6e 	bl	80056f4 <sulp>
 8006018:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800601c:	ec53 2b10 	vmov	r2, r3, d0
 8006020:	f7fa f934 	bl	800028c <__adddf3>
 8006024:	4682      	mov	sl, r0
 8006026:	468b      	mov	fp, r1
 8006028:	e7de      	b.n	8005fe8 <_strtod_l+0x8b8>
 800602a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800602e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006032:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006036:	f04f 3aff 	mov.w	sl, #4294967295
 800603a:	e7d5      	b.n	8005fe8 <_strtod_l+0x8b8>
 800603c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800603e:	ea13 0f0a 	tst.w	r3, sl
 8006042:	e7e1      	b.n	8006008 <_strtod_l+0x8d8>
 8006044:	f7ff fb56 	bl	80056f4 <sulp>
 8006048:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800604c:	ec53 2b10 	vmov	r2, r3, d0
 8006050:	f7fa f91a 	bl	8000288 <__aeabi_dsub>
 8006054:	2200      	movs	r2, #0
 8006056:	2300      	movs	r3, #0
 8006058:	4682      	mov	sl, r0
 800605a:	468b      	mov	fp, r1
 800605c:	f7fa fd34 	bl	8000ac8 <__aeabi_dcmpeq>
 8006060:	2800      	cmp	r0, #0
 8006062:	d0c1      	beq.n	8005fe8 <_strtod_l+0x8b8>
 8006064:	e61a      	b.n	8005c9c <_strtod_l+0x56c>
 8006066:	4641      	mov	r1, r8
 8006068:	4620      	mov	r0, r4
 800606a:	f7ff facd 	bl	8005608 <__ratio>
 800606e:	ec57 6b10 	vmov	r6, r7, d0
 8006072:	2200      	movs	r2, #0
 8006074:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006078:	4630      	mov	r0, r6
 800607a:	4639      	mov	r1, r7
 800607c:	f7fa fd38 	bl	8000af0 <__aeabi_dcmple>
 8006080:	2800      	cmp	r0, #0
 8006082:	d06f      	beq.n	8006164 <_strtod_l+0xa34>
 8006084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d17a      	bne.n	8006180 <_strtod_l+0xa50>
 800608a:	f1ba 0f00 	cmp.w	sl, #0
 800608e:	d158      	bne.n	8006142 <_strtod_l+0xa12>
 8006090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006092:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006096:	2b00      	cmp	r3, #0
 8006098:	d15a      	bne.n	8006150 <_strtod_l+0xa20>
 800609a:	4b64      	ldr	r3, [pc, #400]	@ (800622c <_strtod_l+0xafc>)
 800609c:	2200      	movs	r2, #0
 800609e:	4630      	mov	r0, r6
 80060a0:	4639      	mov	r1, r7
 80060a2:	f7fa fd1b 	bl	8000adc <__aeabi_dcmplt>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d159      	bne.n	800615e <_strtod_l+0xa2e>
 80060aa:	4630      	mov	r0, r6
 80060ac:	4639      	mov	r1, r7
 80060ae:	4b60      	ldr	r3, [pc, #384]	@ (8006230 <_strtod_l+0xb00>)
 80060b0:	2200      	movs	r2, #0
 80060b2:	f7fa faa1 	bl	80005f8 <__aeabi_dmul>
 80060b6:	4606      	mov	r6, r0
 80060b8:	460f      	mov	r7, r1
 80060ba:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80060be:	9606      	str	r6, [sp, #24]
 80060c0:	9307      	str	r3, [sp, #28]
 80060c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060c6:	4d57      	ldr	r5, [pc, #348]	@ (8006224 <_strtod_l+0xaf4>)
 80060c8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80060cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060ce:	401d      	ands	r5, r3
 80060d0:	4b58      	ldr	r3, [pc, #352]	@ (8006234 <_strtod_l+0xb04>)
 80060d2:	429d      	cmp	r5, r3
 80060d4:	f040 80b2 	bne.w	800623c <_strtod_l+0xb0c>
 80060d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060da:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80060de:	ec4b ab10 	vmov	d0, sl, fp
 80060e2:	f7ff f9c9 	bl	8005478 <__ulp>
 80060e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060ea:	ec51 0b10 	vmov	r0, r1, d0
 80060ee:	f7fa fa83 	bl	80005f8 <__aeabi_dmul>
 80060f2:	4652      	mov	r2, sl
 80060f4:	465b      	mov	r3, fp
 80060f6:	f7fa f8c9 	bl	800028c <__adddf3>
 80060fa:	460b      	mov	r3, r1
 80060fc:	4949      	ldr	r1, [pc, #292]	@ (8006224 <_strtod_l+0xaf4>)
 80060fe:	4a4e      	ldr	r2, [pc, #312]	@ (8006238 <_strtod_l+0xb08>)
 8006100:	4019      	ands	r1, r3
 8006102:	4291      	cmp	r1, r2
 8006104:	4682      	mov	sl, r0
 8006106:	d942      	bls.n	800618e <_strtod_l+0xa5e>
 8006108:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800610a:	4b47      	ldr	r3, [pc, #284]	@ (8006228 <_strtod_l+0xaf8>)
 800610c:	429a      	cmp	r2, r3
 800610e:	d103      	bne.n	8006118 <_strtod_l+0x9e8>
 8006110:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006112:	3301      	adds	r3, #1
 8006114:	f43f ad2f 	beq.w	8005b76 <_strtod_l+0x446>
 8006118:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006228 <_strtod_l+0xaf8>
 800611c:	f04f 3aff 	mov.w	sl, #4294967295
 8006120:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006122:	9805      	ldr	r0, [sp, #20]
 8006124:	f7fe fe7c 	bl	8004e20 <_Bfree>
 8006128:	9805      	ldr	r0, [sp, #20]
 800612a:	4649      	mov	r1, r9
 800612c:	f7fe fe78 	bl	8004e20 <_Bfree>
 8006130:	9805      	ldr	r0, [sp, #20]
 8006132:	4641      	mov	r1, r8
 8006134:	f7fe fe74 	bl	8004e20 <_Bfree>
 8006138:	9805      	ldr	r0, [sp, #20]
 800613a:	4621      	mov	r1, r4
 800613c:	f7fe fe70 	bl	8004e20 <_Bfree>
 8006140:	e619      	b.n	8005d76 <_strtod_l+0x646>
 8006142:	f1ba 0f01 	cmp.w	sl, #1
 8006146:	d103      	bne.n	8006150 <_strtod_l+0xa20>
 8006148:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800614a:	2b00      	cmp	r3, #0
 800614c:	f43f ada6 	beq.w	8005c9c <_strtod_l+0x56c>
 8006150:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8006200 <_strtod_l+0xad0>
 8006154:	4f35      	ldr	r7, [pc, #212]	@ (800622c <_strtod_l+0xafc>)
 8006156:	ed8d 7b06 	vstr	d7, [sp, #24]
 800615a:	2600      	movs	r6, #0
 800615c:	e7b1      	b.n	80060c2 <_strtod_l+0x992>
 800615e:	4f34      	ldr	r7, [pc, #208]	@ (8006230 <_strtod_l+0xb00>)
 8006160:	2600      	movs	r6, #0
 8006162:	e7aa      	b.n	80060ba <_strtod_l+0x98a>
 8006164:	4b32      	ldr	r3, [pc, #200]	@ (8006230 <_strtod_l+0xb00>)
 8006166:	4630      	mov	r0, r6
 8006168:	4639      	mov	r1, r7
 800616a:	2200      	movs	r2, #0
 800616c:	f7fa fa44 	bl	80005f8 <__aeabi_dmul>
 8006170:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006172:	4606      	mov	r6, r0
 8006174:	460f      	mov	r7, r1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d09f      	beq.n	80060ba <_strtod_l+0x98a>
 800617a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800617e:	e7a0      	b.n	80060c2 <_strtod_l+0x992>
 8006180:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8006208 <_strtod_l+0xad8>
 8006184:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006188:	ec57 6b17 	vmov	r6, r7, d7
 800618c:	e799      	b.n	80060c2 <_strtod_l+0x992>
 800618e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006192:	9b08      	ldr	r3, [sp, #32]
 8006194:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1c1      	bne.n	8006120 <_strtod_l+0x9f0>
 800619c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80061a0:	0d1b      	lsrs	r3, r3, #20
 80061a2:	051b      	lsls	r3, r3, #20
 80061a4:	429d      	cmp	r5, r3
 80061a6:	d1bb      	bne.n	8006120 <_strtod_l+0x9f0>
 80061a8:	4630      	mov	r0, r6
 80061aa:	4639      	mov	r1, r7
 80061ac:	f7fa fd84 	bl	8000cb8 <__aeabi_d2lz>
 80061b0:	f7fa f9f4 	bl	800059c <__aeabi_l2d>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4630      	mov	r0, r6
 80061ba:	4639      	mov	r1, r7
 80061bc:	f7fa f864 	bl	8000288 <__aeabi_dsub>
 80061c0:	460b      	mov	r3, r1
 80061c2:	4602      	mov	r2, r0
 80061c4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80061c8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80061cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061ce:	ea46 060a 	orr.w	r6, r6, sl
 80061d2:	431e      	orrs	r6, r3
 80061d4:	d06f      	beq.n	80062b6 <_strtod_l+0xb86>
 80061d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006210 <_strtod_l+0xae0>)
 80061d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061dc:	f7fa fc7e 	bl	8000adc <__aeabi_dcmplt>
 80061e0:	2800      	cmp	r0, #0
 80061e2:	f47f acd3 	bne.w	8005b8c <_strtod_l+0x45c>
 80061e6:	a30c      	add	r3, pc, #48	@ (adr r3, 8006218 <_strtod_l+0xae8>)
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061f0:	f7fa fc92 	bl	8000b18 <__aeabi_dcmpgt>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	d093      	beq.n	8006120 <_strtod_l+0x9f0>
 80061f8:	e4c8      	b.n	8005b8c <_strtod_l+0x45c>
 80061fa:	bf00      	nop
 80061fc:	f3af 8000 	nop.w
 8006200:	00000000 	.word	0x00000000
 8006204:	bff00000 	.word	0xbff00000
 8006208:	00000000 	.word	0x00000000
 800620c:	3ff00000 	.word	0x3ff00000
 8006210:	94a03595 	.word	0x94a03595
 8006214:	3fdfffff 	.word	0x3fdfffff
 8006218:	35afe535 	.word	0x35afe535
 800621c:	3fe00000 	.word	0x3fe00000
 8006220:	000fffff 	.word	0x000fffff
 8006224:	7ff00000 	.word	0x7ff00000
 8006228:	7fefffff 	.word	0x7fefffff
 800622c:	3ff00000 	.word	0x3ff00000
 8006230:	3fe00000 	.word	0x3fe00000
 8006234:	7fe00000 	.word	0x7fe00000
 8006238:	7c9fffff 	.word	0x7c9fffff
 800623c:	9b08      	ldr	r3, [sp, #32]
 800623e:	b323      	cbz	r3, 800628a <_strtod_l+0xb5a>
 8006240:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006244:	d821      	bhi.n	800628a <_strtod_l+0xb5a>
 8006246:	a328      	add	r3, pc, #160	@ (adr r3, 80062e8 <_strtod_l+0xbb8>)
 8006248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624c:	4630      	mov	r0, r6
 800624e:	4639      	mov	r1, r7
 8006250:	f7fa fc4e 	bl	8000af0 <__aeabi_dcmple>
 8006254:	b1a0      	cbz	r0, 8006280 <_strtod_l+0xb50>
 8006256:	4639      	mov	r1, r7
 8006258:	4630      	mov	r0, r6
 800625a:	f7fa fca5 	bl	8000ba8 <__aeabi_d2uiz>
 800625e:	2801      	cmp	r0, #1
 8006260:	bf38      	it	cc
 8006262:	2001      	movcc	r0, #1
 8006264:	f7fa f94e 	bl	8000504 <__aeabi_ui2d>
 8006268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800626a:	4606      	mov	r6, r0
 800626c:	460f      	mov	r7, r1
 800626e:	b9fb      	cbnz	r3, 80062b0 <_strtod_l+0xb80>
 8006270:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006274:	9014      	str	r0, [sp, #80]	@ 0x50
 8006276:	9315      	str	r3, [sp, #84]	@ 0x54
 8006278:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800627c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006280:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006282:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006286:	1b5b      	subs	r3, r3, r5
 8006288:	9311      	str	r3, [sp, #68]	@ 0x44
 800628a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800628e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006292:	f7ff f8f1 	bl	8005478 <__ulp>
 8006296:	4650      	mov	r0, sl
 8006298:	ec53 2b10 	vmov	r2, r3, d0
 800629c:	4659      	mov	r1, fp
 800629e:	f7fa f9ab 	bl	80005f8 <__aeabi_dmul>
 80062a2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80062a6:	f7f9 fff1 	bl	800028c <__adddf3>
 80062aa:	4682      	mov	sl, r0
 80062ac:	468b      	mov	fp, r1
 80062ae:	e770      	b.n	8006192 <_strtod_l+0xa62>
 80062b0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80062b4:	e7e0      	b.n	8006278 <_strtod_l+0xb48>
 80062b6:	a30e      	add	r3, pc, #56	@ (adr r3, 80062f0 <_strtod_l+0xbc0>)
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	f7fa fc0e 	bl	8000adc <__aeabi_dcmplt>
 80062c0:	e798      	b.n	80061f4 <_strtod_l+0xac4>
 80062c2:	2300      	movs	r3, #0
 80062c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80062c6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80062c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80062ca:	6013      	str	r3, [r2, #0]
 80062cc:	f7ff ba6d 	b.w	80057aa <_strtod_l+0x7a>
 80062d0:	2a65      	cmp	r2, #101	@ 0x65
 80062d2:	f43f ab68 	beq.w	80059a6 <_strtod_l+0x276>
 80062d6:	2a45      	cmp	r2, #69	@ 0x45
 80062d8:	f43f ab65 	beq.w	80059a6 <_strtod_l+0x276>
 80062dc:	2301      	movs	r3, #1
 80062de:	f7ff bba0 	b.w	8005a22 <_strtod_l+0x2f2>
 80062e2:	bf00      	nop
 80062e4:	f3af 8000 	nop.w
 80062e8:	ffc00000 	.word	0xffc00000
 80062ec:	41dfffff 	.word	0x41dfffff
 80062f0:	94a03595 	.word	0x94a03595
 80062f4:	3fcfffff 	.word	0x3fcfffff

080062f8 <_strtod_r>:
 80062f8:	4b01      	ldr	r3, [pc, #4]	@ (8006300 <_strtod_r+0x8>)
 80062fa:	f7ff ba19 	b.w	8005730 <_strtod_l>
 80062fe:	bf00      	nop
 8006300:	20000068 	.word	0x20000068

08006304 <_strtol_l.isra.0>:
 8006304:	2b24      	cmp	r3, #36	@ 0x24
 8006306:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800630a:	4686      	mov	lr, r0
 800630c:	4690      	mov	r8, r2
 800630e:	d801      	bhi.n	8006314 <_strtol_l.isra.0+0x10>
 8006310:	2b01      	cmp	r3, #1
 8006312:	d106      	bne.n	8006322 <_strtol_l.isra.0+0x1e>
 8006314:	f7fd fdb8 	bl	8003e88 <__errno>
 8006318:	2316      	movs	r3, #22
 800631a:	6003      	str	r3, [r0, #0]
 800631c:	2000      	movs	r0, #0
 800631e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006322:	4834      	ldr	r0, [pc, #208]	@ (80063f4 <_strtol_l.isra.0+0xf0>)
 8006324:	460d      	mov	r5, r1
 8006326:	462a      	mov	r2, r5
 8006328:	f815 4b01 	ldrb.w	r4, [r5], #1
 800632c:	5d06      	ldrb	r6, [r0, r4]
 800632e:	f016 0608 	ands.w	r6, r6, #8
 8006332:	d1f8      	bne.n	8006326 <_strtol_l.isra.0+0x22>
 8006334:	2c2d      	cmp	r4, #45	@ 0x2d
 8006336:	d110      	bne.n	800635a <_strtol_l.isra.0+0x56>
 8006338:	782c      	ldrb	r4, [r5, #0]
 800633a:	2601      	movs	r6, #1
 800633c:	1c95      	adds	r5, r2, #2
 800633e:	f033 0210 	bics.w	r2, r3, #16
 8006342:	d115      	bne.n	8006370 <_strtol_l.isra.0+0x6c>
 8006344:	2c30      	cmp	r4, #48	@ 0x30
 8006346:	d10d      	bne.n	8006364 <_strtol_l.isra.0+0x60>
 8006348:	782a      	ldrb	r2, [r5, #0]
 800634a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800634e:	2a58      	cmp	r2, #88	@ 0x58
 8006350:	d108      	bne.n	8006364 <_strtol_l.isra.0+0x60>
 8006352:	786c      	ldrb	r4, [r5, #1]
 8006354:	3502      	adds	r5, #2
 8006356:	2310      	movs	r3, #16
 8006358:	e00a      	b.n	8006370 <_strtol_l.isra.0+0x6c>
 800635a:	2c2b      	cmp	r4, #43	@ 0x2b
 800635c:	bf04      	itt	eq
 800635e:	782c      	ldrbeq	r4, [r5, #0]
 8006360:	1c95      	addeq	r5, r2, #2
 8006362:	e7ec      	b.n	800633e <_strtol_l.isra.0+0x3a>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1f6      	bne.n	8006356 <_strtol_l.isra.0+0x52>
 8006368:	2c30      	cmp	r4, #48	@ 0x30
 800636a:	bf14      	ite	ne
 800636c:	230a      	movne	r3, #10
 800636e:	2308      	moveq	r3, #8
 8006370:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006374:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006378:	2200      	movs	r2, #0
 800637a:	fbbc f9f3 	udiv	r9, ip, r3
 800637e:	4610      	mov	r0, r2
 8006380:	fb03 ca19 	mls	sl, r3, r9, ip
 8006384:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006388:	2f09      	cmp	r7, #9
 800638a:	d80f      	bhi.n	80063ac <_strtol_l.isra.0+0xa8>
 800638c:	463c      	mov	r4, r7
 800638e:	42a3      	cmp	r3, r4
 8006390:	dd1b      	ble.n	80063ca <_strtol_l.isra.0+0xc6>
 8006392:	1c57      	adds	r7, r2, #1
 8006394:	d007      	beq.n	80063a6 <_strtol_l.isra.0+0xa2>
 8006396:	4581      	cmp	r9, r0
 8006398:	d314      	bcc.n	80063c4 <_strtol_l.isra.0+0xc0>
 800639a:	d101      	bne.n	80063a0 <_strtol_l.isra.0+0x9c>
 800639c:	45a2      	cmp	sl, r4
 800639e:	db11      	blt.n	80063c4 <_strtol_l.isra.0+0xc0>
 80063a0:	fb00 4003 	mla	r0, r0, r3, r4
 80063a4:	2201      	movs	r2, #1
 80063a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80063aa:	e7eb      	b.n	8006384 <_strtol_l.isra.0+0x80>
 80063ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80063b0:	2f19      	cmp	r7, #25
 80063b2:	d801      	bhi.n	80063b8 <_strtol_l.isra.0+0xb4>
 80063b4:	3c37      	subs	r4, #55	@ 0x37
 80063b6:	e7ea      	b.n	800638e <_strtol_l.isra.0+0x8a>
 80063b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80063bc:	2f19      	cmp	r7, #25
 80063be:	d804      	bhi.n	80063ca <_strtol_l.isra.0+0xc6>
 80063c0:	3c57      	subs	r4, #87	@ 0x57
 80063c2:	e7e4      	b.n	800638e <_strtol_l.isra.0+0x8a>
 80063c4:	f04f 32ff 	mov.w	r2, #4294967295
 80063c8:	e7ed      	b.n	80063a6 <_strtol_l.isra.0+0xa2>
 80063ca:	1c53      	adds	r3, r2, #1
 80063cc:	d108      	bne.n	80063e0 <_strtol_l.isra.0+0xdc>
 80063ce:	2322      	movs	r3, #34	@ 0x22
 80063d0:	f8ce 3000 	str.w	r3, [lr]
 80063d4:	4660      	mov	r0, ip
 80063d6:	f1b8 0f00 	cmp.w	r8, #0
 80063da:	d0a0      	beq.n	800631e <_strtol_l.isra.0+0x1a>
 80063dc:	1e69      	subs	r1, r5, #1
 80063de:	e006      	b.n	80063ee <_strtol_l.isra.0+0xea>
 80063e0:	b106      	cbz	r6, 80063e4 <_strtol_l.isra.0+0xe0>
 80063e2:	4240      	negs	r0, r0
 80063e4:	f1b8 0f00 	cmp.w	r8, #0
 80063e8:	d099      	beq.n	800631e <_strtol_l.isra.0+0x1a>
 80063ea:	2a00      	cmp	r2, #0
 80063ec:	d1f6      	bne.n	80063dc <_strtol_l.isra.0+0xd8>
 80063ee:	f8c8 1000 	str.w	r1, [r8]
 80063f2:	e794      	b.n	800631e <_strtol_l.isra.0+0x1a>
 80063f4:	080077e9 	.word	0x080077e9

080063f8 <_strtol_r>:
 80063f8:	f7ff bf84 	b.w	8006304 <_strtol_l.isra.0>

080063fc <__ssputs_r>:
 80063fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006400:	688e      	ldr	r6, [r1, #8]
 8006402:	461f      	mov	r7, r3
 8006404:	42be      	cmp	r6, r7
 8006406:	680b      	ldr	r3, [r1, #0]
 8006408:	4682      	mov	sl, r0
 800640a:	460c      	mov	r4, r1
 800640c:	4690      	mov	r8, r2
 800640e:	d82d      	bhi.n	800646c <__ssputs_r+0x70>
 8006410:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006414:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006418:	d026      	beq.n	8006468 <__ssputs_r+0x6c>
 800641a:	6965      	ldr	r5, [r4, #20]
 800641c:	6909      	ldr	r1, [r1, #16]
 800641e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006422:	eba3 0901 	sub.w	r9, r3, r1
 8006426:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800642a:	1c7b      	adds	r3, r7, #1
 800642c:	444b      	add	r3, r9
 800642e:	106d      	asrs	r5, r5, #1
 8006430:	429d      	cmp	r5, r3
 8006432:	bf38      	it	cc
 8006434:	461d      	movcc	r5, r3
 8006436:	0553      	lsls	r3, r2, #21
 8006438:	d527      	bpl.n	800648a <__ssputs_r+0x8e>
 800643a:	4629      	mov	r1, r5
 800643c:	f7fe fc24 	bl	8004c88 <_malloc_r>
 8006440:	4606      	mov	r6, r0
 8006442:	b360      	cbz	r0, 800649e <__ssputs_r+0xa2>
 8006444:	6921      	ldr	r1, [r4, #16]
 8006446:	464a      	mov	r2, r9
 8006448:	f000 fbde 	bl	8006c08 <memcpy>
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006452:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006456:	81a3      	strh	r3, [r4, #12]
 8006458:	6126      	str	r6, [r4, #16]
 800645a:	6165      	str	r5, [r4, #20]
 800645c:	444e      	add	r6, r9
 800645e:	eba5 0509 	sub.w	r5, r5, r9
 8006462:	6026      	str	r6, [r4, #0]
 8006464:	60a5      	str	r5, [r4, #8]
 8006466:	463e      	mov	r6, r7
 8006468:	42be      	cmp	r6, r7
 800646a:	d900      	bls.n	800646e <__ssputs_r+0x72>
 800646c:	463e      	mov	r6, r7
 800646e:	6820      	ldr	r0, [r4, #0]
 8006470:	4632      	mov	r2, r6
 8006472:	4641      	mov	r1, r8
 8006474:	f000 fb6a 	bl	8006b4c <memmove>
 8006478:	68a3      	ldr	r3, [r4, #8]
 800647a:	1b9b      	subs	r3, r3, r6
 800647c:	60a3      	str	r3, [r4, #8]
 800647e:	6823      	ldr	r3, [r4, #0]
 8006480:	4433      	add	r3, r6
 8006482:	6023      	str	r3, [r4, #0]
 8006484:	2000      	movs	r0, #0
 8006486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800648a:	462a      	mov	r2, r5
 800648c:	f000 ff51 	bl	8007332 <_realloc_r>
 8006490:	4606      	mov	r6, r0
 8006492:	2800      	cmp	r0, #0
 8006494:	d1e0      	bne.n	8006458 <__ssputs_r+0x5c>
 8006496:	6921      	ldr	r1, [r4, #16]
 8006498:	4650      	mov	r0, sl
 800649a:	f7fe fb81 	bl	8004ba0 <_free_r>
 800649e:	230c      	movs	r3, #12
 80064a0:	f8ca 3000 	str.w	r3, [sl]
 80064a4:	89a3      	ldrh	r3, [r4, #12]
 80064a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064aa:	81a3      	strh	r3, [r4, #12]
 80064ac:	f04f 30ff 	mov.w	r0, #4294967295
 80064b0:	e7e9      	b.n	8006486 <__ssputs_r+0x8a>
	...

080064b4 <_svfiprintf_r>:
 80064b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b8:	4698      	mov	r8, r3
 80064ba:	898b      	ldrh	r3, [r1, #12]
 80064bc:	061b      	lsls	r3, r3, #24
 80064be:	b09d      	sub	sp, #116	@ 0x74
 80064c0:	4607      	mov	r7, r0
 80064c2:	460d      	mov	r5, r1
 80064c4:	4614      	mov	r4, r2
 80064c6:	d510      	bpl.n	80064ea <_svfiprintf_r+0x36>
 80064c8:	690b      	ldr	r3, [r1, #16]
 80064ca:	b973      	cbnz	r3, 80064ea <_svfiprintf_r+0x36>
 80064cc:	2140      	movs	r1, #64	@ 0x40
 80064ce:	f7fe fbdb 	bl	8004c88 <_malloc_r>
 80064d2:	6028      	str	r0, [r5, #0]
 80064d4:	6128      	str	r0, [r5, #16]
 80064d6:	b930      	cbnz	r0, 80064e6 <_svfiprintf_r+0x32>
 80064d8:	230c      	movs	r3, #12
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	f04f 30ff 	mov.w	r0, #4294967295
 80064e0:	b01d      	add	sp, #116	@ 0x74
 80064e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e6:	2340      	movs	r3, #64	@ 0x40
 80064e8:	616b      	str	r3, [r5, #20]
 80064ea:	2300      	movs	r3, #0
 80064ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80064ee:	2320      	movs	r3, #32
 80064f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80064f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80064f8:	2330      	movs	r3, #48	@ 0x30
 80064fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006698 <_svfiprintf_r+0x1e4>
 80064fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006502:	f04f 0901 	mov.w	r9, #1
 8006506:	4623      	mov	r3, r4
 8006508:	469a      	mov	sl, r3
 800650a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800650e:	b10a      	cbz	r2, 8006514 <_svfiprintf_r+0x60>
 8006510:	2a25      	cmp	r2, #37	@ 0x25
 8006512:	d1f9      	bne.n	8006508 <_svfiprintf_r+0x54>
 8006514:	ebba 0b04 	subs.w	fp, sl, r4
 8006518:	d00b      	beq.n	8006532 <_svfiprintf_r+0x7e>
 800651a:	465b      	mov	r3, fp
 800651c:	4622      	mov	r2, r4
 800651e:	4629      	mov	r1, r5
 8006520:	4638      	mov	r0, r7
 8006522:	f7ff ff6b 	bl	80063fc <__ssputs_r>
 8006526:	3001      	adds	r0, #1
 8006528:	f000 80a7 	beq.w	800667a <_svfiprintf_r+0x1c6>
 800652c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800652e:	445a      	add	r2, fp
 8006530:	9209      	str	r2, [sp, #36]	@ 0x24
 8006532:	f89a 3000 	ldrb.w	r3, [sl]
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 809f 	beq.w	800667a <_svfiprintf_r+0x1c6>
 800653c:	2300      	movs	r3, #0
 800653e:	f04f 32ff 	mov.w	r2, #4294967295
 8006542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006546:	f10a 0a01 	add.w	sl, sl, #1
 800654a:	9304      	str	r3, [sp, #16]
 800654c:	9307      	str	r3, [sp, #28]
 800654e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006552:	931a      	str	r3, [sp, #104]	@ 0x68
 8006554:	4654      	mov	r4, sl
 8006556:	2205      	movs	r2, #5
 8006558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800655c:	484e      	ldr	r0, [pc, #312]	@ (8006698 <_svfiprintf_r+0x1e4>)
 800655e:	f7f9 fe37 	bl	80001d0 <memchr>
 8006562:	9a04      	ldr	r2, [sp, #16]
 8006564:	b9d8      	cbnz	r0, 800659e <_svfiprintf_r+0xea>
 8006566:	06d0      	lsls	r0, r2, #27
 8006568:	bf44      	itt	mi
 800656a:	2320      	movmi	r3, #32
 800656c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006570:	0711      	lsls	r1, r2, #28
 8006572:	bf44      	itt	mi
 8006574:	232b      	movmi	r3, #43	@ 0x2b
 8006576:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800657a:	f89a 3000 	ldrb.w	r3, [sl]
 800657e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006580:	d015      	beq.n	80065ae <_svfiprintf_r+0xfa>
 8006582:	9a07      	ldr	r2, [sp, #28]
 8006584:	4654      	mov	r4, sl
 8006586:	2000      	movs	r0, #0
 8006588:	f04f 0c0a 	mov.w	ip, #10
 800658c:	4621      	mov	r1, r4
 800658e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006592:	3b30      	subs	r3, #48	@ 0x30
 8006594:	2b09      	cmp	r3, #9
 8006596:	d94b      	bls.n	8006630 <_svfiprintf_r+0x17c>
 8006598:	b1b0      	cbz	r0, 80065c8 <_svfiprintf_r+0x114>
 800659a:	9207      	str	r2, [sp, #28]
 800659c:	e014      	b.n	80065c8 <_svfiprintf_r+0x114>
 800659e:	eba0 0308 	sub.w	r3, r0, r8
 80065a2:	fa09 f303 	lsl.w	r3, r9, r3
 80065a6:	4313      	orrs	r3, r2
 80065a8:	9304      	str	r3, [sp, #16]
 80065aa:	46a2      	mov	sl, r4
 80065ac:	e7d2      	b.n	8006554 <_svfiprintf_r+0xa0>
 80065ae:	9b03      	ldr	r3, [sp, #12]
 80065b0:	1d19      	adds	r1, r3, #4
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	9103      	str	r1, [sp, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	bfbb      	ittet	lt
 80065ba:	425b      	neglt	r3, r3
 80065bc:	f042 0202 	orrlt.w	r2, r2, #2
 80065c0:	9307      	strge	r3, [sp, #28]
 80065c2:	9307      	strlt	r3, [sp, #28]
 80065c4:	bfb8      	it	lt
 80065c6:	9204      	strlt	r2, [sp, #16]
 80065c8:	7823      	ldrb	r3, [r4, #0]
 80065ca:	2b2e      	cmp	r3, #46	@ 0x2e
 80065cc:	d10a      	bne.n	80065e4 <_svfiprintf_r+0x130>
 80065ce:	7863      	ldrb	r3, [r4, #1]
 80065d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80065d2:	d132      	bne.n	800663a <_svfiprintf_r+0x186>
 80065d4:	9b03      	ldr	r3, [sp, #12]
 80065d6:	1d1a      	adds	r2, r3, #4
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	9203      	str	r2, [sp, #12]
 80065dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80065e0:	3402      	adds	r4, #2
 80065e2:	9305      	str	r3, [sp, #20]
 80065e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80066a8 <_svfiprintf_r+0x1f4>
 80065e8:	7821      	ldrb	r1, [r4, #0]
 80065ea:	2203      	movs	r2, #3
 80065ec:	4650      	mov	r0, sl
 80065ee:	f7f9 fdef 	bl	80001d0 <memchr>
 80065f2:	b138      	cbz	r0, 8006604 <_svfiprintf_r+0x150>
 80065f4:	9b04      	ldr	r3, [sp, #16]
 80065f6:	eba0 000a 	sub.w	r0, r0, sl
 80065fa:	2240      	movs	r2, #64	@ 0x40
 80065fc:	4082      	lsls	r2, r0
 80065fe:	4313      	orrs	r3, r2
 8006600:	3401      	adds	r4, #1
 8006602:	9304      	str	r3, [sp, #16]
 8006604:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006608:	4824      	ldr	r0, [pc, #144]	@ (800669c <_svfiprintf_r+0x1e8>)
 800660a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800660e:	2206      	movs	r2, #6
 8006610:	f7f9 fdde 	bl	80001d0 <memchr>
 8006614:	2800      	cmp	r0, #0
 8006616:	d036      	beq.n	8006686 <_svfiprintf_r+0x1d2>
 8006618:	4b21      	ldr	r3, [pc, #132]	@ (80066a0 <_svfiprintf_r+0x1ec>)
 800661a:	bb1b      	cbnz	r3, 8006664 <_svfiprintf_r+0x1b0>
 800661c:	9b03      	ldr	r3, [sp, #12]
 800661e:	3307      	adds	r3, #7
 8006620:	f023 0307 	bic.w	r3, r3, #7
 8006624:	3308      	adds	r3, #8
 8006626:	9303      	str	r3, [sp, #12]
 8006628:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800662a:	4433      	add	r3, r6
 800662c:	9309      	str	r3, [sp, #36]	@ 0x24
 800662e:	e76a      	b.n	8006506 <_svfiprintf_r+0x52>
 8006630:	fb0c 3202 	mla	r2, ip, r2, r3
 8006634:	460c      	mov	r4, r1
 8006636:	2001      	movs	r0, #1
 8006638:	e7a8      	b.n	800658c <_svfiprintf_r+0xd8>
 800663a:	2300      	movs	r3, #0
 800663c:	3401      	adds	r4, #1
 800663e:	9305      	str	r3, [sp, #20]
 8006640:	4619      	mov	r1, r3
 8006642:	f04f 0c0a 	mov.w	ip, #10
 8006646:	4620      	mov	r0, r4
 8006648:	f810 2b01 	ldrb.w	r2, [r0], #1
 800664c:	3a30      	subs	r2, #48	@ 0x30
 800664e:	2a09      	cmp	r2, #9
 8006650:	d903      	bls.n	800665a <_svfiprintf_r+0x1a6>
 8006652:	2b00      	cmp	r3, #0
 8006654:	d0c6      	beq.n	80065e4 <_svfiprintf_r+0x130>
 8006656:	9105      	str	r1, [sp, #20]
 8006658:	e7c4      	b.n	80065e4 <_svfiprintf_r+0x130>
 800665a:	fb0c 2101 	mla	r1, ip, r1, r2
 800665e:	4604      	mov	r4, r0
 8006660:	2301      	movs	r3, #1
 8006662:	e7f0      	b.n	8006646 <_svfiprintf_r+0x192>
 8006664:	ab03      	add	r3, sp, #12
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	462a      	mov	r2, r5
 800666a:	4b0e      	ldr	r3, [pc, #56]	@ (80066a4 <_svfiprintf_r+0x1f0>)
 800666c:	a904      	add	r1, sp, #16
 800666e:	4638      	mov	r0, r7
 8006670:	f7fc fbc8 	bl	8002e04 <_printf_float>
 8006674:	1c42      	adds	r2, r0, #1
 8006676:	4606      	mov	r6, r0
 8006678:	d1d6      	bne.n	8006628 <_svfiprintf_r+0x174>
 800667a:	89ab      	ldrh	r3, [r5, #12]
 800667c:	065b      	lsls	r3, r3, #25
 800667e:	f53f af2d 	bmi.w	80064dc <_svfiprintf_r+0x28>
 8006682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006684:	e72c      	b.n	80064e0 <_svfiprintf_r+0x2c>
 8006686:	ab03      	add	r3, sp, #12
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	462a      	mov	r2, r5
 800668c:	4b05      	ldr	r3, [pc, #20]	@ (80066a4 <_svfiprintf_r+0x1f0>)
 800668e:	a904      	add	r1, sp, #16
 8006690:	4638      	mov	r0, r7
 8006692:	f7fc fe4f 	bl	8003334 <_printf_i>
 8006696:	e7ed      	b.n	8006674 <_svfiprintf_r+0x1c0>
 8006698:	080075e1 	.word	0x080075e1
 800669c:	080075eb 	.word	0x080075eb
 80066a0:	08002e05 	.word	0x08002e05
 80066a4:	080063fd 	.word	0x080063fd
 80066a8:	080075e7 	.word	0x080075e7

080066ac <__sfputc_r>:
 80066ac:	6893      	ldr	r3, [r2, #8]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	b410      	push	{r4}
 80066b4:	6093      	str	r3, [r2, #8]
 80066b6:	da08      	bge.n	80066ca <__sfputc_r+0x1e>
 80066b8:	6994      	ldr	r4, [r2, #24]
 80066ba:	42a3      	cmp	r3, r4
 80066bc:	db01      	blt.n	80066c2 <__sfputc_r+0x16>
 80066be:	290a      	cmp	r1, #10
 80066c0:	d103      	bne.n	80066ca <__sfputc_r+0x1e>
 80066c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066c6:	f7fd baf8 	b.w	8003cba <__swbuf_r>
 80066ca:	6813      	ldr	r3, [r2, #0]
 80066cc:	1c58      	adds	r0, r3, #1
 80066ce:	6010      	str	r0, [r2, #0]
 80066d0:	7019      	strb	r1, [r3, #0]
 80066d2:	4608      	mov	r0, r1
 80066d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066d8:	4770      	bx	lr

080066da <__sfputs_r>:
 80066da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066dc:	4606      	mov	r6, r0
 80066de:	460f      	mov	r7, r1
 80066e0:	4614      	mov	r4, r2
 80066e2:	18d5      	adds	r5, r2, r3
 80066e4:	42ac      	cmp	r4, r5
 80066e6:	d101      	bne.n	80066ec <__sfputs_r+0x12>
 80066e8:	2000      	movs	r0, #0
 80066ea:	e007      	b.n	80066fc <__sfputs_r+0x22>
 80066ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066f0:	463a      	mov	r2, r7
 80066f2:	4630      	mov	r0, r6
 80066f4:	f7ff ffda 	bl	80066ac <__sfputc_r>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d1f3      	bne.n	80066e4 <__sfputs_r+0xa>
 80066fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006700 <_vfiprintf_r>:
 8006700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006704:	460d      	mov	r5, r1
 8006706:	b09d      	sub	sp, #116	@ 0x74
 8006708:	4614      	mov	r4, r2
 800670a:	4698      	mov	r8, r3
 800670c:	4606      	mov	r6, r0
 800670e:	b118      	cbz	r0, 8006718 <_vfiprintf_r+0x18>
 8006710:	6a03      	ldr	r3, [r0, #32]
 8006712:	b90b      	cbnz	r3, 8006718 <_vfiprintf_r+0x18>
 8006714:	f7fd f9c6 	bl	8003aa4 <__sinit>
 8006718:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800671a:	07d9      	lsls	r1, r3, #31
 800671c:	d405      	bmi.n	800672a <_vfiprintf_r+0x2a>
 800671e:	89ab      	ldrh	r3, [r5, #12]
 8006720:	059a      	lsls	r2, r3, #22
 8006722:	d402      	bmi.n	800672a <_vfiprintf_r+0x2a>
 8006724:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006726:	f7fd fbda 	bl	8003ede <__retarget_lock_acquire_recursive>
 800672a:	89ab      	ldrh	r3, [r5, #12]
 800672c:	071b      	lsls	r3, r3, #28
 800672e:	d501      	bpl.n	8006734 <_vfiprintf_r+0x34>
 8006730:	692b      	ldr	r3, [r5, #16]
 8006732:	b99b      	cbnz	r3, 800675c <_vfiprintf_r+0x5c>
 8006734:	4629      	mov	r1, r5
 8006736:	4630      	mov	r0, r6
 8006738:	f7fd fafe 	bl	8003d38 <__swsetup_r>
 800673c:	b170      	cbz	r0, 800675c <_vfiprintf_r+0x5c>
 800673e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006740:	07dc      	lsls	r4, r3, #31
 8006742:	d504      	bpl.n	800674e <_vfiprintf_r+0x4e>
 8006744:	f04f 30ff 	mov.w	r0, #4294967295
 8006748:	b01d      	add	sp, #116	@ 0x74
 800674a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674e:	89ab      	ldrh	r3, [r5, #12]
 8006750:	0598      	lsls	r0, r3, #22
 8006752:	d4f7      	bmi.n	8006744 <_vfiprintf_r+0x44>
 8006754:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006756:	f7fd fbc3 	bl	8003ee0 <__retarget_lock_release_recursive>
 800675a:	e7f3      	b.n	8006744 <_vfiprintf_r+0x44>
 800675c:	2300      	movs	r3, #0
 800675e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006760:	2320      	movs	r3, #32
 8006762:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006766:	f8cd 800c 	str.w	r8, [sp, #12]
 800676a:	2330      	movs	r3, #48	@ 0x30
 800676c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800691c <_vfiprintf_r+0x21c>
 8006770:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006774:	f04f 0901 	mov.w	r9, #1
 8006778:	4623      	mov	r3, r4
 800677a:	469a      	mov	sl, r3
 800677c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006780:	b10a      	cbz	r2, 8006786 <_vfiprintf_r+0x86>
 8006782:	2a25      	cmp	r2, #37	@ 0x25
 8006784:	d1f9      	bne.n	800677a <_vfiprintf_r+0x7a>
 8006786:	ebba 0b04 	subs.w	fp, sl, r4
 800678a:	d00b      	beq.n	80067a4 <_vfiprintf_r+0xa4>
 800678c:	465b      	mov	r3, fp
 800678e:	4622      	mov	r2, r4
 8006790:	4629      	mov	r1, r5
 8006792:	4630      	mov	r0, r6
 8006794:	f7ff ffa1 	bl	80066da <__sfputs_r>
 8006798:	3001      	adds	r0, #1
 800679a:	f000 80a7 	beq.w	80068ec <_vfiprintf_r+0x1ec>
 800679e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067a0:	445a      	add	r2, fp
 80067a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80067a4:	f89a 3000 	ldrb.w	r3, [sl]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 809f 	beq.w	80068ec <_vfiprintf_r+0x1ec>
 80067ae:	2300      	movs	r3, #0
 80067b0:	f04f 32ff 	mov.w	r2, #4294967295
 80067b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067b8:	f10a 0a01 	add.w	sl, sl, #1
 80067bc:	9304      	str	r3, [sp, #16]
 80067be:	9307      	str	r3, [sp, #28]
 80067c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80067c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80067c6:	4654      	mov	r4, sl
 80067c8:	2205      	movs	r2, #5
 80067ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ce:	4853      	ldr	r0, [pc, #332]	@ (800691c <_vfiprintf_r+0x21c>)
 80067d0:	f7f9 fcfe 	bl	80001d0 <memchr>
 80067d4:	9a04      	ldr	r2, [sp, #16]
 80067d6:	b9d8      	cbnz	r0, 8006810 <_vfiprintf_r+0x110>
 80067d8:	06d1      	lsls	r1, r2, #27
 80067da:	bf44      	itt	mi
 80067dc:	2320      	movmi	r3, #32
 80067de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067e2:	0713      	lsls	r3, r2, #28
 80067e4:	bf44      	itt	mi
 80067e6:	232b      	movmi	r3, #43	@ 0x2b
 80067e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80067ec:	f89a 3000 	ldrb.w	r3, [sl]
 80067f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80067f2:	d015      	beq.n	8006820 <_vfiprintf_r+0x120>
 80067f4:	9a07      	ldr	r2, [sp, #28]
 80067f6:	4654      	mov	r4, sl
 80067f8:	2000      	movs	r0, #0
 80067fa:	f04f 0c0a 	mov.w	ip, #10
 80067fe:	4621      	mov	r1, r4
 8006800:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006804:	3b30      	subs	r3, #48	@ 0x30
 8006806:	2b09      	cmp	r3, #9
 8006808:	d94b      	bls.n	80068a2 <_vfiprintf_r+0x1a2>
 800680a:	b1b0      	cbz	r0, 800683a <_vfiprintf_r+0x13a>
 800680c:	9207      	str	r2, [sp, #28]
 800680e:	e014      	b.n	800683a <_vfiprintf_r+0x13a>
 8006810:	eba0 0308 	sub.w	r3, r0, r8
 8006814:	fa09 f303 	lsl.w	r3, r9, r3
 8006818:	4313      	orrs	r3, r2
 800681a:	9304      	str	r3, [sp, #16]
 800681c:	46a2      	mov	sl, r4
 800681e:	e7d2      	b.n	80067c6 <_vfiprintf_r+0xc6>
 8006820:	9b03      	ldr	r3, [sp, #12]
 8006822:	1d19      	adds	r1, r3, #4
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	9103      	str	r1, [sp, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	bfbb      	ittet	lt
 800682c:	425b      	neglt	r3, r3
 800682e:	f042 0202 	orrlt.w	r2, r2, #2
 8006832:	9307      	strge	r3, [sp, #28]
 8006834:	9307      	strlt	r3, [sp, #28]
 8006836:	bfb8      	it	lt
 8006838:	9204      	strlt	r2, [sp, #16]
 800683a:	7823      	ldrb	r3, [r4, #0]
 800683c:	2b2e      	cmp	r3, #46	@ 0x2e
 800683e:	d10a      	bne.n	8006856 <_vfiprintf_r+0x156>
 8006840:	7863      	ldrb	r3, [r4, #1]
 8006842:	2b2a      	cmp	r3, #42	@ 0x2a
 8006844:	d132      	bne.n	80068ac <_vfiprintf_r+0x1ac>
 8006846:	9b03      	ldr	r3, [sp, #12]
 8006848:	1d1a      	adds	r2, r3, #4
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	9203      	str	r2, [sp, #12]
 800684e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006852:	3402      	adds	r4, #2
 8006854:	9305      	str	r3, [sp, #20]
 8006856:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800692c <_vfiprintf_r+0x22c>
 800685a:	7821      	ldrb	r1, [r4, #0]
 800685c:	2203      	movs	r2, #3
 800685e:	4650      	mov	r0, sl
 8006860:	f7f9 fcb6 	bl	80001d0 <memchr>
 8006864:	b138      	cbz	r0, 8006876 <_vfiprintf_r+0x176>
 8006866:	9b04      	ldr	r3, [sp, #16]
 8006868:	eba0 000a 	sub.w	r0, r0, sl
 800686c:	2240      	movs	r2, #64	@ 0x40
 800686e:	4082      	lsls	r2, r0
 8006870:	4313      	orrs	r3, r2
 8006872:	3401      	adds	r4, #1
 8006874:	9304      	str	r3, [sp, #16]
 8006876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800687a:	4829      	ldr	r0, [pc, #164]	@ (8006920 <_vfiprintf_r+0x220>)
 800687c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006880:	2206      	movs	r2, #6
 8006882:	f7f9 fca5 	bl	80001d0 <memchr>
 8006886:	2800      	cmp	r0, #0
 8006888:	d03f      	beq.n	800690a <_vfiprintf_r+0x20a>
 800688a:	4b26      	ldr	r3, [pc, #152]	@ (8006924 <_vfiprintf_r+0x224>)
 800688c:	bb1b      	cbnz	r3, 80068d6 <_vfiprintf_r+0x1d6>
 800688e:	9b03      	ldr	r3, [sp, #12]
 8006890:	3307      	adds	r3, #7
 8006892:	f023 0307 	bic.w	r3, r3, #7
 8006896:	3308      	adds	r3, #8
 8006898:	9303      	str	r3, [sp, #12]
 800689a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800689c:	443b      	add	r3, r7
 800689e:	9309      	str	r3, [sp, #36]	@ 0x24
 80068a0:	e76a      	b.n	8006778 <_vfiprintf_r+0x78>
 80068a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80068a6:	460c      	mov	r4, r1
 80068a8:	2001      	movs	r0, #1
 80068aa:	e7a8      	b.n	80067fe <_vfiprintf_r+0xfe>
 80068ac:	2300      	movs	r3, #0
 80068ae:	3401      	adds	r4, #1
 80068b0:	9305      	str	r3, [sp, #20]
 80068b2:	4619      	mov	r1, r3
 80068b4:	f04f 0c0a 	mov.w	ip, #10
 80068b8:	4620      	mov	r0, r4
 80068ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068be:	3a30      	subs	r2, #48	@ 0x30
 80068c0:	2a09      	cmp	r2, #9
 80068c2:	d903      	bls.n	80068cc <_vfiprintf_r+0x1cc>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d0c6      	beq.n	8006856 <_vfiprintf_r+0x156>
 80068c8:	9105      	str	r1, [sp, #20]
 80068ca:	e7c4      	b.n	8006856 <_vfiprintf_r+0x156>
 80068cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80068d0:	4604      	mov	r4, r0
 80068d2:	2301      	movs	r3, #1
 80068d4:	e7f0      	b.n	80068b8 <_vfiprintf_r+0x1b8>
 80068d6:	ab03      	add	r3, sp, #12
 80068d8:	9300      	str	r3, [sp, #0]
 80068da:	462a      	mov	r2, r5
 80068dc:	4b12      	ldr	r3, [pc, #72]	@ (8006928 <_vfiprintf_r+0x228>)
 80068de:	a904      	add	r1, sp, #16
 80068e0:	4630      	mov	r0, r6
 80068e2:	f7fc fa8f 	bl	8002e04 <_printf_float>
 80068e6:	4607      	mov	r7, r0
 80068e8:	1c78      	adds	r0, r7, #1
 80068ea:	d1d6      	bne.n	800689a <_vfiprintf_r+0x19a>
 80068ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80068ee:	07d9      	lsls	r1, r3, #31
 80068f0:	d405      	bmi.n	80068fe <_vfiprintf_r+0x1fe>
 80068f2:	89ab      	ldrh	r3, [r5, #12]
 80068f4:	059a      	lsls	r2, r3, #22
 80068f6:	d402      	bmi.n	80068fe <_vfiprintf_r+0x1fe>
 80068f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80068fa:	f7fd faf1 	bl	8003ee0 <__retarget_lock_release_recursive>
 80068fe:	89ab      	ldrh	r3, [r5, #12]
 8006900:	065b      	lsls	r3, r3, #25
 8006902:	f53f af1f 	bmi.w	8006744 <_vfiprintf_r+0x44>
 8006906:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006908:	e71e      	b.n	8006748 <_vfiprintf_r+0x48>
 800690a:	ab03      	add	r3, sp, #12
 800690c:	9300      	str	r3, [sp, #0]
 800690e:	462a      	mov	r2, r5
 8006910:	4b05      	ldr	r3, [pc, #20]	@ (8006928 <_vfiprintf_r+0x228>)
 8006912:	a904      	add	r1, sp, #16
 8006914:	4630      	mov	r0, r6
 8006916:	f7fc fd0d 	bl	8003334 <_printf_i>
 800691a:	e7e4      	b.n	80068e6 <_vfiprintf_r+0x1e6>
 800691c:	080075e1 	.word	0x080075e1
 8006920:	080075eb 	.word	0x080075eb
 8006924:	08002e05 	.word	0x08002e05
 8006928:	080066db 	.word	0x080066db
 800692c:	080075e7 	.word	0x080075e7

08006930 <__sflush_r>:
 8006930:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006938:	0716      	lsls	r6, r2, #28
 800693a:	4605      	mov	r5, r0
 800693c:	460c      	mov	r4, r1
 800693e:	d454      	bmi.n	80069ea <__sflush_r+0xba>
 8006940:	684b      	ldr	r3, [r1, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	dc02      	bgt.n	800694c <__sflush_r+0x1c>
 8006946:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006948:	2b00      	cmp	r3, #0
 800694a:	dd48      	ble.n	80069de <__sflush_r+0xae>
 800694c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800694e:	2e00      	cmp	r6, #0
 8006950:	d045      	beq.n	80069de <__sflush_r+0xae>
 8006952:	2300      	movs	r3, #0
 8006954:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006958:	682f      	ldr	r7, [r5, #0]
 800695a:	6a21      	ldr	r1, [r4, #32]
 800695c:	602b      	str	r3, [r5, #0]
 800695e:	d030      	beq.n	80069c2 <__sflush_r+0x92>
 8006960:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	0759      	lsls	r1, r3, #29
 8006966:	d505      	bpl.n	8006974 <__sflush_r+0x44>
 8006968:	6863      	ldr	r3, [r4, #4]
 800696a:	1ad2      	subs	r2, r2, r3
 800696c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800696e:	b10b      	cbz	r3, 8006974 <__sflush_r+0x44>
 8006970:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006972:	1ad2      	subs	r2, r2, r3
 8006974:	2300      	movs	r3, #0
 8006976:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006978:	6a21      	ldr	r1, [r4, #32]
 800697a:	4628      	mov	r0, r5
 800697c:	47b0      	blx	r6
 800697e:	1c43      	adds	r3, r0, #1
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	d106      	bne.n	8006992 <__sflush_r+0x62>
 8006984:	6829      	ldr	r1, [r5, #0]
 8006986:	291d      	cmp	r1, #29
 8006988:	d82b      	bhi.n	80069e2 <__sflush_r+0xb2>
 800698a:	4a2a      	ldr	r2, [pc, #168]	@ (8006a34 <__sflush_r+0x104>)
 800698c:	40ca      	lsrs	r2, r1
 800698e:	07d6      	lsls	r6, r2, #31
 8006990:	d527      	bpl.n	80069e2 <__sflush_r+0xb2>
 8006992:	2200      	movs	r2, #0
 8006994:	6062      	str	r2, [r4, #4]
 8006996:	04d9      	lsls	r1, r3, #19
 8006998:	6922      	ldr	r2, [r4, #16]
 800699a:	6022      	str	r2, [r4, #0]
 800699c:	d504      	bpl.n	80069a8 <__sflush_r+0x78>
 800699e:	1c42      	adds	r2, r0, #1
 80069a0:	d101      	bne.n	80069a6 <__sflush_r+0x76>
 80069a2:	682b      	ldr	r3, [r5, #0]
 80069a4:	b903      	cbnz	r3, 80069a8 <__sflush_r+0x78>
 80069a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80069a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80069aa:	602f      	str	r7, [r5, #0]
 80069ac:	b1b9      	cbz	r1, 80069de <__sflush_r+0xae>
 80069ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069b2:	4299      	cmp	r1, r3
 80069b4:	d002      	beq.n	80069bc <__sflush_r+0x8c>
 80069b6:	4628      	mov	r0, r5
 80069b8:	f7fe f8f2 	bl	8004ba0 <_free_r>
 80069bc:	2300      	movs	r3, #0
 80069be:	6363      	str	r3, [r4, #52]	@ 0x34
 80069c0:	e00d      	b.n	80069de <__sflush_r+0xae>
 80069c2:	2301      	movs	r3, #1
 80069c4:	4628      	mov	r0, r5
 80069c6:	47b0      	blx	r6
 80069c8:	4602      	mov	r2, r0
 80069ca:	1c50      	adds	r0, r2, #1
 80069cc:	d1c9      	bne.n	8006962 <__sflush_r+0x32>
 80069ce:	682b      	ldr	r3, [r5, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d0c6      	beq.n	8006962 <__sflush_r+0x32>
 80069d4:	2b1d      	cmp	r3, #29
 80069d6:	d001      	beq.n	80069dc <__sflush_r+0xac>
 80069d8:	2b16      	cmp	r3, #22
 80069da:	d11e      	bne.n	8006a1a <__sflush_r+0xea>
 80069dc:	602f      	str	r7, [r5, #0]
 80069de:	2000      	movs	r0, #0
 80069e0:	e022      	b.n	8006a28 <__sflush_r+0xf8>
 80069e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069e6:	b21b      	sxth	r3, r3
 80069e8:	e01b      	b.n	8006a22 <__sflush_r+0xf2>
 80069ea:	690f      	ldr	r7, [r1, #16]
 80069ec:	2f00      	cmp	r7, #0
 80069ee:	d0f6      	beq.n	80069de <__sflush_r+0xae>
 80069f0:	0793      	lsls	r3, r2, #30
 80069f2:	680e      	ldr	r6, [r1, #0]
 80069f4:	bf08      	it	eq
 80069f6:	694b      	ldreq	r3, [r1, #20]
 80069f8:	600f      	str	r7, [r1, #0]
 80069fa:	bf18      	it	ne
 80069fc:	2300      	movne	r3, #0
 80069fe:	eba6 0807 	sub.w	r8, r6, r7
 8006a02:	608b      	str	r3, [r1, #8]
 8006a04:	f1b8 0f00 	cmp.w	r8, #0
 8006a08:	dde9      	ble.n	80069de <__sflush_r+0xae>
 8006a0a:	6a21      	ldr	r1, [r4, #32]
 8006a0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006a0e:	4643      	mov	r3, r8
 8006a10:	463a      	mov	r2, r7
 8006a12:	4628      	mov	r0, r5
 8006a14:	47b0      	blx	r6
 8006a16:	2800      	cmp	r0, #0
 8006a18:	dc08      	bgt.n	8006a2c <__sflush_r+0xfc>
 8006a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a22:	81a3      	strh	r3, [r4, #12]
 8006a24:	f04f 30ff 	mov.w	r0, #4294967295
 8006a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a2c:	4407      	add	r7, r0
 8006a2e:	eba8 0800 	sub.w	r8, r8, r0
 8006a32:	e7e7      	b.n	8006a04 <__sflush_r+0xd4>
 8006a34:	20400001 	.word	0x20400001

08006a38 <_fflush_r>:
 8006a38:	b538      	push	{r3, r4, r5, lr}
 8006a3a:	690b      	ldr	r3, [r1, #16]
 8006a3c:	4605      	mov	r5, r0
 8006a3e:	460c      	mov	r4, r1
 8006a40:	b913      	cbnz	r3, 8006a48 <_fflush_r+0x10>
 8006a42:	2500      	movs	r5, #0
 8006a44:	4628      	mov	r0, r5
 8006a46:	bd38      	pop	{r3, r4, r5, pc}
 8006a48:	b118      	cbz	r0, 8006a52 <_fflush_r+0x1a>
 8006a4a:	6a03      	ldr	r3, [r0, #32]
 8006a4c:	b90b      	cbnz	r3, 8006a52 <_fflush_r+0x1a>
 8006a4e:	f7fd f829 	bl	8003aa4 <__sinit>
 8006a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d0f3      	beq.n	8006a42 <_fflush_r+0xa>
 8006a5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006a5c:	07d0      	lsls	r0, r2, #31
 8006a5e:	d404      	bmi.n	8006a6a <_fflush_r+0x32>
 8006a60:	0599      	lsls	r1, r3, #22
 8006a62:	d402      	bmi.n	8006a6a <_fflush_r+0x32>
 8006a64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a66:	f7fd fa3a 	bl	8003ede <__retarget_lock_acquire_recursive>
 8006a6a:	4628      	mov	r0, r5
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	f7ff ff5f 	bl	8006930 <__sflush_r>
 8006a72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a74:	07da      	lsls	r2, r3, #31
 8006a76:	4605      	mov	r5, r0
 8006a78:	d4e4      	bmi.n	8006a44 <_fflush_r+0xc>
 8006a7a:	89a3      	ldrh	r3, [r4, #12]
 8006a7c:	059b      	lsls	r3, r3, #22
 8006a7e:	d4e1      	bmi.n	8006a44 <_fflush_r+0xc>
 8006a80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a82:	f7fd fa2d 	bl	8003ee0 <__retarget_lock_release_recursive>
 8006a86:	e7dd      	b.n	8006a44 <_fflush_r+0xc>

08006a88 <__swhatbuf_r>:
 8006a88:	b570      	push	{r4, r5, r6, lr}
 8006a8a:	460c      	mov	r4, r1
 8006a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a90:	2900      	cmp	r1, #0
 8006a92:	b096      	sub	sp, #88	@ 0x58
 8006a94:	4615      	mov	r5, r2
 8006a96:	461e      	mov	r6, r3
 8006a98:	da0d      	bge.n	8006ab6 <__swhatbuf_r+0x2e>
 8006a9a:	89a3      	ldrh	r3, [r4, #12]
 8006a9c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006aa0:	f04f 0100 	mov.w	r1, #0
 8006aa4:	bf14      	ite	ne
 8006aa6:	2340      	movne	r3, #64	@ 0x40
 8006aa8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006aac:	2000      	movs	r0, #0
 8006aae:	6031      	str	r1, [r6, #0]
 8006ab0:	602b      	str	r3, [r5, #0]
 8006ab2:	b016      	add	sp, #88	@ 0x58
 8006ab4:	bd70      	pop	{r4, r5, r6, pc}
 8006ab6:	466a      	mov	r2, sp
 8006ab8:	f000 f874 	bl	8006ba4 <_fstat_r>
 8006abc:	2800      	cmp	r0, #0
 8006abe:	dbec      	blt.n	8006a9a <__swhatbuf_r+0x12>
 8006ac0:	9901      	ldr	r1, [sp, #4]
 8006ac2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006ac6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006aca:	4259      	negs	r1, r3
 8006acc:	4159      	adcs	r1, r3
 8006ace:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006ad2:	e7eb      	b.n	8006aac <__swhatbuf_r+0x24>

08006ad4 <__smakebuf_r>:
 8006ad4:	898b      	ldrh	r3, [r1, #12]
 8006ad6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ad8:	079d      	lsls	r5, r3, #30
 8006ada:	4606      	mov	r6, r0
 8006adc:	460c      	mov	r4, r1
 8006ade:	d507      	bpl.n	8006af0 <__smakebuf_r+0x1c>
 8006ae0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	6123      	str	r3, [r4, #16]
 8006ae8:	2301      	movs	r3, #1
 8006aea:	6163      	str	r3, [r4, #20]
 8006aec:	b003      	add	sp, #12
 8006aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006af0:	ab01      	add	r3, sp, #4
 8006af2:	466a      	mov	r2, sp
 8006af4:	f7ff ffc8 	bl	8006a88 <__swhatbuf_r>
 8006af8:	9f00      	ldr	r7, [sp, #0]
 8006afa:	4605      	mov	r5, r0
 8006afc:	4639      	mov	r1, r7
 8006afe:	4630      	mov	r0, r6
 8006b00:	f7fe f8c2 	bl	8004c88 <_malloc_r>
 8006b04:	b948      	cbnz	r0, 8006b1a <__smakebuf_r+0x46>
 8006b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b0a:	059a      	lsls	r2, r3, #22
 8006b0c:	d4ee      	bmi.n	8006aec <__smakebuf_r+0x18>
 8006b0e:	f023 0303 	bic.w	r3, r3, #3
 8006b12:	f043 0302 	orr.w	r3, r3, #2
 8006b16:	81a3      	strh	r3, [r4, #12]
 8006b18:	e7e2      	b.n	8006ae0 <__smakebuf_r+0xc>
 8006b1a:	89a3      	ldrh	r3, [r4, #12]
 8006b1c:	6020      	str	r0, [r4, #0]
 8006b1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b22:	81a3      	strh	r3, [r4, #12]
 8006b24:	9b01      	ldr	r3, [sp, #4]
 8006b26:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006b2a:	b15b      	cbz	r3, 8006b44 <__smakebuf_r+0x70>
 8006b2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b30:	4630      	mov	r0, r6
 8006b32:	f000 f849 	bl	8006bc8 <_isatty_r>
 8006b36:	b128      	cbz	r0, 8006b44 <__smakebuf_r+0x70>
 8006b38:	89a3      	ldrh	r3, [r4, #12]
 8006b3a:	f023 0303 	bic.w	r3, r3, #3
 8006b3e:	f043 0301 	orr.w	r3, r3, #1
 8006b42:	81a3      	strh	r3, [r4, #12]
 8006b44:	89a3      	ldrh	r3, [r4, #12]
 8006b46:	431d      	orrs	r5, r3
 8006b48:	81a5      	strh	r5, [r4, #12]
 8006b4a:	e7cf      	b.n	8006aec <__smakebuf_r+0x18>

08006b4c <memmove>:
 8006b4c:	4288      	cmp	r0, r1
 8006b4e:	b510      	push	{r4, lr}
 8006b50:	eb01 0402 	add.w	r4, r1, r2
 8006b54:	d902      	bls.n	8006b5c <memmove+0x10>
 8006b56:	4284      	cmp	r4, r0
 8006b58:	4623      	mov	r3, r4
 8006b5a:	d807      	bhi.n	8006b6c <memmove+0x20>
 8006b5c:	1e43      	subs	r3, r0, #1
 8006b5e:	42a1      	cmp	r1, r4
 8006b60:	d008      	beq.n	8006b74 <memmove+0x28>
 8006b62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b6a:	e7f8      	b.n	8006b5e <memmove+0x12>
 8006b6c:	4402      	add	r2, r0
 8006b6e:	4601      	mov	r1, r0
 8006b70:	428a      	cmp	r2, r1
 8006b72:	d100      	bne.n	8006b76 <memmove+0x2a>
 8006b74:	bd10      	pop	{r4, pc}
 8006b76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b7e:	e7f7      	b.n	8006b70 <memmove+0x24>

08006b80 <strncmp>:
 8006b80:	b510      	push	{r4, lr}
 8006b82:	b16a      	cbz	r2, 8006ba0 <strncmp+0x20>
 8006b84:	3901      	subs	r1, #1
 8006b86:	1884      	adds	r4, r0, r2
 8006b88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d103      	bne.n	8006b9c <strncmp+0x1c>
 8006b94:	42a0      	cmp	r0, r4
 8006b96:	d001      	beq.n	8006b9c <strncmp+0x1c>
 8006b98:	2a00      	cmp	r2, #0
 8006b9a:	d1f5      	bne.n	8006b88 <strncmp+0x8>
 8006b9c:	1ad0      	subs	r0, r2, r3
 8006b9e:	bd10      	pop	{r4, pc}
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	e7fc      	b.n	8006b9e <strncmp+0x1e>

08006ba4 <_fstat_r>:
 8006ba4:	b538      	push	{r3, r4, r5, lr}
 8006ba6:	4d07      	ldr	r5, [pc, #28]	@ (8006bc4 <_fstat_r+0x20>)
 8006ba8:	2300      	movs	r3, #0
 8006baa:	4604      	mov	r4, r0
 8006bac:	4608      	mov	r0, r1
 8006bae:	4611      	mov	r1, r2
 8006bb0:	602b      	str	r3, [r5, #0]
 8006bb2:	f7fa fbd2 	bl	800135a <_fstat>
 8006bb6:	1c43      	adds	r3, r0, #1
 8006bb8:	d102      	bne.n	8006bc0 <_fstat_r+0x1c>
 8006bba:	682b      	ldr	r3, [r5, #0]
 8006bbc:	b103      	cbz	r3, 8006bc0 <_fstat_r+0x1c>
 8006bbe:	6023      	str	r3, [r4, #0]
 8006bc0:	bd38      	pop	{r3, r4, r5, pc}
 8006bc2:	bf00      	nop
 8006bc4:	20000384 	.word	0x20000384

08006bc8 <_isatty_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4d06      	ldr	r5, [pc, #24]	@ (8006be4 <_isatty_r+0x1c>)
 8006bcc:	2300      	movs	r3, #0
 8006bce:	4604      	mov	r4, r0
 8006bd0:	4608      	mov	r0, r1
 8006bd2:	602b      	str	r3, [r5, #0]
 8006bd4:	f7fa fbd1 	bl	800137a <_isatty>
 8006bd8:	1c43      	adds	r3, r0, #1
 8006bda:	d102      	bne.n	8006be2 <_isatty_r+0x1a>
 8006bdc:	682b      	ldr	r3, [r5, #0]
 8006bde:	b103      	cbz	r3, 8006be2 <_isatty_r+0x1a>
 8006be0:	6023      	str	r3, [r4, #0]
 8006be2:	bd38      	pop	{r3, r4, r5, pc}
 8006be4:	20000384 	.word	0x20000384

08006be8 <_sbrk_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4d06      	ldr	r5, [pc, #24]	@ (8006c04 <_sbrk_r+0x1c>)
 8006bec:	2300      	movs	r3, #0
 8006bee:	4604      	mov	r4, r0
 8006bf0:	4608      	mov	r0, r1
 8006bf2:	602b      	str	r3, [r5, #0]
 8006bf4:	f7fa fbda 	bl	80013ac <_sbrk>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d102      	bne.n	8006c02 <_sbrk_r+0x1a>
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	b103      	cbz	r3, 8006c02 <_sbrk_r+0x1a>
 8006c00:	6023      	str	r3, [r4, #0]
 8006c02:	bd38      	pop	{r3, r4, r5, pc}
 8006c04:	20000384 	.word	0x20000384

08006c08 <memcpy>:
 8006c08:	440a      	add	r2, r1
 8006c0a:	4291      	cmp	r1, r2
 8006c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c10:	d100      	bne.n	8006c14 <memcpy+0xc>
 8006c12:	4770      	bx	lr
 8006c14:	b510      	push	{r4, lr}
 8006c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c1e:	4291      	cmp	r1, r2
 8006c20:	d1f9      	bne.n	8006c16 <memcpy+0xe>
 8006c22:	bd10      	pop	{r4, pc}
 8006c24:	0000      	movs	r0, r0
	...

08006c28 <nan>:
 8006c28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8006c30 <nan+0x8>
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	00000000 	.word	0x00000000
 8006c34:	7ff80000 	.word	0x7ff80000

08006c38 <__assert_func>:
 8006c38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c3a:	4614      	mov	r4, r2
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	4b09      	ldr	r3, [pc, #36]	@ (8006c64 <__assert_func+0x2c>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4605      	mov	r5, r0
 8006c44:	68d8      	ldr	r0, [r3, #12]
 8006c46:	b14c      	cbz	r4, 8006c5c <__assert_func+0x24>
 8006c48:	4b07      	ldr	r3, [pc, #28]	@ (8006c68 <__assert_func+0x30>)
 8006c4a:	9100      	str	r1, [sp, #0]
 8006c4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c50:	4906      	ldr	r1, [pc, #24]	@ (8006c6c <__assert_func+0x34>)
 8006c52:	462b      	mov	r3, r5
 8006c54:	f000 fba8 	bl	80073a8 <fiprintf>
 8006c58:	f000 fbb8 	bl	80073cc <abort>
 8006c5c:	4b04      	ldr	r3, [pc, #16]	@ (8006c70 <__assert_func+0x38>)
 8006c5e:	461c      	mov	r4, r3
 8006c60:	e7f3      	b.n	8006c4a <__assert_func+0x12>
 8006c62:	bf00      	nop
 8006c64:	20000018 	.word	0x20000018
 8006c68:	080075fa 	.word	0x080075fa
 8006c6c:	08007607 	.word	0x08007607
 8006c70:	08007635 	.word	0x08007635

08006c74 <_calloc_r>:
 8006c74:	b570      	push	{r4, r5, r6, lr}
 8006c76:	fba1 5402 	umull	r5, r4, r1, r2
 8006c7a:	b934      	cbnz	r4, 8006c8a <_calloc_r+0x16>
 8006c7c:	4629      	mov	r1, r5
 8006c7e:	f7fe f803 	bl	8004c88 <_malloc_r>
 8006c82:	4606      	mov	r6, r0
 8006c84:	b928      	cbnz	r0, 8006c92 <_calloc_r+0x1e>
 8006c86:	4630      	mov	r0, r6
 8006c88:	bd70      	pop	{r4, r5, r6, pc}
 8006c8a:	220c      	movs	r2, #12
 8006c8c:	6002      	str	r2, [r0, #0]
 8006c8e:	2600      	movs	r6, #0
 8006c90:	e7f9      	b.n	8006c86 <_calloc_r+0x12>
 8006c92:	462a      	mov	r2, r5
 8006c94:	4621      	mov	r1, r4
 8006c96:	f7fd f8a5 	bl	8003de4 <memset>
 8006c9a:	e7f4      	b.n	8006c86 <_calloc_r+0x12>

08006c9c <rshift>:
 8006c9c:	6903      	ldr	r3, [r0, #16]
 8006c9e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006ca2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006ca6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006caa:	f100 0414 	add.w	r4, r0, #20
 8006cae:	dd45      	ble.n	8006d3c <rshift+0xa0>
 8006cb0:	f011 011f 	ands.w	r1, r1, #31
 8006cb4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006cb8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006cbc:	d10c      	bne.n	8006cd8 <rshift+0x3c>
 8006cbe:	f100 0710 	add.w	r7, r0, #16
 8006cc2:	4629      	mov	r1, r5
 8006cc4:	42b1      	cmp	r1, r6
 8006cc6:	d334      	bcc.n	8006d32 <rshift+0x96>
 8006cc8:	1a9b      	subs	r3, r3, r2
 8006cca:	009b      	lsls	r3, r3, #2
 8006ccc:	1eea      	subs	r2, r5, #3
 8006cce:	4296      	cmp	r6, r2
 8006cd0:	bf38      	it	cc
 8006cd2:	2300      	movcc	r3, #0
 8006cd4:	4423      	add	r3, r4
 8006cd6:	e015      	b.n	8006d04 <rshift+0x68>
 8006cd8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006cdc:	f1c1 0820 	rsb	r8, r1, #32
 8006ce0:	40cf      	lsrs	r7, r1
 8006ce2:	f105 0e04 	add.w	lr, r5, #4
 8006ce6:	46a1      	mov	r9, r4
 8006ce8:	4576      	cmp	r6, lr
 8006cea:	46f4      	mov	ip, lr
 8006cec:	d815      	bhi.n	8006d1a <rshift+0x7e>
 8006cee:	1a9a      	subs	r2, r3, r2
 8006cf0:	0092      	lsls	r2, r2, #2
 8006cf2:	3a04      	subs	r2, #4
 8006cf4:	3501      	adds	r5, #1
 8006cf6:	42ae      	cmp	r6, r5
 8006cf8:	bf38      	it	cc
 8006cfa:	2200      	movcc	r2, #0
 8006cfc:	18a3      	adds	r3, r4, r2
 8006cfe:	50a7      	str	r7, [r4, r2]
 8006d00:	b107      	cbz	r7, 8006d04 <rshift+0x68>
 8006d02:	3304      	adds	r3, #4
 8006d04:	1b1a      	subs	r2, r3, r4
 8006d06:	42a3      	cmp	r3, r4
 8006d08:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006d0c:	bf08      	it	eq
 8006d0e:	2300      	moveq	r3, #0
 8006d10:	6102      	str	r2, [r0, #16]
 8006d12:	bf08      	it	eq
 8006d14:	6143      	streq	r3, [r0, #20]
 8006d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006d1a:	f8dc c000 	ldr.w	ip, [ip]
 8006d1e:	fa0c fc08 	lsl.w	ip, ip, r8
 8006d22:	ea4c 0707 	orr.w	r7, ip, r7
 8006d26:	f849 7b04 	str.w	r7, [r9], #4
 8006d2a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006d2e:	40cf      	lsrs	r7, r1
 8006d30:	e7da      	b.n	8006ce8 <rshift+0x4c>
 8006d32:	f851 cb04 	ldr.w	ip, [r1], #4
 8006d36:	f847 cf04 	str.w	ip, [r7, #4]!
 8006d3a:	e7c3      	b.n	8006cc4 <rshift+0x28>
 8006d3c:	4623      	mov	r3, r4
 8006d3e:	e7e1      	b.n	8006d04 <rshift+0x68>

08006d40 <__hexdig_fun>:
 8006d40:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006d44:	2b09      	cmp	r3, #9
 8006d46:	d802      	bhi.n	8006d4e <__hexdig_fun+0xe>
 8006d48:	3820      	subs	r0, #32
 8006d4a:	b2c0      	uxtb	r0, r0
 8006d4c:	4770      	bx	lr
 8006d4e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006d52:	2b05      	cmp	r3, #5
 8006d54:	d801      	bhi.n	8006d5a <__hexdig_fun+0x1a>
 8006d56:	3847      	subs	r0, #71	@ 0x47
 8006d58:	e7f7      	b.n	8006d4a <__hexdig_fun+0xa>
 8006d5a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006d5e:	2b05      	cmp	r3, #5
 8006d60:	d801      	bhi.n	8006d66 <__hexdig_fun+0x26>
 8006d62:	3827      	subs	r0, #39	@ 0x27
 8006d64:	e7f1      	b.n	8006d4a <__hexdig_fun+0xa>
 8006d66:	2000      	movs	r0, #0
 8006d68:	4770      	bx	lr
	...

08006d6c <__gethex>:
 8006d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d70:	b085      	sub	sp, #20
 8006d72:	468a      	mov	sl, r1
 8006d74:	9302      	str	r3, [sp, #8]
 8006d76:	680b      	ldr	r3, [r1, #0]
 8006d78:	9001      	str	r0, [sp, #4]
 8006d7a:	4690      	mov	r8, r2
 8006d7c:	1c9c      	adds	r4, r3, #2
 8006d7e:	46a1      	mov	r9, r4
 8006d80:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006d84:	2830      	cmp	r0, #48	@ 0x30
 8006d86:	d0fa      	beq.n	8006d7e <__gethex+0x12>
 8006d88:	eba9 0303 	sub.w	r3, r9, r3
 8006d8c:	f1a3 0b02 	sub.w	fp, r3, #2
 8006d90:	f7ff ffd6 	bl	8006d40 <__hexdig_fun>
 8006d94:	4605      	mov	r5, r0
 8006d96:	2800      	cmp	r0, #0
 8006d98:	d168      	bne.n	8006e6c <__gethex+0x100>
 8006d9a:	49a0      	ldr	r1, [pc, #640]	@ (800701c <__gethex+0x2b0>)
 8006d9c:	2201      	movs	r2, #1
 8006d9e:	4648      	mov	r0, r9
 8006da0:	f7ff feee 	bl	8006b80 <strncmp>
 8006da4:	4607      	mov	r7, r0
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d167      	bne.n	8006e7a <__gethex+0x10e>
 8006daa:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006dae:	4626      	mov	r6, r4
 8006db0:	f7ff ffc6 	bl	8006d40 <__hexdig_fun>
 8006db4:	2800      	cmp	r0, #0
 8006db6:	d062      	beq.n	8006e7e <__gethex+0x112>
 8006db8:	4623      	mov	r3, r4
 8006dba:	7818      	ldrb	r0, [r3, #0]
 8006dbc:	2830      	cmp	r0, #48	@ 0x30
 8006dbe:	4699      	mov	r9, r3
 8006dc0:	f103 0301 	add.w	r3, r3, #1
 8006dc4:	d0f9      	beq.n	8006dba <__gethex+0x4e>
 8006dc6:	f7ff ffbb 	bl	8006d40 <__hexdig_fun>
 8006dca:	fab0 f580 	clz	r5, r0
 8006dce:	096d      	lsrs	r5, r5, #5
 8006dd0:	f04f 0b01 	mov.w	fp, #1
 8006dd4:	464a      	mov	r2, r9
 8006dd6:	4616      	mov	r6, r2
 8006dd8:	3201      	adds	r2, #1
 8006dda:	7830      	ldrb	r0, [r6, #0]
 8006ddc:	f7ff ffb0 	bl	8006d40 <__hexdig_fun>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d1f8      	bne.n	8006dd6 <__gethex+0x6a>
 8006de4:	498d      	ldr	r1, [pc, #564]	@ (800701c <__gethex+0x2b0>)
 8006de6:	2201      	movs	r2, #1
 8006de8:	4630      	mov	r0, r6
 8006dea:	f7ff fec9 	bl	8006b80 <strncmp>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d13f      	bne.n	8006e72 <__gethex+0x106>
 8006df2:	b944      	cbnz	r4, 8006e06 <__gethex+0x9a>
 8006df4:	1c74      	adds	r4, r6, #1
 8006df6:	4622      	mov	r2, r4
 8006df8:	4616      	mov	r6, r2
 8006dfa:	3201      	adds	r2, #1
 8006dfc:	7830      	ldrb	r0, [r6, #0]
 8006dfe:	f7ff ff9f 	bl	8006d40 <__hexdig_fun>
 8006e02:	2800      	cmp	r0, #0
 8006e04:	d1f8      	bne.n	8006df8 <__gethex+0x8c>
 8006e06:	1ba4      	subs	r4, r4, r6
 8006e08:	00a7      	lsls	r7, r4, #2
 8006e0a:	7833      	ldrb	r3, [r6, #0]
 8006e0c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006e10:	2b50      	cmp	r3, #80	@ 0x50
 8006e12:	d13e      	bne.n	8006e92 <__gethex+0x126>
 8006e14:	7873      	ldrb	r3, [r6, #1]
 8006e16:	2b2b      	cmp	r3, #43	@ 0x2b
 8006e18:	d033      	beq.n	8006e82 <__gethex+0x116>
 8006e1a:	2b2d      	cmp	r3, #45	@ 0x2d
 8006e1c:	d034      	beq.n	8006e88 <__gethex+0x11c>
 8006e1e:	1c71      	adds	r1, r6, #1
 8006e20:	2400      	movs	r4, #0
 8006e22:	7808      	ldrb	r0, [r1, #0]
 8006e24:	f7ff ff8c 	bl	8006d40 <__hexdig_fun>
 8006e28:	1e43      	subs	r3, r0, #1
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	2b18      	cmp	r3, #24
 8006e2e:	d830      	bhi.n	8006e92 <__gethex+0x126>
 8006e30:	f1a0 0210 	sub.w	r2, r0, #16
 8006e34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006e38:	f7ff ff82 	bl	8006d40 <__hexdig_fun>
 8006e3c:	f100 3cff 	add.w	ip, r0, #4294967295
 8006e40:	fa5f fc8c 	uxtb.w	ip, ip
 8006e44:	f1bc 0f18 	cmp.w	ip, #24
 8006e48:	f04f 030a 	mov.w	r3, #10
 8006e4c:	d91e      	bls.n	8006e8c <__gethex+0x120>
 8006e4e:	b104      	cbz	r4, 8006e52 <__gethex+0xe6>
 8006e50:	4252      	negs	r2, r2
 8006e52:	4417      	add	r7, r2
 8006e54:	f8ca 1000 	str.w	r1, [sl]
 8006e58:	b1ed      	cbz	r5, 8006e96 <__gethex+0x12a>
 8006e5a:	f1bb 0f00 	cmp.w	fp, #0
 8006e5e:	bf0c      	ite	eq
 8006e60:	2506      	moveq	r5, #6
 8006e62:	2500      	movne	r5, #0
 8006e64:	4628      	mov	r0, r5
 8006e66:	b005      	add	sp, #20
 8006e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6c:	2500      	movs	r5, #0
 8006e6e:	462c      	mov	r4, r5
 8006e70:	e7b0      	b.n	8006dd4 <__gethex+0x68>
 8006e72:	2c00      	cmp	r4, #0
 8006e74:	d1c7      	bne.n	8006e06 <__gethex+0x9a>
 8006e76:	4627      	mov	r7, r4
 8006e78:	e7c7      	b.n	8006e0a <__gethex+0x9e>
 8006e7a:	464e      	mov	r6, r9
 8006e7c:	462f      	mov	r7, r5
 8006e7e:	2501      	movs	r5, #1
 8006e80:	e7c3      	b.n	8006e0a <__gethex+0x9e>
 8006e82:	2400      	movs	r4, #0
 8006e84:	1cb1      	adds	r1, r6, #2
 8006e86:	e7cc      	b.n	8006e22 <__gethex+0xb6>
 8006e88:	2401      	movs	r4, #1
 8006e8a:	e7fb      	b.n	8006e84 <__gethex+0x118>
 8006e8c:	fb03 0002 	mla	r0, r3, r2, r0
 8006e90:	e7ce      	b.n	8006e30 <__gethex+0xc4>
 8006e92:	4631      	mov	r1, r6
 8006e94:	e7de      	b.n	8006e54 <__gethex+0xe8>
 8006e96:	eba6 0309 	sub.w	r3, r6, r9
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	4629      	mov	r1, r5
 8006e9e:	2b07      	cmp	r3, #7
 8006ea0:	dc0a      	bgt.n	8006eb8 <__gethex+0x14c>
 8006ea2:	9801      	ldr	r0, [sp, #4]
 8006ea4:	f7fd ff7c 	bl	8004da0 <_Balloc>
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	b940      	cbnz	r0, 8006ebe <__gethex+0x152>
 8006eac:	4b5c      	ldr	r3, [pc, #368]	@ (8007020 <__gethex+0x2b4>)
 8006eae:	4602      	mov	r2, r0
 8006eb0:	21e4      	movs	r1, #228	@ 0xe4
 8006eb2:	485c      	ldr	r0, [pc, #368]	@ (8007024 <__gethex+0x2b8>)
 8006eb4:	f7ff fec0 	bl	8006c38 <__assert_func>
 8006eb8:	3101      	adds	r1, #1
 8006eba:	105b      	asrs	r3, r3, #1
 8006ebc:	e7ef      	b.n	8006e9e <__gethex+0x132>
 8006ebe:	f100 0a14 	add.w	sl, r0, #20
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	4655      	mov	r5, sl
 8006ec6:	469b      	mov	fp, r3
 8006ec8:	45b1      	cmp	r9, r6
 8006eca:	d337      	bcc.n	8006f3c <__gethex+0x1d0>
 8006ecc:	f845 bb04 	str.w	fp, [r5], #4
 8006ed0:	eba5 050a 	sub.w	r5, r5, sl
 8006ed4:	10ad      	asrs	r5, r5, #2
 8006ed6:	6125      	str	r5, [r4, #16]
 8006ed8:	4658      	mov	r0, fp
 8006eda:	f7fe f853 	bl	8004f84 <__hi0bits>
 8006ede:	016d      	lsls	r5, r5, #5
 8006ee0:	f8d8 6000 	ldr.w	r6, [r8]
 8006ee4:	1a2d      	subs	r5, r5, r0
 8006ee6:	42b5      	cmp	r5, r6
 8006ee8:	dd54      	ble.n	8006f94 <__gethex+0x228>
 8006eea:	1bad      	subs	r5, r5, r6
 8006eec:	4629      	mov	r1, r5
 8006eee:	4620      	mov	r0, r4
 8006ef0:	f7fe fbdf 	bl	80056b2 <__any_on>
 8006ef4:	4681      	mov	r9, r0
 8006ef6:	b178      	cbz	r0, 8006f18 <__gethex+0x1ac>
 8006ef8:	1e6b      	subs	r3, r5, #1
 8006efa:	1159      	asrs	r1, r3, #5
 8006efc:	f003 021f 	and.w	r2, r3, #31
 8006f00:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006f04:	f04f 0901 	mov.w	r9, #1
 8006f08:	fa09 f202 	lsl.w	r2, r9, r2
 8006f0c:	420a      	tst	r2, r1
 8006f0e:	d003      	beq.n	8006f18 <__gethex+0x1ac>
 8006f10:	454b      	cmp	r3, r9
 8006f12:	dc36      	bgt.n	8006f82 <__gethex+0x216>
 8006f14:	f04f 0902 	mov.w	r9, #2
 8006f18:	4629      	mov	r1, r5
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f7ff febe 	bl	8006c9c <rshift>
 8006f20:	442f      	add	r7, r5
 8006f22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006f26:	42bb      	cmp	r3, r7
 8006f28:	da42      	bge.n	8006fb0 <__gethex+0x244>
 8006f2a:	9801      	ldr	r0, [sp, #4]
 8006f2c:	4621      	mov	r1, r4
 8006f2e:	f7fd ff77 	bl	8004e20 <_Bfree>
 8006f32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f34:	2300      	movs	r3, #0
 8006f36:	6013      	str	r3, [r2, #0]
 8006f38:	25a3      	movs	r5, #163	@ 0xa3
 8006f3a:	e793      	b.n	8006e64 <__gethex+0xf8>
 8006f3c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006f40:	2a2e      	cmp	r2, #46	@ 0x2e
 8006f42:	d012      	beq.n	8006f6a <__gethex+0x1fe>
 8006f44:	2b20      	cmp	r3, #32
 8006f46:	d104      	bne.n	8006f52 <__gethex+0x1e6>
 8006f48:	f845 bb04 	str.w	fp, [r5], #4
 8006f4c:	f04f 0b00 	mov.w	fp, #0
 8006f50:	465b      	mov	r3, fp
 8006f52:	7830      	ldrb	r0, [r6, #0]
 8006f54:	9303      	str	r3, [sp, #12]
 8006f56:	f7ff fef3 	bl	8006d40 <__hexdig_fun>
 8006f5a:	9b03      	ldr	r3, [sp, #12]
 8006f5c:	f000 000f 	and.w	r0, r0, #15
 8006f60:	4098      	lsls	r0, r3
 8006f62:	ea4b 0b00 	orr.w	fp, fp, r0
 8006f66:	3304      	adds	r3, #4
 8006f68:	e7ae      	b.n	8006ec8 <__gethex+0x15c>
 8006f6a:	45b1      	cmp	r9, r6
 8006f6c:	d8ea      	bhi.n	8006f44 <__gethex+0x1d8>
 8006f6e:	492b      	ldr	r1, [pc, #172]	@ (800701c <__gethex+0x2b0>)
 8006f70:	9303      	str	r3, [sp, #12]
 8006f72:	2201      	movs	r2, #1
 8006f74:	4630      	mov	r0, r6
 8006f76:	f7ff fe03 	bl	8006b80 <strncmp>
 8006f7a:	9b03      	ldr	r3, [sp, #12]
 8006f7c:	2800      	cmp	r0, #0
 8006f7e:	d1e1      	bne.n	8006f44 <__gethex+0x1d8>
 8006f80:	e7a2      	b.n	8006ec8 <__gethex+0x15c>
 8006f82:	1ea9      	subs	r1, r5, #2
 8006f84:	4620      	mov	r0, r4
 8006f86:	f7fe fb94 	bl	80056b2 <__any_on>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	d0c2      	beq.n	8006f14 <__gethex+0x1a8>
 8006f8e:	f04f 0903 	mov.w	r9, #3
 8006f92:	e7c1      	b.n	8006f18 <__gethex+0x1ac>
 8006f94:	da09      	bge.n	8006faa <__gethex+0x23e>
 8006f96:	1b75      	subs	r5, r6, r5
 8006f98:	4621      	mov	r1, r4
 8006f9a:	9801      	ldr	r0, [sp, #4]
 8006f9c:	462a      	mov	r2, r5
 8006f9e:	f7fe f94f 	bl	8005240 <__lshift>
 8006fa2:	1b7f      	subs	r7, r7, r5
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	f100 0a14 	add.w	sl, r0, #20
 8006faa:	f04f 0900 	mov.w	r9, #0
 8006fae:	e7b8      	b.n	8006f22 <__gethex+0x1b6>
 8006fb0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006fb4:	42bd      	cmp	r5, r7
 8006fb6:	dd6f      	ble.n	8007098 <__gethex+0x32c>
 8006fb8:	1bed      	subs	r5, r5, r7
 8006fba:	42ae      	cmp	r6, r5
 8006fbc:	dc34      	bgt.n	8007028 <__gethex+0x2bc>
 8006fbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006fc2:	2b02      	cmp	r3, #2
 8006fc4:	d022      	beq.n	800700c <__gethex+0x2a0>
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d024      	beq.n	8007014 <__gethex+0x2a8>
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d115      	bne.n	8006ffa <__gethex+0x28e>
 8006fce:	42ae      	cmp	r6, r5
 8006fd0:	d113      	bne.n	8006ffa <__gethex+0x28e>
 8006fd2:	2e01      	cmp	r6, #1
 8006fd4:	d10b      	bne.n	8006fee <__gethex+0x282>
 8006fd6:	9a02      	ldr	r2, [sp, #8]
 8006fd8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	2301      	movs	r3, #1
 8006fe0:	6123      	str	r3, [r4, #16]
 8006fe2:	f8ca 3000 	str.w	r3, [sl]
 8006fe6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fe8:	2562      	movs	r5, #98	@ 0x62
 8006fea:	601c      	str	r4, [r3, #0]
 8006fec:	e73a      	b.n	8006e64 <__gethex+0xf8>
 8006fee:	1e71      	subs	r1, r6, #1
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f7fe fb5e 	bl	80056b2 <__any_on>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d1ed      	bne.n	8006fd6 <__gethex+0x26a>
 8006ffa:	9801      	ldr	r0, [sp, #4]
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	f7fd ff0f 	bl	8004e20 <_Bfree>
 8007002:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007004:	2300      	movs	r3, #0
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	2550      	movs	r5, #80	@ 0x50
 800700a:	e72b      	b.n	8006e64 <__gethex+0xf8>
 800700c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1f3      	bne.n	8006ffa <__gethex+0x28e>
 8007012:	e7e0      	b.n	8006fd6 <__gethex+0x26a>
 8007014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1dd      	bne.n	8006fd6 <__gethex+0x26a>
 800701a:	e7ee      	b.n	8006ffa <__gethex+0x28e>
 800701c:	080075df 	.word	0x080075df
 8007020:	08007575 	.word	0x08007575
 8007024:	08007636 	.word	0x08007636
 8007028:	1e6f      	subs	r7, r5, #1
 800702a:	f1b9 0f00 	cmp.w	r9, #0
 800702e:	d130      	bne.n	8007092 <__gethex+0x326>
 8007030:	b127      	cbz	r7, 800703c <__gethex+0x2d0>
 8007032:	4639      	mov	r1, r7
 8007034:	4620      	mov	r0, r4
 8007036:	f7fe fb3c 	bl	80056b2 <__any_on>
 800703a:	4681      	mov	r9, r0
 800703c:	117a      	asrs	r2, r7, #5
 800703e:	2301      	movs	r3, #1
 8007040:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007044:	f007 071f 	and.w	r7, r7, #31
 8007048:	40bb      	lsls	r3, r7
 800704a:	4213      	tst	r3, r2
 800704c:	4629      	mov	r1, r5
 800704e:	4620      	mov	r0, r4
 8007050:	bf18      	it	ne
 8007052:	f049 0902 	orrne.w	r9, r9, #2
 8007056:	f7ff fe21 	bl	8006c9c <rshift>
 800705a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800705e:	1b76      	subs	r6, r6, r5
 8007060:	2502      	movs	r5, #2
 8007062:	f1b9 0f00 	cmp.w	r9, #0
 8007066:	d047      	beq.n	80070f8 <__gethex+0x38c>
 8007068:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800706c:	2b02      	cmp	r3, #2
 800706e:	d015      	beq.n	800709c <__gethex+0x330>
 8007070:	2b03      	cmp	r3, #3
 8007072:	d017      	beq.n	80070a4 <__gethex+0x338>
 8007074:	2b01      	cmp	r3, #1
 8007076:	d109      	bne.n	800708c <__gethex+0x320>
 8007078:	f019 0f02 	tst.w	r9, #2
 800707c:	d006      	beq.n	800708c <__gethex+0x320>
 800707e:	f8da 3000 	ldr.w	r3, [sl]
 8007082:	ea49 0903 	orr.w	r9, r9, r3
 8007086:	f019 0f01 	tst.w	r9, #1
 800708a:	d10e      	bne.n	80070aa <__gethex+0x33e>
 800708c:	f045 0510 	orr.w	r5, r5, #16
 8007090:	e032      	b.n	80070f8 <__gethex+0x38c>
 8007092:	f04f 0901 	mov.w	r9, #1
 8007096:	e7d1      	b.n	800703c <__gethex+0x2d0>
 8007098:	2501      	movs	r5, #1
 800709a:	e7e2      	b.n	8007062 <__gethex+0x2f6>
 800709c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800709e:	f1c3 0301 	rsb	r3, r3, #1
 80070a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80070a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d0f0      	beq.n	800708c <__gethex+0x320>
 80070aa:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80070ae:	f104 0314 	add.w	r3, r4, #20
 80070b2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80070b6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80070ba:	f04f 0c00 	mov.w	ip, #0
 80070be:	4618      	mov	r0, r3
 80070c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80070c4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80070c8:	d01b      	beq.n	8007102 <__gethex+0x396>
 80070ca:	3201      	adds	r2, #1
 80070cc:	6002      	str	r2, [r0, #0]
 80070ce:	2d02      	cmp	r5, #2
 80070d0:	f104 0314 	add.w	r3, r4, #20
 80070d4:	d13c      	bne.n	8007150 <__gethex+0x3e4>
 80070d6:	f8d8 2000 	ldr.w	r2, [r8]
 80070da:	3a01      	subs	r2, #1
 80070dc:	42b2      	cmp	r2, r6
 80070de:	d109      	bne.n	80070f4 <__gethex+0x388>
 80070e0:	1171      	asrs	r1, r6, #5
 80070e2:	2201      	movs	r2, #1
 80070e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070e8:	f006 061f 	and.w	r6, r6, #31
 80070ec:	fa02 f606 	lsl.w	r6, r2, r6
 80070f0:	421e      	tst	r6, r3
 80070f2:	d13a      	bne.n	800716a <__gethex+0x3fe>
 80070f4:	f045 0520 	orr.w	r5, r5, #32
 80070f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070fa:	601c      	str	r4, [r3, #0]
 80070fc:	9b02      	ldr	r3, [sp, #8]
 80070fe:	601f      	str	r7, [r3, #0]
 8007100:	e6b0      	b.n	8006e64 <__gethex+0xf8>
 8007102:	4299      	cmp	r1, r3
 8007104:	f843 cc04 	str.w	ip, [r3, #-4]
 8007108:	d8d9      	bhi.n	80070be <__gethex+0x352>
 800710a:	68a3      	ldr	r3, [r4, #8]
 800710c:	459b      	cmp	fp, r3
 800710e:	db17      	blt.n	8007140 <__gethex+0x3d4>
 8007110:	6861      	ldr	r1, [r4, #4]
 8007112:	9801      	ldr	r0, [sp, #4]
 8007114:	3101      	adds	r1, #1
 8007116:	f7fd fe43 	bl	8004da0 <_Balloc>
 800711a:	4681      	mov	r9, r0
 800711c:	b918      	cbnz	r0, 8007126 <__gethex+0x3ba>
 800711e:	4b1a      	ldr	r3, [pc, #104]	@ (8007188 <__gethex+0x41c>)
 8007120:	4602      	mov	r2, r0
 8007122:	2184      	movs	r1, #132	@ 0x84
 8007124:	e6c5      	b.n	8006eb2 <__gethex+0x146>
 8007126:	6922      	ldr	r2, [r4, #16]
 8007128:	3202      	adds	r2, #2
 800712a:	f104 010c 	add.w	r1, r4, #12
 800712e:	0092      	lsls	r2, r2, #2
 8007130:	300c      	adds	r0, #12
 8007132:	f7ff fd69 	bl	8006c08 <memcpy>
 8007136:	4621      	mov	r1, r4
 8007138:	9801      	ldr	r0, [sp, #4]
 800713a:	f7fd fe71 	bl	8004e20 <_Bfree>
 800713e:	464c      	mov	r4, r9
 8007140:	6923      	ldr	r3, [r4, #16]
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007148:	6122      	str	r2, [r4, #16]
 800714a:	2201      	movs	r2, #1
 800714c:	615a      	str	r2, [r3, #20]
 800714e:	e7be      	b.n	80070ce <__gethex+0x362>
 8007150:	6922      	ldr	r2, [r4, #16]
 8007152:	455a      	cmp	r2, fp
 8007154:	dd0b      	ble.n	800716e <__gethex+0x402>
 8007156:	2101      	movs	r1, #1
 8007158:	4620      	mov	r0, r4
 800715a:	f7ff fd9f 	bl	8006c9c <rshift>
 800715e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007162:	3701      	adds	r7, #1
 8007164:	42bb      	cmp	r3, r7
 8007166:	f6ff aee0 	blt.w	8006f2a <__gethex+0x1be>
 800716a:	2501      	movs	r5, #1
 800716c:	e7c2      	b.n	80070f4 <__gethex+0x388>
 800716e:	f016 061f 	ands.w	r6, r6, #31
 8007172:	d0fa      	beq.n	800716a <__gethex+0x3fe>
 8007174:	4453      	add	r3, sl
 8007176:	f1c6 0620 	rsb	r6, r6, #32
 800717a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800717e:	f7fd ff01 	bl	8004f84 <__hi0bits>
 8007182:	42b0      	cmp	r0, r6
 8007184:	dbe7      	blt.n	8007156 <__gethex+0x3ea>
 8007186:	e7f0      	b.n	800716a <__gethex+0x3fe>
 8007188:	08007575 	.word	0x08007575

0800718c <L_shift>:
 800718c:	f1c2 0208 	rsb	r2, r2, #8
 8007190:	0092      	lsls	r2, r2, #2
 8007192:	b570      	push	{r4, r5, r6, lr}
 8007194:	f1c2 0620 	rsb	r6, r2, #32
 8007198:	6843      	ldr	r3, [r0, #4]
 800719a:	6804      	ldr	r4, [r0, #0]
 800719c:	fa03 f506 	lsl.w	r5, r3, r6
 80071a0:	432c      	orrs	r4, r5
 80071a2:	40d3      	lsrs	r3, r2
 80071a4:	6004      	str	r4, [r0, #0]
 80071a6:	f840 3f04 	str.w	r3, [r0, #4]!
 80071aa:	4288      	cmp	r0, r1
 80071ac:	d3f4      	bcc.n	8007198 <L_shift+0xc>
 80071ae:	bd70      	pop	{r4, r5, r6, pc}

080071b0 <__match>:
 80071b0:	b530      	push	{r4, r5, lr}
 80071b2:	6803      	ldr	r3, [r0, #0]
 80071b4:	3301      	adds	r3, #1
 80071b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ba:	b914      	cbnz	r4, 80071c2 <__match+0x12>
 80071bc:	6003      	str	r3, [r0, #0]
 80071be:	2001      	movs	r0, #1
 80071c0:	bd30      	pop	{r4, r5, pc}
 80071c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071c6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80071ca:	2d19      	cmp	r5, #25
 80071cc:	bf98      	it	ls
 80071ce:	3220      	addls	r2, #32
 80071d0:	42a2      	cmp	r2, r4
 80071d2:	d0f0      	beq.n	80071b6 <__match+0x6>
 80071d4:	2000      	movs	r0, #0
 80071d6:	e7f3      	b.n	80071c0 <__match+0x10>

080071d8 <__hexnan>:
 80071d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071dc:	680b      	ldr	r3, [r1, #0]
 80071de:	6801      	ldr	r1, [r0, #0]
 80071e0:	115e      	asrs	r6, r3, #5
 80071e2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80071e6:	f013 031f 	ands.w	r3, r3, #31
 80071ea:	b087      	sub	sp, #28
 80071ec:	bf18      	it	ne
 80071ee:	3604      	addne	r6, #4
 80071f0:	2500      	movs	r5, #0
 80071f2:	1f37      	subs	r7, r6, #4
 80071f4:	4682      	mov	sl, r0
 80071f6:	4690      	mov	r8, r2
 80071f8:	9301      	str	r3, [sp, #4]
 80071fa:	f846 5c04 	str.w	r5, [r6, #-4]
 80071fe:	46b9      	mov	r9, r7
 8007200:	463c      	mov	r4, r7
 8007202:	9502      	str	r5, [sp, #8]
 8007204:	46ab      	mov	fp, r5
 8007206:	784a      	ldrb	r2, [r1, #1]
 8007208:	1c4b      	adds	r3, r1, #1
 800720a:	9303      	str	r3, [sp, #12]
 800720c:	b342      	cbz	r2, 8007260 <__hexnan+0x88>
 800720e:	4610      	mov	r0, r2
 8007210:	9105      	str	r1, [sp, #20]
 8007212:	9204      	str	r2, [sp, #16]
 8007214:	f7ff fd94 	bl	8006d40 <__hexdig_fun>
 8007218:	2800      	cmp	r0, #0
 800721a:	d151      	bne.n	80072c0 <__hexnan+0xe8>
 800721c:	9a04      	ldr	r2, [sp, #16]
 800721e:	9905      	ldr	r1, [sp, #20]
 8007220:	2a20      	cmp	r2, #32
 8007222:	d818      	bhi.n	8007256 <__hexnan+0x7e>
 8007224:	9b02      	ldr	r3, [sp, #8]
 8007226:	459b      	cmp	fp, r3
 8007228:	dd13      	ble.n	8007252 <__hexnan+0x7a>
 800722a:	454c      	cmp	r4, r9
 800722c:	d206      	bcs.n	800723c <__hexnan+0x64>
 800722e:	2d07      	cmp	r5, #7
 8007230:	dc04      	bgt.n	800723c <__hexnan+0x64>
 8007232:	462a      	mov	r2, r5
 8007234:	4649      	mov	r1, r9
 8007236:	4620      	mov	r0, r4
 8007238:	f7ff ffa8 	bl	800718c <L_shift>
 800723c:	4544      	cmp	r4, r8
 800723e:	d952      	bls.n	80072e6 <__hexnan+0x10e>
 8007240:	2300      	movs	r3, #0
 8007242:	f1a4 0904 	sub.w	r9, r4, #4
 8007246:	f844 3c04 	str.w	r3, [r4, #-4]
 800724a:	f8cd b008 	str.w	fp, [sp, #8]
 800724e:	464c      	mov	r4, r9
 8007250:	461d      	mov	r5, r3
 8007252:	9903      	ldr	r1, [sp, #12]
 8007254:	e7d7      	b.n	8007206 <__hexnan+0x2e>
 8007256:	2a29      	cmp	r2, #41	@ 0x29
 8007258:	d157      	bne.n	800730a <__hexnan+0x132>
 800725a:	3102      	adds	r1, #2
 800725c:	f8ca 1000 	str.w	r1, [sl]
 8007260:	f1bb 0f00 	cmp.w	fp, #0
 8007264:	d051      	beq.n	800730a <__hexnan+0x132>
 8007266:	454c      	cmp	r4, r9
 8007268:	d206      	bcs.n	8007278 <__hexnan+0xa0>
 800726a:	2d07      	cmp	r5, #7
 800726c:	dc04      	bgt.n	8007278 <__hexnan+0xa0>
 800726e:	462a      	mov	r2, r5
 8007270:	4649      	mov	r1, r9
 8007272:	4620      	mov	r0, r4
 8007274:	f7ff ff8a 	bl	800718c <L_shift>
 8007278:	4544      	cmp	r4, r8
 800727a:	d936      	bls.n	80072ea <__hexnan+0x112>
 800727c:	f1a8 0204 	sub.w	r2, r8, #4
 8007280:	4623      	mov	r3, r4
 8007282:	f853 1b04 	ldr.w	r1, [r3], #4
 8007286:	f842 1f04 	str.w	r1, [r2, #4]!
 800728a:	429f      	cmp	r7, r3
 800728c:	d2f9      	bcs.n	8007282 <__hexnan+0xaa>
 800728e:	1b3b      	subs	r3, r7, r4
 8007290:	f023 0303 	bic.w	r3, r3, #3
 8007294:	3304      	adds	r3, #4
 8007296:	3401      	adds	r4, #1
 8007298:	3e03      	subs	r6, #3
 800729a:	42b4      	cmp	r4, r6
 800729c:	bf88      	it	hi
 800729e:	2304      	movhi	r3, #4
 80072a0:	4443      	add	r3, r8
 80072a2:	2200      	movs	r2, #0
 80072a4:	f843 2b04 	str.w	r2, [r3], #4
 80072a8:	429f      	cmp	r7, r3
 80072aa:	d2fb      	bcs.n	80072a4 <__hexnan+0xcc>
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	b91b      	cbnz	r3, 80072b8 <__hexnan+0xe0>
 80072b0:	4547      	cmp	r7, r8
 80072b2:	d128      	bne.n	8007306 <__hexnan+0x12e>
 80072b4:	2301      	movs	r3, #1
 80072b6:	603b      	str	r3, [r7, #0]
 80072b8:	2005      	movs	r0, #5
 80072ba:	b007      	add	sp, #28
 80072bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c0:	3501      	adds	r5, #1
 80072c2:	2d08      	cmp	r5, #8
 80072c4:	f10b 0b01 	add.w	fp, fp, #1
 80072c8:	dd06      	ble.n	80072d8 <__hexnan+0x100>
 80072ca:	4544      	cmp	r4, r8
 80072cc:	d9c1      	bls.n	8007252 <__hexnan+0x7a>
 80072ce:	2300      	movs	r3, #0
 80072d0:	f844 3c04 	str.w	r3, [r4, #-4]
 80072d4:	2501      	movs	r5, #1
 80072d6:	3c04      	subs	r4, #4
 80072d8:	6822      	ldr	r2, [r4, #0]
 80072da:	f000 000f 	and.w	r0, r0, #15
 80072de:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80072e2:	6020      	str	r0, [r4, #0]
 80072e4:	e7b5      	b.n	8007252 <__hexnan+0x7a>
 80072e6:	2508      	movs	r5, #8
 80072e8:	e7b3      	b.n	8007252 <__hexnan+0x7a>
 80072ea:	9b01      	ldr	r3, [sp, #4]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d0dd      	beq.n	80072ac <__hexnan+0xd4>
 80072f0:	f1c3 0320 	rsb	r3, r3, #32
 80072f4:	f04f 32ff 	mov.w	r2, #4294967295
 80072f8:	40da      	lsrs	r2, r3
 80072fa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80072fe:	4013      	ands	r3, r2
 8007300:	f846 3c04 	str.w	r3, [r6, #-4]
 8007304:	e7d2      	b.n	80072ac <__hexnan+0xd4>
 8007306:	3f04      	subs	r7, #4
 8007308:	e7d0      	b.n	80072ac <__hexnan+0xd4>
 800730a:	2004      	movs	r0, #4
 800730c:	e7d5      	b.n	80072ba <__hexnan+0xe2>

0800730e <__ascii_mbtowc>:
 800730e:	b082      	sub	sp, #8
 8007310:	b901      	cbnz	r1, 8007314 <__ascii_mbtowc+0x6>
 8007312:	a901      	add	r1, sp, #4
 8007314:	b142      	cbz	r2, 8007328 <__ascii_mbtowc+0x1a>
 8007316:	b14b      	cbz	r3, 800732c <__ascii_mbtowc+0x1e>
 8007318:	7813      	ldrb	r3, [r2, #0]
 800731a:	600b      	str	r3, [r1, #0]
 800731c:	7812      	ldrb	r2, [r2, #0]
 800731e:	1e10      	subs	r0, r2, #0
 8007320:	bf18      	it	ne
 8007322:	2001      	movne	r0, #1
 8007324:	b002      	add	sp, #8
 8007326:	4770      	bx	lr
 8007328:	4610      	mov	r0, r2
 800732a:	e7fb      	b.n	8007324 <__ascii_mbtowc+0x16>
 800732c:	f06f 0001 	mvn.w	r0, #1
 8007330:	e7f8      	b.n	8007324 <__ascii_mbtowc+0x16>

08007332 <_realloc_r>:
 8007332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007336:	4607      	mov	r7, r0
 8007338:	4614      	mov	r4, r2
 800733a:	460d      	mov	r5, r1
 800733c:	b921      	cbnz	r1, 8007348 <_realloc_r+0x16>
 800733e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007342:	4611      	mov	r1, r2
 8007344:	f7fd bca0 	b.w	8004c88 <_malloc_r>
 8007348:	b92a      	cbnz	r2, 8007356 <_realloc_r+0x24>
 800734a:	f7fd fc29 	bl	8004ba0 <_free_r>
 800734e:	4625      	mov	r5, r4
 8007350:	4628      	mov	r0, r5
 8007352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007356:	f000 f840 	bl	80073da <_malloc_usable_size_r>
 800735a:	4284      	cmp	r4, r0
 800735c:	4606      	mov	r6, r0
 800735e:	d802      	bhi.n	8007366 <_realloc_r+0x34>
 8007360:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007364:	d8f4      	bhi.n	8007350 <_realloc_r+0x1e>
 8007366:	4621      	mov	r1, r4
 8007368:	4638      	mov	r0, r7
 800736a:	f7fd fc8d 	bl	8004c88 <_malloc_r>
 800736e:	4680      	mov	r8, r0
 8007370:	b908      	cbnz	r0, 8007376 <_realloc_r+0x44>
 8007372:	4645      	mov	r5, r8
 8007374:	e7ec      	b.n	8007350 <_realloc_r+0x1e>
 8007376:	42b4      	cmp	r4, r6
 8007378:	4622      	mov	r2, r4
 800737a:	4629      	mov	r1, r5
 800737c:	bf28      	it	cs
 800737e:	4632      	movcs	r2, r6
 8007380:	f7ff fc42 	bl	8006c08 <memcpy>
 8007384:	4629      	mov	r1, r5
 8007386:	4638      	mov	r0, r7
 8007388:	f7fd fc0a 	bl	8004ba0 <_free_r>
 800738c:	e7f1      	b.n	8007372 <_realloc_r+0x40>

0800738e <__ascii_wctomb>:
 800738e:	4603      	mov	r3, r0
 8007390:	4608      	mov	r0, r1
 8007392:	b141      	cbz	r1, 80073a6 <__ascii_wctomb+0x18>
 8007394:	2aff      	cmp	r2, #255	@ 0xff
 8007396:	d904      	bls.n	80073a2 <__ascii_wctomb+0x14>
 8007398:	228a      	movs	r2, #138	@ 0x8a
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	f04f 30ff 	mov.w	r0, #4294967295
 80073a0:	4770      	bx	lr
 80073a2:	700a      	strb	r2, [r1, #0]
 80073a4:	2001      	movs	r0, #1
 80073a6:	4770      	bx	lr

080073a8 <fiprintf>:
 80073a8:	b40e      	push	{r1, r2, r3}
 80073aa:	b503      	push	{r0, r1, lr}
 80073ac:	4601      	mov	r1, r0
 80073ae:	ab03      	add	r3, sp, #12
 80073b0:	4805      	ldr	r0, [pc, #20]	@ (80073c8 <fiprintf+0x20>)
 80073b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b6:	6800      	ldr	r0, [r0, #0]
 80073b8:	9301      	str	r3, [sp, #4]
 80073ba:	f7ff f9a1 	bl	8006700 <_vfiprintf_r>
 80073be:	b002      	add	sp, #8
 80073c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80073c4:	b003      	add	sp, #12
 80073c6:	4770      	bx	lr
 80073c8:	20000018 	.word	0x20000018

080073cc <abort>:
 80073cc:	b508      	push	{r3, lr}
 80073ce:	2006      	movs	r0, #6
 80073d0:	f000 f834 	bl	800743c <raise>
 80073d4:	2001      	movs	r0, #1
 80073d6:	f7f9 ff70 	bl	80012ba <_exit>

080073da <_malloc_usable_size_r>:
 80073da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073de:	1f18      	subs	r0, r3, #4
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	bfbc      	itt	lt
 80073e4:	580b      	ldrlt	r3, [r1, r0]
 80073e6:	18c0      	addlt	r0, r0, r3
 80073e8:	4770      	bx	lr

080073ea <_raise_r>:
 80073ea:	291f      	cmp	r1, #31
 80073ec:	b538      	push	{r3, r4, r5, lr}
 80073ee:	4605      	mov	r5, r0
 80073f0:	460c      	mov	r4, r1
 80073f2:	d904      	bls.n	80073fe <_raise_r+0x14>
 80073f4:	2316      	movs	r3, #22
 80073f6:	6003      	str	r3, [r0, #0]
 80073f8:	f04f 30ff 	mov.w	r0, #4294967295
 80073fc:	bd38      	pop	{r3, r4, r5, pc}
 80073fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007400:	b112      	cbz	r2, 8007408 <_raise_r+0x1e>
 8007402:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007406:	b94b      	cbnz	r3, 800741c <_raise_r+0x32>
 8007408:	4628      	mov	r0, r5
 800740a:	f000 f831 	bl	8007470 <_getpid_r>
 800740e:	4622      	mov	r2, r4
 8007410:	4601      	mov	r1, r0
 8007412:	4628      	mov	r0, r5
 8007414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007418:	f000 b818 	b.w	800744c <_kill_r>
 800741c:	2b01      	cmp	r3, #1
 800741e:	d00a      	beq.n	8007436 <_raise_r+0x4c>
 8007420:	1c59      	adds	r1, r3, #1
 8007422:	d103      	bne.n	800742c <_raise_r+0x42>
 8007424:	2316      	movs	r3, #22
 8007426:	6003      	str	r3, [r0, #0]
 8007428:	2001      	movs	r0, #1
 800742a:	e7e7      	b.n	80073fc <_raise_r+0x12>
 800742c:	2100      	movs	r1, #0
 800742e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007432:	4620      	mov	r0, r4
 8007434:	4798      	blx	r3
 8007436:	2000      	movs	r0, #0
 8007438:	e7e0      	b.n	80073fc <_raise_r+0x12>
	...

0800743c <raise>:
 800743c:	4b02      	ldr	r3, [pc, #8]	@ (8007448 <raise+0xc>)
 800743e:	4601      	mov	r1, r0
 8007440:	6818      	ldr	r0, [r3, #0]
 8007442:	f7ff bfd2 	b.w	80073ea <_raise_r>
 8007446:	bf00      	nop
 8007448:	20000018 	.word	0x20000018

0800744c <_kill_r>:
 800744c:	b538      	push	{r3, r4, r5, lr}
 800744e:	4d07      	ldr	r5, [pc, #28]	@ (800746c <_kill_r+0x20>)
 8007450:	2300      	movs	r3, #0
 8007452:	4604      	mov	r4, r0
 8007454:	4608      	mov	r0, r1
 8007456:	4611      	mov	r1, r2
 8007458:	602b      	str	r3, [r5, #0]
 800745a:	f7f9 ff1e 	bl	800129a <_kill>
 800745e:	1c43      	adds	r3, r0, #1
 8007460:	d102      	bne.n	8007468 <_kill_r+0x1c>
 8007462:	682b      	ldr	r3, [r5, #0]
 8007464:	b103      	cbz	r3, 8007468 <_kill_r+0x1c>
 8007466:	6023      	str	r3, [r4, #0]
 8007468:	bd38      	pop	{r3, r4, r5, pc}
 800746a:	bf00      	nop
 800746c:	20000384 	.word	0x20000384

08007470 <_getpid_r>:
 8007470:	f7f9 bf0b 	b.w	800128a <_getpid>

08007474 <_init>:
 8007474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007476:	bf00      	nop
 8007478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800747a:	bc08      	pop	{r3}
 800747c:	469e      	mov	lr, r3
 800747e:	4770      	bx	lr

08007480 <_fini>:
 8007480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007482:	bf00      	nop
 8007484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007486:	bc08      	pop	{r3}
 8007488:	469e      	mov	lr, r3
 800748a:	4770      	bx	lr
