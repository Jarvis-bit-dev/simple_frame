
simple_frame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  08009ff0  08009ff0  0000aff0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a5f0  0800a5f0  0000c1f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a5f0  0800a5f0  0000b5f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a5f8  0800a5f8  0000c1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a5f8  0800a5f8  0000b5f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5fc  0800a5fc  0000b5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800a600  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1f8  2**0
                  CONTENTS
 10 .bss          00001358  200001f8  200001f8  0000c1f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001550  20001550  0000c1f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010011  00000000  00000000  0000c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d43  00000000  00000000  0001c239  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  0001ef80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b82  00000000  00000000  0001fe78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023293  00000000  00000000  000209fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013740  00000000  00000000  00043c8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd968  00000000  00000000  000573cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00124d35  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005350  00000000  00000000  00124d78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0012a0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fd4 	.word	0x08009fd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08009fd4 	.word	0x08009fd4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <MX_DMA_Init+0x4c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a0f      	ldr	r2, [pc, #60]	@ (800108c <MX_DMA_Init+0x4c>)
 8001050:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <MX_DMA_Init+0x4c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	203a      	movs	r0, #58	@ 0x3a
 8001068:	f000 fd69 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800106c:	203a      	movs	r0, #58	@ 0x3a
 800106e:	f000 fd82 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2046      	movs	r0, #70	@ 0x46
 8001078:	f000 fd61 	bl	8001b3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800107c:	2046      	movs	r0, #70	@ 0x46
 800107e:	f000 fd7a 	bl	8001b76 <HAL_NVIC_EnableIRQ>

}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800

08001090 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	4b17      	ldr	r3, [pc, #92]	@ (80010f8 <MX_GPIO_Init+0x68>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109e:	4a16      	ldr	r2, [pc, #88]	@ (80010f8 <MX_GPIO_Init+0x68>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a6:	4b14      	ldr	r3, [pc, #80]	@ (80010f8 <MX_GPIO_Init+0x68>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <MX_GPIO_Init+0x68>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	4a0f      	ldr	r2, [pc, #60]	@ (80010f8 <MX_GPIO_Init+0x68>)
 80010bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c2:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <MX_GPIO_Init+0x68>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <MX_GPIO_Init+0x68>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	4a08      	ldr	r2, [pc, #32]	@ (80010f8 <MX_GPIO_Init+0x68>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010de:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <MX_GPIO_Init+0x68>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800

080010fc <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1 , 0xffff);
 8001104:	1d39      	adds	r1, r7, #4
 8001106:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800110a:	2201      	movs	r2, #1
 800110c:	4803      	ldr	r0, [pc, #12]	@ (800111c <__io_putchar+0x20>)
 800110e:	f002 fae7 	bl	80036e0 <HAL_UART_Transmit>
    return ch;
 8001112:	687b      	ldr	r3, [r7, #4]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	200002a8 	.word	0x200002a8

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001124:	f000 fbbe 	bl	80018a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001128:	f000 f810 	bl	800114c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112c:	f7ff ffb0 	bl	8001090 <MX_GPIO_Init>
  MX_DMA_Init();
 8001130:	f7ff ff86 	bl	8001040 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001134:	f000 faac 	bl	8001690 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001138:	f000 f9f8 	bl	800152c <MX_TIM6_Init>
  MX_TIM7_Init();
 800113c:	f000 fa2c 	bl	8001598 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  sf_entry();
 8001140:	f003 fd64 	bl	8004c0c <sf_entry>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sf_loop();
 8001144:	f003 fd8b 	bl	8004c5e <sf_loop>
 8001148:	e7fc      	b.n	8001144 <main+0x24>
	...

0800114c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b094      	sub	sp, #80	@ 0x50
 8001150:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001152:	f107 0320 	add.w	r3, r7, #32
 8001156:	2230      	movs	r2, #48	@ 0x30
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f006 fa06 	bl	800756c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	4b28      	ldr	r3, [pc, #160]	@ (8001218 <SystemClock_Config+0xcc>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	4a27      	ldr	r2, [pc, #156]	@ (8001218 <SystemClock_Config+0xcc>)
 800117a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800117e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001180:	4b25      	ldr	r3, [pc, #148]	@ (8001218 <SystemClock_Config+0xcc>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001184:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001188:	60bb      	str	r3, [r7, #8]
 800118a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800118c:	2300      	movs	r3, #0
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	4b22      	ldr	r3, [pc, #136]	@ (800121c <SystemClock_Config+0xd0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a21      	ldr	r2, [pc, #132]	@ (800121c <SystemClock_Config+0xd0>)
 8001196:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b1f      	ldr	r3, [pc, #124]	@ (800121c <SystemClock_Config+0xd0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011a4:	607b      	str	r3, [r7, #4]
 80011a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011a8:	2301      	movs	r3, #1
 80011aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011b0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011b2:	2302      	movs	r3, #2
 80011b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011b6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011bc:	2304      	movs	r3, #4
 80011be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011c0:	23a8      	movs	r3, #168	@ 0xa8
 80011c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011c4:	2302      	movs	r3, #2
 80011c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011c8:	2304      	movs	r3, #4
 80011ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011cc:	f107 0320 	add.w	r3, r7, #32
 80011d0:	4618      	mov	r0, r3
 80011d2:	f001 fa89 	bl	80026e8 <HAL_RCC_OscConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011dc:	f000 f820 	bl	8001220 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e0:	230f      	movs	r3, #15
 80011e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e4:	2302      	movs	r3, #2
 80011e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2105      	movs	r1, #5
 80011fe:	4618      	mov	r0, r3
 8001200:	f001 fcea 	bl	8002bd8 <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800120a:	f000 f809 	bl	8001220 <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3750      	adds	r7, #80	@ 0x50
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023800 	.word	0x40023800
 800121c:	40007000 	.word	0x40007000

08001220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001224:	b672      	cpsid	i
}
 8001226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <Error_Handler+0x8>

0800122c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <HAL_MspInit+0x4c>)
 8001238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123a:	4a0f      	ldr	r2, [pc, #60]	@ (8001278 <HAL_MspInit+0x4c>)
 800123c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001240:	6453      	str	r3, [r2, #68]	@ 0x44
 8001242:	4b0d      	ldr	r3, [pc, #52]	@ (8001278 <HAL_MspInit+0x4c>)
 8001244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001246:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	603b      	str	r3, [r7, #0]
 8001252:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <HAL_MspInit+0x4c>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001256:	4a08      	ldr	r2, [pc, #32]	@ (8001278 <HAL_MspInit+0x4c>)
 8001258:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800125c:	6413      	str	r3, [r2, #64]	@ 0x40
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HAL_MspInit+0x4c>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001266:	603b      	str	r3, [r7, #0]
 8001268:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <NMI_Handler+0x4>

08001284 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <HardFault_Handler+0x4>

0800128c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001290:	bf00      	nop
 8001292:	e7fd      	b.n	8001290 <MemManage_Handler+0x4>

08001294 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001298:	bf00      	nop
 800129a:	e7fd      	b.n	8001298 <BusFault_Handler+0x4>

0800129c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <UsageFault_Handler+0x4>

080012a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b2:	b480      	push	{r7}
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d2:	f000 fb39 	bl	8001948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  task_system_tick_inc();
 80012d6:	f003 fe65 	bl	8004fa4 <task_system_tick_inc>

  /* USER CODE END SysTick_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80012e4:	4807      	ldr	r0, [pc, #28]	@ (8001304 <USART1_IRQHandler+0x24>)
 80012e6:	f002 fb2b 	bl	8003940 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <USART1_IRQHandler+0x24>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0310 	and.w	r3, r3, #16
 80012f4:	2b10      	cmp	r3, #16
 80012f6:	d102      	bne.n	80012fe <USART1_IRQHandler+0x1e>
  {
	  uart_manager_idle_callback(&huart1);
 80012f8:	4802      	ldr	r0, [pc, #8]	@ (8001304 <USART1_IRQHandler+0x24>)
 80012fa:	f003 fd6d 	bl	8004dd8 <uart_manager_idle_callback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	200002a8 	.word	0x200002a8

08001308 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800130c:	4802      	ldr	r0, [pc, #8]	@ (8001318 <TIM6_DAC_IRQHandler+0x10>)
 800130e:	f001 ff43 	bl	8003198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000218 	.word	0x20000218

0800131c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <TIM7_IRQHandler+0x10>)
 8001322:	f001 ff39 	bl	8003198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	20000260 	.word	0x20000260

08001330 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <DMA2_Stream2_IRQHandler+0x10>)
 8001336:	f000 fdd1 	bl	8001edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200002f0 	.word	0x200002f0

08001344 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <DMA2_Stream7_IRQHandler+0x10>)
 800134a:	f000 fdc7 	bl	8001edc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000350 	.word	0x20000350

08001358 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	//1S
    if (htim == (&htim6))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a05      	ldr	r2, [pc, #20]	@ (8001378 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d102      	bne.n	800136e <HAL_TIM_PeriodElapsedCallback+0x16>
    {
  	  task_execute(TASK_REALTIME);
 8001368:	2000      	movs	r0, #0
 800136a:	f003 feb3 	bl	80050d4 <task_execute>
    }
    //1ms
    if (htim == (&htim7))
    {
    }
}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000218 	.word	0x20000218

0800137c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return 1;
 8001380:	2301      	movs	r3, #1
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <_kill>:

int _kill(int pid, int sig)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001396:	f006 f9bd 	bl	8007714 <__errno>
 800139a:	4603      	mov	r3, r0
 800139c:	2216      	movs	r2, #22
 800139e:	601a      	str	r2, [r3, #0]
  return -1;
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <_exit>:

void _exit (int status)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ffe7 	bl	800138c <_kill>
  while (1) {}    /* Make sure we hang here */
 80013be:	bf00      	nop
 80013c0:	e7fd      	b.n	80013be <_exit+0x12>

080013c2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b086      	sub	sp, #24
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	60f8      	str	r0, [r7, #12]
 80013ca:	60b9      	str	r1, [r7, #8]
 80013cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ce:	2300      	movs	r3, #0
 80013d0:	617b      	str	r3, [r7, #20]
 80013d2:	e00a      	b.n	80013ea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013d4:	f3af 8000 	nop.w
 80013d8:	4601      	mov	r1, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	60ba      	str	r2, [r7, #8]
 80013e0:	b2ca      	uxtb	r2, r1
 80013e2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	429a      	cmp	r2, r3
 80013f0:	dbf0      	blt.n	80013d4 <_read+0x12>
  }

  return len;
 80013f2:	687b      	ldr	r3, [r7, #4]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3718      	adds	r7, #24
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	e009      	b.n	8001422 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	60ba      	str	r2, [r7, #8]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff fe70 	bl	80010fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	3301      	adds	r3, #1
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	429a      	cmp	r2, r3
 8001428:	dbf1      	blt.n	800140e <_write+0x12>
  }
  return len;
 800142a:	687b      	ldr	r3, [r7, #4]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <_close>:

int _close(int file)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001440:	4618      	mov	r0, r3
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr

0800144c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800145c:	605a      	str	r2, [r3, #4]
  return 0;
 800145e:	2300      	movs	r3, #0
}
 8001460:	4618      	mov	r0, r3
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_isatty>:

int _isatty(int file)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001474:	2301      	movs	r3, #1
}
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001482:	b480      	push	{r7}
 8001484:	b085      	sub	sp, #20
 8001486:	af00      	add	r7, sp, #0
 8001488:	60f8      	str	r0, [r7, #12]
 800148a:	60b9      	str	r1, [r7, #8]
 800148c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800148e:	2300      	movs	r3, #0
}
 8001490:	4618      	mov	r0, r3
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr

0800149c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014a4:	4a14      	ldr	r2, [pc, #80]	@ (80014f8 <_sbrk+0x5c>)
 80014a6:	4b15      	ldr	r3, [pc, #84]	@ (80014fc <_sbrk+0x60>)
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b0:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d102      	bne.n	80014be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <_sbrk+0x64>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <_sbrk+0x68>)
 80014bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <_sbrk+0x64>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4413      	add	r3, r2
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d207      	bcs.n	80014dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014cc:	f006 f922 	bl	8007714 <__errno>
 80014d0:	4603      	mov	r3, r0
 80014d2:	220c      	movs	r2, #12
 80014d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
 80014da:	e009      	b.n	80014f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014dc:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014e2:	4b07      	ldr	r3, [pc, #28]	@ (8001500 <_sbrk+0x64>)
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	4a05      	ldr	r2, [pc, #20]	@ (8001500 <_sbrk+0x64>)
 80014ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ee:	68fb      	ldr	r3, [r7, #12]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3718      	adds	r7, #24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20020000 	.word	0x20020000
 80014fc:	00000400 	.word	0x00000400
 8001500:	20000214 	.word	0x20000214
 8001504:	20001550 	.word	0x20001550

08001508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800150c:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <SystemInit+0x20>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001512:	4a05      	ldr	r2, [pc, #20]	@ (8001528 <SystemInit+0x20>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001532:	463b      	mov	r3, r7
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800153a:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <MX_TIM6_Init+0x64>)
 800153c:	4a15      	ldr	r2, [pc, #84]	@ (8001594 <MX_TIM6_Init+0x68>)
 800153e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 8001540:	4b13      	ldr	r3, [pc, #76]	@ (8001590 <MX_TIM6_Init+0x64>)
 8001542:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001546:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001548:	4b11      	ldr	r3, [pc, #68]	@ (8001590 <MX_TIM6_Init+0x64>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 800154e:	4b10      	ldr	r3, [pc, #64]	@ (8001590 <MX_TIM6_Init+0x64>)
 8001550:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001554:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b0e      	ldr	r3, [pc, #56]	@ (8001590 <MX_TIM6_Init+0x64>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800155c:	480c      	ldr	r0, [pc, #48]	@ (8001590 <MX_TIM6_Init+0x64>)
 800155e:	f001 fd5b 	bl	8003018 <HAL_TIM_Base_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001568:	f7ff fe5a 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	@ (8001590 <MX_TIM6_Init+0x64>)
 800157a:	f001 ffd1 	bl	8003520 <HAL_TIMEx_MasterConfigSynchronization>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001584:	f7ff fe4c 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000218 	.word	0x20000218
 8001594:	40001000 	.word	0x40001000

08001598 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800159e:	463b      	mov	r3, r7
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <MX_TIM7_Init+0x64>)
 80015a8:	4a15      	ldr	r2, [pc, #84]	@ (8001600 <MX_TIM7_Init+0x68>)
 80015aa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84-1;
 80015ac:	4b13      	ldr	r3, [pc, #76]	@ (80015fc <MX_TIM7_Init+0x64>)
 80015ae:	2253      	movs	r2, #83	@ 0x53
 80015b0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b12      	ldr	r3, [pc, #72]	@ (80015fc <MX_TIM7_Init+0x64>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80015b8:	4b10      	ldr	r3, [pc, #64]	@ (80015fc <MX_TIM7_Init+0x64>)
 80015ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015be:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c0:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <MX_TIM7_Init+0x64>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80015c6:	480d      	ldr	r0, [pc, #52]	@ (80015fc <MX_TIM7_Init+0x64>)
 80015c8:	f001 fd26 	bl	8003018 <HAL_TIM_Base_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80015d2:	f7ff fe25 	bl	8001220 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015de:	463b      	mov	r3, r7
 80015e0:	4619      	mov	r1, r3
 80015e2:	4806      	ldr	r0, [pc, #24]	@ (80015fc <MX_TIM7_Init+0x64>)
 80015e4:	f001 ff9c 	bl	8003520 <HAL_TIMEx_MasterConfigSynchronization>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80015ee:	f7ff fe17 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000260 	.word	0x20000260
 8001600:	40001400 	.word	0x40001400

08001604 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1c      	ldr	r2, [pc, #112]	@ (8001684 <HAL_TIM_Base_MspInit+0x80>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d116      	bne.n	8001644 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b1b      	ldr	r3, [pc, #108]	@ (8001688 <HAL_TIM_Base_MspInit+0x84>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	4a1a      	ldr	r2, [pc, #104]	@ (8001688 <HAL_TIM_Base_MspInit+0x84>)
 8001620:	f043 0310 	orr.w	r3, r3, #16
 8001624:	6413      	str	r3, [r2, #64]	@ 0x40
 8001626:	4b18      	ldr	r3, [pc, #96]	@ (8001688 <HAL_TIM_Base_MspInit+0x84>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2036      	movs	r0, #54	@ 0x36
 8001638:	f000 fa81 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800163c:	2036      	movs	r0, #54	@ 0x36
 800163e:	f000 fa9a 	bl	8001b76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001642:	e01a      	b.n	800167a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a10      	ldr	r2, [pc, #64]	@ (800168c <HAL_TIM_Base_MspInit+0x88>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d115      	bne.n	800167a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <HAL_TIM_Base_MspInit+0x84>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	4a0c      	ldr	r2, [pc, #48]	@ (8001688 <HAL_TIM_Base_MspInit+0x84>)
 8001658:	f043 0320 	orr.w	r3, r3, #32
 800165c:	6413      	str	r3, [r2, #64]	@ 0x40
 800165e:	4b0a      	ldr	r3, [pc, #40]	@ (8001688 <HAL_TIM_Base_MspInit+0x84>)
 8001660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001662:	f003 0320 	and.w	r3, r3, #32
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	2037      	movs	r0, #55	@ 0x37
 8001670:	f000 fa65 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001674:	2037      	movs	r0, #55	@ 0x37
 8001676:	f000 fa7e 	bl	8001b76 <HAL_NVIC_EnableIRQ>
}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40001000 	.word	0x40001000
 8001688:	40023800 	.word	0x40023800
 800168c:	40001400 	.word	0x40001400

08001690 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001694:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <MX_USART1_UART_Init+0x4c>)
 8001696:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <MX_USART1_UART_Init+0x50>)
 8001698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800169a:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <MX_USART1_UART_Init+0x4c>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_USART1_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <MX_USART1_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <MX_USART1_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <MX_USART1_UART_Init+0x4c>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <MX_USART1_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <MX_USART1_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	@ (80016dc <MX_USART1_UART_Init+0x4c>)
 80016c8:	f001 ffba 	bl	8003640 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016d2:	f7ff fda5 	bl	8001220 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200002a8 	.word	0x200002a8
 80016e0:	40011000 	.word	0x40011000

080016e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	@ 0x28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a4c      	ldr	r2, [pc, #304]	@ (8001834 <HAL_UART_MspInit+0x150>)
 8001702:	4293      	cmp	r3, r2
 8001704:	f040 8091 	bne.w	800182a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	613b      	str	r3, [r7, #16]
 800170c:	4b4a      	ldr	r3, [pc, #296]	@ (8001838 <HAL_UART_MspInit+0x154>)
 800170e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001710:	4a49      	ldr	r2, [pc, #292]	@ (8001838 <HAL_UART_MspInit+0x154>)
 8001712:	f043 0310 	orr.w	r3, r3, #16
 8001716:	6453      	str	r3, [r2, #68]	@ 0x44
 8001718:	4b47      	ldr	r3, [pc, #284]	@ (8001838 <HAL_UART_MspInit+0x154>)
 800171a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800171c:	f003 0310 	and.w	r3, r3, #16
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	4b43      	ldr	r3, [pc, #268]	@ (8001838 <HAL_UART_MspInit+0x154>)
 800172a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172c:	4a42      	ldr	r2, [pc, #264]	@ (8001838 <HAL_UART_MspInit+0x154>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6313      	str	r3, [r2, #48]	@ 0x30
 8001734:	4b40      	ldr	r3, [pc, #256]	@ (8001838 <HAL_UART_MspInit+0x154>)
 8001736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001740:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001746:	2302      	movs	r3, #2
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001752:	2307      	movs	r3, #7
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	4837      	ldr	r0, [pc, #220]	@ (800183c <HAL_UART_MspInit+0x158>)
 800175e:	f000 fe27 	bl	80023b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001762:	4b37      	ldr	r3, [pc, #220]	@ (8001840 <HAL_UART_MspInit+0x15c>)
 8001764:	4a37      	ldr	r2, [pc, #220]	@ (8001844 <HAL_UART_MspInit+0x160>)
 8001766:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001768:	4b35      	ldr	r3, [pc, #212]	@ (8001840 <HAL_UART_MspInit+0x15c>)
 800176a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800176e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001770:	4b33      	ldr	r3, [pc, #204]	@ (8001840 <HAL_UART_MspInit+0x15c>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001776:	4b32      	ldr	r3, [pc, #200]	@ (8001840 <HAL_UART_MspInit+0x15c>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800177c:	4b30      	ldr	r3, [pc, #192]	@ (8001840 <HAL_UART_MspInit+0x15c>)
 800177e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001782:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001784:	4b2e      	ldr	r3, [pc, #184]	@ (8001840 <HAL_UART_MspInit+0x15c>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800178a:	4b2d      	ldr	r3, [pc, #180]	@ (8001840 <HAL_UART_MspInit+0x15c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001790:	4b2b      	ldr	r3, [pc, #172]	@ (8001840 <HAL_UART_MspInit+0x15c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001796:	4b2a      	ldr	r3, [pc, #168]	@ (8001840 <HAL_UART_MspInit+0x15c>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800179c:	4b28      	ldr	r3, [pc, #160]	@ (8001840 <HAL_UART_MspInit+0x15c>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017a2:	4827      	ldr	r0, [pc, #156]	@ (8001840 <HAL_UART_MspInit+0x15c>)
 80017a4:	f000 fa02 	bl	8001bac <HAL_DMA_Init>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80017ae:	f7ff fd37 	bl	8001220 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a22      	ldr	r2, [pc, #136]	@ (8001840 <HAL_UART_MspInit+0x15c>)
 80017b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80017b8:	4a21      	ldr	r2, [pc, #132]	@ (8001840 <HAL_UART_MspInit+0x15c>)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80017be:	4b22      	ldr	r3, [pc, #136]	@ (8001848 <HAL_UART_MspInit+0x164>)
 80017c0:	4a22      	ldr	r2, [pc, #136]	@ (800184c <HAL_UART_MspInit+0x168>)
 80017c2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80017c4:	4b20      	ldr	r3, [pc, #128]	@ (8001848 <HAL_UART_MspInit+0x164>)
 80017c6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017ca:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001848 <HAL_UART_MspInit+0x164>)
 80017ce:	2240      	movs	r2, #64	@ 0x40
 80017d0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001848 <HAL_UART_MspInit+0x164>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001848 <HAL_UART_MspInit+0x164>)
 80017da:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017de:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <HAL_UART_MspInit+0x164>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017e6:	4b18      	ldr	r3, [pc, #96]	@ (8001848 <HAL_UART_MspInit+0x164>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80017ec:	4b16      	ldr	r3, [pc, #88]	@ (8001848 <HAL_UART_MspInit+0x164>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017f2:	4b15      	ldr	r3, [pc, #84]	@ (8001848 <HAL_UART_MspInit+0x164>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017f8:	4b13      	ldr	r3, [pc, #76]	@ (8001848 <HAL_UART_MspInit+0x164>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80017fe:	4812      	ldr	r0, [pc, #72]	@ (8001848 <HAL_UART_MspInit+0x164>)
 8001800:	f000 f9d4 	bl	8001bac <HAL_DMA_Init>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800180a:	f7ff fd09 	bl	8001220 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a0d      	ldr	r2, [pc, #52]	@ (8001848 <HAL_UART_MspInit+0x164>)
 8001812:	639a      	str	r2, [r3, #56]	@ 0x38
 8001814:	4a0c      	ldr	r2, [pc, #48]	@ (8001848 <HAL_UART_MspInit+0x164>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	2025      	movs	r0, #37	@ 0x25
 8001820:	f000 f98d 	bl	8001b3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001824:	2025      	movs	r0, #37	@ 0x25
 8001826:	f000 f9a6 	bl	8001b76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800182a:	bf00      	nop
 800182c:	3728      	adds	r7, #40	@ 0x28
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40011000 	.word	0x40011000
 8001838:	40023800 	.word	0x40023800
 800183c:	40020000 	.word	0x40020000
 8001840:	200002f0 	.word	0x200002f0
 8001844:	40026440 	.word	0x40026440
 8001848:	20000350 	.word	0x20000350
 800184c:	400264b8 	.word	0x400264b8

08001850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001850:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001888 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001854:	f7ff fe58 	bl	8001508 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001858:	480c      	ldr	r0, [pc, #48]	@ (800188c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800185a:	490d      	ldr	r1, [pc, #52]	@ (8001890 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800185c:	4a0d      	ldr	r2, [pc, #52]	@ (8001894 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001860:	e002      	b.n	8001868 <LoopCopyDataInit>

08001862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001866:	3304      	adds	r3, #4

08001868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800186c:	d3f9      	bcc.n	8001862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186e:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001870:	4c0a      	ldr	r4, [pc, #40]	@ (800189c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001874:	e001      	b.n	800187a <LoopFillZerobss>

08001876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001878:	3204      	adds	r2, #4

0800187a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800187c:	d3fb      	bcc.n	8001876 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800187e:	f005 ff4f 	bl	8007720 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001882:	f7ff fc4d 	bl	8001120 <main>
  bx  lr    
 8001886:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001888:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001894:	0800a600 	.word	0x0800a600
  ldr r2, =_sbss
 8001898:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 800189c:	20001550 	.word	0x20001550

080018a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <ADC_IRQHandler>
	...

080018a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018a8:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <HAL_Init+0x40>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a0d      	ldr	r2, [pc, #52]	@ (80018e4 <HAL_Init+0x40>)
 80018ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <HAL_Init+0x40>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a0a      	ldr	r2, [pc, #40]	@ (80018e4 <HAL_Init+0x40>)
 80018ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018c0:	4b08      	ldr	r3, [pc, #32]	@ (80018e4 <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a07      	ldr	r2, [pc, #28]	@ (80018e4 <HAL_Init+0x40>)
 80018c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018cc:	2003      	movs	r0, #3
 80018ce:	f000 f92b 	bl	8001b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018d2:	200f      	movs	r0, #15
 80018d4:	f000 f808 	bl	80018e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018d8:	f7ff fca8 	bl	800122c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023c00 	.word	0x40023c00

080018e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018f0:	4b12      	ldr	r3, [pc, #72]	@ (800193c <HAL_InitTick+0x54>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b12      	ldr	r3, [pc, #72]	@ (8001940 <HAL_InitTick+0x58>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	4619      	mov	r1, r3
 80018fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001902:	fbb2 f3f3 	udiv	r3, r2, r3
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f943 	bl	8001b92 <HAL_SYSTICK_Config>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e00e      	b.n	8001934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	2b0f      	cmp	r3, #15
 800191a:	d80a      	bhi.n	8001932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800191c:	2200      	movs	r2, #0
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	f04f 30ff 	mov.w	r0, #4294967295
 8001924:	f000 f90b 	bl	8001b3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001928:	4a06      	ldr	r2, [pc, #24]	@ (8001944 <HAL_InitTick+0x5c>)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
 8001930:	e000      	b.n	8001934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
}
 8001934:	4618      	mov	r0, r3
 8001936:	3708      	adds	r7, #8
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20000000 	.word	0x20000000
 8001940:	20000008 	.word	0x20000008
 8001944:	20000004 	.word	0x20000004

08001948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800194c:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_IncTick+0x20>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	461a      	mov	r2, r3
 8001952:	4b06      	ldr	r3, [pc, #24]	@ (800196c <HAL_IncTick+0x24>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4413      	add	r3, r2
 8001958:	4a04      	ldr	r2, [pc, #16]	@ (800196c <HAL_IncTick+0x24>)
 800195a:	6013      	str	r3, [r2, #0]
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	20000008 	.word	0x20000008
 800196c:	200003b0 	.word	0x200003b0

08001970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return uwTick;
 8001974:	4b03      	ldr	r3, [pc, #12]	@ (8001984 <HAL_GetTick+0x14>)
 8001976:	681b      	ldr	r3, [r3, #0]
}
 8001978:	4618      	mov	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	200003b0 	.word	0x200003b0

08001988 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ba:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
}
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	@ (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	@ (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	@ (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
}
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	4313      	orrs	r3, r2
         );
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	@ 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3b01      	subs	r3, #1
 8001af0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001af4:	d301      	bcc.n	8001afa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af6:	2301      	movs	r3, #1
 8001af8:	e00f      	b.n	8001b1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afa:	4a0a      	ldr	r2, [pc, #40]	@ (8001b24 <SysTick_Config+0x40>)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b02:	210f      	movs	r1, #15
 8001b04:	f04f 30ff 	mov.w	r0, #4294967295
 8001b08:	f7ff ff8e 	bl	8001a28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b0c:	4b05      	ldr	r3, [pc, #20]	@ (8001b24 <SysTick_Config+0x40>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b12:	4b04      	ldr	r3, [pc, #16]	@ (8001b24 <SysTick_Config+0x40>)
 8001b14:	2207      	movs	r2, #7
 8001b16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b18:	2300      	movs	r3, #0
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	e000e010 	.word	0xe000e010

08001b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f7ff ff29 	bl	8001988 <__NVIC_SetPriorityGrouping>
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	4603      	mov	r3, r0
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b50:	f7ff ff3e 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	68b9      	ldr	r1, [r7, #8]
 8001b5a:	6978      	ldr	r0, [r7, #20]
 8001b5c:	f7ff ff8e 	bl	8001a7c <NVIC_EncodePriority>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b66:	4611      	mov	r1, r2
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff ff5d 	bl	8001a28 <__NVIC_SetPriority>
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	b082      	sub	sp, #8
 8001b7a:	af00      	add	r7, sp, #0
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff ff31 	bl	80019ec <__NVIC_EnableIRQ>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7ff ffa2 	bl	8001ae4 <SysTick_Config>
 8001ba0:	4603      	mov	r3, r0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
	...

08001bac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b086      	sub	sp, #24
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bb8:	f7ff feda 	bl	8001970 <HAL_GetTick>
 8001bbc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e099      	b.n	8001cfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 0201 	bic.w	r2, r2, #1
 8001be6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be8:	e00f      	b.n	8001c0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bea:	f7ff fec1 	bl	8001970 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b05      	cmp	r3, #5
 8001bf6:	d908      	bls.n	8001c0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2203      	movs	r2, #3
 8001c02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e078      	b.n	8001cfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1e8      	bne.n	8001bea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	4b38      	ldr	r3, [pc, #224]	@ (8001d04 <HAL_DMA_Init+0x158>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685a      	ldr	r2, [r3, #4]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c60:	2b04      	cmp	r3, #4
 8001c62:	d107      	bne.n	8001c74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f023 0307 	bic.w	r3, r3, #7
 8001c8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d117      	bne.n	8001cce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00e      	beq.n	8001cce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 fb01 	bl	80022b8 <DMA_CheckFifoParam>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d008      	beq.n	8001cce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2240      	movs	r2, #64	@ 0x40
 8001cc0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e016      	b.n	8001cfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fab8 	bl	800224c <DMA_CalcBaseAndBitshift>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce4:	223f      	movs	r2, #63	@ 0x3f
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3718      	adds	r7, #24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	f010803f 	.word	0xf010803f

08001d08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
 8001d14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_DMA_Start_IT+0x26>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e040      	b.n	8001db0 <HAL_DMA_Start_IT+0xa8>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d3c:	b2db      	uxtb	r3, r3
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d12f      	bne.n	8001da2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2202      	movs	r2, #2
 8001d46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 fa4a 	bl	80021f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d60:	223f      	movs	r2, #63	@ 0x3f
 8001d62:	409a      	lsls	r2, r3
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0216 	orr.w	r2, r2, #22
 8001d76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f042 0208 	orr.w	r2, r2, #8
 8001d8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]
 8001da0:	e005      	b.n	8001dae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001daa:	2302      	movs	r3, #2
 8001dac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001dae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dc6:	f7ff fdd3 	bl	8001970 <HAL_GetTick>
 8001dca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d008      	beq.n	8001dea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2280      	movs	r2, #128	@ 0x80
 8001ddc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e052      	b.n	8001e90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0216 	bic.w	r2, r2, #22
 8001df8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d103      	bne.n	8001e1a <HAL_DMA_Abort+0x62>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d007      	beq.n	8001e2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0208 	bic.w	r2, r2, #8
 8001e28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0201 	bic.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3a:	e013      	b.n	8001e64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e3c:	f7ff fd98 	bl	8001970 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b05      	cmp	r3, #5
 8001e48:	d90c      	bls.n	8001e64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2203      	movs	r2, #3
 8001e54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e015      	b.n	8001e90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1e4      	bne.n	8001e3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e76:	223f      	movs	r2, #63	@ 0x3f
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d004      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2280      	movs	r2, #128	@ 0x80
 8001eb0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00c      	b.n	8001ed0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2205      	movs	r2, #5
 8001eba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0201 	bic.w	r2, r2, #1
 8001ecc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b086      	sub	sp, #24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ee8:	4b8e      	ldr	r3, [pc, #568]	@ (8002124 <HAL_DMA_IRQHandler+0x248>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a8e      	ldr	r2, [pc, #568]	@ (8002128 <HAL_DMA_IRQHandler+0x24c>)
 8001eee:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef2:	0a9b      	lsrs	r3, r3, #10
 8001ef4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001efa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f06:	2208      	movs	r2, #8
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d01a      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d013      	beq.n	8001f48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0204 	bic.w	r2, r2, #4
 8001f2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f34:	2208      	movs	r2, #8
 8001f36:	409a      	lsls	r2, r3
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f40:	f043 0201 	orr.w	r2, r3, #1
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	409a      	lsls	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4013      	ands	r3, r2
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d012      	beq.n	8001f7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00b      	beq.n	8001f7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f76:	f043 0202 	orr.w	r2, r3, #2
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f82:	2204      	movs	r2, #4
 8001f84:	409a      	lsls	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d012      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00b      	beq.n	8001fb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fa0:	2204      	movs	r2, #4
 8001fa2:	409a      	lsls	r2, r3
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fac:	f043 0204 	orr.w	r2, r3, #4
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb8:	2210      	movs	r2, #16
 8001fba:	409a      	lsls	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d043      	beq.n	800204c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d03c      	beq.n	800204c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd6:	2210      	movs	r2, #16
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d018      	beq.n	800201e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d108      	bne.n	800200c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d024      	beq.n	800204c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4798      	blx	r3
 800200a:	e01f      	b.n	800204c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002010:	2b00      	cmp	r3, #0
 8002012:	d01b      	beq.n	800204c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	4798      	blx	r3
 800201c:	e016      	b.n	800204c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d107      	bne.n	800203c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0208 	bic.w	r2, r2, #8
 800203a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002050:	2220      	movs	r2, #32
 8002052:	409a      	lsls	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 808f 	beq.w	800217c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0310 	and.w	r3, r3, #16
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 8087 	beq.w	800217c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002072:	2220      	movs	r2, #32
 8002074:	409a      	lsls	r2, r3
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b05      	cmp	r3, #5
 8002084:	d136      	bne.n	80020f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0216 	bic.w	r2, r2, #22
 8002094:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695a      	ldr	r2, [r3, #20]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80020a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d103      	bne.n	80020b6 <HAL_DMA_IRQHandler+0x1da>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d007      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 0208 	bic.w	r2, r2, #8
 80020c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ca:	223f      	movs	r2, #63	@ 0x3f
 80020cc:	409a      	lsls	r2, r3
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d07e      	beq.n	80021e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	4798      	blx	r3
        }
        return;
 80020f2:	e079      	b.n	80021e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d01d      	beq.n	800213e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10d      	bne.n	800212c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002114:	2b00      	cmp	r3, #0
 8002116:	d031      	beq.n	800217c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
 8002120:	e02c      	b.n	800217c <HAL_DMA_IRQHandler+0x2a0>
 8002122:	bf00      	nop
 8002124:	20000000 	.word	0x20000000
 8002128:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002130:	2b00      	cmp	r3, #0
 8002132:	d023      	beq.n	800217c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	4798      	blx	r3
 800213c:	e01e      	b.n	800217c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10f      	bne.n	800216c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 0210 	bic.w	r2, r2, #16
 800215a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2201      	movs	r2, #1
 8002160:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002180:	2b00      	cmp	r3, #0
 8002182:	d032      	beq.n	80021ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d022      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2205      	movs	r2, #5
 8002194:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 0201 	bic.w	r2, r2, #1
 80021a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	3301      	adds	r3, #1
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d307      	bcc.n	80021c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0301 	and.w	r3, r3, #1
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f2      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x2cc>
 80021c2:	e000      	b.n	80021c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80021c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2201      	movs	r2, #1
 80021ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d005      	beq.n	80021ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4798      	blx	r3
 80021e6:	e000      	b.n	80021ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80021e8:	bf00      	nop
    }
  }
}
 80021ea:	3718      	adds	r7, #24
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800220c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	2b40      	cmp	r3, #64	@ 0x40
 800221c:	d108      	bne.n	8002230 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800222e:	e007      	b.n	8002240 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	60da      	str	r2, [r3, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	3b10      	subs	r3, #16
 800225c:	4a14      	ldr	r2, [pc, #80]	@ (80022b0 <DMA_CalcBaseAndBitshift+0x64>)
 800225e:	fba2 2303 	umull	r2, r3, r2, r3
 8002262:	091b      	lsrs	r3, r3, #4
 8002264:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002266:	4a13      	ldr	r2, [pc, #76]	@ (80022b4 <DMA_CalcBaseAndBitshift+0x68>)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d909      	bls.n	800228e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002282:	f023 0303 	bic.w	r3, r3, #3
 8002286:	1d1a      	adds	r2, r3, #4
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	659a      	str	r2, [r3, #88]	@ 0x58
 800228c:	e007      	b.n	800229e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002296:	f023 0303 	bic.w	r3, r3, #3
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	aaaaaaab 	.word	0xaaaaaaab
 80022b4:	0800a168 	.word	0x0800a168

080022b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022c0:	2300      	movs	r3, #0
 80022c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d11f      	bne.n	8002312 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	d856      	bhi.n	8002386 <DMA_CheckFifoParam+0xce>
 80022d8:	a201      	add	r2, pc, #4	@ (adr r2, 80022e0 <DMA_CheckFifoParam+0x28>)
 80022da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022de:	bf00      	nop
 80022e0:	080022f1 	.word	0x080022f1
 80022e4:	08002303 	.word	0x08002303
 80022e8:	080022f1 	.word	0x080022f1
 80022ec:	08002387 	.word	0x08002387
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d046      	beq.n	800238a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002300:	e043      	b.n	800238a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002306:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800230a:	d140      	bne.n	800238e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002310:	e03d      	b.n	800238e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800231a:	d121      	bne.n	8002360 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d837      	bhi.n	8002392 <DMA_CheckFifoParam+0xda>
 8002322:	a201      	add	r2, pc, #4	@ (adr r2, 8002328 <DMA_CheckFifoParam+0x70>)
 8002324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002328:	08002339 	.word	0x08002339
 800232c:	0800233f 	.word	0x0800233f
 8002330:	08002339 	.word	0x08002339
 8002334:	08002351 	.word	0x08002351
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
      break;
 800233c:	e030      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002342:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d025      	beq.n	8002396 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800234e:	e022      	b.n	8002396 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002354:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002358:	d11f      	bne.n	800239a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800235e:	e01c      	b.n	800239a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	2b02      	cmp	r3, #2
 8002364:	d903      	bls.n	800236e <DMA_CheckFifoParam+0xb6>
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	2b03      	cmp	r3, #3
 800236a:	d003      	beq.n	8002374 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800236c:	e018      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	73fb      	strb	r3, [r7, #15]
      break;
 8002372:	e015      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002378:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00e      	beq.n	800239e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
      break;
 8002384:	e00b      	b.n	800239e <DMA_CheckFifoParam+0xe6>
      break;
 8002386:	bf00      	nop
 8002388:	e00a      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
      break;
 800238a:	bf00      	nop
 800238c:	e008      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
      break;
 800238e:	bf00      	nop
 8002390:	e006      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002392:	bf00      	nop
 8002394:	e004      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
      break;
 8002396:	bf00      	nop
 8002398:	e002      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800239a:	bf00      	nop
 800239c:	e000      	b.n	80023a0 <DMA_CheckFifoParam+0xe8>
      break;
 800239e:	bf00      	nop
    }
  } 
  
  return status; 
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop

080023b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	@ 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c6:	2300      	movs	r3, #0
 80023c8:	61fb      	str	r3, [r7, #28]
 80023ca:	e16b      	b.n	80026a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023cc:	2201      	movs	r2, #1
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4013      	ands	r3, r2
 80023de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	f040 815a 	bne.w	800269e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f003 0303 	and.w	r3, r3, #3
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d005      	beq.n	8002402 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d130      	bne.n	8002464 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	2203      	movs	r2, #3
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	68da      	ldr	r2, [r3, #12]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	4013      	ands	r3, r2
 8002446:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 0201 	and.w	r2, r3, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	69ba      	ldr	r2, [r7, #24]
 800245a:	4313      	orrs	r3, r2
 800245c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 0303 	and.w	r3, r3, #3
 800246c:	2b03      	cmp	r3, #3
 800246e:	d017      	beq.n	80024a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	2203      	movs	r2, #3
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4313      	orrs	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f003 0303 	and.w	r3, r3, #3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d123      	bne.n	80024f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	08da      	lsrs	r2, r3, #3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3208      	adds	r2, #8
 80024b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	220f      	movs	r2, #15
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f003 0307 	and.w	r3, r3, #7
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	08da      	lsrs	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3208      	adds	r2, #8
 80024ee:	69b9      	ldr	r1, [r7, #24]
 80024f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0203 	and.w	r2, r3, #3
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80b4 	beq.w	800269e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	4b60      	ldr	r3, [pc, #384]	@ (80026bc <HAL_GPIO_Init+0x30c>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	4a5f      	ldr	r2, [pc, #380]	@ (80026bc <HAL_GPIO_Init+0x30c>)
 8002540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002544:	6453      	str	r3, [r2, #68]	@ 0x44
 8002546:	4b5d      	ldr	r3, [pc, #372]	@ (80026bc <HAL_GPIO_Init+0x30c>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254e:	60fb      	str	r3, [r7, #12]
 8002550:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002552:	4a5b      	ldr	r2, [pc, #364]	@ (80026c0 <HAL_GPIO_Init+0x310>)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	089b      	lsrs	r3, r3, #2
 8002558:	3302      	adds	r3, #2
 800255a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800255e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	220f      	movs	r2, #15
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	43db      	mvns	r3, r3
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	4013      	ands	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a52      	ldr	r2, [pc, #328]	@ (80026c4 <HAL_GPIO_Init+0x314>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d02b      	beq.n	80025d6 <HAL_GPIO_Init+0x226>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a51      	ldr	r2, [pc, #324]	@ (80026c8 <HAL_GPIO_Init+0x318>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d025      	beq.n	80025d2 <HAL_GPIO_Init+0x222>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a50      	ldr	r2, [pc, #320]	@ (80026cc <HAL_GPIO_Init+0x31c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d01f      	beq.n	80025ce <HAL_GPIO_Init+0x21e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a4f      	ldr	r2, [pc, #316]	@ (80026d0 <HAL_GPIO_Init+0x320>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d019      	beq.n	80025ca <HAL_GPIO_Init+0x21a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a4e      	ldr	r2, [pc, #312]	@ (80026d4 <HAL_GPIO_Init+0x324>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d013      	beq.n	80025c6 <HAL_GPIO_Init+0x216>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a4d      	ldr	r2, [pc, #308]	@ (80026d8 <HAL_GPIO_Init+0x328>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d00d      	beq.n	80025c2 <HAL_GPIO_Init+0x212>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4c      	ldr	r2, [pc, #304]	@ (80026dc <HAL_GPIO_Init+0x32c>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d007      	beq.n	80025be <HAL_GPIO_Init+0x20e>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4b      	ldr	r2, [pc, #300]	@ (80026e0 <HAL_GPIO_Init+0x330>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d101      	bne.n	80025ba <HAL_GPIO_Init+0x20a>
 80025b6:	2307      	movs	r3, #7
 80025b8:	e00e      	b.n	80025d8 <HAL_GPIO_Init+0x228>
 80025ba:	2308      	movs	r3, #8
 80025bc:	e00c      	b.n	80025d8 <HAL_GPIO_Init+0x228>
 80025be:	2306      	movs	r3, #6
 80025c0:	e00a      	b.n	80025d8 <HAL_GPIO_Init+0x228>
 80025c2:	2305      	movs	r3, #5
 80025c4:	e008      	b.n	80025d8 <HAL_GPIO_Init+0x228>
 80025c6:	2304      	movs	r3, #4
 80025c8:	e006      	b.n	80025d8 <HAL_GPIO_Init+0x228>
 80025ca:	2303      	movs	r3, #3
 80025cc:	e004      	b.n	80025d8 <HAL_GPIO_Init+0x228>
 80025ce:	2302      	movs	r3, #2
 80025d0:	e002      	b.n	80025d8 <HAL_GPIO_Init+0x228>
 80025d2:	2301      	movs	r3, #1
 80025d4:	e000      	b.n	80025d8 <HAL_GPIO_Init+0x228>
 80025d6:	2300      	movs	r3, #0
 80025d8:	69fa      	ldr	r2, [r7, #28]
 80025da:	f002 0203 	and.w	r2, r2, #3
 80025de:	0092      	lsls	r2, r2, #2
 80025e0:	4093      	lsls	r3, r2
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025e8:	4935      	ldr	r1, [pc, #212]	@ (80026c0 <HAL_GPIO_Init+0x310>)
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	089b      	lsrs	r3, r3, #2
 80025ee:	3302      	adds	r3, #2
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025f6:	4b3b      	ldr	r3, [pc, #236]	@ (80026e4 <HAL_GPIO_Init+0x334>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	43db      	mvns	r3, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4013      	ands	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4313      	orrs	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261a:	4a32      	ldr	r2, [pc, #200]	@ (80026e4 <HAL_GPIO_Init+0x334>)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002620:	4b30      	ldr	r3, [pc, #192]	@ (80026e4 <HAL_GPIO_Init+0x334>)
 8002622:	68db      	ldr	r3, [r3, #12]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	43db      	mvns	r3, r3
 800262a:	69ba      	ldr	r2, [r7, #24]
 800262c:	4013      	ands	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002644:	4a27      	ldr	r2, [pc, #156]	@ (80026e4 <HAL_GPIO_Init+0x334>)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800264a:	4b26      	ldr	r3, [pc, #152]	@ (80026e4 <HAL_GPIO_Init+0x334>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800266e:	4a1d      	ldr	r2, [pc, #116]	@ (80026e4 <HAL_GPIO_Init+0x334>)
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002674:	4b1b      	ldr	r3, [pc, #108]	@ (80026e4 <HAL_GPIO_Init+0x334>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4013      	ands	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4313      	orrs	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002698:	4a12      	ldr	r2, [pc, #72]	@ (80026e4 <HAL_GPIO_Init+0x334>)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3301      	adds	r3, #1
 80026a2:	61fb      	str	r3, [r7, #28]
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b0f      	cmp	r3, #15
 80026a8:	f67f ae90 	bls.w	80023cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	3724      	adds	r7, #36	@ 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40023800 	.word	0x40023800
 80026c0:	40013800 	.word	0x40013800
 80026c4:	40020000 	.word	0x40020000
 80026c8:	40020400 	.word	0x40020400
 80026cc:	40020800 	.word	0x40020800
 80026d0:	40020c00 	.word	0x40020c00
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40021400 	.word	0x40021400
 80026dc:	40021800 	.word	0x40021800
 80026e0:	40021c00 	.word	0x40021c00
 80026e4:	40013c00 	.word	0x40013c00

080026e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b086      	sub	sp, #24
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e267      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	2b00      	cmp	r3, #0
 8002704:	d075      	beq.n	80027f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002706:	4b88      	ldr	r3, [pc, #544]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b04      	cmp	r3, #4
 8002710:	d00c      	beq.n	800272c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002712:	4b85      	ldr	r3, [pc, #532]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800271a:	2b08      	cmp	r3, #8
 800271c:	d112      	bne.n	8002744 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800271e:	4b82      	ldr	r3, [pc, #520]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002726:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800272a:	d10b      	bne.n	8002744 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800272c:	4b7e      	ldr	r3, [pc, #504]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d05b      	beq.n	80027f0 <HAL_RCC_OscConfig+0x108>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d157      	bne.n	80027f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e242      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800274c:	d106      	bne.n	800275c <HAL_RCC_OscConfig+0x74>
 800274e:	4b76      	ldr	r3, [pc, #472]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a75      	ldr	r2, [pc, #468]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e01d      	b.n	8002798 <HAL_RCC_OscConfig+0xb0>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0x98>
 8002766:	4b70      	ldr	r3, [pc, #448]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6f      	ldr	r2, [pc, #444]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 800276c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002770:	6013      	str	r3, [r2, #0]
 8002772:	4b6d      	ldr	r3, [pc, #436]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a6c      	ldr	r2, [pc, #432]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 8002778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	e00b      	b.n	8002798 <HAL_RCC_OscConfig+0xb0>
 8002780:	4b69      	ldr	r3, [pc, #420]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a68      	ldr	r2, [pc, #416]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 8002786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800278a:	6013      	str	r3, [r2, #0]
 800278c:	4b66      	ldr	r3, [pc, #408]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a65      	ldr	r2, [pc, #404]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 8002792:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d013      	beq.n	80027c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7ff f8e6 	bl	8001970 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027a8:	f7ff f8e2 	bl	8001970 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	@ 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e207      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ba:	4b5b      	ldr	r3, [pc, #364]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0xc0>
 80027c6:	e014      	b.n	80027f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c8:	f7ff f8d2 	bl	8001970 <HAL_GetTick>
 80027cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ce:	e008      	b.n	80027e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d0:	f7ff f8ce 	bl	8001970 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b64      	cmp	r3, #100	@ 0x64
 80027dc:	d901      	bls.n	80027e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e1f3      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e2:	4b51      	ldr	r3, [pc, #324]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1f0      	bne.n	80027d0 <HAL_RCC_OscConfig+0xe8>
 80027ee:	e000      	b.n	80027f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d063      	beq.n	80028c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 030c 	and.w	r3, r3, #12
 8002806:	2b00      	cmp	r3, #0
 8002808:	d00b      	beq.n	8002822 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280a:	4b47      	ldr	r3, [pc, #284]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002812:	2b08      	cmp	r3, #8
 8002814:	d11c      	bne.n	8002850 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002816:	4b44      	ldr	r3, [pc, #272]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d116      	bne.n	8002850 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002822:	4b41      	ldr	r3, [pc, #260]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <HAL_RCC_OscConfig+0x152>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d001      	beq.n	800283a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e1c7      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283a:	4b3b      	ldr	r3, [pc, #236]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	4937      	ldr	r1, [pc, #220]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284e:	e03a      	b.n	80028c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d020      	beq.n	800289a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002858:	4b34      	ldr	r3, [pc, #208]	@ (800292c <HAL_RCC_OscConfig+0x244>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800285e:	f7ff f887 	bl	8001970 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002866:	f7ff f883 	bl	8001970 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e1a8      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002878:	4b2b      	ldr	r3, [pc, #172]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002884:	4b28      	ldr	r3, [pc, #160]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	691b      	ldr	r3, [r3, #16]
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	4925      	ldr	r1, [pc, #148]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 8002894:	4313      	orrs	r3, r2
 8002896:	600b      	str	r3, [r1, #0]
 8002898:	e015      	b.n	80028c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289a:	4b24      	ldr	r3, [pc, #144]	@ (800292c <HAL_RCC_OscConfig+0x244>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7ff f866 	bl	8001970 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028a8:	f7ff f862 	bl	8001970 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e187      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ba:	4b1b      	ldr	r3, [pc, #108]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d036      	beq.n	8002940 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d016      	beq.n	8002908 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028da:	4b15      	ldr	r3, [pc, #84]	@ (8002930 <HAL_RCC_OscConfig+0x248>)
 80028dc:	2201      	movs	r2, #1
 80028de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e0:	f7ff f846 	bl	8001970 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e8:	f7ff f842 	bl	8001970 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e167      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002928 <HAL_RCC_OscConfig+0x240>)
 80028fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0f0      	beq.n	80028e8 <HAL_RCC_OscConfig+0x200>
 8002906:	e01b      	b.n	8002940 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002908:	4b09      	ldr	r3, [pc, #36]	@ (8002930 <HAL_RCC_OscConfig+0x248>)
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800290e:	f7ff f82f 	bl	8001970 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002914:	e00e      	b.n	8002934 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002916:	f7ff f82b 	bl	8001970 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d907      	bls.n	8002934 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e150      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
 8002928:	40023800 	.word	0x40023800
 800292c:	42470000 	.word	0x42470000
 8002930:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002934:	4b88      	ldr	r3, [pc, #544]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002936:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002938:	f003 0302 	and.w	r3, r3, #2
 800293c:	2b00      	cmp	r3, #0
 800293e:	d1ea      	bne.n	8002916 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 8097 	beq.w	8002a7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800294e:	2300      	movs	r3, #0
 8002950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002952:	4b81      	ldr	r3, [pc, #516]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10f      	bne.n	800297e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	60bb      	str	r3, [r7, #8]
 8002962:	4b7d      	ldr	r3, [pc, #500]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	4a7c      	ldr	r2, [pc, #496]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002968:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800296c:	6413      	str	r3, [r2, #64]	@ 0x40
 800296e:	4b7a      	ldr	r3, [pc, #488]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297a:	2301      	movs	r3, #1
 800297c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800297e:	4b77      	ldr	r3, [pc, #476]	@ (8002b5c <HAL_RCC_OscConfig+0x474>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d118      	bne.n	80029bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800298a:	4b74      	ldr	r3, [pc, #464]	@ (8002b5c <HAL_RCC_OscConfig+0x474>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a73      	ldr	r2, [pc, #460]	@ (8002b5c <HAL_RCC_OscConfig+0x474>)
 8002990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002996:	f7fe ffeb 	bl	8001970 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299e:	f7fe ffe7 	bl	8001970 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e10c      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b0:	4b6a      	ldr	r3, [pc, #424]	@ (8002b5c <HAL_RCC_OscConfig+0x474>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d106      	bne.n	80029d2 <HAL_RCC_OscConfig+0x2ea>
 80029c4:	4b64      	ldr	r3, [pc, #400]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029c8:	4a63      	ldr	r2, [pc, #396]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80029d0:	e01c      	b.n	8002a0c <HAL_RCC_OscConfig+0x324>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b05      	cmp	r3, #5
 80029d8:	d10c      	bne.n	80029f4 <HAL_RCC_OscConfig+0x30c>
 80029da:	4b5f      	ldr	r3, [pc, #380]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029de:	4a5e      	ldr	r2, [pc, #376]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029e0:	f043 0304 	orr.w	r3, r3, #4
 80029e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e6:	4b5c      	ldr	r3, [pc, #368]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ea:	4a5b      	ldr	r2, [pc, #364]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029f2:	e00b      	b.n	8002a0c <HAL_RCC_OscConfig+0x324>
 80029f4:	4b58      	ldr	r3, [pc, #352]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f8:	4a57      	ldr	r2, [pc, #348]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 80029fa:	f023 0301 	bic.w	r3, r3, #1
 80029fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a00:	4b55      	ldr	r3, [pc, #340]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a04:	4a54      	ldr	r2, [pc, #336]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a06:	f023 0304 	bic.w	r3, r3, #4
 8002a0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d015      	beq.n	8002a40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a14:	f7fe ffac 	bl	8001970 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1a:	e00a      	b.n	8002a32 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1c:	f7fe ffa8 	bl	8001970 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e0cb      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a32:	4b49      	ldr	r3, [pc, #292]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0ee      	beq.n	8002a1c <HAL_RCC_OscConfig+0x334>
 8002a3e:	e014      	b.n	8002a6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a40:	f7fe ff96 	bl	8001970 <HAL_GetTick>
 8002a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a46:	e00a      	b.n	8002a5e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a48:	f7fe ff92 	bl	8001970 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e0b5      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1ee      	bne.n	8002a48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a6a:	7dfb      	ldrb	r3, [r7, #23]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d105      	bne.n	8002a7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a70:	4b39      	ldr	r3, [pc, #228]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a74:	4a38      	ldr	r2, [pc, #224]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 80a1 	beq.w	8002bc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a86:	4b34      	ldr	r3, [pc, #208]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 030c 	and.w	r3, r3, #12
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d05c      	beq.n	8002b4c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d141      	bne.n	8002b1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a9a:	4b31      	ldr	r3, [pc, #196]	@ (8002b60 <HAL_RCC_OscConfig+0x478>)
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa0:	f7fe ff66 	bl	8001970 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa8:	f7fe ff62 	bl	8001970 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e087      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aba:	4b27      	ldr	r3, [pc, #156]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad4:	019b      	lsls	r3, r3, #6
 8002ad6:	431a      	orrs	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002adc:	085b      	lsrs	r3, r3, #1
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	041b      	lsls	r3, r3, #16
 8002ae2:	431a      	orrs	r2, r3
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae8:	061b      	lsls	r3, r3, #24
 8002aea:	491b      	ldr	r1, [pc, #108]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002aec:	4313      	orrs	r3, r2
 8002aee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002af0:	4b1b      	ldr	r3, [pc, #108]	@ (8002b60 <HAL_RCC_OscConfig+0x478>)
 8002af2:	2201      	movs	r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af6:	f7fe ff3b 	bl	8001970 <HAL_GetTick>
 8002afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002afc:	e008      	b.n	8002b10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002afe:	f7fe ff37 	bl	8001970 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d901      	bls.n	8002b10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b0c:	2303      	movs	r3, #3
 8002b0e:	e05c      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b10:	4b11      	ldr	r3, [pc, #68]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0f0      	beq.n	8002afe <HAL_RCC_OscConfig+0x416>
 8002b1c:	e054      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b1e:	4b10      	ldr	r3, [pc, #64]	@ (8002b60 <HAL_RCC_OscConfig+0x478>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b24:	f7fe ff24 	bl	8001970 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7fe ff20 	bl	8001970 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e045      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b3e:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <HAL_RCC_OscConfig+0x470>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x444>
 8002b4a:	e03d      	b.n	8002bc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d107      	bne.n	8002b64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e038      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40007000 	.word	0x40007000
 8002b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b64:	4b1b      	ldr	r3, [pc, #108]	@ (8002bd4 <HAL_RCC_OscConfig+0x4ec>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d028      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d121      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d11a      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b94:	4013      	ands	r3, r2
 8002b96:	687a      	ldr	r2, [r7, #4]
 8002b98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d111      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002baa:	085b      	lsrs	r3, r3, #1
 8002bac:	3b01      	subs	r3, #1
 8002bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800

08002bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0cc      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bec:	4b68      	ldr	r3, [pc, #416]	@ (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d90c      	bls.n	8002c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b65      	ldr	r3, [pc, #404]	@ (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	b2d2      	uxtb	r2, r2
 8002c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c02:	4b63      	ldr	r3, [pc, #396]	@ (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0b8      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d020      	beq.n	8002c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d005      	beq.n	8002c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c2c:	4b59      	ldr	r3, [pc, #356]	@ (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	4a58      	ldr	r2, [pc, #352]	@ (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002c36:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d005      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c44:	4b53      	ldr	r3, [pc, #332]	@ (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	4a52      	ldr	r2, [pc, #328]	@ (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002c4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c50:	4b50      	ldr	r3, [pc, #320]	@ (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689b      	ldr	r3, [r3, #8]
 8002c5c:	494d      	ldr	r1, [pc, #308]	@ (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d044      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d107      	bne.n	8002c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c76:	4b47      	ldr	r3, [pc, #284]	@ (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d119      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e07f      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d003      	beq.n	8002c96 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d107      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c96:	4b3f      	ldr	r3, [pc, #252]	@ (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e06f      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca6:	4b3b      	ldr	r3, [pc, #236]	@ (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e067      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb6:	4b37      	ldr	r3, [pc, #220]	@ (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f023 0203 	bic.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4934      	ldr	r1, [pc, #208]	@ (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc8:	f7fe fe52 	bl	8001970 <HAL_GetTick>
 8002ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd0:	f7fe fe4e 	bl	8001970 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e04f      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce6:	4b2b      	ldr	r3, [pc, #172]	@ (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 020c 	and.w	r2, r3, #12
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d1eb      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b25      	ldr	r3, [pc, #148]	@ (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d20c      	bcs.n	8002d20 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b22      	ldr	r3, [pc, #136]	@ (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d0e:	4b20      	ldr	r3, [pc, #128]	@ (8002d90 <HAL_RCC_ClockConfig+0x1b8>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d001      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e032      	b.n	8002d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d008      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d2c:	4b19      	ldr	r3, [pc, #100]	@ (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	4916      	ldr	r1, [pc, #88]	@ (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d009      	beq.n	8002d5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d4a:	4b12      	ldr	r3, [pc, #72]	@ (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	490e      	ldr	r1, [pc, #56]	@ (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d5e:	f000 f821 	bl	8002da4 <HAL_RCC_GetSysClockFreq>
 8002d62:	4602      	mov	r2, r0
 8002d64:	4b0b      	ldr	r3, [pc, #44]	@ (8002d94 <HAL_RCC_ClockConfig+0x1bc>)
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	091b      	lsrs	r3, r3, #4
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	490a      	ldr	r1, [pc, #40]	@ (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d70:	5ccb      	ldrb	r3, [r1, r3]
 8002d72:	fa22 f303 	lsr.w	r3, r2, r3
 8002d76:	4a09      	ldr	r2, [pc, #36]	@ (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d7a:	4b09      	ldr	r3, [pc, #36]	@ (8002da0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fe fdb2 	bl	80018e8 <HAL_InitTick>

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023c00 	.word	0x40023c00
 8002d94:	40023800 	.word	0x40023800
 8002d98:	0800a150 	.word	0x0800a150
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	20000004 	.word	0x20000004

08002da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002da8:	b094      	sub	sp, #80	@ 0x50
 8002daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dbc:	4b79      	ldr	r3, [pc, #484]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f003 030c 	and.w	r3, r3, #12
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d00d      	beq.n	8002de4 <HAL_RCC_GetSysClockFreq+0x40>
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	f200 80e1 	bhi.w	8002f90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d003      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0x3a>
 8002dd6:	e0db      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dd8:	4b73      	ldr	r3, [pc, #460]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002dda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ddc:	e0db      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dde:	4b73      	ldr	r3, [pc, #460]	@ (8002fac <HAL_RCC_GetSysClockFreq+0x208>)
 8002de0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002de2:	e0d8      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002de4:	4b6f      	ldr	r3, [pc, #444]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dee:	4b6d      	ldr	r3, [pc, #436]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d063      	beq.n	8002ec2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dfa:	4b6a      	ldr	r3, [pc, #424]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	099b      	lsrs	r3, r3, #6
 8002e00:	2200      	movs	r2, #0
 8002e02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e04:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e0c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e0e:	2300      	movs	r3, #0
 8002e10:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e16:	4622      	mov	r2, r4
 8002e18:	462b      	mov	r3, r5
 8002e1a:	f04f 0000 	mov.w	r0, #0
 8002e1e:	f04f 0100 	mov.w	r1, #0
 8002e22:	0159      	lsls	r1, r3, #5
 8002e24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e28:	0150      	lsls	r0, r2, #5
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	4621      	mov	r1, r4
 8002e30:	1a51      	subs	r1, r2, r1
 8002e32:	6139      	str	r1, [r7, #16]
 8002e34:	4629      	mov	r1, r5
 8002e36:	eb63 0301 	sbc.w	r3, r3, r1
 8002e3a:	617b      	str	r3, [r7, #20]
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002e48:	4659      	mov	r1, fp
 8002e4a:	018b      	lsls	r3, r1, #6
 8002e4c:	4651      	mov	r1, sl
 8002e4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e52:	4651      	mov	r1, sl
 8002e54:	018a      	lsls	r2, r1, #6
 8002e56:	4651      	mov	r1, sl
 8002e58:	ebb2 0801 	subs.w	r8, r2, r1
 8002e5c:	4659      	mov	r1, fp
 8002e5e:	eb63 0901 	sbc.w	r9, r3, r1
 8002e62:	f04f 0200 	mov.w	r2, #0
 8002e66:	f04f 0300 	mov.w	r3, #0
 8002e6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e76:	4690      	mov	r8, r2
 8002e78:	4699      	mov	r9, r3
 8002e7a:	4623      	mov	r3, r4
 8002e7c:	eb18 0303 	adds.w	r3, r8, r3
 8002e80:	60bb      	str	r3, [r7, #8]
 8002e82:	462b      	mov	r3, r5
 8002e84:	eb49 0303 	adc.w	r3, r9, r3
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	f04f 0300 	mov.w	r3, #0
 8002e92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e96:	4629      	mov	r1, r5
 8002e98:	024b      	lsls	r3, r1, #9
 8002e9a:	4621      	mov	r1, r4
 8002e9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	024a      	lsls	r2, r1, #9
 8002ea4:	4610      	mov	r0, r2
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002eaa:	2200      	movs	r2, #0
 8002eac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002eb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002eb4:	f7fd fef8 	bl	8000ca8 <__aeabi_uldivmod>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ec0:	e058      	b.n	8002f74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ec2:	4b38      	ldr	r3, [pc, #224]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	099b      	lsrs	r3, r3, #6
 8002ec8:	2200      	movs	r2, #0
 8002eca:	4618      	mov	r0, r3
 8002ecc:	4611      	mov	r1, r2
 8002ece:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002ed2:	623b      	str	r3, [r7, #32]
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ed8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002edc:	4642      	mov	r2, r8
 8002ede:	464b      	mov	r3, r9
 8002ee0:	f04f 0000 	mov.w	r0, #0
 8002ee4:	f04f 0100 	mov.w	r1, #0
 8002ee8:	0159      	lsls	r1, r3, #5
 8002eea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eee:	0150      	lsls	r0, r2, #5
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	4641      	mov	r1, r8
 8002ef6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002efa:	4649      	mov	r1, r9
 8002efc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f00:	f04f 0200 	mov.w	r2, #0
 8002f04:	f04f 0300 	mov.w	r3, #0
 8002f08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f14:	ebb2 040a 	subs.w	r4, r2, sl
 8002f18:	eb63 050b 	sbc.w	r5, r3, fp
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	00eb      	lsls	r3, r5, #3
 8002f26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f2a:	00e2      	lsls	r2, r4, #3
 8002f2c:	4614      	mov	r4, r2
 8002f2e:	461d      	mov	r5, r3
 8002f30:	4643      	mov	r3, r8
 8002f32:	18e3      	adds	r3, r4, r3
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	464b      	mov	r3, r9
 8002f38:	eb45 0303 	adc.w	r3, r5, r3
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	028b      	lsls	r3, r1, #10
 8002f4e:	4621      	mov	r1, r4
 8002f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f54:	4621      	mov	r1, r4
 8002f56:	028a      	lsls	r2, r1, #10
 8002f58:	4610      	mov	r0, r2
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f5e:	2200      	movs	r2, #0
 8002f60:	61bb      	str	r3, [r7, #24]
 8002f62:	61fa      	str	r2, [r7, #28]
 8002f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f68:	f7fd fe9e 	bl	8000ca8 <__aeabi_uldivmod>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4613      	mov	r3, r2
 8002f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f74:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	f003 0303 	and.w	r3, r3, #3
 8002f7e:	3301      	adds	r3, #1
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f8e:	e002      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f90:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f96:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3750      	adds	r7, #80	@ 0x50
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	00f42400 	.word	0x00f42400
 8002fac:	007a1200 	.word	0x007a1200

08002fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb4:	4b03      	ldr	r3, [pc, #12]	@ (8002fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000000 	.word	0x20000000

08002fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002fcc:	f7ff fff0 	bl	8002fb0 <HAL_RCC_GetHCLKFreq>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	4b05      	ldr	r3, [pc, #20]	@ (8002fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	0a9b      	lsrs	r3, r3, #10
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	4903      	ldr	r1, [pc, #12]	@ (8002fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fde:	5ccb      	ldrb	r3, [r1, r3]
 8002fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	0800a160 	.word	0x0800a160

08002ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ff4:	f7ff ffdc 	bl	8002fb0 <HAL_RCC_GetHCLKFreq>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b05      	ldr	r3, [pc, #20]	@ (8003010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	0b5b      	lsrs	r3, r3, #13
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	4903      	ldr	r1, [pc, #12]	@ (8003014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003006:	5ccb      	ldrb	r3, [r1, r3]
 8003008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800300c:	4618      	mov	r0, r3
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40023800 	.word	0x40023800
 8003014:	0800a160 	.word	0x0800a160

08003018 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e041      	b.n	80030ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d106      	bne.n	8003044 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fe fae0 	bl	8001604 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3304      	adds	r3, #4
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f000 f9b6 	bl	80033c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030ac:	2300      	movs	r3, #0
}
 80030ae:	4618      	mov	r0, r3
 80030b0:	3708      	adds	r7, #8
 80030b2:	46bd      	mov	sp, r7
 80030b4:	bd80      	pop	{r7, pc}
	...

080030b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d001      	beq.n	80030d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e04e      	b.n	800316e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a23      	ldr	r2, [pc, #140]	@ (800317c <HAL_TIM_Base_Start_IT+0xc4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d022      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x80>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030fa:	d01d      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x80>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1f      	ldr	r2, [pc, #124]	@ (8003180 <HAL_TIM_Base_Start_IT+0xc8>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d018      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x80>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1e      	ldr	r2, [pc, #120]	@ (8003184 <HAL_TIM_Base_Start_IT+0xcc>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d013      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x80>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1c      	ldr	r2, [pc, #112]	@ (8003188 <HAL_TIM_Base_Start_IT+0xd0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00e      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x80>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1b      	ldr	r2, [pc, #108]	@ (800318c <HAL_TIM_Base_Start_IT+0xd4>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d009      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x80>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a19      	ldr	r2, [pc, #100]	@ (8003190 <HAL_TIM_Base_Start_IT+0xd8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d004      	beq.n	8003138 <HAL_TIM_Base_Start_IT+0x80>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a18      	ldr	r2, [pc, #96]	@ (8003194 <HAL_TIM_Base_Start_IT+0xdc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d111      	bne.n	800315c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b06      	cmp	r3, #6
 8003148:	d010      	beq.n	800316c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f042 0201 	orr.w	r2, r2, #1
 8003158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315a:	e007      	b.n	800316c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0201 	orr.w	r2, r2, #1
 800316a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40010000 	.word	0x40010000
 8003180:	40000400 	.word	0x40000400
 8003184:	40000800 	.word	0x40000800
 8003188:	40000c00 	.word	0x40000c00
 800318c:	40010400 	.word	0x40010400
 8003190:	40014000 	.word	0x40014000
 8003194:	40001800 	.word	0x40001800

08003198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d020      	beq.n	80031fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d01b      	beq.n	80031fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f06f 0202 	mvn.w	r2, #2
 80031cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2201      	movs	r2, #1
 80031d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f8d2 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 80031e8:	e005      	b.n	80031f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f8c4 	bl	8003378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f000 f8d5 	bl	80033a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f003 0304 	and.w	r3, r3, #4
 8003202:	2b00      	cmp	r3, #0
 8003204:	d020      	beq.n	8003248 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d01b      	beq.n	8003248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0204 	mvn.w	r2, #4
 8003218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2202      	movs	r2, #2
 800321e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800322a:	2b00      	cmp	r3, #0
 800322c:	d003      	beq.n	8003236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f8ac 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 8003234:	e005      	b.n	8003242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f89e 	bl	8003378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f8af 	bl	80033a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d020      	beq.n	8003294 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f003 0308 	and.w	r3, r3, #8
 8003258:	2b00      	cmp	r3, #0
 800325a:	d01b      	beq.n	8003294 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0208 	mvn.w	r2, #8
 8003264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2204      	movs	r2, #4
 800326a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f003 0303 	and.w	r3, r3, #3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f886 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 8003280:	e005      	b.n	800328e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f878 	bl	8003378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f889 	bl	80033a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f003 0310 	and.w	r3, r3, #16
 800329a:	2b00      	cmp	r3, #0
 800329c:	d020      	beq.n	80032e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d01b      	beq.n	80032e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f06f 0210 	mvn.w	r2, #16
 80032b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2208      	movs	r2, #8
 80032b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d003      	beq.n	80032ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f860 	bl	800338c <HAL_TIM_IC_CaptureCallback>
 80032cc:	e005      	b.n	80032da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f852 	bl	8003378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f863 	bl	80033a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00c      	beq.n	8003304 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f003 0301 	and.w	r3, r3, #1
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d007      	beq.n	8003304 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f06f 0201 	mvn.w	r2, #1
 80032fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7fe f82a 	bl	8001358 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00c      	beq.n	8003328 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f982 	bl	800362c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00c      	beq.n	800334c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d007      	beq.n	800334c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f000 f834 	bl	80033b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00c      	beq.n	8003370 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f003 0320 	and.w	r3, r3, #32
 800335c:	2b00      	cmp	r3, #0
 800335e:	d007      	beq.n	8003370 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0220 	mvn.w	r2, #32
 8003368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f954 	bl	8003618 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a46      	ldr	r2, [pc, #280]	@ (80034f4 <TIM_Base_SetConfig+0x12c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d013      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033e6:	d00f      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a43      	ldr	r2, [pc, #268]	@ (80034f8 <TIM_Base_SetConfig+0x130>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d00b      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a42      	ldr	r2, [pc, #264]	@ (80034fc <TIM_Base_SetConfig+0x134>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d007      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a41      	ldr	r2, [pc, #260]	@ (8003500 <TIM_Base_SetConfig+0x138>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d003      	beq.n	8003408 <TIM_Base_SetConfig+0x40>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a40      	ldr	r2, [pc, #256]	@ (8003504 <TIM_Base_SetConfig+0x13c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d108      	bne.n	800341a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800340e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a35      	ldr	r2, [pc, #212]	@ (80034f4 <TIM_Base_SetConfig+0x12c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d02b      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003428:	d027      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a32      	ldr	r2, [pc, #200]	@ (80034f8 <TIM_Base_SetConfig+0x130>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d023      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a31      	ldr	r2, [pc, #196]	@ (80034fc <TIM_Base_SetConfig+0x134>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d01f      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a30      	ldr	r2, [pc, #192]	@ (8003500 <TIM_Base_SetConfig+0x138>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d01b      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a2f      	ldr	r2, [pc, #188]	@ (8003504 <TIM_Base_SetConfig+0x13c>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d017      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a2e      	ldr	r2, [pc, #184]	@ (8003508 <TIM_Base_SetConfig+0x140>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d013      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a2d      	ldr	r2, [pc, #180]	@ (800350c <TIM_Base_SetConfig+0x144>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00f      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a2c      	ldr	r2, [pc, #176]	@ (8003510 <TIM_Base_SetConfig+0x148>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00b      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a2b      	ldr	r2, [pc, #172]	@ (8003514 <TIM_Base_SetConfig+0x14c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d007      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a2a      	ldr	r2, [pc, #168]	@ (8003518 <TIM_Base_SetConfig+0x150>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d003      	beq.n	800347a <TIM_Base_SetConfig+0xb2>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a29      	ldr	r2, [pc, #164]	@ (800351c <TIM_Base_SetConfig+0x154>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d108      	bne.n	800348c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003480:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	4313      	orrs	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	695b      	ldr	r3, [r3, #20]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	68fa      	ldr	r2, [r7, #12]
 800349e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a10      	ldr	r2, [pc, #64]	@ (80034f4 <TIM_Base_SetConfig+0x12c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d003      	beq.n	80034c0 <TIM_Base_SetConfig+0xf8>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a12      	ldr	r2, [pc, #72]	@ (8003504 <TIM_Base_SetConfig+0x13c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d103      	bne.n	80034c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	691a      	ldr	r2, [r3, #16]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d105      	bne.n	80034e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f023 0201 	bic.w	r2, r3, #1
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	611a      	str	r2, [r3, #16]
  }
}
 80034e6:	bf00      	nop
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	40010000 	.word	0x40010000
 80034f8:	40000400 	.word	0x40000400
 80034fc:	40000800 	.word	0x40000800
 8003500:	40000c00 	.word	0x40000c00
 8003504:	40010400 	.word	0x40010400
 8003508:	40014000 	.word	0x40014000
 800350c:	40014400 	.word	0x40014400
 8003510:	40014800 	.word	0x40014800
 8003514:	40001800 	.word	0x40001800
 8003518:	40001c00 	.word	0x40001c00
 800351c:	40002000 	.word	0x40002000

08003520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003534:	2302      	movs	r3, #2
 8003536:	e05a      	b.n	80035ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800355e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a21      	ldr	r2, [pc, #132]	@ (80035fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d022      	beq.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003584:	d01d      	beq.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a1d      	ldr	r2, [pc, #116]	@ (8003600 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d018      	beq.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1b      	ldr	r2, [pc, #108]	@ (8003604 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1a      	ldr	r2, [pc, #104]	@ (8003608 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d00e      	beq.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a18      	ldr	r2, [pc, #96]	@ (800360c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d009      	beq.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a17      	ldr	r2, [pc, #92]	@ (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d004      	beq.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a15      	ldr	r2, [pc, #84]	@ (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d10c      	bne.n	80035dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40010000 	.word	0x40010000
 8003600:	40000400 	.word	0x40000400
 8003604:	40000800 	.word	0x40000800
 8003608:	40000c00 	.word	0x40000c00
 800360c:	40010400 	.word	0x40010400
 8003610:	40014000 	.word	0x40014000
 8003614:	40001800 	.word	0x40001800

08003618 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr

08003640 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e042      	b.n	80036d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003658:	b2db      	uxtb	r3, r3
 800365a:	2b00      	cmp	r3, #0
 800365c:	d106      	bne.n	800366c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7fe f83c 	bl	80016e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2224      	movs	r2, #36	@ 0x24
 8003670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003682:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 ffd9 	bl	800463c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003698:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	695a      	ldr	r2, [r3, #20]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80036a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68da      	ldr	r2, [r3, #12]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80036b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	@ 0x28
 80036e4:	af02      	add	r7, sp, #8
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	603b      	str	r3, [r7, #0]
 80036ec:	4613      	mov	r3, r2
 80036ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036fa:	b2db      	uxtb	r3, r3
 80036fc:	2b20      	cmp	r3, #32
 80036fe:	d175      	bne.n	80037ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <HAL_UART_Transmit+0x2c>
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d101      	bne.n	8003710 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e06e      	b.n	80037ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2221      	movs	r2, #33	@ 0x21
 800371a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800371e:	f7fe f927 	bl	8001970 <HAL_GetTick>
 8003722:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	88fa      	ldrh	r2, [r7, #6]
 8003728:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	88fa      	ldrh	r2, [r7, #6]
 800372e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003738:	d108      	bne.n	800374c <HAL_UART_Transmit+0x6c>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d104      	bne.n	800374c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003742:	2300      	movs	r3, #0
 8003744:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	e003      	b.n	8003754 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003750:	2300      	movs	r3, #0
 8003752:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003754:	e02e      	b.n	80037b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2200      	movs	r2, #0
 800375e:	2180      	movs	r1, #128	@ 0x80
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 fcb1 	bl	80040c8 <UART_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e03a      	b.n	80037ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10b      	bne.n	8003796 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	461a      	mov	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800378c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	3302      	adds	r3, #2
 8003792:	61bb      	str	r3, [r7, #24]
 8003794:	e007      	b.n	80037a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	781a      	ldrb	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	3301      	adds	r3, #1
 80037a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	3b01      	subs	r3, #1
 80037ae:	b29a      	uxth	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80037b8:	b29b      	uxth	r3, r3
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1cb      	bne.n	8003756 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	2200      	movs	r2, #0
 80037c6:	2140      	movs	r1, #64	@ 0x40
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 fc7d 	bl	80040c8 <UART_WaitOnFlagUntilTimeout>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e006      	b.n	80037ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e000      	b.n	80037ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
  }
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3720      	adds	r7, #32
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	4613      	mov	r3, r2
 8003802:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b20      	cmp	r3, #32
 800380e:	d112      	bne.n	8003836 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <HAL_UART_Receive_DMA+0x26>
 8003816:	88fb      	ldrh	r3, [r7, #6]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e00b      	b.n	8003838 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003826:	88fb      	ldrh	r3, [r7, #6]
 8003828:	461a      	mov	r2, r3
 800382a:	68b9      	ldr	r1, [r7, #8]
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 fca5 	bl	800417c <UART_Start_Receive_DMA>
 8003832:	4603      	mov	r3, r0
 8003834:	e000      	b.n	8003838 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003836:	2302      	movs	r3, #2
  }
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b090      	sub	sp, #64	@ 0x40
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003848:	2300      	movs	r3, #0
 800384a:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003856:	2b80      	cmp	r3, #128	@ 0x80
 8003858:	bf0c      	ite	eq
 800385a:	2301      	moveq	r3, #1
 800385c:	2300      	movne	r3, #0
 800385e:	b2db      	uxtb	r3, r3
 8003860:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b21      	cmp	r3, #33	@ 0x21
 800386c:	d128      	bne.n	80038c0 <HAL_UART_DMAStop+0x80>
 800386e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d025      	beq.n	80038c0 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3314      	adds	r3, #20
 800387a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387e:	e853 3f00 	ldrex	r3, [r3]
 8003882:	623b      	str	r3, [r7, #32]
   return(result);
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800388a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3314      	adds	r3, #20
 8003892:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003894:	633a      	str	r2, [r7, #48]	@ 0x30
 8003896:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003898:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800389a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800389c:	e841 2300 	strex	r3, r2, [r1]
 80038a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80038a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1e5      	bne.n	8003874 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d004      	beq.n	80038ba <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7fe fa7f 	bl	8001db8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fcf8 	bl	80042b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ca:	2b40      	cmp	r3, #64	@ 0x40
 80038cc:	bf0c      	ite	eq
 80038ce:	2301      	moveq	r3, #1
 80038d0:	2300      	movne	r3, #0
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b22      	cmp	r3, #34	@ 0x22
 80038e0:	d128      	bne.n	8003934 <HAL_UART_DMAStop+0xf4>
 80038e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d025      	beq.n	8003934 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3314      	adds	r3, #20
 80038ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	3314      	adds	r3, #20
 8003906:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003908:	61fa      	str	r2, [r7, #28]
 800390a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	69b9      	ldr	r1, [r7, #24]
 800390e:	69fa      	ldr	r2, [r7, #28]
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	617b      	str	r3, [r7, #20]
   return(result);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e5      	bne.n	80038e8 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d004      	beq.n	800392e <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe fa45 	bl	8001db8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fce6 	bl	8004300 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3740      	adds	r7, #64	@ 0x40
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b0ba      	sub	sp, #232	@ 0xe8
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003966:	2300      	movs	r3, #0
 8003968:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800396c:	2300      	movs	r3, #0
 800396e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003976:	f003 030f 	and.w	r3, r3, #15
 800397a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800397e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10f      	bne.n	80039a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800398a:	f003 0320 	and.w	r3, r3, #32
 800398e:	2b00      	cmp	r3, #0
 8003990:	d009      	beq.n	80039a6 <HAL_UART_IRQHandler+0x66>
 8003992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003996:	f003 0320 	and.w	r3, r3, #32
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fd8d 	bl	80044be <UART_Receive_IT>
      return;
 80039a4:	e25b      	b.n	8003e5e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80de 	beq.w	8003b6c <HAL_UART_IRQHandler+0x22c>
 80039b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d106      	bne.n	80039ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f000 80d1 	beq.w	8003b6c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00b      	beq.n	80039ee <HAL_UART_IRQHandler+0xae>
 80039d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e6:	f043 0201 	orr.w	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00b      	beq.n	8003a12 <HAL_UART_IRQHandler+0xd2>
 80039fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d005      	beq.n	8003a12 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	f043 0202 	orr.w	r2, r3, #2
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a16:	f003 0302 	and.w	r3, r3, #2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <HAL_UART_IRQHandler+0xf6>
 8003a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d005      	beq.n	8003a36 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a2e:	f043 0204 	orr.w	r2, r3, #4
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d011      	beq.n	8003a66 <HAL_UART_IRQHandler+0x126>
 8003a42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d105      	bne.n	8003a5a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d005      	beq.n	8003a66 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a5e:	f043 0208 	orr.w	r2, r3, #8
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	f000 81f2 	beq.w	8003e54 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a74:	f003 0320 	and.w	r3, r3, #32
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_UART_IRQHandler+0x14e>
 8003a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a80:	f003 0320 	and.w	r3, r3, #32
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 fd18 	bl	80044be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a98:	2b40      	cmp	r3, #64	@ 0x40
 8003a9a:	bf0c      	ite	eq
 8003a9c:	2301      	moveq	r3, #1
 8003a9e:	2300      	movne	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d103      	bne.n	8003aba <HAL_UART_IRQHandler+0x17a>
 8003ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d04f      	beq.n	8003b5a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fc20 	bl	8004300 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aca:	2b40      	cmp	r3, #64	@ 0x40
 8003acc:	d141      	bne.n	8003b52 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	3314      	adds	r3, #20
 8003ad4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003adc:	e853 3f00 	ldrex	r3, [r3]
 8003ae0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ae4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ae8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003aec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3314      	adds	r3, #20
 8003af6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003afa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003afe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b02:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b06:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b0a:	e841 2300 	strex	r3, r2, [r1]
 8003b0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b12:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1d9      	bne.n	8003ace <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d013      	beq.n	8003b4a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b26:	4a7e      	ldr	r2, [pc, #504]	@ (8003d20 <HAL_UART_IRQHandler+0x3e0>)
 8003b28:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7fe f9b2 	bl	8001e98 <HAL_DMA_Abort_IT>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d016      	beq.n	8003b68 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b44:	4610      	mov	r0, r2
 8003b46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b48:	e00e      	b.n	8003b68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f9a8 	bl	8003ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b50:	e00a      	b.n	8003b68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f9a4 	bl	8003ea0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b58:	e006      	b.n	8003b68 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f9a0 	bl	8003ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b66:	e175      	b.n	8003e54 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b68:	bf00      	nop
    return;
 8003b6a:	e173      	b.n	8003e54 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	f040 814f 	bne.w	8003e14 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b7a:	f003 0310 	and.w	r3, r3, #16
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8148 	beq.w	8003e14 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8141 	beq.w	8003e14 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b92:	2300      	movs	r3, #0
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	60bb      	str	r3, [r7, #8]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	60bb      	str	r3, [r7, #8]
 8003ba6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	695b      	ldr	r3, [r3, #20]
 8003bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb2:	2b40      	cmp	r3, #64	@ 0x40
 8003bb4:	f040 80b6 	bne.w	8003d24 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bc4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8145 	beq.w	8003e58 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	f080 813e 	bcs.w	8003e58 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003be2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bee:	f000 8088 	beq.w	8003d02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c00:	e853 3f00 	ldrex	r3, [r3]
 8003c04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	330c      	adds	r3, #12
 8003c1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c2e:	e841 2300 	strex	r3, r2, [r1]
 8003c32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1d9      	bne.n	8003bf2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3314      	adds	r3, #20
 8003c44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c48:	e853 3f00 	ldrex	r3, [r3]
 8003c4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c50:	f023 0301 	bic.w	r3, r3, #1
 8003c54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	3314      	adds	r3, #20
 8003c5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c6e:	e841 2300 	strex	r3, r2, [r1]
 8003c72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d1e1      	bne.n	8003c3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	3314      	adds	r3, #20
 8003c80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3314      	adds	r3, #20
 8003c9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003ca0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ca4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003cac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1e3      	bne.n	8003c7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	330c      	adds	r3, #12
 8003cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cca:	e853 3f00 	ldrex	r3, [r3]
 8003cce:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003cd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cd2:	f023 0310 	bic.w	r3, r3, #16
 8003cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ce4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ce6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003cf2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e3      	bne.n	8003cc0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe f85b 	bl	8001db8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2202      	movs	r2, #2
 8003d06:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	4619      	mov	r1, r3
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f8cb 	bl	8003eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d1e:	e09b      	b.n	8003e58 <HAL_UART_IRQHandler+0x518>
 8003d20:	080043c7 	.word	0x080043c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 808e 	beq.w	8003e5c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 8089 	beq.w	8003e5c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d60:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	330c      	adds	r3, #12
 8003d6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1e3      	bne.n	8003d4a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	3314      	adds	r3, #20
 8003d88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	623b      	str	r3, [r7, #32]
   return(result);
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	f023 0301 	bic.w	r3, r3, #1
 8003d98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3314      	adds	r3, #20
 8003da2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003da6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e3      	bne.n	8003d82 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	330c      	adds	r3, #12
 8003dce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	e853 3f00 	ldrex	r3, [r3]
 8003dd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 0310 	bic.w	r3, r3, #16
 8003dde:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	330c      	adds	r3, #12
 8003de8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003dec:	61fa      	str	r2, [r7, #28]
 8003dee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df0:	69b9      	ldr	r1, [r7, #24]
 8003df2:	69fa      	ldr	r2, [r7, #28]
 8003df4:	e841 2300 	strex	r3, r2, [r1]
 8003df8:	617b      	str	r3, [r7, #20]
   return(result);
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1e3      	bne.n	8003dc8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f851 	bl	8003eb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e12:	e023      	b.n	8003e5c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d009      	beq.n	8003e34 <HAL_UART_IRQHandler+0x4f4>
 8003e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f000 fade 	bl	80043ee <UART_Transmit_IT>
    return;
 8003e32:	e014      	b.n	8003e5e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00e      	beq.n	8003e5e <HAL_UART_IRQHandler+0x51e>
 8003e40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d008      	beq.n	8003e5e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 fb1e 	bl	800448e <UART_EndTransmit_IT>
    return;
 8003e52:	e004      	b.n	8003e5e <HAL_UART_IRQHandler+0x51e>
    return;
 8003e54:	bf00      	nop
 8003e56:	e002      	b.n	8003e5e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e58:	bf00      	nop
 8003e5a:	e000      	b.n	8003e5e <HAL_UART_IRQHandler+0x51e>
      return;
 8003e5c:	bf00      	nop
  }
}
 8003e5e:	37e8      	adds	r7, #232	@ 0xe8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b09c      	sub	sp, #112	@ 0x70
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d172      	bne.n	8003fce <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003ee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eea:	2200      	movs	r2, #0
 8003eec:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	330c      	adds	r3, #12
 8003ef4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003efe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003f0e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f10:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f14:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f1c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e5      	bne.n	8003eee <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3314      	adds	r3, #20
 8003f28:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	3314      	adds	r3, #20
 8003f40:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003f42:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f4a:	e841 2300 	strex	r3, r2, [r1]
 8003f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1e5      	bne.n	8003f22 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	3314      	adds	r3, #20
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f60:	e853 3f00 	ldrex	r3, [r3]
 8003f64:	623b      	str	r3, [r7, #32]
   return(result);
 8003f66:	6a3b      	ldr	r3, [r7, #32]
 8003f68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3314      	adds	r3, #20
 8003f74:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003f76:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f78:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f7e:	e841 2300 	strex	r3, r2, [r1]
 8003f82:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e5      	bne.n	8003f56 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d119      	bne.n	8003fce <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	330c      	adds	r3, #12
 8003fa0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	e853 3f00 	ldrex	r3, [r3]
 8003fa8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f023 0310 	bic.w	r3, r3, #16
 8003fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003fb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	330c      	adds	r3, #12
 8003fb8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003fba:	61fa      	str	r2, [r7, #28]
 8003fbc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbe:	69b9      	ldr	r1, [r7, #24]
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	e841 2300 	strex	r3, r2, [r1]
 8003fc6:	617b      	str	r3, [r7, #20]
   return(result);
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1e5      	bne.n	8003f9a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d106      	bne.n	8003fea <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fde:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003fe4:	f7ff ff66 	bl	8003eb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003fe8:	e002      	b.n	8003ff0 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003fea:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003fec:	f7ff ff44 	bl	8003e78 <HAL_UART_RxCpltCallback>
}
 8003ff0:	bf00      	nop
 8003ff2:	3770      	adds	r7, #112	@ 0x70
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004004:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2201      	movs	r2, #1
 800400a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004010:	2b01      	cmp	r3, #1
 8004012:	d108      	bne.n	8004026 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004018:	085b      	lsrs	r3, r3, #1
 800401a:	b29b      	uxth	r3, r3
 800401c:	4619      	mov	r1, r3
 800401e:	68f8      	ldr	r0, [r7, #12]
 8004020:	f7ff ff48 	bl	8003eb4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004024:	e002      	b.n	800402c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f7ff ff30 	bl	8003e8c <HAL_UART_RxHalfCpltCallback>
}
 800402c:	bf00      	nop
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800403c:	2300      	movs	r3, #0
 800403e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004044:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004050:	2b80      	cmp	r3, #128	@ 0x80
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b21      	cmp	r3, #33	@ 0x21
 8004066:	d108      	bne.n	800407a <UART_DMAError+0x46>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2200      	movs	r2, #0
 8004072:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004074:	68b8      	ldr	r0, [r7, #8]
 8004076:	f000 f91b 	bl	80042b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	695b      	ldr	r3, [r3, #20]
 8004080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004084:	2b40      	cmp	r3, #64	@ 0x40
 8004086:	bf0c      	ite	eq
 8004088:	2301      	moveq	r3, #1
 800408a:	2300      	movne	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004096:	b2db      	uxtb	r3, r3
 8004098:	2b22      	cmp	r3, #34	@ 0x22
 800409a:	d108      	bne.n	80040ae <UART_DMAError+0x7a>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d005      	beq.n	80040ae <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	2200      	movs	r2, #0
 80040a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80040a8:	68b8      	ldr	r0, [r7, #8]
 80040aa:	f000 f929 	bl	8004300 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b2:	f043 0210 	orr.w	r2, r3, #16
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040ba:	68b8      	ldr	r0, [r7, #8]
 80040bc:	f7ff fef0 	bl	8003ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	603b      	str	r3, [r7, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d8:	e03b      	b.n	8004152 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040da:	6a3b      	ldr	r3, [r7, #32]
 80040dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e0:	d037      	beq.n	8004152 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e2:	f7fd fc45 	bl	8001970 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	6a3a      	ldr	r2, [r7, #32]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d302      	bcc.n	80040f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e03a      	b.n	8004172 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f003 0304 	and.w	r3, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	d023      	beq.n	8004152 <UART_WaitOnFlagUntilTimeout+0x8a>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b80      	cmp	r3, #128	@ 0x80
 800410e:	d020      	beq.n	8004152 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b40      	cmp	r3, #64	@ 0x40
 8004114:	d01d      	beq.n	8004152 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b08      	cmp	r3, #8
 8004122:	d116      	bne.n	8004152 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	617b      	str	r3, [r7, #20]
 8004138:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f8e0 	bl	8004300 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2208      	movs	r2, #8
 8004144:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e00f      	b.n	8004172 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4013      	ands	r3, r2
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	429a      	cmp	r2, r3
 8004160:	bf0c      	ite	eq
 8004162:	2301      	moveq	r3, #1
 8004164:	2300      	movne	r3, #0
 8004166:	b2db      	uxtb	r3, r3
 8004168:	461a      	mov	r2, r3
 800416a:	79fb      	ldrb	r3, [r7, #7]
 800416c:	429a      	cmp	r2, r3
 800416e:	d0b4      	beq.n	80040da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004170:	2300      	movs	r3, #0
}
 8004172:	4618      	mov	r0, r3
 8004174:	3718      	adds	r7, #24
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
	...

0800417c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b098      	sub	sp, #96	@ 0x60
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	60b9      	str	r1, [r7, #8]
 8004186:	4613      	mov	r3, r2
 8004188:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	88fa      	ldrh	r2, [r7, #6]
 8004194:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2222      	movs	r2, #34	@ 0x22
 80041a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041a8:	4a3e      	ldr	r2, [pc, #248]	@ (80042a4 <UART_Start_Receive_DMA+0x128>)
 80041aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b0:	4a3d      	ldr	r2, [pc, #244]	@ (80042a8 <UART_Start_Receive_DMA+0x12c>)
 80041b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b8:	4a3c      	ldr	r2, [pc, #240]	@ (80042ac <UART_Start_Receive_DMA+0x130>)
 80041ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c0:	2200      	movs	r2, #0
 80041c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80041c4:	f107 0308 	add.w	r3, r7, #8
 80041c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3304      	adds	r3, #4
 80041d4:	4619      	mov	r1, r3
 80041d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	f7fd fd94 	bl	8001d08 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80041e0:	2300      	movs	r3, #0
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	613b      	str	r3, [r7, #16]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	613b      	str	r3, [r7, #16]
 80041f4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d019      	beq.n	8004232 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	330c      	adds	r3, #12
 8004204:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004206:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800420e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004210:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004214:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	330c      	adds	r3, #12
 800421c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800421e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004220:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004224:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800422c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e5      	bne.n	80041fe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3314      	adds	r3, #20
 8004238:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004244:	f043 0301 	orr.w	r3, r3, #1
 8004248:	657b      	str	r3, [r7, #84]	@ 0x54
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3314      	adds	r3, #20
 8004250:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004252:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004254:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004258:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e5      	bne.n	8004232 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	3314      	adds	r3, #20
 800426c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	e853 3f00 	ldrex	r3, [r3]
 8004274:	617b      	str	r3, [r7, #20]
   return(result);
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800427c:	653b      	str	r3, [r7, #80]	@ 0x50
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	3314      	adds	r3, #20
 8004284:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004286:	627a      	str	r2, [r7, #36]	@ 0x24
 8004288:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	6a39      	ldr	r1, [r7, #32]
 800428c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800428e:	e841 2300 	strex	r3, r2, [r1]
 8004292:	61fb      	str	r3, [r7, #28]
   return(result);
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1e5      	bne.n	8004266 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3760      	adds	r7, #96	@ 0x60
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	08003ecd 	.word	0x08003ecd
 80042a8:	08003ff9 	.word	0x08003ff9
 80042ac:	08004035 	.word	0x08004035

080042b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b089      	sub	sp, #36	@ 0x24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	330c      	adds	r3, #12
 80042be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80042ce:	61fb      	str	r3, [r7, #28]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	330c      	adds	r3, #12
 80042d6:	69fa      	ldr	r2, [r7, #28]
 80042d8:	61ba      	str	r2, [r7, #24]
 80042da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	6979      	ldr	r1, [r7, #20]
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	613b      	str	r3, [r7, #16]
   return(result);
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e5      	bne.n	80042b8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80042f4:	bf00      	nop
 80042f6:	3724      	adds	r7, #36	@ 0x24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004300:	b480      	push	{r7}
 8004302:	b095      	sub	sp, #84	@ 0x54
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	330c      	adds	r3, #12
 800430e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004312:	e853 3f00 	ldrex	r3, [r3]
 8004316:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800431e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	330c      	adds	r3, #12
 8004326:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004328:	643a      	str	r2, [r7, #64]	@ 0x40
 800432a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800432e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004330:	e841 2300 	strex	r3, r2, [r1]
 8004334:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e5      	bne.n	8004308 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3314      	adds	r3, #20
 8004342:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	61fb      	str	r3, [r7, #28]
   return(result);
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3314      	adds	r3, #20
 800435a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800435c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800435e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004362:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e5      	bne.n	800433c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004374:	2b01      	cmp	r3, #1
 8004376:	d119      	bne.n	80043ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	330c      	adds	r3, #12
 800437e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	e853 3f00 	ldrex	r3, [r3]
 8004386:	60bb      	str	r3, [r7, #8]
   return(result);
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f023 0310 	bic.w	r3, r3, #16
 800438e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	330c      	adds	r3, #12
 8004396:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004398:	61ba      	str	r2, [r7, #24]
 800439a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	6979      	ldr	r1, [r7, #20]
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	e841 2300 	strex	r3, r2, [r1]
 80043a4:	613b      	str	r3, [r7, #16]
   return(result);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d1e5      	bne.n	8004378 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2220      	movs	r2, #32
 80043b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80043ba:	bf00      	nop
 80043bc:	3754      	adds	r7, #84	@ 0x54
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2200      	movs	r2, #0
 80043de:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043e0:	68f8      	ldr	r0, [r7, #12]
 80043e2:	f7ff fd5d 	bl	8003ea0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043e6:	bf00      	nop
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b085      	sub	sp, #20
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b21      	cmp	r3, #33	@ 0x21
 8004400:	d13e      	bne.n	8004480 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800440a:	d114      	bne.n	8004436 <UART_Transmit_IT+0x48>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	691b      	ldr	r3, [r3, #16]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d110      	bne.n	8004436 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	881b      	ldrh	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004428:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	1c9a      	adds	r2, r3, #2
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	621a      	str	r2, [r3, #32]
 8004434:	e008      	b.n	8004448 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a1b      	ldr	r3, [r3, #32]
 800443a:	1c59      	adds	r1, r3, #1
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6211      	str	r1, [r2, #32]
 8004440:	781a      	ldrb	r2, [r3, #0]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29b      	uxth	r3, r3
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	4619      	mov	r1, r3
 8004456:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10f      	bne.n	800447c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800446a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800447a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800447c:	2300      	movs	r3, #0
 800447e:	e000      	b.n	8004482 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004480:	2302      	movs	r3, #2
  }
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f7ff fcd8 	bl	8003e64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3708      	adds	r7, #8
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80044be:	b580      	push	{r7, lr}
 80044c0:	b08c      	sub	sp, #48	@ 0x30
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b22      	cmp	r3, #34	@ 0x22
 80044d0:	f040 80ae 	bne.w	8004630 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044dc:	d117      	bne.n	800450e <UART_Receive_IT+0x50>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d113      	bne.n	800450e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044e6:	2300      	movs	r3, #0
 80044e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004500:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004506:	1c9a      	adds	r2, r3, #2
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	629a      	str	r2, [r3, #40]	@ 0x28
 800450c:	e026      	b.n	800455c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004512:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004514:	2300      	movs	r3, #0
 8004516:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004520:	d007      	beq.n	8004532 <UART_Receive_IT+0x74>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10a      	bne.n	8004540 <UART_Receive_IT+0x82>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d106      	bne.n	8004540 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	b2da      	uxtb	r2, r3
 800453a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453c:	701a      	strb	r2, [r3, #0]
 800453e:	e008      	b.n	8004552 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800454c:	b2da      	uxtb	r2, r3
 800454e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004550:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004556:	1c5a      	adds	r2, r3, #1
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004560:	b29b      	uxth	r3, r3
 8004562:	3b01      	subs	r3, #1
 8004564:	b29b      	uxth	r3, r3
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	4619      	mov	r1, r3
 800456a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800456c:	2b00      	cmp	r3, #0
 800456e:	d15d      	bne.n	800462c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0220 	bic.w	r2, r2, #32
 800457e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68da      	ldr	r2, [r3, #12]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800458e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	695a      	ldr	r2, [r3, #20]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f022 0201 	bic.w	r2, r2, #1
 800459e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2220      	movs	r2, #32
 80045a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d135      	bne.n	8004622 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	613b      	str	r3, [r7, #16]
   return(result);
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f023 0310 	bic.w	r3, r3, #16
 80045d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	330c      	adds	r3, #12
 80045da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045dc:	623a      	str	r2, [r7, #32]
 80045de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	69f9      	ldr	r1, [r7, #28]
 80045e2:	6a3a      	ldr	r2, [r7, #32]
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e5      	bne.n	80045bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0310 	and.w	r3, r3, #16
 80045fa:	2b10      	cmp	r3, #16
 80045fc:	d10a      	bne.n	8004614 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045fe:	2300      	movs	r3, #0
 8004600:	60fb      	str	r3, [r7, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	60fb      	str	r3, [r7, #12]
 8004612:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004618:	4619      	mov	r1, r3
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff fc4a 	bl	8003eb4 <HAL_UARTEx_RxEventCallback>
 8004620:	e002      	b.n	8004628 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff fc28 	bl	8003e78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	e002      	b.n	8004632 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800462c:	2300      	movs	r3, #0
 800462e:	e000      	b.n	8004632 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004630:	2302      	movs	r3, #2
  }
}
 8004632:	4618      	mov	r0, r3
 8004634:	3730      	adds	r7, #48	@ 0x30
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800463c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004640:	b0c0      	sub	sp, #256	@ 0x100
 8004642:	af00      	add	r7, sp, #0
 8004644:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004658:	68d9      	ldr	r1, [r3, #12]
 800465a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	ea40 0301 	orr.w	r3, r0, r1
 8004664:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	431a      	orrs	r2, r3
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	431a      	orrs	r2, r3
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	4313      	orrs	r3, r2
 8004684:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004694:	f021 010c 	bic.w	r1, r1, #12
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80046a2:	430b      	orrs	r3, r1
 80046a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	695b      	ldr	r3, [r3, #20]
 80046ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b6:	6999      	ldr	r1, [r3, #24]
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	ea40 0301 	orr.w	r3, r0, r1
 80046c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	4b8f      	ldr	r3, [pc, #572]	@ (8004908 <UART_SetConfig+0x2cc>)
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d005      	beq.n	80046dc <UART_SetConfig+0xa0>
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	4b8d      	ldr	r3, [pc, #564]	@ (800490c <UART_SetConfig+0x2d0>)
 80046d8:	429a      	cmp	r2, r3
 80046da:	d104      	bne.n	80046e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046dc:	f7fe fc88 	bl	8002ff0 <HAL_RCC_GetPCLK2Freq>
 80046e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80046e4:	e003      	b.n	80046ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046e6:	f7fe fc6f 	bl	8002fc8 <HAL_RCC_GetPCLK1Freq>
 80046ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f2:	69db      	ldr	r3, [r3, #28]
 80046f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046f8:	f040 810c 	bne.w	8004914 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004700:	2200      	movs	r2, #0
 8004702:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004706:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800470a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800470e:	4622      	mov	r2, r4
 8004710:	462b      	mov	r3, r5
 8004712:	1891      	adds	r1, r2, r2
 8004714:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004716:	415b      	adcs	r3, r3
 8004718:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800471a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800471e:	4621      	mov	r1, r4
 8004720:	eb12 0801 	adds.w	r8, r2, r1
 8004724:	4629      	mov	r1, r5
 8004726:	eb43 0901 	adc.w	r9, r3, r1
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004736:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800473a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800473e:	4690      	mov	r8, r2
 8004740:	4699      	mov	r9, r3
 8004742:	4623      	mov	r3, r4
 8004744:	eb18 0303 	adds.w	r3, r8, r3
 8004748:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800474c:	462b      	mov	r3, r5
 800474e:	eb49 0303 	adc.w	r3, r9, r3
 8004752:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004762:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004766:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800476a:	460b      	mov	r3, r1
 800476c:	18db      	adds	r3, r3, r3
 800476e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004770:	4613      	mov	r3, r2
 8004772:	eb42 0303 	adc.w	r3, r2, r3
 8004776:	657b      	str	r3, [r7, #84]	@ 0x54
 8004778:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800477c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004780:	f7fc fa92 	bl	8000ca8 <__aeabi_uldivmod>
 8004784:	4602      	mov	r2, r0
 8004786:	460b      	mov	r3, r1
 8004788:	4b61      	ldr	r3, [pc, #388]	@ (8004910 <UART_SetConfig+0x2d4>)
 800478a:	fba3 2302 	umull	r2, r3, r3, r2
 800478e:	095b      	lsrs	r3, r3, #5
 8004790:	011c      	lsls	r4, r3, #4
 8004792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004796:	2200      	movs	r2, #0
 8004798:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800479c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80047a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80047a4:	4642      	mov	r2, r8
 80047a6:	464b      	mov	r3, r9
 80047a8:	1891      	adds	r1, r2, r2
 80047aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80047ac:	415b      	adcs	r3, r3
 80047ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80047b4:	4641      	mov	r1, r8
 80047b6:	eb12 0a01 	adds.w	sl, r2, r1
 80047ba:	4649      	mov	r1, r9
 80047bc:	eb43 0b01 	adc.w	fp, r3, r1
 80047c0:	f04f 0200 	mov.w	r2, #0
 80047c4:	f04f 0300 	mov.w	r3, #0
 80047c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047d4:	4692      	mov	sl, r2
 80047d6:	469b      	mov	fp, r3
 80047d8:	4643      	mov	r3, r8
 80047da:	eb1a 0303 	adds.w	r3, sl, r3
 80047de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047e2:	464b      	mov	r3, r9
 80047e4:	eb4b 0303 	adc.w	r3, fp, r3
 80047e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80047ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80047fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004800:	460b      	mov	r3, r1
 8004802:	18db      	adds	r3, r3, r3
 8004804:	643b      	str	r3, [r7, #64]	@ 0x40
 8004806:	4613      	mov	r3, r2
 8004808:	eb42 0303 	adc.w	r3, r2, r3
 800480c:	647b      	str	r3, [r7, #68]	@ 0x44
 800480e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004812:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004816:	f7fc fa47 	bl	8000ca8 <__aeabi_uldivmod>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	4611      	mov	r1, r2
 8004820:	4b3b      	ldr	r3, [pc, #236]	@ (8004910 <UART_SetConfig+0x2d4>)
 8004822:	fba3 2301 	umull	r2, r3, r3, r1
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	2264      	movs	r2, #100	@ 0x64
 800482a:	fb02 f303 	mul.w	r3, r2, r3
 800482e:	1acb      	subs	r3, r1, r3
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004836:	4b36      	ldr	r3, [pc, #216]	@ (8004910 <UART_SetConfig+0x2d4>)
 8004838:	fba3 2302 	umull	r2, r3, r3, r2
 800483c:	095b      	lsrs	r3, r3, #5
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004844:	441c      	add	r4, r3
 8004846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800484a:	2200      	movs	r2, #0
 800484c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004850:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004854:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004858:	4642      	mov	r2, r8
 800485a:	464b      	mov	r3, r9
 800485c:	1891      	adds	r1, r2, r2
 800485e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004860:	415b      	adcs	r3, r3
 8004862:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004864:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004868:	4641      	mov	r1, r8
 800486a:	1851      	adds	r1, r2, r1
 800486c:	6339      	str	r1, [r7, #48]	@ 0x30
 800486e:	4649      	mov	r1, r9
 8004870:	414b      	adcs	r3, r1
 8004872:	637b      	str	r3, [r7, #52]	@ 0x34
 8004874:	f04f 0200 	mov.w	r2, #0
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004880:	4659      	mov	r1, fp
 8004882:	00cb      	lsls	r3, r1, #3
 8004884:	4651      	mov	r1, sl
 8004886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800488a:	4651      	mov	r1, sl
 800488c:	00ca      	lsls	r2, r1, #3
 800488e:	4610      	mov	r0, r2
 8004890:	4619      	mov	r1, r3
 8004892:	4603      	mov	r3, r0
 8004894:	4642      	mov	r2, r8
 8004896:	189b      	adds	r3, r3, r2
 8004898:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800489c:	464b      	mov	r3, r9
 800489e:	460a      	mov	r2, r1
 80048a0:	eb42 0303 	adc.w	r3, r2, r3
 80048a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80048b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80048b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80048bc:	460b      	mov	r3, r1
 80048be:	18db      	adds	r3, r3, r3
 80048c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048c2:	4613      	mov	r3, r2
 80048c4:	eb42 0303 	adc.w	r3, r2, r3
 80048c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80048d2:	f7fc f9e9 	bl	8000ca8 <__aeabi_uldivmod>
 80048d6:	4602      	mov	r2, r0
 80048d8:	460b      	mov	r3, r1
 80048da:	4b0d      	ldr	r3, [pc, #52]	@ (8004910 <UART_SetConfig+0x2d4>)
 80048dc:	fba3 1302 	umull	r1, r3, r3, r2
 80048e0:	095b      	lsrs	r3, r3, #5
 80048e2:	2164      	movs	r1, #100	@ 0x64
 80048e4:	fb01 f303 	mul.w	r3, r1, r3
 80048e8:	1ad3      	subs	r3, r2, r3
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	3332      	adds	r3, #50	@ 0x32
 80048ee:	4a08      	ldr	r2, [pc, #32]	@ (8004910 <UART_SetConfig+0x2d4>)
 80048f0:	fba2 2303 	umull	r2, r3, r2, r3
 80048f4:	095b      	lsrs	r3, r3, #5
 80048f6:	f003 0207 	and.w	r2, r3, #7
 80048fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4422      	add	r2, r4
 8004902:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004904:	e106      	b.n	8004b14 <UART_SetConfig+0x4d8>
 8004906:	bf00      	nop
 8004908:	40011000 	.word	0x40011000
 800490c:	40011400 	.word	0x40011400
 8004910:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004918:	2200      	movs	r2, #0
 800491a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800491e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004922:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004926:	4642      	mov	r2, r8
 8004928:	464b      	mov	r3, r9
 800492a:	1891      	adds	r1, r2, r2
 800492c:	6239      	str	r1, [r7, #32]
 800492e:	415b      	adcs	r3, r3
 8004930:	627b      	str	r3, [r7, #36]	@ 0x24
 8004932:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004936:	4641      	mov	r1, r8
 8004938:	1854      	adds	r4, r2, r1
 800493a:	4649      	mov	r1, r9
 800493c:	eb43 0501 	adc.w	r5, r3, r1
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	00eb      	lsls	r3, r5, #3
 800494a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800494e:	00e2      	lsls	r2, r4, #3
 8004950:	4614      	mov	r4, r2
 8004952:	461d      	mov	r5, r3
 8004954:	4643      	mov	r3, r8
 8004956:	18e3      	adds	r3, r4, r3
 8004958:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800495c:	464b      	mov	r3, r9
 800495e:	eb45 0303 	adc.w	r3, r5, r3
 8004962:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004972:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004976:	f04f 0200 	mov.w	r2, #0
 800497a:	f04f 0300 	mov.w	r3, #0
 800497e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004982:	4629      	mov	r1, r5
 8004984:	008b      	lsls	r3, r1, #2
 8004986:	4621      	mov	r1, r4
 8004988:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800498c:	4621      	mov	r1, r4
 800498e:	008a      	lsls	r2, r1, #2
 8004990:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004994:	f7fc f988 	bl	8000ca8 <__aeabi_uldivmod>
 8004998:	4602      	mov	r2, r0
 800499a:	460b      	mov	r3, r1
 800499c:	4b60      	ldr	r3, [pc, #384]	@ (8004b20 <UART_SetConfig+0x4e4>)
 800499e:	fba3 2302 	umull	r2, r3, r3, r2
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	011c      	lsls	r4, r3, #4
 80049a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049aa:	2200      	movs	r2, #0
 80049ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80049b8:	4642      	mov	r2, r8
 80049ba:	464b      	mov	r3, r9
 80049bc:	1891      	adds	r1, r2, r2
 80049be:	61b9      	str	r1, [r7, #24]
 80049c0:	415b      	adcs	r3, r3
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049c8:	4641      	mov	r1, r8
 80049ca:	1851      	adds	r1, r2, r1
 80049cc:	6139      	str	r1, [r7, #16]
 80049ce:	4649      	mov	r1, r9
 80049d0:	414b      	adcs	r3, r1
 80049d2:	617b      	str	r3, [r7, #20]
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049e0:	4659      	mov	r1, fp
 80049e2:	00cb      	lsls	r3, r1, #3
 80049e4:	4651      	mov	r1, sl
 80049e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ea:	4651      	mov	r1, sl
 80049ec:	00ca      	lsls	r2, r1, #3
 80049ee:	4610      	mov	r0, r2
 80049f0:	4619      	mov	r1, r3
 80049f2:	4603      	mov	r3, r0
 80049f4:	4642      	mov	r2, r8
 80049f6:	189b      	adds	r3, r3, r2
 80049f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80049fc:	464b      	mov	r3, r9
 80049fe:	460a      	mov	r2, r1
 8004a00:	eb42 0303 	adc.w	r3, r2, r3
 8004a04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a20:	4649      	mov	r1, r9
 8004a22:	008b      	lsls	r3, r1, #2
 8004a24:	4641      	mov	r1, r8
 8004a26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a2a:	4641      	mov	r1, r8
 8004a2c:	008a      	lsls	r2, r1, #2
 8004a2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a32:	f7fc f939 	bl	8000ca8 <__aeabi_uldivmod>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	4b38      	ldr	r3, [pc, #224]	@ (8004b20 <UART_SetConfig+0x4e4>)
 8004a3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	2264      	movs	r2, #100	@ 0x64
 8004a46:	fb02 f303 	mul.w	r3, r2, r3
 8004a4a:	1acb      	subs	r3, r1, r3
 8004a4c:	011b      	lsls	r3, r3, #4
 8004a4e:	3332      	adds	r3, #50	@ 0x32
 8004a50:	4a33      	ldr	r2, [pc, #204]	@ (8004b20 <UART_SetConfig+0x4e4>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a5c:	441c      	add	r4, r3
 8004a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a62:	2200      	movs	r2, #0
 8004a64:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a66:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a6c:	4642      	mov	r2, r8
 8004a6e:	464b      	mov	r3, r9
 8004a70:	1891      	adds	r1, r2, r2
 8004a72:	60b9      	str	r1, [r7, #8]
 8004a74:	415b      	adcs	r3, r3
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a7c:	4641      	mov	r1, r8
 8004a7e:	1851      	adds	r1, r2, r1
 8004a80:	6039      	str	r1, [r7, #0]
 8004a82:	4649      	mov	r1, r9
 8004a84:	414b      	adcs	r3, r1
 8004a86:	607b      	str	r3, [r7, #4]
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	f04f 0300 	mov.w	r3, #0
 8004a90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004a94:	4659      	mov	r1, fp
 8004a96:	00cb      	lsls	r3, r1, #3
 8004a98:	4651      	mov	r1, sl
 8004a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a9e:	4651      	mov	r1, sl
 8004aa0:	00ca      	lsls	r2, r1, #3
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	4642      	mov	r2, r8
 8004aaa:	189b      	adds	r3, r3, r2
 8004aac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004aae:	464b      	mov	r3, r9
 8004ab0:	460a      	mov	r2, r1
 8004ab2:	eb42 0303 	adc.w	r3, r2, r3
 8004ab6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ac2:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ad0:	4649      	mov	r1, r9
 8004ad2:	008b      	lsls	r3, r1, #2
 8004ad4:	4641      	mov	r1, r8
 8004ad6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ada:	4641      	mov	r1, r8
 8004adc:	008a      	lsls	r2, r1, #2
 8004ade:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004ae2:	f7fc f8e1 	bl	8000ca8 <__aeabi_uldivmod>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4b0d      	ldr	r3, [pc, #52]	@ (8004b20 <UART_SetConfig+0x4e4>)
 8004aec:	fba3 1302 	umull	r1, r3, r3, r2
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	2164      	movs	r1, #100	@ 0x64
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	3332      	adds	r3, #50	@ 0x32
 8004afe:	4a08      	ldr	r2, [pc, #32]	@ (8004b20 <UART_SetConfig+0x4e4>)
 8004b00:	fba2 2303 	umull	r2, r3, r2, r3
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	f003 020f 	and.w	r2, r3, #15
 8004b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4422      	add	r2, r4
 8004b12:	609a      	str	r2, [r3, #8]
}
 8004b14:	bf00      	nop
 8004b16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b20:	51eb851f 	.word	0x51eb851f

08004b24 <test_func>:

int counter = 0;
float voltage = 3.3f;
char name[32] = "STM32";

int test_func(int argc, char **argv) {
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
    printf("test_func called with %d args\n", argc);
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	4803      	ldr	r0, [pc, #12]	@ (8004b40 <test_func+0x1c>)
 8004b32:	f002 fb7b 	bl	800722c <iprintf>
    return 0;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	08009ff0 	.word	0x08009ff0

08004b44 <shell_uart_parser>:


void shell_uart_parser(const uint8_t *data, uint16_t len) {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	807b      	strh	r3, [r7, #2]
	shell_exec((const char *)data);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fb7d 	bl	8005250 <shell_exec>
	uart_manager_clear(&huart1);
 8004b56:	4803      	ldr	r0, [pc, #12]	@ (8004b64 <shell_uart_parser+0x20>)
 8004b58:	f000 f8f8 	bl	8004d4c <uart_manager_clear>

}
 8004b5c:	bf00      	nop
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	200002a8 	.word	0x200002a8

08004b68 <sf_hardware_init>:
/**
 * @brief 初始化硬件相关资源，如串口解析器注册等。
 *
 * @return uint8_t 返回 0 表示初始化成功，其他值保留为错误码
 */
static uint8_t sf_hardware_init(){
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8004b6c:	4806      	ldr	r0, [pc, #24]	@ (8004b88 <sf_hardware_init+0x20>)
 8004b6e:	f7fe faa3 	bl	80030b8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8004b72:	4806      	ldr	r0, [pc, #24]	@ (8004b8c <sf_hardware_init+0x24>)
 8004b74:	f7fe faa0 	bl	80030b8 <HAL_TIM_Base_Start_IT>
	uart_manager_register(&huart1, shell_uart_parser);
 8004b78:	4905      	ldr	r1, [pc, #20]	@ (8004b90 <sf_hardware_init+0x28>)
 8004b7a:	4806      	ldr	r0, [pc, #24]	@ (8004b94 <sf_hardware_init+0x2c>)
 8004b7c:	f000 f878 	bl	8004c70 <uart_manager_register>


	return 0;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	bd80      	pop	{r7, pc}
 8004b86:	bf00      	nop
 8004b88:	20000218 	.word	0x20000218
 8004b8c:	20000260 	.word	0x20000260
 8004b90:	08004b45 	.word	0x08004b45
 8004b94:	200002a8 	.word	0x200002a8

08004b98 <sf_software_init>:
/**
 * @brief 初始化软件相关资源，包括变量、函数注册以及任务系统启动。
 *
 * @return uint8_t 返回 0 表示初始化成功，其他值保留为错误码
 */
static uint8_t sf_software_init(){
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af02      	add	r7, sp, #8

	SHELL_VAR_REGISTER(counter, VAR_TYPE_INT);
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	4911      	ldr	r1, [pc, #68]	@ (8004be8 <sf_software_init+0x50>)
 8004ba2:	4812      	ldr	r0, [pc, #72]	@ (8004bec <sf_software_init+0x54>)
 8004ba4:	f000 fc32 	bl	800540c <shell_register_variable>
	SHELL_VAR_REGISTER(voltage, VAR_TYPE_FLOAT);
 8004ba8:	2201      	movs	r2, #1
 8004baa:	4911      	ldr	r1, [pc, #68]	@ (8004bf0 <sf_software_init+0x58>)
 8004bac:	4811      	ldr	r0, [pc, #68]	@ (8004bf4 <sf_software_init+0x5c>)
 8004bae:	f000 fc2d 	bl	800540c <shell_register_variable>
	SHELL_VAR_REGISTER(name, VAR_TYPE_STRING);
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	4910      	ldr	r1, [pc, #64]	@ (8004bf8 <sf_software_init+0x60>)
 8004bb6:	4811      	ldr	r0, [pc, #68]	@ (8004bfc <sf_software_init+0x64>)
 8004bb8:	f000 fc28 	bl	800540c <shell_register_variable>
	SHELL_FUNC_REGISTER(test_func);
 8004bbc:	4910      	ldr	r1, [pc, #64]	@ (8004c00 <sf_software_init+0x68>)
 8004bbe:	4811      	ldr	r0, [pc, #68]	@ (8004c04 <sf_software_init+0x6c>)
 8004bc0:	f000 face 	bl	8005160 <shell_register_function>


	task_system_init();
 8004bc4:	f000 f9b8 	bl	8004f38 <task_system_init>
	task_add(TASK_COMM_PROTOCOL,
 8004bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004bcc:	9301      	str	r3, [sp, #4]
 8004bce:	2364      	movs	r3, #100	@ 0x64
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	490c      	ldr	r1, [pc, #48]	@ (8004c08 <sf_software_init+0x70>)
 8004bd8:	2002      	movs	r0, #2
 8004bda:	f000 fa2b 	bl	8005034 <task_add>
			 NULL,
			 0,
			 100,
			 TASK_FOREVER);

	return 0;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	200003b4 	.word	0x200003b4
 8004bec:	0800a010 	.word	0x0800a010
 8004bf0:	2000000c 	.word	0x2000000c
 8004bf4:	0800a018 	.word	0x0800a018
 8004bf8:	20000010 	.word	0x20000010
 8004bfc:	0800a020 	.word	0x0800a020
 8004c00:	08004b25 	.word	0x08004b25
 8004c04:	0800a028 	.word	0x0800a028
 8004c08:	08004e8d 	.word	0x08004e8d

08004c0c <sf_entry>:

/**
 * @brief 系统统一初始化入口，调用硬件和软件初始化函数。
 */
void sf_entry(void){
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
	 sf_hardware_init();
 8004c10:	f7ff ffaa 	bl	8004b68 <sf_hardware_init>
	 sf_software_init();
 8004c14:	f7ff ffc0 	bl	8004b98 <sf_software_init>
 }
 8004c18:	bf00      	nop
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <sf_run>:
 * @brief 按顺序执行多个任务（任务 ID 通过可变参数传入）。
 *
 * @param count 要执行的任务数量
 * @param ...   后续是 count 个 int 类型任务 ID
 */
static void sf_run(int count,...){
 8004c1c:	b40f      	push	{r0, r1, r2, r3}
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b082      	sub	sp, #8
 8004c22:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, count);
 8004c24:	f107 0314 	add.w	r3, r7, #20
 8004c28:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < count; i++) {
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	607b      	str	r3, [r7, #4]
 8004c2e:	e00a      	b.n	8004c46 <sf_run+0x2a>
		task_execute(va_arg(args, int));
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	1d1a      	adds	r2, r3, #4
 8004c34:	603a      	str	r2, [r7, #0]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 fa4a 	bl	80050d4 <task_execute>
	for(int i = 0; i < count; i++) {
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3301      	adds	r3, #1
 8004c44:	607b      	str	r3, [r7, #4]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	dbf0      	blt.n	8004c30 <sf_run+0x14>
	}
	va_end(args);
}
 8004c4e:	bf00      	nop
 8004c50:	bf00      	nop
 8004c52:	3708      	adds	r7, #8
 8004c54:	46bd      	mov	sp, r7
 8004c56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c5a:	b004      	add	sp, #16
 8004c5c:	4770      	bx	lr

08004c5e <sf_loop>:

/**
 * @brief 主循环中调用的用户调度入口。
 *        执行串口通信协议任务、控制任务等。
 */
void sf_loop(){
 8004c5e:	b580      	push	{r7, lr}
 8004c60:	af00      	add	r7, sp, #0
	sf_run(2,
 8004c62:	2204      	movs	r2, #4
 8004c64:	2102      	movs	r1, #2
 8004c66:	2002      	movs	r0, #2
 8004c68:	f7ff ffd8 	bl	8004c1c <sf_run>
			TASK_COMM_PROTOCOL,
		   TASK_CONTROL_LOOP);
}
 8004c6c:	bf00      	nop
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <uart_manager_register>:
#include <string.h>

static uart_channel_t uart_channels[UART_MAX_CHANNELS] = {0};

// 注册串口及其解析函数
int uart_manager_register(UART_HandleTypeDef *huart, uart_parse_func_t parser) {
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < UART_MAX_CHANNELS; ++i) {
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	e059      	b.n	8004d34 <uart_manager_register+0xc4>
        if (uart_channels[i].huart == NULL || uart_channels[i].huart == huart) {
 8004c80:	4a31      	ldr	r2, [pc, #196]	@ (8004d48 <uart_manager_register+0xd8>)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	4413      	add	r3, r2
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <uart_manager_register+0x3a>
 8004c94:	4a2c      	ldr	r2, [pc, #176]	@ (8004d48 <uart_manager_register+0xd8>)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8004c9c:	fb01 f303 	mul.w	r3, r1, r3
 8004ca0:	4413      	add	r3, r2
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d141      	bne.n	8004d2e <uart_manager_register+0xbe>
            uart_channels[i].huart = huart;
 8004caa:	4a27      	ldr	r2, [pc, #156]	@ (8004d48 <uart_manager_register+0xd8>)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8004cb2:	fb01 f303 	mul.w	r3, r1, r3
 8004cb6:	4413      	add	r3, r2
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	601a      	str	r2, [r3, #0]
            uart_channels[i].parser = parser;
 8004cbc:	4a22      	ldr	r2, [pc, #136]	@ (8004d48 <uart_manager_register+0xd8>)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8004cc4:	fb01 f303 	mul.w	r3, r1, r3
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004cce:	683a      	ldr	r2, [r7, #0]
 8004cd0:	601a      	str	r2, [r3, #0]
            uart_channels[i].rx_len = 0;
 8004cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8004d48 <uart_manager_register+0xd8>)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8004cda:	fb01 f303 	mul.w	r3, r1, r3
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	801a      	strh	r2, [r3, #0]
            uart_channels[i].ready = 0;
 8004ce8:	4a17      	ldr	r2, [pc, #92]	@ (8004d48 <uart_manager_register+0xd8>)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8004cf0:	fb01 f303 	mul.w	r3, r1, r3
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]

            // 启动 DMA 接收
            HAL_UART_Receive_DMA(huart, uart_channels[i].rx_buffer, UART_RX_BUFFER_SIZE);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8004d04:	fb02 f303 	mul.w	r3, r2, r3
 8004d08:	4a0f      	ldr	r2, [pc, #60]	@ (8004d48 <uart_manager_register+0xd8>)
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d12:	4619      	mov	r1, r3
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7fe fd6e 	bl	80037f6 <HAL_UART_Receive_DMA>
            __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0210 	orr.w	r2, r2, #16
 8004d28:	60da      	str	r2, [r3, #12]
            return 0;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	e007      	b.n	8004d3e <uart_manager_register+0xce>
    for (int i = 0; i < UART_MAX_CHANNELS; ++i) {
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	3301      	adds	r3, #1
 8004d32:	60fb      	str	r3, [r7, #12]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	dda2      	ble.n	8004c80 <uart_manager_register+0x10>
        }
    }
    return -1;
 8004d3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3710      	adds	r7, #16
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	200003b8 	.word	0x200003b8

08004d4c <uart_manager_clear>:
    }
    return -1;
}


int uart_manager_clear(UART_HandleTypeDef *huart) {
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UART_MAX_CHANNELS; ++i) {
 8004d54:	2300      	movs	r3, #0
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	e033      	b.n	8004dc2 <uart_manager_clear+0x76>
        if (uart_channels[i].huart == huart) {
 8004d5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004dd4 <uart_manager_clear+0x88>)
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8004d62:	fb01 f303 	mul.w	r3, r1, r3
 8004d66:	4413      	add	r3, r2
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d125      	bne.n	8004dbc <uart_manager_clear+0x70>
            uart_channels[i].rx_len = 0;
 8004d70:	4a18      	ldr	r2, [pc, #96]	@ (8004dd4 <uart_manager_clear+0x88>)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8004d78:	fb01 f303 	mul.w	r3, r1, r3
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004d82:	2200      	movs	r2, #0
 8004d84:	801a      	strh	r2, [r3, #0]
            uart_channels[i].ready = 0;
 8004d86:	4a13      	ldr	r2, [pc, #76]	@ (8004dd4 <uart_manager_clear+0x88>)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8004d8e:	fb01 f303 	mul.w	r3, r1, r3
 8004d92:	4413      	add	r3, r2
 8004d94:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8004d98:	2200      	movs	r2, #0
 8004d9a:	701a      	strb	r2, [r3, #0]
            memset(uart_channels[i].rx_buffer, 0, UART_RX_BUFFER_SIZE);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8004da2:	fb02 f303 	mul.w	r3, r2, r3
 8004da6:	4a0b      	ldr	r2, [pc, #44]	@ (8004dd4 <uart_manager_clear+0x88>)
 8004da8:	4413      	add	r3, r2
 8004daa:	3304      	adds	r3, #4
 8004dac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004db0:	2100      	movs	r1, #0
 8004db2:	4618      	mov	r0, r3
 8004db4:	f002 fbda 	bl	800756c <memset>
            return 0;
 8004db8:	2300      	movs	r3, #0
 8004dba:	e007      	b.n	8004dcc <uart_manager_clear+0x80>
    for (int i = 0; i < UART_MAX_CHANNELS; ++i) {
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	ddc8      	ble.n	8004d5a <uart_manager_clear+0xe>
        }
    }
    return -1;  // 未找到该串口
 8004dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	200003b8 	.word	0x200003b8

08004dd8 <uart_manager_idle_callback>:

// 空闲中断触发：记录长度、设置就绪标志
void uart_manager_idle_callback(UART_HandleTypeDef *huart) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UART_MAX_CHANNELS; ++i) {
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	e048      	b.n	8004e78 <uart_manager_idle_callback+0xa0>
        if (uart_channels[i].huart == huart) {
 8004de6:	4a28      	ldr	r2, [pc, #160]	@ (8004e88 <uart_manager_idle_callback+0xb0>)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8004dee:	fb01 f303 	mul.w	r3, r1, r3
 8004df2:	4413      	add	r3, r2
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d13a      	bne.n	8004e72 <uart_manager_idle_callback+0x9a>
            __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60bb      	str	r3, [r7, #8]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	60bb      	str	r3, [r7, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	60bb      	str	r3, [r7, #8]
 8004e10:	68bb      	ldr	r3, [r7, #8]
            HAL_UART_DMAStop(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fe fd14 	bl	8003840 <HAL_UART_DMAStop>
            uart_channels[i].rx_len = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004e26:	b298      	uxth	r0, r3
 8004e28:	4a17      	ldr	r2, [pc, #92]	@ (8004e88 <uart_manager_idle_callback+0xb0>)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8004e3a:	4602      	mov	r2, r0
 8004e3c:	801a      	strh	r2, [r3, #0]
            uart_channels[i].ready = 1;
 8004e3e:	4a12      	ldr	r2, [pc, #72]	@ (8004e88 <uart_manager_idle_callback+0xb0>)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8004e46:	fb01 f303 	mul.w	r3, r1, r3
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8004e50:	2201      	movs	r2, #1
 8004e52:	701a      	strb	r2, [r3, #0]

            HAL_UART_Receive_DMA(huart, uart_channels[i].rx_buffer, UART_RX_BUFFER_SIZE);
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8004e5a:	fb02 f303 	mul.w	r3, r2, r3
 8004e5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e88 <uart_manager_idle_callback+0xb0>)
 8004e60:	4413      	add	r3, r2
 8004e62:	3304      	adds	r3, #4
 8004e64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004e68:	4619      	mov	r1, r3
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fe fcc3 	bl	80037f6 <HAL_UART_Receive_DMA>
            break;
 8004e70:	e006      	b.n	8004e80 <uart_manager_idle_callback+0xa8>
    for (int i = 0; i < UART_MAX_CHANNELS; ++i) {
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3301      	adds	r3, #1
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2b03      	cmp	r3, #3
 8004e7c:	ddb3      	ble.n	8004de6 <uart_manager_idle_callback+0xe>
        }
    }
}
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	200003b8 	.word	0x200003b8

08004e8c <uart_manager_poll>:

// 主循环中轮询调用此函数
void uart_manager_poll(void) {
 8004e8c:	b590      	push	{r4, r7, lr}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
    for (int i = 0; i < UART_MAX_CHANNELS; ++i) {
 8004e92:	2300      	movs	r3, #0
 8004e94:	607b      	str	r3, [r7, #4]
 8004e96:	e044      	b.n	8004f22 <uart_manager_poll+0x96>
        if (uart_channels[i].ready && uart_channels[i].parser) {
 8004e98:	4a26      	ldr	r2, [pc, #152]	@ (8004f34 <uart_manager_poll+0xa8>)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8004ea0:	fb01 f303 	mul.w	r3, r1, r3
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d034      	beq.n	8004f1c <uart_manager_poll+0x90>
 8004eb2:	4a20      	ldr	r2, [pc, #128]	@ (8004f34 <uart_manager_poll+0xa8>)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8004eba:	fb01 f303 	mul.w	r3, r1, r3
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d028      	beq.n	8004f1c <uart_manager_poll+0x90>
            uart_channels[i].parser(uart_channels[i].rx_buffer, uart_channels[i].rx_len);
 8004eca:	4a1a      	ldr	r2, [pc, #104]	@ (8004f34 <uart_manager_poll+0xa8>)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8004ed2:	fb01 f303 	mul.w	r3, r1, r3
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8004ee4:	fb01 f202 	mul.w	r2, r1, r2
 8004ee8:	4912      	ldr	r1, [pc, #72]	@ (8004f34 <uart_manager_poll+0xa8>)
 8004eea:	440a      	add	r2, r1
 8004eec:	1d10      	adds	r0, r2, #4
 8004eee:	4911      	ldr	r1, [pc, #68]	@ (8004f34 <uart_manager_poll+0xa8>)
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	f44f 7486 	mov.w	r4, #268	@ 0x10c
 8004ef6:	fb04 f202 	mul.w	r2, r4, r2
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 8004f00:	8812      	ldrh	r2, [r2, #0]
 8004f02:	4611      	mov	r1, r2
 8004f04:	4798      	blx	r3
            uart_channels[i].ready = 0;
 8004f06:	4a0b      	ldr	r2, [pc, #44]	@ (8004f34 <uart_manager_poll+0xa8>)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8004f0e:	fb01 f303 	mul.w	r3, r1, r3
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8004f18:	2200      	movs	r2, #0
 8004f1a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < UART_MAX_CHANNELS; ++i) {
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	607b      	str	r3, [r7, #4]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2b03      	cmp	r3, #3
 8004f26:	ddb7      	ble.n	8004e98 <uart_manager_poll+0xc>
        }
    }
}
 8004f28:	bf00      	nop
 8004f2a:	bf00      	nop
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd90      	pop	{r4, r7, pc}
 8004f32:	bf00      	nop
 8004f34:	200003b8 	.word	0x200003b8

08004f38 <task_system_init>:
#include "stddef.h"
static volatile uint32_t sys_tick = 0;
static task_list_t task_lists[MAX_TASK_LISTS];
static task_node_t task_pool[MAX_TASK_NUM];

void task_system_init(void) {
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_TASK_NUM; i++) {
 8004f3e:	2300      	movs	r3, #0
 8004f40:	607b      	str	r3, [r7, #4]
 8004f42:	e00f      	b.n	8004f64 <task_system_init+0x2c>
        task_pool[i].used = 0;
 8004f44:	4a14      	ldr	r2, [pc, #80]	@ (8004f98 <task_system_init+0x60>)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	015b      	lsls	r3, r3, #5
 8004f4a:	4413      	add	r3, r2
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	701a      	strb	r2, [r3, #0]
        task_pool[i].next = NULL;
 8004f50:	4a11      	ldr	r2, [pc, #68]	@ (8004f98 <task_system_init+0x60>)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	015b      	lsls	r3, r3, #5
 8004f56:	4413      	add	r3, r2
 8004f58:	331c      	adds	r3, #28
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_TASK_NUM; i++) {
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3301      	adds	r3, #1
 8004f62:	607b      	str	r3, [r7, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2b3f      	cmp	r3, #63	@ 0x3f
 8004f68:	ddec      	ble.n	8004f44 <task_system_init+0xc>
    }
    for (int i = 0; i < MAX_TASK_LISTS; i++) {
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	603b      	str	r3, [r7, #0]
 8004f6e:	e007      	b.n	8004f80 <task_system_init+0x48>
        task_lists[i].head = NULL;
 8004f70:	4a0a      	ldr	r2, [pc, #40]	@ (8004f9c <task_system_init+0x64>)
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	2100      	movs	r1, #0
 8004f76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < MAX_TASK_LISTS; i++) {
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	2b03      	cmp	r3, #3
 8004f84:	ddf4      	ble.n	8004f70 <task_system_init+0x38>
    }
    sys_tick = 0;
 8004f86:	4b06      	ldr	r3, [pc, #24]	@ (8004fa0 <task_system_init+0x68>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr
 8004f98:	200007fc 	.word	0x200007fc
 8004f9c:	200007ec 	.word	0x200007ec
 8004fa0:	200007e8 	.word	0x200007e8

08004fa4 <task_system_tick_inc>:

void task_system_tick_inc(void) {
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
    sys_tick++;
 8004fa8:	4b04      	ldr	r3, [pc, #16]	@ (8004fbc <task_system_tick_inc+0x18>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3301      	adds	r3, #1
 8004fae:	4a03      	ldr	r2, [pc, #12]	@ (8004fbc <task_system_tick_inc+0x18>)
 8004fb0:	6013      	str	r3, [r2, #0]
}
 8004fb2:	bf00      	nop
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	200007e8 	.word	0x200007e8

08004fc0 <task_system_get_tick>:

uint32_t task_system_get_tick(void) {
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
    return sys_tick;
 8004fc4:	4b03      	ldr	r3, [pc, #12]	@ (8004fd4 <task_system_get_tick+0x14>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
 8004fd2:	bf00      	nop
 8004fd4:	200007e8 	.word	0x200007e8

08004fd8 <alloc_task_node>:

static task_node_t* alloc_task_node(void) {
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_TASK_NUM; i++) {
 8004fde:	2300      	movs	r3, #0
 8004fe0:	607b      	str	r3, [r7, #4]
 8004fe2:	e01b      	b.n	800501c <alloc_task_node+0x44>
        if (!task_pool[i].used) {
 8004fe4:	4a12      	ldr	r2, [pc, #72]	@ (8005030 <alloc_task_node+0x58>)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	015b      	lsls	r3, r3, #5
 8004fea:	4413      	add	r3, r2
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d111      	bne.n	8005016 <alloc_task_node+0x3e>
            task_pool[i].used = 1;
 8004ff2:	4a0f      	ldr	r2, [pc, #60]	@ (8005030 <alloc_task_node+0x58>)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	015b      	lsls	r3, r3, #5
 8004ff8:	4413      	add	r3, r2
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	701a      	strb	r2, [r3, #0]
            task_pool[i].next = NULL;
 8004ffe:	4a0c      	ldr	r2, [pc, #48]	@ (8005030 <alloc_task_node+0x58>)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	015b      	lsls	r3, r3, #5
 8005004:	4413      	add	r3, r2
 8005006:	331c      	adds	r3, #28
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]
            return &task_pool[i];
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	015b      	lsls	r3, r3, #5
 8005010:	4a07      	ldr	r2, [pc, #28]	@ (8005030 <alloc_task_node+0x58>)
 8005012:	4413      	add	r3, r2
 8005014:	e006      	b.n	8005024 <alloc_task_node+0x4c>
    for (int i = 0; i < MAX_TASK_NUM; i++) {
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3301      	adds	r3, #1
 800501a:	607b      	str	r3, [r7, #4]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005020:	dde0      	ble.n	8004fe4 <alloc_task_node+0xc>
        }
    }
    return NULL;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	370c      	adds	r7, #12
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	200007fc 	.word	0x200007fc

08005034 <task_add>:

int task_add(uint8_t list_id, task_func_t cb, void *arg, uint32_t delay, uint32_t period, uint32_t run_count) {
 8005034:	b580      	push	{r7, lr}
 8005036:	b086      	sub	sp, #24
 8005038:	af00      	add	r7, sp, #0
 800503a:	60b9      	str	r1, [r7, #8]
 800503c:	607a      	str	r2, [r7, #4]
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	4603      	mov	r3, r0
 8005042:	73fb      	strb	r3, [r7, #15]
    if (list_id >= MAX_TASK_LISTS || cb == NULL)
 8005044:	7bfb      	ldrb	r3, [r7, #15]
 8005046:	2b03      	cmp	r3, #3
 8005048:	d802      	bhi.n	8005050 <task_add+0x1c>
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <task_add+0x20>
        return 0;
 8005050:	2300      	movs	r3, #0
 8005052:	e02a      	b.n	80050aa <task_add+0x76>

    task_node_t *node = alloc_task_node();
 8005054:	f7ff ffc0 	bl	8004fd8 <alloc_task_node>
 8005058:	6178      	str	r0, [r7, #20]
    if (!node) return 0;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d101      	bne.n	8005064 <task_add+0x30>
 8005060:	2300      	movs	r3, #0
 8005062:	e022      	b.n	80050aa <task_add+0x76>

    uint32_t now = task_system_get_tick();
 8005064:	f7ff ffac 	bl	8004fc0 <task_system_get_tick>
 8005068:	6138      	str	r0, [r7, #16]

    node->start_tick = now;
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	605a      	str	r2, [r3, #4]
    node->next_run_tick = now + delay;
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	441a      	add	r2, r3
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	609a      	str	r2, [r3, #8]
    node->period = period;
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	6a3a      	ldr	r2, [r7, #32]
 800507e:	60da      	str	r2, [r3, #12]
    node->remaining_count = run_count;
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005084:	611a      	str	r2, [r3, #16]
    node->callback = cb;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	615a      	str	r2, [r3, #20]
    node->arg = arg;
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	619a      	str	r2, [r3, #24]

    node->next = task_lists[list_id].head;
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	4a07      	ldr	r2, [pc, #28]	@ (80050b4 <task_add+0x80>)
 8005096:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	61da      	str	r2, [r3, #28]
    task_lists[list_id].head = node;
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	4904      	ldr	r1, [pc, #16]	@ (80050b4 <task_add+0x80>)
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 1;
 80050a8:	2301      	movs	r3, #1
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	200007ec 	.word	0x200007ec

080050b8 <tick_elapsed>:
    }
    return 0;
}

// 溢出安全比较
static inline int32_t tick_elapsed(uint32_t now, uint32_t target) {
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
    return (int32_t)(now - target);
 80050c2:	687a      	ldr	r2, [r7, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	1ad3      	subs	r3, r2, r3
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <task_execute>:

void task_execute(uint8_t list_id) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	4603      	mov	r3, r0
 80050dc:	71fb      	strb	r3, [r7, #7]
    if (list_id >= MAX_TASK_LISTS)
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d837      	bhi.n	8005154 <task_execute+0x80>
        return;

    uint32_t now = task_system_get_tick();
 80050e4:	f7ff ff6c 	bl	8004fc0 <task_system_get_tick>
 80050e8:	60b8      	str	r0, [r7, #8]
    task_node_t *node = task_lists[list_id].head;
 80050ea:	79fb      	ldrb	r3, [r7, #7]
 80050ec:	4a1b      	ldr	r2, [pc, #108]	@ (800515c <task_execute+0x88>)
 80050ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f2:	60fb      	str	r3, [r7, #12]

    while (node) {
 80050f4:	e02a      	b.n	800514c <task_execute+0x78>
        if (node->used && node->remaining_count != 0) {
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d023      	beq.n	8005146 <task_execute+0x72>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d01f      	beq.n	8005146 <task_execute+0x72>
            if (tick_elapsed(now, node->next_run_tick) >= 0) {
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	4619      	mov	r1, r3
 800510c:	68b8      	ldr	r0, [r7, #8]
 800510e:	f7ff ffd3 	bl	80050b8 <tick_elapsed>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	db16      	blt.n	8005146 <task_execute+0x72>
                node->callback(node->arg);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	6992      	ldr	r2, [r2, #24]
 8005120:	4610      	mov	r0, r2
 8005122:	4798      	blx	r3
                if (node->remaining_count != TASK_FOREVER) {
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512c:	d004      	beq.n	8005138 <task_execute+0x64>
                    node->remaining_count--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	1e5a      	subs	r2, r3, #1
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	611a      	str	r2, [r3, #16]
                }
                node->next_run_tick += node->period;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	441a      	add	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	609a      	str	r2, [r3, #8]
            }
        }
        node = node->next;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	60fb      	str	r3, [r7, #12]
    while (node) {
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1d1      	bne.n	80050f6 <task_execute+0x22>
 8005152:	e000      	b.n	8005156 <task_execute+0x82>
        return;
 8005154:	bf00      	nop
    }
}
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	200007ec 	.word	0x200007ec

08005160 <shell_register_function>:
#define MAX_FUNC_COUNT 32

static func_entry_t func_table[MAX_FUNC_COUNT];
static int func_count = 0;

void shell_register_function(const char *name, shell_func_t func) {
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
    if (func_count < MAX_FUNC_COUNT) {
 800516a:	4b0c      	ldr	r3, [pc, #48]	@ (800519c <shell_register_function+0x3c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b1f      	cmp	r3, #31
 8005170:	dc0d      	bgt.n	800518e <shell_register_function+0x2e>
        func_table[func_count++] = (func_entry_t){name, func};
 8005172:	4b0a      	ldr	r3, [pc, #40]	@ (800519c <shell_register_function+0x3c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	1c5a      	adds	r2, r3, #1
 8005178:	4908      	ldr	r1, [pc, #32]	@ (800519c <shell_register_function+0x3c>)
 800517a:	600a      	str	r2, [r1, #0]
 800517c:	4908      	ldr	r1, [pc, #32]	@ (80051a0 <shell_register_function+0x40>)
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8005184:	4a06      	ldr	r2, [pc, #24]	@ (80051a0 <shell_register_function+0x40>)
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4413      	add	r3, r2
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	605a      	str	r2, [r3, #4]
    }
}
 800518e:	bf00      	nop
 8005190:	3714      	adds	r7, #20
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	200010fc 	.word	0x200010fc
 80051a0:	20000ffc 	.word	0x20000ffc

080051a4 <shell_run_function>:

int shell_run_function(const char *name, int argc, char **argv) {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < func_count; i++) {
 80051b0:	2300      	movs	r3, #0
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	e017      	b.n	80051e6 <shell_run_function+0x42>
        if (strcmp(func_table[i].name, name) == 0) {
 80051b6:	4a11      	ldr	r2, [pc, #68]	@ (80051fc <shell_run_function+0x58>)
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80051be:	68f9      	ldr	r1, [r7, #12]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fb f805 	bl	80001d0 <strcmp>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d109      	bne.n	80051e0 <shell_run_function+0x3c>
            return func_table[i].func(argc, argv);
 80051cc:	4a0b      	ldr	r2, [pc, #44]	@ (80051fc <shell_run_function+0x58>)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4413      	add	r3, r2
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	68b8      	ldr	r0, [r7, #8]
 80051da:	4798      	blx	r3
 80051dc:	4603      	mov	r3, r0
 80051de:	e009      	b.n	80051f4 <shell_run_function+0x50>
    for (int i = 0; i < func_count; i++) {
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	3301      	adds	r3, #1
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	4b06      	ldr	r3, [pc, #24]	@ (8005200 <shell_run_function+0x5c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	dbe2      	blt.n	80051b6 <shell_run_function+0x12>
        }
    }
    return -1;
 80051f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3718      	adds	r7, #24
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	20000ffc 	.word	0x20000ffc
 8005200:	200010fc 	.word	0x200010fc

08005204 <shell_func_list>:

void shell_func_list(void) {
 8005204:	b580      	push	{r7, lr}
 8005206:	b082      	sub	sp, #8
 8005208:	af00      	add	r7, sp, #0
    printf("Registered functions:\n");
 800520a:	480d      	ldr	r0, [pc, #52]	@ (8005240 <shell_func_list+0x3c>)
 800520c:	f002 f876 	bl	80072fc <puts>
    for (int i = 0; i < func_count; i++) {
 8005210:	2300      	movs	r3, #0
 8005212:	607b      	str	r3, [r7, #4]
 8005214:	e00a      	b.n	800522c <shell_func_list+0x28>
        printf(" - %s\n", func_table[i].name);
 8005216:	4a0b      	ldr	r2, [pc, #44]	@ (8005244 <shell_func_list+0x40>)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800521e:	4619      	mov	r1, r3
 8005220:	4809      	ldr	r0, [pc, #36]	@ (8005248 <shell_func_list+0x44>)
 8005222:	f002 f803 	bl	800722c <iprintf>
    for (int i = 0; i < func_count; i++) {
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3301      	adds	r3, #1
 800522a:	607b      	str	r3, [r7, #4]
 800522c:	4b07      	ldr	r3, [pc, #28]	@ (800524c <shell_func_list+0x48>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	dbef      	blt.n	8005216 <shell_func_list+0x12>
    }
}
 8005236:	bf00      	nop
 8005238:	bf00      	nop
 800523a:	3708      	adds	r7, #8
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}
 8005240:	0800a034 	.word	0x0800a034
 8005244:	20000ffc 	.word	0x20000ffc
 8005248:	0800a04c 	.word	0x0800a04c
 800524c:	200010fc 	.word	0x200010fc

08005250 <shell_exec>:
#include "function_register.h"

#define MAX_ARGC 8
#define MAX_LINE_LEN 128

void shell_exec(const char *line) {
 8005250:	b580      	push	{r7, lr}
 8005252:	b0bc      	sub	sp, #240	@ 0xf0
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
    char buffer[MAX_LINE_LEN];
    strncpy(buffer, line, sizeof(buffer));
 8005258:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800525c:	2280      	movs	r2, #128	@ 0x80
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4618      	mov	r0, r3
 8005262:	f002 f99d 	bl	80075a0 <strncpy>
    buffer[sizeof(buffer) - 1] = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7

    char *argv[MAX_ARGC] = {0};
 800526c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005270:	2220      	movs	r2, #32
 8005272:	2100      	movs	r1, #0
 8005274:	4618      	mov	r0, r3
 8005276:	f002 f979 	bl	800756c <memset>
    int argc = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec

    char *token = strtok(buffer, " ");
 8005280:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8005284:	4955      	ldr	r1, [pc, #340]	@ (80053dc <shell_exec+0x18c>)
 8005286:	4618      	mov	r0, r3
 8005288:	f002 f99e 	bl	80075c8 <strtok>
 800528c:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
    while (token && argc < MAX_ARGC) {
 8005290:	e011      	b.n	80052b6 <shell_exec+0x66>
        argv[argc++] = token;
 8005292:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	33f0      	adds	r3, #240	@ 0xf0
 80052a0:	443b      	add	r3, r7
 80052a2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80052a6:	f843 2ca8 	str.w	r2, [r3, #-168]
        token = strtok(NULL, " ");
 80052aa:	494c      	ldr	r1, [pc, #304]	@ (80053dc <shell_exec+0x18c>)
 80052ac:	2000      	movs	r0, #0
 80052ae:	f002 f98b 	bl	80075c8 <strtok>
 80052b2:	f8c7 00e8 	str.w	r0, [r7, #232]	@ 0xe8
    while (token && argc < MAX_ARGC) {
 80052b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d003      	beq.n	80052c6 <shell_exec+0x76>
 80052be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80052c2:	2b07      	cmp	r3, #7
 80052c4:	dde5      	ble.n	8005292 <shell_exec+0x42>
    }

    if (argc == 0) return;
 80052c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 8081 	beq.w	80053d2 <shell_exec+0x182>

    if (strcmp(argv[0], "get") == 0 && argc == 2) {
 80052d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80052d2:	4943      	ldr	r1, [pc, #268]	@ (80053e0 <shell_exec+0x190>)
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fa ff7b 	bl	80001d0 <strcmp>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d11b      	bne.n	8005318 <shell_exec+0xc8>
 80052e0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d117      	bne.n	8005318 <shell_exec+0xc8>
        char output[64];
        if (shell_get_variable(argv[1], output, sizeof(output)) == 0) {
 80052e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052ea:	f107 0108 	add.w	r1, r7, #8
 80052ee:	2240      	movs	r2, #64	@ 0x40
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 f8ef 	bl	80054d4 <shell_get_variable>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d107      	bne.n	800530c <shell_exec+0xbc>
            printf("%s = %s\n", argv[1], output);
 80052fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052fe:	f107 0208 	add.w	r2, r7, #8
 8005302:	4619      	mov	r1, r3
 8005304:	4837      	ldr	r0, [pc, #220]	@ (80053e4 <shell_exec+0x194>)
 8005306:	f001 ff91 	bl	800722c <iprintf>
    if (strcmp(argv[0], "get") == 0 && argc == 2) {
 800530a:	e063      	b.n	80053d4 <shell_exec+0x184>
        } else {
            printf("Variable '%s' not found\n", argv[1]);
 800530c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800530e:	4619      	mov	r1, r3
 8005310:	4835      	ldr	r0, [pc, #212]	@ (80053e8 <shell_exec+0x198>)
 8005312:	f001 ff8b 	bl	800722c <iprintf>
    if (strcmp(argv[0], "get") == 0 && argc == 2) {
 8005316:	e05d      	b.n	80053d4 <shell_exec+0x184>
        }
    } else if (strcmp(argv[0], "set") == 0 && argc == 3) {
 8005318:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800531a:	4934      	ldr	r1, [pc, #208]	@ (80053ec <shell_exec+0x19c>)
 800531c:	4618      	mov	r0, r3
 800531e:	f7fa ff57 	bl	80001d0 <strcmp>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d119      	bne.n	800535c <shell_exec+0x10c>
 8005328:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800532c:	2b03      	cmp	r3, #3
 800532e:	d115      	bne.n	800535c <shell_exec+0x10c>
        if (shell_set_variable(argv[1], argv[2]) == 0) {
 8005330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005332:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005334:	4611      	mov	r1, r2
 8005336:	4618      	mov	r0, r3
 8005338:	f000 f92e 	bl	8005598 <shell_set_variable>
 800533c:	4603      	mov	r3, r0
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <shell_exec+0x100>
            printf("Set %s = %s\n", argv[1], argv[2]);
 8005342:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005344:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005346:	4619      	mov	r1, r3
 8005348:	4829      	ldr	r0, [pc, #164]	@ (80053f0 <shell_exec+0x1a0>)
 800534a:	f001 ff6f 	bl	800722c <iprintf>
        if (shell_set_variable(argv[1], argv[2]) == 0) {
 800534e:	e041      	b.n	80053d4 <shell_exec+0x184>
        } else {
            printf("Set failed: variable '%s' not found\n", argv[1]);
 8005350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005352:	4619      	mov	r1, r3
 8005354:	4827      	ldr	r0, [pc, #156]	@ (80053f4 <shell_exec+0x1a4>)
 8005356:	f001 ff69 	bl	800722c <iprintf>
        if (shell_set_variable(argv[1], argv[2]) == 0) {
 800535a:	e03b      	b.n	80053d4 <shell_exec+0x184>
        }
    } else if (strcmp(argv[0], "run") == 0 && argc >= 2) {
 800535c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800535e:	4926      	ldr	r1, [pc, #152]	@ (80053f8 <shell_exec+0x1a8>)
 8005360:	4618      	mov	r0, r3
 8005362:	f7fa ff35 	bl	80001d0 <strcmp>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d116      	bne.n	800539a <shell_exec+0x14a>
 800536c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8005370:	2b01      	cmp	r3, #1
 8005372:	dd12      	ble.n	800539a <shell_exec+0x14a>
        if (shell_run_function(argv[1], argc - 2, &argv[2]) != 0) {
 8005374:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8005376:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800537a:	1e99      	subs	r1, r3, #2
 800537c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8005380:	3308      	adds	r3, #8
 8005382:	461a      	mov	r2, r3
 8005384:	f7ff ff0e 	bl	80051a4 <shell_run_function>
 8005388:	4603      	mov	r3, r0
 800538a:	2b00      	cmp	r3, #0
 800538c:	d022      	beq.n	80053d4 <shell_exec+0x184>
            printf("Function '%s' failed or not found\n", argv[1]);
 800538e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005390:	4619      	mov	r1, r3
 8005392:	481a      	ldr	r0, [pc, #104]	@ (80053fc <shell_exec+0x1ac>)
 8005394:	f001 ff4a 	bl	800722c <iprintf>
        if (shell_run_function(argv[1], argc - 2, &argv[2]) != 0) {
 8005398:	e01c      	b.n	80053d4 <shell_exec+0x184>
        }
    }
    else if (strcmp(argv[0], "varlist") == 0) {
 800539a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800539c:	4918      	ldr	r1, [pc, #96]	@ (8005400 <shell_exec+0x1b0>)
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fa ff16 	bl	80001d0 <strcmp>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d102      	bne.n	80053b0 <shell_exec+0x160>
        shell_var_list();
 80053aa:	f000 f94d 	bl	8005648 <shell_var_list>
 80053ae:	e011      	b.n	80053d4 <shell_exec+0x184>
    } else if (strcmp(argv[0], "funclist") == 0) {
 80053b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053b2:	4914      	ldr	r1, [pc, #80]	@ (8005404 <shell_exec+0x1b4>)
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fa ff0b 	bl	80001d0 <strcmp>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d102      	bne.n	80053c6 <shell_exec+0x176>
        shell_func_list();
 80053c0:	f7ff ff20 	bl	8005204 <shell_func_list>
 80053c4:	e006      	b.n	80053d4 <shell_exec+0x184>
    }

    else {
        printf("Unknown command: %s\n", argv[0]);
 80053c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053c8:	4619      	mov	r1, r3
 80053ca:	480f      	ldr	r0, [pc, #60]	@ (8005408 <shell_exec+0x1b8>)
 80053cc:	f001 ff2e 	bl	800722c <iprintf>
 80053d0:	e000      	b.n	80053d4 <shell_exec+0x184>
    if (argc == 0) return;
 80053d2:	bf00      	nop
    }
}
 80053d4:	37f0      	adds	r7, #240	@ 0xf0
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	0800a054 	.word	0x0800a054
 80053e0:	0800a058 	.word	0x0800a058
 80053e4:	0800a05c 	.word	0x0800a05c
 80053e8:	0800a068 	.word	0x0800a068
 80053ec:	0800a084 	.word	0x0800a084
 80053f0:	0800a088 	.word	0x0800a088
 80053f4:	0800a098 	.word	0x0800a098
 80053f8:	0800a0c0 	.word	0x0800a0c0
 80053fc:	0800a0c4 	.word	0x0800a0c4
 8005400:	0800a0e8 	.word	0x0800a0e8
 8005404:	0800a0f0 	.word	0x0800a0f0
 8005408:	0800a0fc 	.word	0x0800a0fc

0800540c <shell_register_variable>:
#define MAX_VAR_COUNT 64

static var_entry_t var_table[MAX_VAR_COUNT];
static int var_count = 0;

void shell_register_variable(const char *name, void *addr, var_type_t type) {
 800540c:	b480      	push	{r7}
 800540e:	b089      	sub	sp, #36	@ 0x24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	4613      	mov	r3, r2
 8005418:	71fb      	strb	r3, [r7, #7]
    if (var_count < MAX_VAR_COUNT) {
 800541a:	4b14      	ldr	r3, [pc, #80]	@ (800546c <shell_register_variable+0x60>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005420:	dc1e      	bgt.n	8005460 <shell_register_variable+0x54>
        var_table[var_count++] = (var_entry_t){name, addr, type};
 8005422:	4b12      	ldr	r3, [pc, #72]	@ (800546c <shell_register_variable+0x60>)
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	1c53      	adds	r3, r2, #1
 8005428:	4910      	ldr	r1, [pc, #64]	@ (800546c <shell_register_variable+0x60>)
 800542a:	600b      	str	r3, [r1, #0]
 800542c:	4910      	ldr	r1, [pc, #64]	@ (8005470 <shell_register_variable+0x64>)
 800542e:	4613      	mov	r3, r2
 8005430:	005b      	lsls	r3, r3, #1
 8005432:	4413      	add	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	68f9      	ldr	r1, [r7, #12]
 800543a:	6019      	str	r1, [r3, #0]
 800543c:	490c      	ldr	r1, [pc, #48]	@ (8005470 <shell_register_variable+0x64>)
 800543e:	4613      	mov	r3, r2
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	4413      	add	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	3304      	adds	r3, #4
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	6019      	str	r1, [r3, #0]
 800544e:	4908      	ldr	r1, [pc, #32]	@ (8005470 <shell_register_variable+0x64>)
 8005450:	4613      	mov	r3, r2
 8005452:	005b      	lsls	r3, r3, #1
 8005454:	4413      	add	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	440b      	add	r3, r1
 800545a:	3308      	adds	r3, #8
 800545c:	79fa      	ldrb	r2, [r7, #7]
 800545e:	701a      	strb	r2, [r3, #0]
    }
}
 8005460:	bf00      	nop
 8005462:	3724      	adds	r7, #36	@ 0x24
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	20001400 	.word	0x20001400
 8005470:	20001100 	.word	0x20001100

08005474 <find_var>:

static var_entry_t *find_var(const char *name) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < var_count; i++) {
 800547c:	2300      	movs	r3, #0
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	e019      	b.n	80054b6 <find_var+0x42>
        if (strcmp(var_table[i].name, name) == 0) {
 8005482:	4912      	ldr	r1, [pc, #72]	@ (80054cc <find_var+0x58>)
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4613      	mov	r3, r2
 8005488:	005b      	lsls	r3, r3, #1
 800548a:	4413      	add	r3, r2
 800548c:	009b      	lsls	r3, r3, #2
 800548e:	440b      	add	r3, r1
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	4618      	mov	r0, r3
 8005496:	f7fa fe9b 	bl	80001d0 <strcmp>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d107      	bne.n	80054b0 <find_var+0x3c>
            return &var_table[i];
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	4613      	mov	r3, r2
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	4413      	add	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4a08      	ldr	r2, [pc, #32]	@ (80054cc <find_var+0x58>)
 80054ac:	4413      	add	r3, r2
 80054ae:	e008      	b.n	80054c2 <find_var+0x4e>
    for (int i = 0; i < var_count; i++) {
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3301      	adds	r3, #1
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	4b06      	ldr	r3, [pc, #24]	@ (80054d0 <find_var+0x5c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	429a      	cmp	r2, r3
 80054be:	dbe0      	blt.n	8005482 <find_var+0xe>
        }
    }
    return NULL;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20001100 	.word	0x20001100
 80054d0:	20001400 	.word	0x20001400

080054d4 <shell_get_variable>:

int shell_get_variable(const char *name, char *output, int max_len) {
 80054d4:	b590      	push	{r4, r7, lr}
 80054d6:	b089      	sub	sp, #36	@ 0x24
 80054d8:	af02      	add	r7, sp, #8
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
    var_entry_t *var = find_var(name);
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f7ff ffc7 	bl	8005474 <find_var>
 80054e6:	6178      	str	r0, [r7, #20]
    if (!var) return -1;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d102      	bne.n	80054f4 <shell_get_variable+0x20>
 80054ee:	f04f 33ff 	mov.w	r3, #4294967295
 80054f2:	e043      	b.n	800557c <shell_get_variable+0xa8>

    switch (var->type) {
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	7a1b      	ldrb	r3, [r3, #8]
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d83b      	bhi.n	8005574 <shell_get_variable+0xa0>
 80054fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005504 <shell_get_variable+0x30>)
 80054fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005502:	bf00      	nop
 8005504:	08005515 	.word	0x08005515
 8005508:	08005527 	.word	0x08005527
 800550c:	08005549 	.word	0x08005549
 8005510:	08005559 	.word	0x08005559
        case VAR_TYPE_INT:
            snprintf(output, max_len, "%d", *(int *)var->addr); break;
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a19      	ldr	r2, [pc, #100]	@ (8005584 <shell_get_variable+0xb0>)
 800551e:	68b8      	ldr	r0, [r7, #8]
 8005520:	f001 fef4 	bl	800730c <sniprintf>
 8005524:	e029      	b.n	800557a <shell_get_variable+0xa6>
        case VAR_TYPE_FLOAT:
            snprintf(output, max_len, "%f", *(float *)var->addr); break;
 8005526:	687c      	ldr	r4, [r7, #4]
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f7fb f81a 	bl	8000568 <__aeabi_f2d>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	e9cd 2300 	strd	r2, r3, [sp]
 800553c:	4a12      	ldr	r2, [pc, #72]	@ (8005588 <shell_get_variable+0xb4>)
 800553e:	4621      	mov	r1, r4
 8005540:	68b8      	ldr	r0, [r7, #8]
 8005542:	f001 fee3 	bl	800730c <sniprintf>
 8005546:	e018      	b.n	800557a <shell_get_variable+0xa6>
        case VAR_TYPE_STRING:
            snprintf(output, max_len, "%s", (char *)var->addr); break;
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	4a0f      	ldr	r2, [pc, #60]	@ (800558c <shell_get_variable+0xb8>)
 8005550:	68b8      	ldr	r0, [r7, #8]
 8005552:	f001 fedb 	bl	800730c <sniprintf>
 8005556:	e010      	b.n	800557a <shell_get_variable+0xa6>
        case VAR_TYPE_BOOL:
            snprintf(output, max_len, "%s", *(int *)var->addr ? "true" : "false"); break;
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <shell_get_variable+0x94>
 8005564:	4b0a      	ldr	r3, [pc, #40]	@ (8005590 <shell_get_variable+0xbc>)
 8005566:	e000      	b.n	800556a <shell_get_variable+0x96>
 8005568:	4b0a      	ldr	r3, [pc, #40]	@ (8005594 <shell_get_variable+0xc0>)
 800556a:	4a08      	ldr	r2, [pc, #32]	@ (800558c <shell_get_variable+0xb8>)
 800556c:	68b8      	ldr	r0, [r7, #8]
 800556e:	f001 fecd 	bl	800730c <sniprintf>
 8005572:	e002      	b.n	800557a <shell_get_variable+0xa6>
        default:
            return -2;
 8005574:	f06f 0301 	mvn.w	r3, #1
 8005578:	e000      	b.n	800557c <shell_get_variable+0xa8>
    }
    return 0;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	bd90      	pop	{r4, r7, pc}
 8005584:	0800a114 	.word	0x0800a114
 8005588:	0800a118 	.word	0x0800a118
 800558c:	0800a11c 	.word	0x0800a11c
 8005590:	0800a120 	.word	0x0800a120
 8005594:	0800a128 	.word	0x0800a128

08005598 <shell_set_variable>:

int shell_set_variable(const char *name, const char *value_str) {
 8005598:	b590      	push	{r4, r7, lr}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
    var_entry_t *var = find_var(name);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff ff66 	bl	8005474 <find_var>
 80055a8:	60f8      	str	r0, [r7, #12]
    if (!var) return -1;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <shell_set_variable+0x1e>
 80055b0:	f04f 33ff 	mov.w	r3, #4294967295
 80055b4:	e041      	b.n	800563a <shell_set_variable+0xa2>

    switch (var->type) {
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	7a1b      	ldrb	r3, [r3, #8]
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d839      	bhi.n	8005632 <shell_set_variable+0x9a>
 80055be:	a201      	add	r2, pc, #4	@ (adr r2, 80055c4 <shell_set_variable+0x2c>)
 80055c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c4:	080055d5 	.word	0x080055d5
 80055c8:	080055e5 	.word	0x080055e5
 80055cc:	080055fd 	.word	0x080055fd
 80055d0:	08005617 	.word	0x08005617
        case VAR_TYPE_INT:
            *(int *)var->addr = atoi(value_str); break;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685c      	ldr	r4, [r3, #4]
 80055d8:	6838      	ldr	r0, [r7, #0]
 80055da:	f000 f862 	bl	80056a2 <atoi>
 80055de:	4603      	mov	r3, r0
 80055e0:	6023      	str	r3, [r4, #0]
 80055e2:	e029      	b.n	8005638 <shell_set_variable+0xa0>
        case VAR_TYPE_FLOAT:
            *(float *)var->addr = atof(value_str); break;
 80055e4:	6838      	ldr	r0, [r7, #0]
 80055e6:	f000 f859 	bl	800569c <atof>
 80055ea:	ec51 0b10 	vmov	r0, r1, d0
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	685c      	ldr	r4, [r3, #4]
 80055f2:	f7fb fb09 	bl	8000c08 <__aeabi_d2f>
 80055f6:	4603      	mov	r3, r0
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	e01d      	b.n	8005638 <shell_set_variable+0xa0>
        case VAR_TYPE_STRING:
            strncpy((char *)var->addr, value_str, strlen(value_str)+1); break;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	685c      	ldr	r4, [r3, #4]
 8005600:	6838      	ldr	r0, [r7, #0]
 8005602:	f7fa fe45 	bl	8000290 <strlen>
 8005606:	4603      	mov	r3, r0
 8005608:	3301      	adds	r3, #1
 800560a:	461a      	mov	r2, r3
 800560c:	6839      	ldr	r1, [r7, #0]
 800560e:	4620      	mov	r0, r4
 8005610:	f001 ffc6 	bl	80075a0 <strncpy>
 8005614:	e010      	b.n	8005638 <shell_set_variable+0xa0>
        case VAR_TYPE_BOOL:
            *(int *)var->addr = (strcmp(value_str, "true") == 0); break;
 8005616:	490b      	ldr	r1, [pc, #44]	@ (8005644 <shell_set_variable+0xac>)
 8005618:	6838      	ldr	r0, [r7, #0]
 800561a:	f7fa fdd9 	bl	80001d0 <strcmp>
 800561e:	4603      	mov	r3, r0
 8005620:	2b00      	cmp	r3, #0
 8005622:	bf0c      	ite	eq
 8005624:	2301      	moveq	r3, #1
 8005626:	2300      	movne	r3, #0
 8005628:	b2da      	uxtb	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	601a      	str	r2, [r3, #0]
 8005630:	e002      	b.n	8005638 <shell_set_variable+0xa0>
        default:
            return -2;
 8005632:	f06f 0301 	mvn.w	r3, #1
 8005636:	e000      	b.n	800563a <shell_set_variable+0xa2>
    }
    return 0;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	bd90      	pop	{r4, r7, pc}
 8005642:	bf00      	nop
 8005644:	0800a120 	.word	0x0800a120

08005648 <shell_var_list>:
void shell_var_list(void) {
 8005648:	b580      	push	{r7, lr}
 800564a:	b082      	sub	sp, #8
 800564c:	af00      	add	r7, sp, #0
    printf("Registered variables:\n");
 800564e:	480f      	ldr	r0, [pc, #60]	@ (800568c <shell_var_list+0x44>)
 8005650:	f001 fe54 	bl	80072fc <puts>
    for (int i = 0; i < var_count; i++) {
 8005654:	2300      	movs	r3, #0
 8005656:	607b      	str	r3, [r7, #4]
 8005658:	e00e      	b.n	8005678 <shell_var_list+0x30>
        printf(" - %s\n", var_table[i].name);
 800565a:	490d      	ldr	r1, [pc, #52]	@ (8005690 <shell_var_list+0x48>)
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4619      	mov	r1, r3
 800566c:	4809      	ldr	r0, [pc, #36]	@ (8005694 <shell_var_list+0x4c>)
 800566e:	f001 fddd 	bl	800722c <iprintf>
    for (int i = 0; i < var_count; i++) {
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	3301      	adds	r3, #1
 8005676:	607b      	str	r3, [r7, #4]
 8005678:	4b07      	ldr	r3, [pc, #28]	@ (8005698 <shell_var_list+0x50>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	687a      	ldr	r2, [r7, #4]
 800567e:	429a      	cmp	r2, r3
 8005680:	dbeb      	blt.n	800565a <shell_var_list+0x12>
    }
}
 8005682:	bf00      	nop
 8005684:	bf00      	nop
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	0800a130 	.word	0x0800a130
 8005690:	20001100 	.word	0x20001100
 8005694:	0800a148 	.word	0x0800a148
 8005698:	20001400 	.word	0x20001400

0800569c <atof>:
 800569c:	2100      	movs	r1, #0
 800569e:	f000 be0d 	b.w	80062bc <strtod>

080056a2 <atoi>:
 80056a2:	220a      	movs	r2, #10
 80056a4:	2100      	movs	r1, #0
 80056a6:	f000 be91 	b.w	80063cc <strtol>

080056aa <sulp>:
 80056aa:	b570      	push	{r4, r5, r6, lr}
 80056ac:	4604      	mov	r4, r0
 80056ae:	460d      	mov	r5, r1
 80056b0:	ec45 4b10 	vmov	d0, r4, r5
 80056b4:	4616      	mov	r6, r2
 80056b6:	f003 fea7 	bl	8009408 <__ulp>
 80056ba:	ec51 0b10 	vmov	r0, r1, d0
 80056be:	b17e      	cbz	r6, 80056e0 <sulp+0x36>
 80056c0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80056c4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	dd09      	ble.n	80056e0 <sulp+0x36>
 80056cc:	051b      	lsls	r3, r3, #20
 80056ce:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80056d2:	2400      	movs	r4, #0
 80056d4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80056d8:	4622      	mov	r2, r4
 80056da:	462b      	mov	r3, r5
 80056dc:	f7fa ff9c 	bl	8000618 <__aeabi_dmul>
 80056e0:	ec41 0b10 	vmov	d0, r0, r1
 80056e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080056e8 <_strtod_l>:
 80056e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ec:	b09f      	sub	sp, #124	@ 0x7c
 80056ee:	460c      	mov	r4, r1
 80056f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80056f2:	2200      	movs	r2, #0
 80056f4:	921a      	str	r2, [sp, #104]	@ 0x68
 80056f6:	9005      	str	r0, [sp, #20]
 80056f8:	f04f 0a00 	mov.w	sl, #0
 80056fc:	f04f 0b00 	mov.w	fp, #0
 8005700:	460a      	mov	r2, r1
 8005702:	9219      	str	r2, [sp, #100]	@ 0x64
 8005704:	7811      	ldrb	r1, [r2, #0]
 8005706:	292b      	cmp	r1, #43	@ 0x2b
 8005708:	d04a      	beq.n	80057a0 <_strtod_l+0xb8>
 800570a:	d838      	bhi.n	800577e <_strtod_l+0x96>
 800570c:	290d      	cmp	r1, #13
 800570e:	d832      	bhi.n	8005776 <_strtod_l+0x8e>
 8005710:	2908      	cmp	r1, #8
 8005712:	d832      	bhi.n	800577a <_strtod_l+0x92>
 8005714:	2900      	cmp	r1, #0
 8005716:	d03b      	beq.n	8005790 <_strtod_l+0xa8>
 8005718:	2200      	movs	r2, #0
 800571a:	920e      	str	r2, [sp, #56]	@ 0x38
 800571c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800571e:	782a      	ldrb	r2, [r5, #0]
 8005720:	2a30      	cmp	r2, #48	@ 0x30
 8005722:	f040 80b2 	bne.w	800588a <_strtod_l+0x1a2>
 8005726:	786a      	ldrb	r2, [r5, #1]
 8005728:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800572c:	2a58      	cmp	r2, #88	@ 0x58
 800572e:	d16e      	bne.n	800580e <_strtod_l+0x126>
 8005730:	9302      	str	r3, [sp, #8]
 8005732:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005734:	9301      	str	r3, [sp, #4]
 8005736:	ab1a      	add	r3, sp, #104	@ 0x68
 8005738:	9300      	str	r3, [sp, #0]
 800573a:	4a8f      	ldr	r2, [pc, #572]	@ (8005978 <_strtod_l+0x290>)
 800573c:	9805      	ldr	r0, [sp, #20]
 800573e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005740:	a919      	add	r1, sp, #100	@ 0x64
 8005742:	f002 ff5b 	bl	80085fc <__gethex>
 8005746:	f010 060f 	ands.w	r6, r0, #15
 800574a:	4604      	mov	r4, r0
 800574c:	d005      	beq.n	800575a <_strtod_l+0x72>
 800574e:	2e06      	cmp	r6, #6
 8005750:	d128      	bne.n	80057a4 <_strtod_l+0xbc>
 8005752:	3501      	adds	r5, #1
 8005754:	2300      	movs	r3, #0
 8005756:	9519      	str	r5, [sp, #100]	@ 0x64
 8005758:	930e      	str	r3, [sp, #56]	@ 0x38
 800575a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800575c:	2b00      	cmp	r3, #0
 800575e:	f040 858e 	bne.w	800627e <_strtod_l+0xb96>
 8005762:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005764:	b1cb      	cbz	r3, 800579a <_strtod_l+0xb2>
 8005766:	4652      	mov	r2, sl
 8005768:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800576c:	ec43 2b10 	vmov	d0, r2, r3
 8005770:	b01f      	add	sp, #124	@ 0x7c
 8005772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005776:	2920      	cmp	r1, #32
 8005778:	d1ce      	bne.n	8005718 <_strtod_l+0x30>
 800577a:	3201      	adds	r2, #1
 800577c:	e7c1      	b.n	8005702 <_strtod_l+0x1a>
 800577e:	292d      	cmp	r1, #45	@ 0x2d
 8005780:	d1ca      	bne.n	8005718 <_strtod_l+0x30>
 8005782:	2101      	movs	r1, #1
 8005784:	910e      	str	r1, [sp, #56]	@ 0x38
 8005786:	1c51      	adds	r1, r2, #1
 8005788:	9119      	str	r1, [sp, #100]	@ 0x64
 800578a:	7852      	ldrb	r2, [r2, #1]
 800578c:	2a00      	cmp	r2, #0
 800578e:	d1c5      	bne.n	800571c <_strtod_l+0x34>
 8005790:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005792:	9419      	str	r4, [sp, #100]	@ 0x64
 8005794:	2b00      	cmp	r3, #0
 8005796:	f040 8570 	bne.w	800627a <_strtod_l+0xb92>
 800579a:	4652      	mov	r2, sl
 800579c:	465b      	mov	r3, fp
 800579e:	e7e5      	b.n	800576c <_strtod_l+0x84>
 80057a0:	2100      	movs	r1, #0
 80057a2:	e7ef      	b.n	8005784 <_strtod_l+0x9c>
 80057a4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80057a6:	b13a      	cbz	r2, 80057b8 <_strtod_l+0xd0>
 80057a8:	2135      	movs	r1, #53	@ 0x35
 80057aa:	a81c      	add	r0, sp, #112	@ 0x70
 80057ac:	f003 ff26 	bl	80095fc <__copybits>
 80057b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80057b2:	9805      	ldr	r0, [sp, #20]
 80057b4:	f003 fafc 	bl	8008db0 <_Bfree>
 80057b8:	3e01      	subs	r6, #1
 80057ba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80057bc:	2e04      	cmp	r6, #4
 80057be:	d806      	bhi.n	80057ce <_strtod_l+0xe6>
 80057c0:	e8df f006 	tbb	[pc, r6]
 80057c4:	201d0314 	.word	0x201d0314
 80057c8:	14          	.byte	0x14
 80057c9:	00          	.byte	0x00
 80057ca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80057ce:	05e1      	lsls	r1, r4, #23
 80057d0:	bf48      	it	mi
 80057d2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80057d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80057da:	0d1b      	lsrs	r3, r3, #20
 80057dc:	051b      	lsls	r3, r3, #20
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1bb      	bne.n	800575a <_strtod_l+0x72>
 80057e2:	f001 ff97 	bl	8007714 <__errno>
 80057e6:	2322      	movs	r3, #34	@ 0x22
 80057e8:	6003      	str	r3, [r0, #0]
 80057ea:	e7b6      	b.n	800575a <_strtod_l+0x72>
 80057ec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80057f0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80057f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80057f8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80057fc:	e7e7      	b.n	80057ce <_strtod_l+0xe6>
 80057fe:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8005980 <_strtod_l+0x298>
 8005802:	e7e4      	b.n	80057ce <_strtod_l+0xe6>
 8005804:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005808:	f04f 3aff 	mov.w	sl, #4294967295
 800580c:	e7df      	b.n	80057ce <_strtod_l+0xe6>
 800580e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005810:	1c5a      	adds	r2, r3, #1
 8005812:	9219      	str	r2, [sp, #100]	@ 0x64
 8005814:	785b      	ldrb	r3, [r3, #1]
 8005816:	2b30      	cmp	r3, #48	@ 0x30
 8005818:	d0f9      	beq.n	800580e <_strtod_l+0x126>
 800581a:	2b00      	cmp	r3, #0
 800581c:	d09d      	beq.n	800575a <_strtod_l+0x72>
 800581e:	2301      	movs	r3, #1
 8005820:	2700      	movs	r7, #0
 8005822:	9308      	str	r3, [sp, #32]
 8005824:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005826:	930c      	str	r3, [sp, #48]	@ 0x30
 8005828:	970b      	str	r7, [sp, #44]	@ 0x2c
 800582a:	46b9      	mov	r9, r7
 800582c:	220a      	movs	r2, #10
 800582e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005830:	7805      	ldrb	r5, [r0, #0]
 8005832:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005836:	b2d9      	uxtb	r1, r3
 8005838:	2909      	cmp	r1, #9
 800583a:	d928      	bls.n	800588e <_strtod_l+0x1a6>
 800583c:	494f      	ldr	r1, [pc, #316]	@ (800597c <_strtod_l+0x294>)
 800583e:	2201      	movs	r2, #1
 8005840:	f001 fe9c 	bl	800757c <strncmp>
 8005844:	2800      	cmp	r0, #0
 8005846:	d032      	beq.n	80058ae <_strtod_l+0x1c6>
 8005848:	2000      	movs	r0, #0
 800584a:	462a      	mov	r2, r5
 800584c:	900a      	str	r0, [sp, #40]	@ 0x28
 800584e:	464d      	mov	r5, r9
 8005850:	4603      	mov	r3, r0
 8005852:	2a65      	cmp	r2, #101	@ 0x65
 8005854:	d001      	beq.n	800585a <_strtod_l+0x172>
 8005856:	2a45      	cmp	r2, #69	@ 0x45
 8005858:	d114      	bne.n	8005884 <_strtod_l+0x19c>
 800585a:	b91d      	cbnz	r5, 8005864 <_strtod_l+0x17c>
 800585c:	9a08      	ldr	r2, [sp, #32]
 800585e:	4302      	orrs	r2, r0
 8005860:	d096      	beq.n	8005790 <_strtod_l+0xa8>
 8005862:	2500      	movs	r5, #0
 8005864:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005866:	1c62      	adds	r2, r4, #1
 8005868:	9219      	str	r2, [sp, #100]	@ 0x64
 800586a:	7862      	ldrb	r2, [r4, #1]
 800586c:	2a2b      	cmp	r2, #43	@ 0x2b
 800586e:	d07a      	beq.n	8005966 <_strtod_l+0x27e>
 8005870:	2a2d      	cmp	r2, #45	@ 0x2d
 8005872:	d07e      	beq.n	8005972 <_strtod_l+0x28a>
 8005874:	f04f 0c00 	mov.w	ip, #0
 8005878:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800587c:	2909      	cmp	r1, #9
 800587e:	f240 8085 	bls.w	800598c <_strtod_l+0x2a4>
 8005882:	9419      	str	r4, [sp, #100]	@ 0x64
 8005884:	f04f 0800 	mov.w	r8, #0
 8005888:	e0a5      	b.n	80059d6 <_strtod_l+0x2ee>
 800588a:	2300      	movs	r3, #0
 800588c:	e7c8      	b.n	8005820 <_strtod_l+0x138>
 800588e:	f1b9 0f08 	cmp.w	r9, #8
 8005892:	bfd8      	it	le
 8005894:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8005896:	f100 0001 	add.w	r0, r0, #1
 800589a:	bfda      	itte	le
 800589c:	fb02 3301 	mlale	r3, r2, r1, r3
 80058a0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80058a2:	fb02 3707 	mlagt	r7, r2, r7, r3
 80058a6:	f109 0901 	add.w	r9, r9, #1
 80058aa:	9019      	str	r0, [sp, #100]	@ 0x64
 80058ac:	e7bf      	b.n	800582e <_strtod_l+0x146>
 80058ae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80058b4:	785a      	ldrb	r2, [r3, #1]
 80058b6:	f1b9 0f00 	cmp.w	r9, #0
 80058ba:	d03b      	beq.n	8005934 <_strtod_l+0x24c>
 80058bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80058be:	464d      	mov	r5, r9
 80058c0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80058c4:	2b09      	cmp	r3, #9
 80058c6:	d912      	bls.n	80058ee <_strtod_l+0x206>
 80058c8:	2301      	movs	r3, #1
 80058ca:	e7c2      	b.n	8005852 <_strtod_l+0x16a>
 80058cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80058d2:	785a      	ldrb	r2, [r3, #1]
 80058d4:	3001      	adds	r0, #1
 80058d6:	2a30      	cmp	r2, #48	@ 0x30
 80058d8:	d0f8      	beq.n	80058cc <_strtod_l+0x1e4>
 80058da:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80058de:	2b08      	cmp	r3, #8
 80058e0:	f200 84d2 	bhi.w	8006288 <_strtod_l+0xba0>
 80058e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80058e6:	900a      	str	r0, [sp, #40]	@ 0x28
 80058e8:	2000      	movs	r0, #0
 80058ea:	930c      	str	r3, [sp, #48]	@ 0x30
 80058ec:	4605      	mov	r5, r0
 80058ee:	3a30      	subs	r2, #48	@ 0x30
 80058f0:	f100 0301 	add.w	r3, r0, #1
 80058f4:	d018      	beq.n	8005928 <_strtod_l+0x240>
 80058f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80058f8:	4419      	add	r1, r3
 80058fa:	910a      	str	r1, [sp, #40]	@ 0x28
 80058fc:	462e      	mov	r6, r5
 80058fe:	f04f 0e0a 	mov.w	lr, #10
 8005902:	1c71      	adds	r1, r6, #1
 8005904:	eba1 0c05 	sub.w	ip, r1, r5
 8005908:	4563      	cmp	r3, ip
 800590a:	dc15      	bgt.n	8005938 <_strtod_l+0x250>
 800590c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005910:	182b      	adds	r3, r5, r0
 8005912:	2b08      	cmp	r3, #8
 8005914:	f105 0501 	add.w	r5, r5, #1
 8005918:	4405      	add	r5, r0
 800591a:	dc1a      	bgt.n	8005952 <_strtod_l+0x26a>
 800591c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800591e:	230a      	movs	r3, #10
 8005920:	fb03 2301 	mla	r3, r3, r1, r2
 8005924:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005926:	2300      	movs	r3, #0
 8005928:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800592a:	1c51      	adds	r1, r2, #1
 800592c:	9119      	str	r1, [sp, #100]	@ 0x64
 800592e:	7852      	ldrb	r2, [r2, #1]
 8005930:	4618      	mov	r0, r3
 8005932:	e7c5      	b.n	80058c0 <_strtod_l+0x1d8>
 8005934:	4648      	mov	r0, r9
 8005936:	e7ce      	b.n	80058d6 <_strtod_l+0x1ee>
 8005938:	2e08      	cmp	r6, #8
 800593a:	dc05      	bgt.n	8005948 <_strtod_l+0x260>
 800593c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800593e:	fb0e f606 	mul.w	r6, lr, r6
 8005942:	960b      	str	r6, [sp, #44]	@ 0x2c
 8005944:	460e      	mov	r6, r1
 8005946:	e7dc      	b.n	8005902 <_strtod_l+0x21a>
 8005948:	2910      	cmp	r1, #16
 800594a:	bfd8      	it	le
 800594c:	fb0e f707 	mulle.w	r7, lr, r7
 8005950:	e7f8      	b.n	8005944 <_strtod_l+0x25c>
 8005952:	2b0f      	cmp	r3, #15
 8005954:	bfdc      	itt	le
 8005956:	230a      	movle	r3, #10
 8005958:	fb03 2707 	mlale	r7, r3, r7, r2
 800595c:	e7e3      	b.n	8005926 <_strtod_l+0x23e>
 800595e:	2300      	movs	r3, #0
 8005960:	930a      	str	r3, [sp, #40]	@ 0x28
 8005962:	2301      	movs	r3, #1
 8005964:	e77a      	b.n	800585c <_strtod_l+0x174>
 8005966:	f04f 0c00 	mov.w	ip, #0
 800596a:	1ca2      	adds	r2, r4, #2
 800596c:	9219      	str	r2, [sp, #100]	@ 0x64
 800596e:	78a2      	ldrb	r2, [r4, #2]
 8005970:	e782      	b.n	8005878 <_strtod_l+0x190>
 8005972:	f04f 0c01 	mov.w	ip, #1
 8005976:	e7f8      	b.n	800596a <_strtod_l+0x282>
 8005978:	0800a3b4 	.word	0x0800a3b4
 800597c:	0800a170 	.word	0x0800a170
 8005980:	7ff00000 	.word	0x7ff00000
 8005984:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005986:	1c51      	adds	r1, r2, #1
 8005988:	9119      	str	r1, [sp, #100]	@ 0x64
 800598a:	7852      	ldrb	r2, [r2, #1]
 800598c:	2a30      	cmp	r2, #48	@ 0x30
 800598e:	d0f9      	beq.n	8005984 <_strtod_l+0x29c>
 8005990:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005994:	2908      	cmp	r1, #8
 8005996:	f63f af75 	bhi.w	8005884 <_strtod_l+0x19c>
 800599a:	3a30      	subs	r2, #48	@ 0x30
 800599c:	9209      	str	r2, [sp, #36]	@ 0x24
 800599e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80059a0:	920f      	str	r2, [sp, #60]	@ 0x3c
 80059a2:	f04f 080a 	mov.w	r8, #10
 80059a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80059a8:	1c56      	adds	r6, r2, #1
 80059aa:	9619      	str	r6, [sp, #100]	@ 0x64
 80059ac:	7852      	ldrb	r2, [r2, #1]
 80059ae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80059b2:	f1be 0f09 	cmp.w	lr, #9
 80059b6:	d939      	bls.n	8005a2c <_strtod_l+0x344>
 80059b8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80059ba:	1a76      	subs	r6, r6, r1
 80059bc:	2e08      	cmp	r6, #8
 80059be:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80059c2:	dc03      	bgt.n	80059cc <_strtod_l+0x2e4>
 80059c4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80059c6:	4588      	cmp	r8, r1
 80059c8:	bfa8      	it	ge
 80059ca:	4688      	movge	r8, r1
 80059cc:	f1bc 0f00 	cmp.w	ip, #0
 80059d0:	d001      	beq.n	80059d6 <_strtod_l+0x2ee>
 80059d2:	f1c8 0800 	rsb	r8, r8, #0
 80059d6:	2d00      	cmp	r5, #0
 80059d8:	d14e      	bne.n	8005a78 <_strtod_l+0x390>
 80059da:	9908      	ldr	r1, [sp, #32]
 80059dc:	4308      	orrs	r0, r1
 80059de:	f47f aebc 	bne.w	800575a <_strtod_l+0x72>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f47f aed4 	bne.w	8005790 <_strtod_l+0xa8>
 80059e8:	2a69      	cmp	r2, #105	@ 0x69
 80059ea:	d028      	beq.n	8005a3e <_strtod_l+0x356>
 80059ec:	dc25      	bgt.n	8005a3a <_strtod_l+0x352>
 80059ee:	2a49      	cmp	r2, #73	@ 0x49
 80059f0:	d025      	beq.n	8005a3e <_strtod_l+0x356>
 80059f2:	2a4e      	cmp	r2, #78	@ 0x4e
 80059f4:	f47f aecc 	bne.w	8005790 <_strtod_l+0xa8>
 80059f8:	499a      	ldr	r1, [pc, #616]	@ (8005c64 <_strtod_l+0x57c>)
 80059fa:	a819      	add	r0, sp, #100	@ 0x64
 80059fc:	f003 f820 	bl	8008a40 <__match>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	f43f aec5 	beq.w	8005790 <_strtod_l+0xa8>
 8005a06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	2b28      	cmp	r3, #40	@ 0x28
 8005a0c:	d12e      	bne.n	8005a6c <_strtod_l+0x384>
 8005a0e:	4996      	ldr	r1, [pc, #600]	@ (8005c68 <_strtod_l+0x580>)
 8005a10:	aa1c      	add	r2, sp, #112	@ 0x70
 8005a12:	a819      	add	r0, sp, #100	@ 0x64
 8005a14:	f003 f828 	bl	8008a68 <__hexnan>
 8005a18:	2805      	cmp	r0, #5
 8005a1a:	d127      	bne.n	8005a6c <_strtod_l+0x384>
 8005a1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005a1e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005a22:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005a26:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005a2a:	e696      	b.n	800575a <_strtod_l+0x72>
 8005a2c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a2e:	fb08 2101 	mla	r1, r8, r1, r2
 8005a32:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005a36:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a38:	e7b5      	b.n	80059a6 <_strtod_l+0x2be>
 8005a3a:	2a6e      	cmp	r2, #110	@ 0x6e
 8005a3c:	e7da      	b.n	80059f4 <_strtod_l+0x30c>
 8005a3e:	498b      	ldr	r1, [pc, #556]	@ (8005c6c <_strtod_l+0x584>)
 8005a40:	a819      	add	r0, sp, #100	@ 0x64
 8005a42:	f002 fffd 	bl	8008a40 <__match>
 8005a46:	2800      	cmp	r0, #0
 8005a48:	f43f aea2 	beq.w	8005790 <_strtod_l+0xa8>
 8005a4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a4e:	4988      	ldr	r1, [pc, #544]	@ (8005c70 <_strtod_l+0x588>)
 8005a50:	3b01      	subs	r3, #1
 8005a52:	a819      	add	r0, sp, #100	@ 0x64
 8005a54:	9319      	str	r3, [sp, #100]	@ 0x64
 8005a56:	f002 fff3 	bl	8008a40 <__match>
 8005a5a:	b910      	cbnz	r0, 8005a62 <_strtod_l+0x37a>
 8005a5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005a5e:	3301      	adds	r3, #1
 8005a60:	9319      	str	r3, [sp, #100]	@ 0x64
 8005a62:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8005c80 <_strtod_l+0x598>
 8005a66:	f04f 0a00 	mov.w	sl, #0
 8005a6a:	e676      	b.n	800575a <_strtod_l+0x72>
 8005a6c:	4881      	ldr	r0, [pc, #516]	@ (8005c74 <_strtod_l+0x58c>)
 8005a6e:	f001 fe8f 	bl	8007790 <nan>
 8005a72:	ec5b ab10 	vmov	sl, fp, d0
 8005a76:	e670      	b.n	800575a <_strtod_l+0x72>
 8005a78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a7a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8005a7c:	eba8 0303 	sub.w	r3, r8, r3
 8005a80:	f1b9 0f00 	cmp.w	r9, #0
 8005a84:	bf08      	it	eq
 8005a86:	46a9      	moveq	r9, r5
 8005a88:	2d10      	cmp	r5, #16
 8005a8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a8c:	462c      	mov	r4, r5
 8005a8e:	bfa8      	it	ge
 8005a90:	2410      	movge	r4, #16
 8005a92:	f7fa fd47 	bl	8000524 <__aeabi_ui2d>
 8005a96:	2d09      	cmp	r5, #9
 8005a98:	4682      	mov	sl, r0
 8005a9a:	468b      	mov	fp, r1
 8005a9c:	dc13      	bgt.n	8005ac6 <_strtod_l+0x3de>
 8005a9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f43f ae5a 	beq.w	800575a <_strtod_l+0x72>
 8005aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005aa8:	dd78      	ble.n	8005b9c <_strtod_l+0x4b4>
 8005aaa:	2b16      	cmp	r3, #22
 8005aac:	dc5f      	bgt.n	8005b6e <_strtod_l+0x486>
 8005aae:	4972      	ldr	r1, [pc, #456]	@ (8005c78 <_strtod_l+0x590>)
 8005ab0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005ab4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ab8:	4652      	mov	r2, sl
 8005aba:	465b      	mov	r3, fp
 8005abc:	f7fa fdac 	bl	8000618 <__aeabi_dmul>
 8005ac0:	4682      	mov	sl, r0
 8005ac2:	468b      	mov	fp, r1
 8005ac4:	e649      	b.n	800575a <_strtod_l+0x72>
 8005ac6:	4b6c      	ldr	r3, [pc, #432]	@ (8005c78 <_strtod_l+0x590>)
 8005ac8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005acc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005ad0:	f7fa fda2 	bl	8000618 <__aeabi_dmul>
 8005ad4:	4682      	mov	sl, r0
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	468b      	mov	fp, r1
 8005ada:	f7fa fd23 	bl	8000524 <__aeabi_ui2d>
 8005ade:	4602      	mov	r2, r0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4650      	mov	r0, sl
 8005ae4:	4659      	mov	r1, fp
 8005ae6:	f7fa fbe1 	bl	80002ac <__adddf3>
 8005aea:	2d0f      	cmp	r5, #15
 8005aec:	4682      	mov	sl, r0
 8005aee:	468b      	mov	fp, r1
 8005af0:	ddd5      	ble.n	8005a9e <_strtod_l+0x3b6>
 8005af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005af4:	1b2c      	subs	r4, r5, r4
 8005af6:	441c      	add	r4, r3
 8005af8:	2c00      	cmp	r4, #0
 8005afa:	f340 8093 	ble.w	8005c24 <_strtod_l+0x53c>
 8005afe:	f014 030f 	ands.w	r3, r4, #15
 8005b02:	d00a      	beq.n	8005b1a <_strtod_l+0x432>
 8005b04:	495c      	ldr	r1, [pc, #368]	@ (8005c78 <_strtod_l+0x590>)
 8005b06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005b0a:	4652      	mov	r2, sl
 8005b0c:	465b      	mov	r3, fp
 8005b0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b12:	f7fa fd81 	bl	8000618 <__aeabi_dmul>
 8005b16:	4682      	mov	sl, r0
 8005b18:	468b      	mov	fp, r1
 8005b1a:	f034 040f 	bics.w	r4, r4, #15
 8005b1e:	d073      	beq.n	8005c08 <_strtod_l+0x520>
 8005b20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005b24:	dd49      	ble.n	8005bba <_strtod_l+0x4d2>
 8005b26:	2400      	movs	r4, #0
 8005b28:	46a0      	mov	r8, r4
 8005b2a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005b2c:	46a1      	mov	r9, r4
 8005b2e:	9a05      	ldr	r2, [sp, #20]
 8005b30:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8005c80 <_strtod_l+0x598>
 8005b34:	2322      	movs	r3, #34	@ 0x22
 8005b36:	6013      	str	r3, [r2, #0]
 8005b38:	f04f 0a00 	mov.w	sl, #0
 8005b3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	f43f ae0b 	beq.w	800575a <_strtod_l+0x72>
 8005b44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b46:	9805      	ldr	r0, [sp, #20]
 8005b48:	f003 f932 	bl	8008db0 <_Bfree>
 8005b4c:	9805      	ldr	r0, [sp, #20]
 8005b4e:	4649      	mov	r1, r9
 8005b50:	f003 f92e 	bl	8008db0 <_Bfree>
 8005b54:	9805      	ldr	r0, [sp, #20]
 8005b56:	4641      	mov	r1, r8
 8005b58:	f003 f92a 	bl	8008db0 <_Bfree>
 8005b5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b5e:	9805      	ldr	r0, [sp, #20]
 8005b60:	f003 f926 	bl	8008db0 <_Bfree>
 8005b64:	9805      	ldr	r0, [sp, #20]
 8005b66:	4621      	mov	r1, r4
 8005b68:	f003 f922 	bl	8008db0 <_Bfree>
 8005b6c:	e5f5      	b.n	800575a <_strtod_l+0x72>
 8005b6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005b74:	4293      	cmp	r3, r2
 8005b76:	dbbc      	blt.n	8005af2 <_strtod_l+0x40a>
 8005b78:	4c3f      	ldr	r4, [pc, #252]	@ (8005c78 <_strtod_l+0x590>)
 8005b7a:	f1c5 050f 	rsb	r5, r5, #15
 8005b7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005b82:	4652      	mov	r2, sl
 8005b84:	465b      	mov	r3, fp
 8005b86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b8a:	f7fa fd45 	bl	8000618 <__aeabi_dmul>
 8005b8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b90:	1b5d      	subs	r5, r3, r5
 8005b92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005b96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005b9a:	e78f      	b.n	8005abc <_strtod_l+0x3d4>
 8005b9c:	3316      	adds	r3, #22
 8005b9e:	dba8      	blt.n	8005af2 <_strtod_l+0x40a>
 8005ba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ba2:	eba3 0808 	sub.w	r8, r3, r8
 8005ba6:	4b34      	ldr	r3, [pc, #208]	@ (8005c78 <_strtod_l+0x590>)
 8005ba8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005bac:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005bb0:	4650      	mov	r0, sl
 8005bb2:	4659      	mov	r1, fp
 8005bb4:	f7fa fe5a 	bl	800086c <__aeabi_ddiv>
 8005bb8:	e782      	b.n	8005ac0 <_strtod_l+0x3d8>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	4f2f      	ldr	r7, [pc, #188]	@ (8005c7c <_strtod_l+0x594>)
 8005bbe:	1124      	asrs	r4, r4, #4
 8005bc0:	4650      	mov	r0, sl
 8005bc2:	4659      	mov	r1, fp
 8005bc4:	461e      	mov	r6, r3
 8005bc6:	2c01      	cmp	r4, #1
 8005bc8:	dc21      	bgt.n	8005c0e <_strtod_l+0x526>
 8005bca:	b10b      	cbz	r3, 8005bd0 <_strtod_l+0x4e8>
 8005bcc:	4682      	mov	sl, r0
 8005bce:	468b      	mov	fp, r1
 8005bd0:	492a      	ldr	r1, [pc, #168]	@ (8005c7c <_strtod_l+0x594>)
 8005bd2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005bd6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005bda:	4652      	mov	r2, sl
 8005bdc:	465b      	mov	r3, fp
 8005bde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005be2:	f7fa fd19 	bl	8000618 <__aeabi_dmul>
 8005be6:	4b26      	ldr	r3, [pc, #152]	@ (8005c80 <_strtod_l+0x598>)
 8005be8:	460a      	mov	r2, r1
 8005bea:	400b      	ands	r3, r1
 8005bec:	4925      	ldr	r1, [pc, #148]	@ (8005c84 <_strtod_l+0x59c>)
 8005bee:	428b      	cmp	r3, r1
 8005bf0:	4682      	mov	sl, r0
 8005bf2:	d898      	bhi.n	8005b26 <_strtod_l+0x43e>
 8005bf4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005bf8:	428b      	cmp	r3, r1
 8005bfa:	bf86      	itte	hi
 8005bfc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8005c88 <_strtod_l+0x5a0>
 8005c00:	f04f 3aff 	movhi.w	sl, #4294967295
 8005c04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005c08:	2300      	movs	r3, #0
 8005c0a:	9308      	str	r3, [sp, #32]
 8005c0c:	e076      	b.n	8005cfc <_strtod_l+0x614>
 8005c0e:	07e2      	lsls	r2, r4, #31
 8005c10:	d504      	bpl.n	8005c1c <_strtod_l+0x534>
 8005c12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c16:	f7fa fcff 	bl	8000618 <__aeabi_dmul>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	3601      	adds	r6, #1
 8005c1e:	1064      	asrs	r4, r4, #1
 8005c20:	3708      	adds	r7, #8
 8005c22:	e7d0      	b.n	8005bc6 <_strtod_l+0x4de>
 8005c24:	d0f0      	beq.n	8005c08 <_strtod_l+0x520>
 8005c26:	4264      	negs	r4, r4
 8005c28:	f014 020f 	ands.w	r2, r4, #15
 8005c2c:	d00a      	beq.n	8005c44 <_strtod_l+0x55c>
 8005c2e:	4b12      	ldr	r3, [pc, #72]	@ (8005c78 <_strtod_l+0x590>)
 8005c30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c34:	4650      	mov	r0, sl
 8005c36:	4659      	mov	r1, fp
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f7fa fe16 	bl	800086c <__aeabi_ddiv>
 8005c40:	4682      	mov	sl, r0
 8005c42:	468b      	mov	fp, r1
 8005c44:	1124      	asrs	r4, r4, #4
 8005c46:	d0df      	beq.n	8005c08 <_strtod_l+0x520>
 8005c48:	2c1f      	cmp	r4, #31
 8005c4a:	dd1f      	ble.n	8005c8c <_strtod_l+0x5a4>
 8005c4c:	2400      	movs	r4, #0
 8005c4e:	46a0      	mov	r8, r4
 8005c50:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005c52:	46a1      	mov	r9, r4
 8005c54:	9a05      	ldr	r2, [sp, #20]
 8005c56:	2322      	movs	r3, #34	@ 0x22
 8005c58:	f04f 0a00 	mov.w	sl, #0
 8005c5c:	f04f 0b00 	mov.w	fp, #0
 8005c60:	6013      	str	r3, [r2, #0]
 8005c62:	e76b      	b.n	8005b3c <_strtod_l+0x454>
 8005c64:	0800a17f 	.word	0x0800a17f
 8005c68:	0800a3a0 	.word	0x0800a3a0
 8005c6c:	0800a177 	.word	0x0800a177
 8005c70:	0800a263 	.word	0x0800a263
 8005c74:	0800a25f 	.word	0x0800a25f
 8005c78:	0800a528 	.word	0x0800a528
 8005c7c:	0800a500 	.word	0x0800a500
 8005c80:	7ff00000 	.word	0x7ff00000
 8005c84:	7ca00000 	.word	0x7ca00000
 8005c88:	7fefffff 	.word	0x7fefffff
 8005c8c:	f014 0310 	ands.w	r3, r4, #16
 8005c90:	bf18      	it	ne
 8005c92:	236a      	movne	r3, #106	@ 0x6a
 8005c94:	4ea9      	ldr	r6, [pc, #676]	@ (8005f3c <_strtod_l+0x854>)
 8005c96:	9308      	str	r3, [sp, #32]
 8005c98:	4650      	mov	r0, sl
 8005c9a:	4659      	mov	r1, fp
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	07e7      	lsls	r7, r4, #31
 8005ca0:	d504      	bpl.n	8005cac <_strtod_l+0x5c4>
 8005ca2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ca6:	f7fa fcb7 	bl	8000618 <__aeabi_dmul>
 8005caa:	2301      	movs	r3, #1
 8005cac:	1064      	asrs	r4, r4, #1
 8005cae:	f106 0608 	add.w	r6, r6, #8
 8005cb2:	d1f4      	bne.n	8005c9e <_strtod_l+0x5b6>
 8005cb4:	b10b      	cbz	r3, 8005cba <_strtod_l+0x5d2>
 8005cb6:	4682      	mov	sl, r0
 8005cb8:	468b      	mov	fp, r1
 8005cba:	9b08      	ldr	r3, [sp, #32]
 8005cbc:	b1b3      	cbz	r3, 8005cec <_strtod_l+0x604>
 8005cbe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005cc2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	4659      	mov	r1, fp
 8005cca:	dd0f      	ble.n	8005cec <_strtod_l+0x604>
 8005ccc:	2b1f      	cmp	r3, #31
 8005cce:	dd56      	ble.n	8005d7e <_strtod_l+0x696>
 8005cd0:	2b34      	cmp	r3, #52	@ 0x34
 8005cd2:	bfde      	ittt	le
 8005cd4:	f04f 33ff 	movle.w	r3, #4294967295
 8005cd8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005cdc:	4093      	lslle	r3, r2
 8005cde:	f04f 0a00 	mov.w	sl, #0
 8005ce2:	bfcc      	ite	gt
 8005ce4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005ce8:	ea03 0b01 	andle.w	fp, r3, r1
 8005cec:	2200      	movs	r2, #0
 8005cee:	2300      	movs	r3, #0
 8005cf0:	4650      	mov	r0, sl
 8005cf2:	4659      	mov	r1, fp
 8005cf4:	f7fa fef8 	bl	8000ae8 <__aeabi_dcmpeq>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	d1a7      	bne.n	8005c4c <_strtod_l+0x564>
 8005cfc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005d02:	9805      	ldr	r0, [sp, #20]
 8005d04:	462b      	mov	r3, r5
 8005d06:	464a      	mov	r2, r9
 8005d08:	f003 f8ba 	bl	8008e80 <__s2b>
 8005d0c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	f43f af09 	beq.w	8005b26 <_strtod_l+0x43e>
 8005d14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d16:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d18:	2a00      	cmp	r2, #0
 8005d1a:	eba3 0308 	sub.w	r3, r3, r8
 8005d1e:	bfa8      	it	ge
 8005d20:	2300      	movge	r3, #0
 8005d22:	9312      	str	r3, [sp, #72]	@ 0x48
 8005d24:	2400      	movs	r4, #0
 8005d26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005d2a:	9316      	str	r3, [sp, #88]	@ 0x58
 8005d2c:	46a0      	mov	r8, r4
 8005d2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d30:	9805      	ldr	r0, [sp, #20]
 8005d32:	6859      	ldr	r1, [r3, #4]
 8005d34:	f002 fffc 	bl	8008d30 <_Balloc>
 8005d38:	4681      	mov	r9, r0
 8005d3a:	2800      	cmp	r0, #0
 8005d3c:	f43f aef7 	beq.w	8005b2e <_strtod_l+0x446>
 8005d40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d42:	691a      	ldr	r2, [r3, #16]
 8005d44:	3202      	adds	r2, #2
 8005d46:	f103 010c 	add.w	r1, r3, #12
 8005d4a:	0092      	lsls	r2, r2, #2
 8005d4c:	300c      	adds	r0, #12
 8005d4e:	f001 fd0e 	bl	800776e <memcpy>
 8005d52:	ec4b ab10 	vmov	d0, sl, fp
 8005d56:	9805      	ldr	r0, [sp, #20]
 8005d58:	aa1c      	add	r2, sp, #112	@ 0x70
 8005d5a:	a91b      	add	r1, sp, #108	@ 0x6c
 8005d5c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005d60:	f003 fbc2 	bl	80094e8 <__d2b>
 8005d64:	901a      	str	r0, [sp, #104]	@ 0x68
 8005d66:	2800      	cmp	r0, #0
 8005d68:	f43f aee1 	beq.w	8005b2e <_strtod_l+0x446>
 8005d6c:	9805      	ldr	r0, [sp, #20]
 8005d6e:	2101      	movs	r1, #1
 8005d70:	f003 f91c 	bl	8008fac <__i2b>
 8005d74:	4680      	mov	r8, r0
 8005d76:	b948      	cbnz	r0, 8005d8c <_strtod_l+0x6a4>
 8005d78:	f04f 0800 	mov.w	r8, #0
 8005d7c:	e6d7      	b.n	8005b2e <_strtod_l+0x446>
 8005d7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	ea03 0a0a 	and.w	sl, r3, sl
 8005d8a:	e7af      	b.n	8005cec <_strtod_l+0x604>
 8005d8c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005d8e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005d90:	2d00      	cmp	r5, #0
 8005d92:	bfab      	itete	ge
 8005d94:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005d96:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005d98:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005d9a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005d9c:	bfac      	ite	ge
 8005d9e:	18ef      	addge	r7, r5, r3
 8005da0:	1b5e      	sublt	r6, r3, r5
 8005da2:	9b08      	ldr	r3, [sp, #32]
 8005da4:	1aed      	subs	r5, r5, r3
 8005da6:	4415      	add	r5, r2
 8005da8:	4b65      	ldr	r3, [pc, #404]	@ (8005f40 <_strtod_l+0x858>)
 8005daa:	3d01      	subs	r5, #1
 8005dac:	429d      	cmp	r5, r3
 8005dae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005db2:	da50      	bge.n	8005e56 <_strtod_l+0x76e>
 8005db4:	1b5b      	subs	r3, r3, r5
 8005db6:	2b1f      	cmp	r3, #31
 8005db8:	eba2 0203 	sub.w	r2, r2, r3
 8005dbc:	f04f 0101 	mov.w	r1, #1
 8005dc0:	dc3d      	bgt.n	8005e3e <_strtod_l+0x756>
 8005dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8005dc6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005dc8:	2300      	movs	r3, #0
 8005dca:	9310      	str	r3, [sp, #64]	@ 0x40
 8005dcc:	18bd      	adds	r5, r7, r2
 8005dce:	9b08      	ldr	r3, [sp, #32]
 8005dd0:	42af      	cmp	r7, r5
 8005dd2:	4416      	add	r6, r2
 8005dd4:	441e      	add	r6, r3
 8005dd6:	463b      	mov	r3, r7
 8005dd8:	bfa8      	it	ge
 8005dda:	462b      	movge	r3, r5
 8005ddc:	42b3      	cmp	r3, r6
 8005dde:	bfa8      	it	ge
 8005de0:	4633      	movge	r3, r6
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	bfc2      	ittt	gt
 8005de6:	1aed      	subgt	r5, r5, r3
 8005de8:	1af6      	subgt	r6, r6, r3
 8005dea:	1aff      	subgt	r7, r7, r3
 8005dec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	dd16      	ble.n	8005e20 <_strtod_l+0x738>
 8005df2:	4641      	mov	r1, r8
 8005df4:	9805      	ldr	r0, [sp, #20]
 8005df6:	461a      	mov	r2, r3
 8005df8:	f003 f990 	bl	800911c <__pow5mult>
 8005dfc:	4680      	mov	r8, r0
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d0ba      	beq.n	8005d78 <_strtod_l+0x690>
 8005e02:	4601      	mov	r1, r0
 8005e04:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005e06:	9805      	ldr	r0, [sp, #20]
 8005e08:	f003 f8e6 	bl	8008fd8 <__multiply>
 8005e0c:	900a      	str	r0, [sp, #40]	@ 0x28
 8005e0e:	2800      	cmp	r0, #0
 8005e10:	f43f ae8d 	beq.w	8005b2e <_strtod_l+0x446>
 8005e14:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e16:	9805      	ldr	r0, [sp, #20]
 8005e18:	f002 ffca 	bl	8008db0 <_Bfree>
 8005e1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005e20:	2d00      	cmp	r5, #0
 8005e22:	dc1d      	bgt.n	8005e60 <_strtod_l+0x778>
 8005e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	dd23      	ble.n	8005e72 <_strtod_l+0x78a>
 8005e2a:	4649      	mov	r1, r9
 8005e2c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005e2e:	9805      	ldr	r0, [sp, #20]
 8005e30:	f003 f974 	bl	800911c <__pow5mult>
 8005e34:	4681      	mov	r9, r0
 8005e36:	b9e0      	cbnz	r0, 8005e72 <_strtod_l+0x78a>
 8005e38:	f04f 0900 	mov.w	r9, #0
 8005e3c:	e677      	b.n	8005b2e <_strtod_l+0x446>
 8005e3e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005e42:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005e46:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005e4a:	35e2      	adds	r5, #226	@ 0xe2
 8005e4c:	fa01 f305 	lsl.w	r3, r1, r5
 8005e50:	9310      	str	r3, [sp, #64]	@ 0x40
 8005e52:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005e54:	e7ba      	b.n	8005dcc <_strtod_l+0x6e4>
 8005e56:	2300      	movs	r3, #0
 8005e58:	9310      	str	r3, [sp, #64]	@ 0x40
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e5e:	e7b5      	b.n	8005dcc <_strtod_l+0x6e4>
 8005e60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e62:	9805      	ldr	r0, [sp, #20]
 8005e64:	462a      	mov	r2, r5
 8005e66:	f003 f9b3 	bl	80091d0 <__lshift>
 8005e6a:	901a      	str	r0, [sp, #104]	@ 0x68
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d1d9      	bne.n	8005e24 <_strtod_l+0x73c>
 8005e70:	e65d      	b.n	8005b2e <_strtod_l+0x446>
 8005e72:	2e00      	cmp	r6, #0
 8005e74:	dd07      	ble.n	8005e86 <_strtod_l+0x79e>
 8005e76:	4649      	mov	r1, r9
 8005e78:	9805      	ldr	r0, [sp, #20]
 8005e7a:	4632      	mov	r2, r6
 8005e7c:	f003 f9a8 	bl	80091d0 <__lshift>
 8005e80:	4681      	mov	r9, r0
 8005e82:	2800      	cmp	r0, #0
 8005e84:	d0d8      	beq.n	8005e38 <_strtod_l+0x750>
 8005e86:	2f00      	cmp	r7, #0
 8005e88:	dd08      	ble.n	8005e9c <_strtod_l+0x7b4>
 8005e8a:	4641      	mov	r1, r8
 8005e8c:	9805      	ldr	r0, [sp, #20]
 8005e8e:	463a      	mov	r2, r7
 8005e90:	f003 f99e 	bl	80091d0 <__lshift>
 8005e94:	4680      	mov	r8, r0
 8005e96:	2800      	cmp	r0, #0
 8005e98:	f43f ae49 	beq.w	8005b2e <_strtod_l+0x446>
 8005e9c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e9e:	9805      	ldr	r0, [sp, #20]
 8005ea0:	464a      	mov	r2, r9
 8005ea2:	f003 fa1d 	bl	80092e0 <__mdiff>
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	f43f ae40 	beq.w	8005b2e <_strtod_l+0x446>
 8005eae:	68c3      	ldr	r3, [r0, #12]
 8005eb0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	60c3      	str	r3, [r0, #12]
 8005eb6:	4641      	mov	r1, r8
 8005eb8:	f003 f9f6 	bl	80092a8 <__mcmp>
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	da45      	bge.n	8005f4c <_strtod_l+0x864>
 8005ec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ec2:	ea53 030a 	orrs.w	r3, r3, sl
 8005ec6:	d16b      	bne.n	8005fa0 <_strtod_l+0x8b8>
 8005ec8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d167      	bne.n	8005fa0 <_strtod_l+0x8b8>
 8005ed0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005ed4:	0d1b      	lsrs	r3, r3, #20
 8005ed6:	051b      	lsls	r3, r3, #20
 8005ed8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005edc:	d960      	bls.n	8005fa0 <_strtod_l+0x8b8>
 8005ede:	6963      	ldr	r3, [r4, #20]
 8005ee0:	b913      	cbnz	r3, 8005ee8 <_strtod_l+0x800>
 8005ee2:	6923      	ldr	r3, [r4, #16]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	dd5b      	ble.n	8005fa0 <_strtod_l+0x8b8>
 8005ee8:	4621      	mov	r1, r4
 8005eea:	2201      	movs	r2, #1
 8005eec:	9805      	ldr	r0, [sp, #20]
 8005eee:	f003 f96f 	bl	80091d0 <__lshift>
 8005ef2:	4641      	mov	r1, r8
 8005ef4:	4604      	mov	r4, r0
 8005ef6:	f003 f9d7 	bl	80092a8 <__mcmp>
 8005efa:	2800      	cmp	r0, #0
 8005efc:	dd50      	ble.n	8005fa0 <_strtod_l+0x8b8>
 8005efe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005f02:	9a08      	ldr	r2, [sp, #32]
 8005f04:	0d1b      	lsrs	r3, r3, #20
 8005f06:	051b      	lsls	r3, r3, #20
 8005f08:	2a00      	cmp	r2, #0
 8005f0a:	d06a      	beq.n	8005fe2 <_strtod_l+0x8fa>
 8005f0c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005f10:	d867      	bhi.n	8005fe2 <_strtod_l+0x8fa>
 8005f12:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005f16:	f67f ae9d 	bls.w	8005c54 <_strtod_l+0x56c>
 8005f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f44 <_strtod_l+0x85c>)
 8005f1c:	4650      	mov	r0, sl
 8005f1e:	4659      	mov	r1, fp
 8005f20:	2200      	movs	r2, #0
 8005f22:	f7fa fb79 	bl	8000618 <__aeabi_dmul>
 8005f26:	4b08      	ldr	r3, [pc, #32]	@ (8005f48 <_strtod_l+0x860>)
 8005f28:	400b      	ands	r3, r1
 8005f2a:	4682      	mov	sl, r0
 8005f2c:	468b      	mov	fp, r1
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f47f ae08 	bne.w	8005b44 <_strtod_l+0x45c>
 8005f34:	9a05      	ldr	r2, [sp, #20]
 8005f36:	2322      	movs	r3, #34	@ 0x22
 8005f38:	6013      	str	r3, [r2, #0]
 8005f3a:	e603      	b.n	8005b44 <_strtod_l+0x45c>
 8005f3c:	0800a3c8 	.word	0x0800a3c8
 8005f40:	fffffc02 	.word	0xfffffc02
 8005f44:	39500000 	.word	0x39500000
 8005f48:	7ff00000 	.word	0x7ff00000
 8005f4c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8005f50:	d165      	bne.n	800601e <_strtod_l+0x936>
 8005f52:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005f54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f58:	b35a      	cbz	r2, 8005fb2 <_strtod_l+0x8ca>
 8005f5a:	4a9f      	ldr	r2, [pc, #636]	@ (80061d8 <_strtod_l+0xaf0>)
 8005f5c:	4293      	cmp	r3, r2
 8005f5e:	d12b      	bne.n	8005fb8 <_strtod_l+0x8d0>
 8005f60:	9b08      	ldr	r3, [sp, #32]
 8005f62:	4651      	mov	r1, sl
 8005f64:	b303      	cbz	r3, 8005fa8 <_strtod_l+0x8c0>
 8005f66:	4b9d      	ldr	r3, [pc, #628]	@ (80061dc <_strtod_l+0xaf4>)
 8005f68:	465a      	mov	r2, fp
 8005f6a:	4013      	ands	r3, r2
 8005f6c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005f70:	f04f 32ff 	mov.w	r2, #4294967295
 8005f74:	d81b      	bhi.n	8005fae <_strtod_l+0x8c6>
 8005f76:	0d1b      	lsrs	r3, r3, #20
 8005f78:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f80:	4299      	cmp	r1, r3
 8005f82:	d119      	bne.n	8005fb8 <_strtod_l+0x8d0>
 8005f84:	4b96      	ldr	r3, [pc, #600]	@ (80061e0 <_strtod_l+0xaf8>)
 8005f86:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d102      	bne.n	8005f92 <_strtod_l+0x8aa>
 8005f8c:	3101      	adds	r1, #1
 8005f8e:	f43f adce 	beq.w	8005b2e <_strtod_l+0x446>
 8005f92:	4b92      	ldr	r3, [pc, #584]	@ (80061dc <_strtod_l+0xaf4>)
 8005f94:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f96:	401a      	ands	r2, r3
 8005f98:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005f9c:	f04f 0a00 	mov.w	sl, #0
 8005fa0:	9b08      	ldr	r3, [sp, #32]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1b9      	bne.n	8005f1a <_strtod_l+0x832>
 8005fa6:	e5cd      	b.n	8005b44 <_strtod_l+0x45c>
 8005fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fac:	e7e8      	b.n	8005f80 <_strtod_l+0x898>
 8005fae:	4613      	mov	r3, r2
 8005fb0:	e7e6      	b.n	8005f80 <_strtod_l+0x898>
 8005fb2:	ea53 030a 	orrs.w	r3, r3, sl
 8005fb6:	d0a2      	beq.n	8005efe <_strtod_l+0x816>
 8005fb8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005fba:	b1db      	cbz	r3, 8005ff4 <_strtod_l+0x90c>
 8005fbc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fbe:	4213      	tst	r3, r2
 8005fc0:	d0ee      	beq.n	8005fa0 <_strtod_l+0x8b8>
 8005fc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fc4:	9a08      	ldr	r2, [sp, #32]
 8005fc6:	4650      	mov	r0, sl
 8005fc8:	4659      	mov	r1, fp
 8005fca:	b1bb      	cbz	r3, 8005ffc <_strtod_l+0x914>
 8005fcc:	f7ff fb6d 	bl	80056aa <sulp>
 8005fd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fd4:	ec53 2b10 	vmov	r2, r3, d0
 8005fd8:	f7fa f968 	bl	80002ac <__adddf3>
 8005fdc:	4682      	mov	sl, r0
 8005fde:	468b      	mov	fp, r1
 8005fe0:	e7de      	b.n	8005fa0 <_strtod_l+0x8b8>
 8005fe2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005fe6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005fea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005fee:	f04f 3aff 	mov.w	sl, #4294967295
 8005ff2:	e7d5      	b.n	8005fa0 <_strtod_l+0x8b8>
 8005ff4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005ff6:	ea13 0f0a 	tst.w	r3, sl
 8005ffa:	e7e1      	b.n	8005fc0 <_strtod_l+0x8d8>
 8005ffc:	f7ff fb55 	bl	80056aa <sulp>
 8006000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006004:	ec53 2b10 	vmov	r2, r3, d0
 8006008:	f7fa f94e 	bl	80002a8 <__aeabi_dsub>
 800600c:	2200      	movs	r2, #0
 800600e:	2300      	movs	r3, #0
 8006010:	4682      	mov	sl, r0
 8006012:	468b      	mov	fp, r1
 8006014:	f7fa fd68 	bl	8000ae8 <__aeabi_dcmpeq>
 8006018:	2800      	cmp	r0, #0
 800601a:	d0c1      	beq.n	8005fa0 <_strtod_l+0x8b8>
 800601c:	e61a      	b.n	8005c54 <_strtod_l+0x56c>
 800601e:	4641      	mov	r1, r8
 8006020:	4620      	mov	r0, r4
 8006022:	f003 fab9 	bl	8009598 <__ratio>
 8006026:	ec57 6b10 	vmov	r6, r7, d0
 800602a:	2200      	movs	r2, #0
 800602c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006030:	4630      	mov	r0, r6
 8006032:	4639      	mov	r1, r7
 8006034:	f7fa fd6c 	bl	8000b10 <__aeabi_dcmple>
 8006038:	2800      	cmp	r0, #0
 800603a:	d06f      	beq.n	800611c <_strtod_l+0xa34>
 800603c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800603e:	2b00      	cmp	r3, #0
 8006040:	d17a      	bne.n	8006138 <_strtod_l+0xa50>
 8006042:	f1ba 0f00 	cmp.w	sl, #0
 8006046:	d158      	bne.n	80060fa <_strtod_l+0xa12>
 8006048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800604a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800604e:	2b00      	cmp	r3, #0
 8006050:	d15a      	bne.n	8006108 <_strtod_l+0xa20>
 8006052:	4b64      	ldr	r3, [pc, #400]	@ (80061e4 <_strtod_l+0xafc>)
 8006054:	2200      	movs	r2, #0
 8006056:	4630      	mov	r0, r6
 8006058:	4639      	mov	r1, r7
 800605a:	f7fa fd4f 	bl	8000afc <__aeabi_dcmplt>
 800605e:	2800      	cmp	r0, #0
 8006060:	d159      	bne.n	8006116 <_strtod_l+0xa2e>
 8006062:	4630      	mov	r0, r6
 8006064:	4639      	mov	r1, r7
 8006066:	4b60      	ldr	r3, [pc, #384]	@ (80061e8 <_strtod_l+0xb00>)
 8006068:	2200      	movs	r2, #0
 800606a:	f7fa fad5 	bl	8000618 <__aeabi_dmul>
 800606e:	4606      	mov	r6, r0
 8006070:	460f      	mov	r7, r1
 8006072:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006076:	9606      	str	r6, [sp, #24]
 8006078:	9307      	str	r3, [sp, #28]
 800607a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800607e:	4d57      	ldr	r5, [pc, #348]	@ (80061dc <_strtod_l+0xaf4>)
 8006080:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006084:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006086:	401d      	ands	r5, r3
 8006088:	4b58      	ldr	r3, [pc, #352]	@ (80061ec <_strtod_l+0xb04>)
 800608a:	429d      	cmp	r5, r3
 800608c:	f040 80b2 	bne.w	80061f4 <_strtod_l+0xb0c>
 8006090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006092:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006096:	ec4b ab10 	vmov	d0, sl, fp
 800609a:	f003 f9b5 	bl	8009408 <__ulp>
 800609e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80060a2:	ec51 0b10 	vmov	r0, r1, d0
 80060a6:	f7fa fab7 	bl	8000618 <__aeabi_dmul>
 80060aa:	4652      	mov	r2, sl
 80060ac:	465b      	mov	r3, fp
 80060ae:	f7fa f8fd 	bl	80002ac <__adddf3>
 80060b2:	460b      	mov	r3, r1
 80060b4:	4949      	ldr	r1, [pc, #292]	@ (80061dc <_strtod_l+0xaf4>)
 80060b6:	4a4e      	ldr	r2, [pc, #312]	@ (80061f0 <_strtod_l+0xb08>)
 80060b8:	4019      	ands	r1, r3
 80060ba:	4291      	cmp	r1, r2
 80060bc:	4682      	mov	sl, r0
 80060be:	d942      	bls.n	8006146 <_strtod_l+0xa5e>
 80060c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80060c2:	4b47      	ldr	r3, [pc, #284]	@ (80061e0 <_strtod_l+0xaf8>)
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d103      	bne.n	80060d0 <_strtod_l+0x9e8>
 80060c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80060ca:	3301      	adds	r3, #1
 80060cc:	f43f ad2f 	beq.w	8005b2e <_strtod_l+0x446>
 80060d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80061e0 <_strtod_l+0xaf8>
 80060d4:	f04f 3aff 	mov.w	sl, #4294967295
 80060d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80060da:	9805      	ldr	r0, [sp, #20]
 80060dc:	f002 fe68 	bl	8008db0 <_Bfree>
 80060e0:	9805      	ldr	r0, [sp, #20]
 80060e2:	4649      	mov	r1, r9
 80060e4:	f002 fe64 	bl	8008db0 <_Bfree>
 80060e8:	9805      	ldr	r0, [sp, #20]
 80060ea:	4641      	mov	r1, r8
 80060ec:	f002 fe60 	bl	8008db0 <_Bfree>
 80060f0:	9805      	ldr	r0, [sp, #20]
 80060f2:	4621      	mov	r1, r4
 80060f4:	f002 fe5c 	bl	8008db0 <_Bfree>
 80060f8:	e619      	b.n	8005d2e <_strtod_l+0x646>
 80060fa:	f1ba 0f01 	cmp.w	sl, #1
 80060fe:	d103      	bne.n	8006108 <_strtod_l+0xa20>
 8006100:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006102:	2b00      	cmp	r3, #0
 8006104:	f43f ada6 	beq.w	8005c54 <_strtod_l+0x56c>
 8006108:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80061b8 <_strtod_l+0xad0>
 800610c:	4f35      	ldr	r7, [pc, #212]	@ (80061e4 <_strtod_l+0xafc>)
 800610e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006112:	2600      	movs	r6, #0
 8006114:	e7b1      	b.n	800607a <_strtod_l+0x992>
 8006116:	4f34      	ldr	r7, [pc, #208]	@ (80061e8 <_strtod_l+0xb00>)
 8006118:	2600      	movs	r6, #0
 800611a:	e7aa      	b.n	8006072 <_strtod_l+0x98a>
 800611c:	4b32      	ldr	r3, [pc, #200]	@ (80061e8 <_strtod_l+0xb00>)
 800611e:	4630      	mov	r0, r6
 8006120:	4639      	mov	r1, r7
 8006122:	2200      	movs	r2, #0
 8006124:	f7fa fa78 	bl	8000618 <__aeabi_dmul>
 8006128:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800612a:	4606      	mov	r6, r0
 800612c:	460f      	mov	r7, r1
 800612e:	2b00      	cmp	r3, #0
 8006130:	d09f      	beq.n	8006072 <_strtod_l+0x98a>
 8006132:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006136:	e7a0      	b.n	800607a <_strtod_l+0x992>
 8006138:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80061c0 <_strtod_l+0xad8>
 800613c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006140:	ec57 6b17 	vmov	r6, r7, d7
 8006144:	e799      	b.n	800607a <_strtod_l+0x992>
 8006146:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800614a:	9b08      	ldr	r3, [sp, #32]
 800614c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006150:	2b00      	cmp	r3, #0
 8006152:	d1c1      	bne.n	80060d8 <_strtod_l+0x9f0>
 8006154:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006158:	0d1b      	lsrs	r3, r3, #20
 800615a:	051b      	lsls	r3, r3, #20
 800615c:	429d      	cmp	r5, r3
 800615e:	d1bb      	bne.n	80060d8 <_strtod_l+0x9f0>
 8006160:	4630      	mov	r0, r6
 8006162:	4639      	mov	r1, r7
 8006164:	f7fa fdb8 	bl	8000cd8 <__aeabi_d2lz>
 8006168:	f7fa fa28 	bl	80005bc <__aeabi_l2d>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4630      	mov	r0, r6
 8006172:	4639      	mov	r1, r7
 8006174:	f7fa f898 	bl	80002a8 <__aeabi_dsub>
 8006178:	460b      	mov	r3, r1
 800617a:	4602      	mov	r2, r0
 800617c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006180:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006186:	ea46 060a 	orr.w	r6, r6, sl
 800618a:	431e      	orrs	r6, r3
 800618c:	d06f      	beq.n	800626e <_strtod_l+0xb86>
 800618e:	a30e      	add	r3, pc, #56	@ (adr r3, 80061c8 <_strtod_l+0xae0>)
 8006190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006194:	f7fa fcb2 	bl	8000afc <__aeabi_dcmplt>
 8006198:	2800      	cmp	r0, #0
 800619a:	f47f acd3 	bne.w	8005b44 <_strtod_l+0x45c>
 800619e:	a30c      	add	r3, pc, #48	@ (adr r3, 80061d0 <_strtod_l+0xae8>)
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061a8:	f7fa fcc6 	bl	8000b38 <__aeabi_dcmpgt>
 80061ac:	2800      	cmp	r0, #0
 80061ae:	d093      	beq.n	80060d8 <_strtod_l+0x9f0>
 80061b0:	e4c8      	b.n	8005b44 <_strtod_l+0x45c>
 80061b2:	bf00      	nop
 80061b4:	f3af 8000 	nop.w
 80061b8:	00000000 	.word	0x00000000
 80061bc:	bff00000 	.word	0xbff00000
 80061c0:	00000000 	.word	0x00000000
 80061c4:	3ff00000 	.word	0x3ff00000
 80061c8:	94a03595 	.word	0x94a03595
 80061cc:	3fdfffff 	.word	0x3fdfffff
 80061d0:	35afe535 	.word	0x35afe535
 80061d4:	3fe00000 	.word	0x3fe00000
 80061d8:	000fffff 	.word	0x000fffff
 80061dc:	7ff00000 	.word	0x7ff00000
 80061e0:	7fefffff 	.word	0x7fefffff
 80061e4:	3ff00000 	.word	0x3ff00000
 80061e8:	3fe00000 	.word	0x3fe00000
 80061ec:	7fe00000 	.word	0x7fe00000
 80061f0:	7c9fffff 	.word	0x7c9fffff
 80061f4:	9b08      	ldr	r3, [sp, #32]
 80061f6:	b323      	cbz	r3, 8006242 <_strtod_l+0xb5a>
 80061f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80061fc:	d821      	bhi.n	8006242 <_strtod_l+0xb5a>
 80061fe:	a328      	add	r3, pc, #160	@ (adr r3, 80062a0 <_strtod_l+0xbb8>)
 8006200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006204:	4630      	mov	r0, r6
 8006206:	4639      	mov	r1, r7
 8006208:	f7fa fc82 	bl	8000b10 <__aeabi_dcmple>
 800620c:	b1a0      	cbz	r0, 8006238 <_strtod_l+0xb50>
 800620e:	4639      	mov	r1, r7
 8006210:	4630      	mov	r0, r6
 8006212:	f7fa fcd9 	bl	8000bc8 <__aeabi_d2uiz>
 8006216:	2801      	cmp	r0, #1
 8006218:	bf38      	it	cc
 800621a:	2001      	movcc	r0, #1
 800621c:	f7fa f982 	bl	8000524 <__aeabi_ui2d>
 8006220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006222:	4606      	mov	r6, r0
 8006224:	460f      	mov	r7, r1
 8006226:	b9fb      	cbnz	r3, 8006268 <_strtod_l+0xb80>
 8006228:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800622c:	9014      	str	r0, [sp, #80]	@ 0x50
 800622e:	9315      	str	r3, [sp, #84]	@ 0x54
 8006230:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006234:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006238:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800623a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800623e:	1b5b      	subs	r3, r3, r5
 8006240:	9311      	str	r3, [sp, #68]	@ 0x44
 8006242:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006246:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800624a:	f003 f8dd 	bl	8009408 <__ulp>
 800624e:	4650      	mov	r0, sl
 8006250:	ec53 2b10 	vmov	r2, r3, d0
 8006254:	4659      	mov	r1, fp
 8006256:	f7fa f9df 	bl	8000618 <__aeabi_dmul>
 800625a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800625e:	f7fa f825 	bl	80002ac <__adddf3>
 8006262:	4682      	mov	sl, r0
 8006264:	468b      	mov	fp, r1
 8006266:	e770      	b.n	800614a <_strtod_l+0xa62>
 8006268:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800626c:	e7e0      	b.n	8006230 <_strtod_l+0xb48>
 800626e:	a30e      	add	r3, pc, #56	@ (adr r3, 80062a8 <_strtod_l+0xbc0>)
 8006270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006274:	f7fa fc42 	bl	8000afc <__aeabi_dcmplt>
 8006278:	e798      	b.n	80061ac <_strtod_l+0xac4>
 800627a:	2300      	movs	r3, #0
 800627c:	930e      	str	r3, [sp, #56]	@ 0x38
 800627e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006280:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006282:	6013      	str	r3, [r2, #0]
 8006284:	f7ff ba6d 	b.w	8005762 <_strtod_l+0x7a>
 8006288:	2a65      	cmp	r2, #101	@ 0x65
 800628a:	f43f ab68 	beq.w	800595e <_strtod_l+0x276>
 800628e:	2a45      	cmp	r2, #69	@ 0x45
 8006290:	f43f ab65 	beq.w	800595e <_strtod_l+0x276>
 8006294:	2301      	movs	r3, #1
 8006296:	f7ff bba0 	b.w	80059da <_strtod_l+0x2f2>
 800629a:	bf00      	nop
 800629c:	f3af 8000 	nop.w
 80062a0:	ffc00000 	.word	0xffc00000
 80062a4:	41dfffff 	.word	0x41dfffff
 80062a8:	94a03595 	.word	0x94a03595
 80062ac:	3fcfffff 	.word	0x3fcfffff

080062b0 <_strtod_r>:
 80062b0:	4b01      	ldr	r3, [pc, #4]	@ (80062b8 <_strtod_r+0x8>)
 80062b2:	f7ff ba19 	b.w	80056e8 <_strtod_l>
 80062b6:	bf00      	nop
 80062b8:	2000003c 	.word	0x2000003c

080062bc <strtod>:
 80062bc:	460a      	mov	r2, r1
 80062be:	4601      	mov	r1, r0
 80062c0:	4802      	ldr	r0, [pc, #8]	@ (80062cc <strtod+0x10>)
 80062c2:	4b03      	ldr	r3, [pc, #12]	@ (80062d0 <strtod+0x14>)
 80062c4:	6800      	ldr	r0, [r0, #0]
 80062c6:	f7ff ba0f 	b.w	80056e8 <_strtod_l>
 80062ca:	bf00      	nop
 80062cc:	200001a8 	.word	0x200001a8
 80062d0:	2000003c 	.word	0x2000003c

080062d4 <_strtol_l.isra.0>:
 80062d4:	2b24      	cmp	r3, #36	@ 0x24
 80062d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062da:	4686      	mov	lr, r0
 80062dc:	4690      	mov	r8, r2
 80062de:	d801      	bhi.n	80062e4 <_strtol_l.isra.0+0x10>
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d106      	bne.n	80062f2 <_strtol_l.isra.0+0x1e>
 80062e4:	f001 fa16 	bl	8007714 <__errno>
 80062e8:	2316      	movs	r3, #22
 80062ea:	6003      	str	r3, [r0, #0]
 80062ec:	2000      	movs	r0, #0
 80062ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062f2:	4834      	ldr	r0, [pc, #208]	@ (80063c4 <_strtol_l.isra.0+0xf0>)
 80062f4:	460d      	mov	r5, r1
 80062f6:	462a      	mov	r2, r5
 80062f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062fc:	5d06      	ldrb	r6, [r0, r4]
 80062fe:	f016 0608 	ands.w	r6, r6, #8
 8006302:	d1f8      	bne.n	80062f6 <_strtol_l.isra.0+0x22>
 8006304:	2c2d      	cmp	r4, #45	@ 0x2d
 8006306:	d110      	bne.n	800632a <_strtol_l.isra.0+0x56>
 8006308:	782c      	ldrb	r4, [r5, #0]
 800630a:	2601      	movs	r6, #1
 800630c:	1c95      	adds	r5, r2, #2
 800630e:	f033 0210 	bics.w	r2, r3, #16
 8006312:	d115      	bne.n	8006340 <_strtol_l.isra.0+0x6c>
 8006314:	2c30      	cmp	r4, #48	@ 0x30
 8006316:	d10d      	bne.n	8006334 <_strtol_l.isra.0+0x60>
 8006318:	782a      	ldrb	r2, [r5, #0]
 800631a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800631e:	2a58      	cmp	r2, #88	@ 0x58
 8006320:	d108      	bne.n	8006334 <_strtol_l.isra.0+0x60>
 8006322:	786c      	ldrb	r4, [r5, #1]
 8006324:	3502      	adds	r5, #2
 8006326:	2310      	movs	r3, #16
 8006328:	e00a      	b.n	8006340 <_strtol_l.isra.0+0x6c>
 800632a:	2c2b      	cmp	r4, #43	@ 0x2b
 800632c:	bf04      	itt	eq
 800632e:	782c      	ldrbeq	r4, [r5, #0]
 8006330:	1c95      	addeq	r5, r2, #2
 8006332:	e7ec      	b.n	800630e <_strtol_l.isra.0+0x3a>
 8006334:	2b00      	cmp	r3, #0
 8006336:	d1f6      	bne.n	8006326 <_strtol_l.isra.0+0x52>
 8006338:	2c30      	cmp	r4, #48	@ 0x30
 800633a:	bf14      	ite	ne
 800633c:	230a      	movne	r3, #10
 800633e:	2308      	moveq	r3, #8
 8006340:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8006344:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006348:	2200      	movs	r2, #0
 800634a:	fbbc f9f3 	udiv	r9, ip, r3
 800634e:	4610      	mov	r0, r2
 8006350:	fb03 ca19 	mls	sl, r3, r9, ip
 8006354:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8006358:	2f09      	cmp	r7, #9
 800635a:	d80f      	bhi.n	800637c <_strtol_l.isra.0+0xa8>
 800635c:	463c      	mov	r4, r7
 800635e:	42a3      	cmp	r3, r4
 8006360:	dd1b      	ble.n	800639a <_strtol_l.isra.0+0xc6>
 8006362:	1c57      	adds	r7, r2, #1
 8006364:	d007      	beq.n	8006376 <_strtol_l.isra.0+0xa2>
 8006366:	4581      	cmp	r9, r0
 8006368:	d314      	bcc.n	8006394 <_strtol_l.isra.0+0xc0>
 800636a:	d101      	bne.n	8006370 <_strtol_l.isra.0+0x9c>
 800636c:	45a2      	cmp	sl, r4
 800636e:	db11      	blt.n	8006394 <_strtol_l.isra.0+0xc0>
 8006370:	fb00 4003 	mla	r0, r0, r3, r4
 8006374:	2201      	movs	r2, #1
 8006376:	f815 4b01 	ldrb.w	r4, [r5], #1
 800637a:	e7eb      	b.n	8006354 <_strtol_l.isra.0+0x80>
 800637c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8006380:	2f19      	cmp	r7, #25
 8006382:	d801      	bhi.n	8006388 <_strtol_l.isra.0+0xb4>
 8006384:	3c37      	subs	r4, #55	@ 0x37
 8006386:	e7ea      	b.n	800635e <_strtol_l.isra.0+0x8a>
 8006388:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800638c:	2f19      	cmp	r7, #25
 800638e:	d804      	bhi.n	800639a <_strtol_l.isra.0+0xc6>
 8006390:	3c57      	subs	r4, #87	@ 0x57
 8006392:	e7e4      	b.n	800635e <_strtol_l.isra.0+0x8a>
 8006394:	f04f 32ff 	mov.w	r2, #4294967295
 8006398:	e7ed      	b.n	8006376 <_strtol_l.isra.0+0xa2>
 800639a:	1c53      	adds	r3, r2, #1
 800639c:	d108      	bne.n	80063b0 <_strtol_l.isra.0+0xdc>
 800639e:	2322      	movs	r3, #34	@ 0x22
 80063a0:	f8ce 3000 	str.w	r3, [lr]
 80063a4:	4660      	mov	r0, ip
 80063a6:	f1b8 0f00 	cmp.w	r8, #0
 80063aa:	d0a0      	beq.n	80062ee <_strtol_l.isra.0+0x1a>
 80063ac:	1e69      	subs	r1, r5, #1
 80063ae:	e006      	b.n	80063be <_strtol_l.isra.0+0xea>
 80063b0:	b106      	cbz	r6, 80063b4 <_strtol_l.isra.0+0xe0>
 80063b2:	4240      	negs	r0, r0
 80063b4:	f1b8 0f00 	cmp.w	r8, #0
 80063b8:	d099      	beq.n	80062ee <_strtol_l.isra.0+0x1a>
 80063ba:	2a00      	cmp	r2, #0
 80063bc:	d1f6      	bne.n	80063ac <_strtol_l.isra.0+0xd8>
 80063be:	f8c8 1000 	str.w	r1, [r8]
 80063c2:	e794      	b.n	80062ee <_strtol_l.isra.0+0x1a>
 80063c4:	0800a3f1 	.word	0x0800a3f1

080063c8 <_strtol_r>:
 80063c8:	f7ff bf84 	b.w	80062d4 <_strtol_l.isra.0>

080063cc <strtol>:
 80063cc:	4613      	mov	r3, r2
 80063ce:	460a      	mov	r2, r1
 80063d0:	4601      	mov	r1, r0
 80063d2:	4802      	ldr	r0, [pc, #8]	@ (80063dc <strtol+0x10>)
 80063d4:	6800      	ldr	r0, [r0, #0]
 80063d6:	f7ff bf7d 	b.w	80062d4 <_strtol_l.isra.0>
 80063da:	bf00      	nop
 80063dc:	200001a8 	.word	0x200001a8

080063e0 <__cvt>:
 80063e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063e4:	ec57 6b10 	vmov	r6, r7, d0
 80063e8:	2f00      	cmp	r7, #0
 80063ea:	460c      	mov	r4, r1
 80063ec:	4619      	mov	r1, r3
 80063ee:	463b      	mov	r3, r7
 80063f0:	bfbb      	ittet	lt
 80063f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80063f6:	461f      	movlt	r7, r3
 80063f8:	2300      	movge	r3, #0
 80063fa:	232d      	movlt	r3, #45	@ 0x2d
 80063fc:	700b      	strb	r3, [r1, #0]
 80063fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006400:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006404:	4691      	mov	r9, r2
 8006406:	f023 0820 	bic.w	r8, r3, #32
 800640a:	bfbc      	itt	lt
 800640c:	4632      	movlt	r2, r6
 800640e:	4616      	movlt	r6, r2
 8006410:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006414:	d005      	beq.n	8006422 <__cvt+0x42>
 8006416:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800641a:	d100      	bne.n	800641e <__cvt+0x3e>
 800641c:	3401      	adds	r4, #1
 800641e:	2102      	movs	r1, #2
 8006420:	e000      	b.n	8006424 <__cvt+0x44>
 8006422:	2103      	movs	r1, #3
 8006424:	ab03      	add	r3, sp, #12
 8006426:	9301      	str	r3, [sp, #4]
 8006428:	ab02      	add	r3, sp, #8
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	ec47 6b10 	vmov	d0, r6, r7
 8006430:	4653      	mov	r3, sl
 8006432:	4622      	mov	r2, r4
 8006434:	f001 fa60 	bl	80078f8 <_dtoa_r>
 8006438:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800643c:	4605      	mov	r5, r0
 800643e:	d119      	bne.n	8006474 <__cvt+0x94>
 8006440:	f019 0f01 	tst.w	r9, #1
 8006444:	d00e      	beq.n	8006464 <__cvt+0x84>
 8006446:	eb00 0904 	add.w	r9, r0, r4
 800644a:	2200      	movs	r2, #0
 800644c:	2300      	movs	r3, #0
 800644e:	4630      	mov	r0, r6
 8006450:	4639      	mov	r1, r7
 8006452:	f7fa fb49 	bl	8000ae8 <__aeabi_dcmpeq>
 8006456:	b108      	cbz	r0, 800645c <__cvt+0x7c>
 8006458:	f8cd 900c 	str.w	r9, [sp, #12]
 800645c:	2230      	movs	r2, #48	@ 0x30
 800645e:	9b03      	ldr	r3, [sp, #12]
 8006460:	454b      	cmp	r3, r9
 8006462:	d31e      	bcc.n	80064a2 <__cvt+0xc2>
 8006464:	9b03      	ldr	r3, [sp, #12]
 8006466:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006468:	1b5b      	subs	r3, r3, r5
 800646a:	4628      	mov	r0, r5
 800646c:	6013      	str	r3, [r2, #0]
 800646e:	b004      	add	sp, #16
 8006470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006474:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006478:	eb00 0904 	add.w	r9, r0, r4
 800647c:	d1e5      	bne.n	800644a <__cvt+0x6a>
 800647e:	7803      	ldrb	r3, [r0, #0]
 8006480:	2b30      	cmp	r3, #48	@ 0x30
 8006482:	d10a      	bne.n	800649a <__cvt+0xba>
 8006484:	2200      	movs	r2, #0
 8006486:	2300      	movs	r3, #0
 8006488:	4630      	mov	r0, r6
 800648a:	4639      	mov	r1, r7
 800648c:	f7fa fb2c 	bl	8000ae8 <__aeabi_dcmpeq>
 8006490:	b918      	cbnz	r0, 800649a <__cvt+0xba>
 8006492:	f1c4 0401 	rsb	r4, r4, #1
 8006496:	f8ca 4000 	str.w	r4, [sl]
 800649a:	f8da 3000 	ldr.w	r3, [sl]
 800649e:	4499      	add	r9, r3
 80064a0:	e7d3      	b.n	800644a <__cvt+0x6a>
 80064a2:	1c59      	adds	r1, r3, #1
 80064a4:	9103      	str	r1, [sp, #12]
 80064a6:	701a      	strb	r2, [r3, #0]
 80064a8:	e7d9      	b.n	800645e <__cvt+0x7e>

080064aa <__exponent>:
 80064aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064ac:	2900      	cmp	r1, #0
 80064ae:	bfba      	itte	lt
 80064b0:	4249      	neglt	r1, r1
 80064b2:	232d      	movlt	r3, #45	@ 0x2d
 80064b4:	232b      	movge	r3, #43	@ 0x2b
 80064b6:	2909      	cmp	r1, #9
 80064b8:	7002      	strb	r2, [r0, #0]
 80064ba:	7043      	strb	r3, [r0, #1]
 80064bc:	dd29      	ble.n	8006512 <__exponent+0x68>
 80064be:	f10d 0307 	add.w	r3, sp, #7
 80064c2:	461d      	mov	r5, r3
 80064c4:	270a      	movs	r7, #10
 80064c6:	461a      	mov	r2, r3
 80064c8:	fbb1 f6f7 	udiv	r6, r1, r7
 80064cc:	fb07 1416 	mls	r4, r7, r6, r1
 80064d0:	3430      	adds	r4, #48	@ 0x30
 80064d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80064d6:	460c      	mov	r4, r1
 80064d8:	2c63      	cmp	r4, #99	@ 0x63
 80064da:	f103 33ff 	add.w	r3, r3, #4294967295
 80064de:	4631      	mov	r1, r6
 80064e0:	dcf1      	bgt.n	80064c6 <__exponent+0x1c>
 80064e2:	3130      	adds	r1, #48	@ 0x30
 80064e4:	1e94      	subs	r4, r2, #2
 80064e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 80064ea:	1c41      	adds	r1, r0, #1
 80064ec:	4623      	mov	r3, r4
 80064ee:	42ab      	cmp	r3, r5
 80064f0:	d30a      	bcc.n	8006508 <__exponent+0x5e>
 80064f2:	f10d 0309 	add.w	r3, sp, #9
 80064f6:	1a9b      	subs	r3, r3, r2
 80064f8:	42ac      	cmp	r4, r5
 80064fa:	bf88      	it	hi
 80064fc:	2300      	movhi	r3, #0
 80064fe:	3302      	adds	r3, #2
 8006500:	4403      	add	r3, r0
 8006502:	1a18      	subs	r0, r3, r0
 8006504:	b003      	add	sp, #12
 8006506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006508:	f813 6b01 	ldrb.w	r6, [r3], #1
 800650c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006510:	e7ed      	b.n	80064ee <__exponent+0x44>
 8006512:	2330      	movs	r3, #48	@ 0x30
 8006514:	3130      	adds	r1, #48	@ 0x30
 8006516:	7083      	strb	r3, [r0, #2]
 8006518:	70c1      	strb	r1, [r0, #3]
 800651a:	1d03      	adds	r3, r0, #4
 800651c:	e7f1      	b.n	8006502 <__exponent+0x58>
	...

08006520 <_printf_float>:
 8006520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006524:	b08d      	sub	sp, #52	@ 0x34
 8006526:	460c      	mov	r4, r1
 8006528:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800652c:	4616      	mov	r6, r2
 800652e:	461f      	mov	r7, r3
 8006530:	4605      	mov	r5, r0
 8006532:	f001 f8a5 	bl	8007680 <_localeconv_r>
 8006536:	6803      	ldr	r3, [r0, #0]
 8006538:	9304      	str	r3, [sp, #16]
 800653a:	4618      	mov	r0, r3
 800653c:	f7f9 fea8 	bl	8000290 <strlen>
 8006540:	2300      	movs	r3, #0
 8006542:	930a      	str	r3, [sp, #40]	@ 0x28
 8006544:	f8d8 3000 	ldr.w	r3, [r8]
 8006548:	9005      	str	r0, [sp, #20]
 800654a:	3307      	adds	r3, #7
 800654c:	f023 0307 	bic.w	r3, r3, #7
 8006550:	f103 0208 	add.w	r2, r3, #8
 8006554:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006558:	f8d4 b000 	ldr.w	fp, [r4]
 800655c:	f8c8 2000 	str.w	r2, [r8]
 8006560:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006564:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006568:	9307      	str	r3, [sp, #28]
 800656a:	f8cd 8018 	str.w	r8, [sp, #24]
 800656e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006572:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006576:	4b9c      	ldr	r3, [pc, #624]	@ (80067e8 <_printf_float+0x2c8>)
 8006578:	f04f 32ff 	mov.w	r2, #4294967295
 800657c:	f7fa fae6 	bl	8000b4c <__aeabi_dcmpun>
 8006580:	bb70      	cbnz	r0, 80065e0 <_printf_float+0xc0>
 8006582:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006586:	4b98      	ldr	r3, [pc, #608]	@ (80067e8 <_printf_float+0x2c8>)
 8006588:	f04f 32ff 	mov.w	r2, #4294967295
 800658c:	f7fa fac0 	bl	8000b10 <__aeabi_dcmple>
 8006590:	bb30      	cbnz	r0, 80065e0 <_printf_float+0xc0>
 8006592:	2200      	movs	r2, #0
 8006594:	2300      	movs	r3, #0
 8006596:	4640      	mov	r0, r8
 8006598:	4649      	mov	r1, r9
 800659a:	f7fa faaf 	bl	8000afc <__aeabi_dcmplt>
 800659e:	b110      	cbz	r0, 80065a6 <_printf_float+0x86>
 80065a0:	232d      	movs	r3, #45	@ 0x2d
 80065a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065a6:	4a91      	ldr	r2, [pc, #580]	@ (80067ec <_printf_float+0x2cc>)
 80065a8:	4b91      	ldr	r3, [pc, #580]	@ (80067f0 <_printf_float+0x2d0>)
 80065aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80065ae:	bf8c      	ite	hi
 80065b0:	4690      	movhi	r8, r2
 80065b2:	4698      	movls	r8, r3
 80065b4:	2303      	movs	r3, #3
 80065b6:	6123      	str	r3, [r4, #16]
 80065b8:	f02b 0304 	bic.w	r3, fp, #4
 80065bc:	6023      	str	r3, [r4, #0]
 80065be:	f04f 0900 	mov.w	r9, #0
 80065c2:	9700      	str	r7, [sp, #0]
 80065c4:	4633      	mov	r3, r6
 80065c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80065c8:	4621      	mov	r1, r4
 80065ca:	4628      	mov	r0, r5
 80065cc:	f000 f9d2 	bl	8006974 <_printf_common>
 80065d0:	3001      	adds	r0, #1
 80065d2:	f040 808d 	bne.w	80066f0 <_printf_float+0x1d0>
 80065d6:	f04f 30ff 	mov.w	r0, #4294967295
 80065da:	b00d      	add	sp, #52	@ 0x34
 80065dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065e0:	4642      	mov	r2, r8
 80065e2:	464b      	mov	r3, r9
 80065e4:	4640      	mov	r0, r8
 80065e6:	4649      	mov	r1, r9
 80065e8:	f7fa fab0 	bl	8000b4c <__aeabi_dcmpun>
 80065ec:	b140      	cbz	r0, 8006600 <_printf_float+0xe0>
 80065ee:	464b      	mov	r3, r9
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	bfbc      	itt	lt
 80065f4:	232d      	movlt	r3, #45	@ 0x2d
 80065f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80065fa:	4a7e      	ldr	r2, [pc, #504]	@ (80067f4 <_printf_float+0x2d4>)
 80065fc:	4b7e      	ldr	r3, [pc, #504]	@ (80067f8 <_printf_float+0x2d8>)
 80065fe:	e7d4      	b.n	80065aa <_printf_float+0x8a>
 8006600:	6863      	ldr	r3, [r4, #4]
 8006602:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006606:	9206      	str	r2, [sp, #24]
 8006608:	1c5a      	adds	r2, r3, #1
 800660a:	d13b      	bne.n	8006684 <_printf_float+0x164>
 800660c:	2306      	movs	r3, #6
 800660e:	6063      	str	r3, [r4, #4]
 8006610:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006614:	2300      	movs	r3, #0
 8006616:	6022      	str	r2, [r4, #0]
 8006618:	9303      	str	r3, [sp, #12]
 800661a:	ab0a      	add	r3, sp, #40	@ 0x28
 800661c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006620:	ab09      	add	r3, sp, #36	@ 0x24
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	6861      	ldr	r1, [r4, #4]
 8006626:	ec49 8b10 	vmov	d0, r8, r9
 800662a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800662e:	4628      	mov	r0, r5
 8006630:	f7ff fed6 	bl	80063e0 <__cvt>
 8006634:	9b06      	ldr	r3, [sp, #24]
 8006636:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006638:	2b47      	cmp	r3, #71	@ 0x47
 800663a:	4680      	mov	r8, r0
 800663c:	d129      	bne.n	8006692 <_printf_float+0x172>
 800663e:	1cc8      	adds	r0, r1, #3
 8006640:	db02      	blt.n	8006648 <_printf_float+0x128>
 8006642:	6863      	ldr	r3, [r4, #4]
 8006644:	4299      	cmp	r1, r3
 8006646:	dd41      	ble.n	80066cc <_printf_float+0x1ac>
 8006648:	f1aa 0a02 	sub.w	sl, sl, #2
 800664c:	fa5f fa8a 	uxtb.w	sl, sl
 8006650:	3901      	subs	r1, #1
 8006652:	4652      	mov	r2, sl
 8006654:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006658:	9109      	str	r1, [sp, #36]	@ 0x24
 800665a:	f7ff ff26 	bl	80064aa <__exponent>
 800665e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006660:	1813      	adds	r3, r2, r0
 8006662:	2a01      	cmp	r2, #1
 8006664:	4681      	mov	r9, r0
 8006666:	6123      	str	r3, [r4, #16]
 8006668:	dc02      	bgt.n	8006670 <_printf_float+0x150>
 800666a:	6822      	ldr	r2, [r4, #0]
 800666c:	07d2      	lsls	r2, r2, #31
 800666e:	d501      	bpl.n	8006674 <_printf_float+0x154>
 8006670:	3301      	adds	r3, #1
 8006672:	6123      	str	r3, [r4, #16]
 8006674:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0a2      	beq.n	80065c2 <_printf_float+0xa2>
 800667c:	232d      	movs	r3, #45	@ 0x2d
 800667e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006682:	e79e      	b.n	80065c2 <_printf_float+0xa2>
 8006684:	9a06      	ldr	r2, [sp, #24]
 8006686:	2a47      	cmp	r2, #71	@ 0x47
 8006688:	d1c2      	bne.n	8006610 <_printf_float+0xf0>
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1c0      	bne.n	8006610 <_printf_float+0xf0>
 800668e:	2301      	movs	r3, #1
 8006690:	e7bd      	b.n	800660e <_printf_float+0xee>
 8006692:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006696:	d9db      	bls.n	8006650 <_printf_float+0x130>
 8006698:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800669c:	d118      	bne.n	80066d0 <_printf_float+0x1b0>
 800669e:	2900      	cmp	r1, #0
 80066a0:	6863      	ldr	r3, [r4, #4]
 80066a2:	dd0b      	ble.n	80066bc <_printf_float+0x19c>
 80066a4:	6121      	str	r1, [r4, #16]
 80066a6:	b913      	cbnz	r3, 80066ae <_printf_float+0x18e>
 80066a8:	6822      	ldr	r2, [r4, #0]
 80066aa:	07d0      	lsls	r0, r2, #31
 80066ac:	d502      	bpl.n	80066b4 <_printf_float+0x194>
 80066ae:	3301      	adds	r3, #1
 80066b0:	440b      	add	r3, r1
 80066b2:	6123      	str	r3, [r4, #16]
 80066b4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80066b6:	f04f 0900 	mov.w	r9, #0
 80066ba:	e7db      	b.n	8006674 <_printf_float+0x154>
 80066bc:	b913      	cbnz	r3, 80066c4 <_printf_float+0x1a4>
 80066be:	6822      	ldr	r2, [r4, #0]
 80066c0:	07d2      	lsls	r2, r2, #31
 80066c2:	d501      	bpl.n	80066c8 <_printf_float+0x1a8>
 80066c4:	3302      	adds	r3, #2
 80066c6:	e7f4      	b.n	80066b2 <_printf_float+0x192>
 80066c8:	2301      	movs	r3, #1
 80066ca:	e7f2      	b.n	80066b2 <_printf_float+0x192>
 80066cc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80066d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066d2:	4299      	cmp	r1, r3
 80066d4:	db05      	blt.n	80066e2 <_printf_float+0x1c2>
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	6121      	str	r1, [r4, #16]
 80066da:	07d8      	lsls	r0, r3, #31
 80066dc:	d5ea      	bpl.n	80066b4 <_printf_float+0x194>
 80066de:	1c4b      	adds	r3, r1, #1
 80066e0:	e7e7      	b.n	80066b2 <_printf_float+0x192>
 80066e2:	2900      	cmp	r1, #0
 80066e4:	bfd4      	ite	le
 80066e6:	f1c1 0202 	rsble	r2, r1, #2
 80066ea:	2201      	movgt	r2, #1
 80066ec:	4413      	add	r3, r2
 80066ee:	e7e0      	b.n	80066b2 <_printf_float+0x192>
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	055a      	lsls	r2, r3, #21
 80066f4:	d407      	bmi.n	8006706 <_printf_float+0x1e6>
 80066f6:	6923      	ldr	r3, [r4, #16]
 80066f8:	4642      	mov	r2, r8
 80066fa:	4631      	mov	r1, r6
 80066fc:	4628      	mov	r0, r5
 80066fe:	47b8      	blx	r7
 8006700:	3001      	adds	r0, #1
 8006702:	d12b      	bne.n	800675c <_printf_float+0x23c>
 8006704:	e767      	b.n	80065d6 <_printf_float+0xb6>
 8006706:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800670a:	f240 80dd 	bls.w	80068c8 <_printf_float+0x3a8>
 800670e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006712:	2200      	movs	r2, #0
 8006714:	2300      	movs	r3, #0
 8006716:	f7fa f9e7 	bl	8000ae8 <__aeabi_dcmpeq>
 800671a:	2800      	cmp	r0, #0
 800671c:	d033      	beq.n	8006786 <_printf_float+0x266>
 800671e:	4a37      	ldr	r2, [pc, #220]	@ (80067fc <_printf_float+0x2dc>)
 8006720:	2301      	movs	r3, #1
 8006722:	4631      	mov	r1, r6
 8006724:	4628      	mov	r0, r5
 8006726:	47b8      	blx	r7
 8006728:	3001      	adds	r0, #1
 800672a:	f43f af54 	beq.w	80065d6 <_printf_float+0xb6>
 800672e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006732:	4543      	cmp	r3, r8
 8006734:	db02      	blt.n	800673c <_printf_float+0x21c>
 8006736:	6823      	ldr	r3, [r4, #0]
 8006738:	07d8      	lsls	r0, r3, #31
 800673a:	d50f      	bpl.n	800675c <_printf_float+0x23c>
 800673c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006740:	4631      	mov	r1, r6
 8006742:	4628      	mov	r0, r5
 8006744:	47b8      	blx	r7
 8006746:	3001      	adds	r0, #1
 8006748:	f43f af45 	beq.w	80065d6 <_printf_float+0xb6>
 800674c:	f04f 0900 	mov.w	r9, #0
 8006750:	f108 38ff 	add.w	r8, r8, #4294967295
 8006754:	f104 0a1a 	add.w	sl, r4, #26
 8006758:	45c8      	cmp	r8, r9
 800675a:	dc09      	bgt.n	8006770 <_printf_float+0x250>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	079b      	lsls	r3, r3, #30
 8006760:	f100 8103 	bmi.w	800696a <_printf_float+0x44a>
 8006764:	68e0      	ldr	r0, [r4, #12]
 8006766:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006768:	4298      	cmp	r0, r3
 800676a:	bfb8      	it	lt
 800676c:	4618      	movlt	r0, r3
 800676e:	e734      	b.n	80065da <_printf_float+0xba>
 8006770:	2301      	movs	r3, #1
 8006772:	4652      	mov	r2, sl
 8006774:	4631      	mov	r1, r6
 8006776:	4628      	mov	r0, r5
 8006778:	47b8      	blx	r7
 800677a:	3001      	adds	r0, #1
 800677c:	f43f af2b 	beq.w	80065d6 <_printf_float+0xb6>
 8006780:	f109 0901 	add.w	r9, r9, #1
 8006784:	e7e8      	b.n	8006758 <_printf_float+0x238>
 8006786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006788:	2b00      	cmp	r3, #0
 800678a:	dc39      	bgt.n	8006800 <_printf_float+0x2e0>
 800678c:	4a1b      	ldr	r2, [pc, #108]	@ (80067fc <_printf_float+0x2dc>)
 800678e:	2301      	movs	r3, #1
 8006790:	4631      	mov	r1, r6
 8006792:	4628      	mov	r0, r5
 8006794:	47b8      	blx	r7
 8006796:	3001      	adds	r0, #1
 8006798:	f43f af1d 	beq.w	80065d6 <_printf_float+0xb6>
 800679c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80067a0:	ea59 0303 	orrs.w	r3, r9, r3
 80067a4:	d102      	bne.n	80067ac <_printf_float+0x28c>
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	07d9      	lsls	r1, r3, #31
 80067aa:	d5d7      	bpl.n	800675c <_printf_float+0x23c>
 80067ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067b0:	4631      	mov	r1, r6
 80067b2:	4628      	mov	r0, r5
 80067b4:	47b8      	blx	r7
 80067b6:	3001      	adds	r0, #1
 80067b8:	f43f af0d 	beq.w	80065d6 <_printf_float+0xb6>
 80067bc:	f04f 0a00 	mov.w	sl, #0
 80067c0:	f104 0b1a 	add.w	fp, r4, #26
 80067c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c6:	425b      	negs	r3, r3
 80067c8:	4553      	cmp	r3, sl
 80067ca:	dc01      	bgt.n	80067d0 <_printf_float+0x2b0>
 80067cc:	464b      	mov	r3, r9
 80067ce:	e793      	b.n	80066f8 <_printf_float+0x1d8>
 80067d0:	2301      	movs	r3, #1
 80067d2:	465a      	mov	r2, fp
 80067d4:	4631      	mov	r1, r6
 80067d6:	4628      	mov	r0, r5
 80067d8:	47b8      	blx	r7
 80067da:	3001      	adds	r0, #1
 80067dc:	f43f aefb 	beq.w	80065d6 <_printf_float+0xb6>
 80067e0:	f10a 0a01 	add.w	sl, sl, #1
 80067e4:	e7ee      	b.n	80067c4 <_printf_float+0x2a4>
 80067e6:	bf00      	nop
 80067e8:	7fefffff 	.word	0x7fefffff
 80067ec:	0800a176 	.word	0x0800a176
 80067f0:	0800a172 	.word	0x0800a172
 80067f4:	0800a17e 	.word	0x0800a17e
 80067f8:	0800a17a 	.word	0x0800a17a
 80067fc:	0800a182 	.word	0x0800a182
 8006800:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006802:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006806:	4553      	cmp	r3, sl
 8006808:	bfa8      	it	ge
 800680a:	4653      	movge	r3, sl
 800680c:	2b00      	cmp	r3, #0
 800680e:	4699      	mov	r9, r3
 8006810:	dc36      	bgt.n	8006880 <_printf_float+0x360>
 8006812:	f04f 0b00 	mov.w	fp, #0
 8006816:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800681a:	f104 021a 	add.w	r2, r4, #26
 800681e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006820:	9306      	str	r3, [sp, #24]
 8006822:	eba3 0309 	sub.w	r3, r3, r9
 8006826:	455b      	cmp	r3, fp
 8006828:	dc31      	bgt.n	800688e <_printf_float+0x36e>
 800682a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800682c:	459a      	cmp	sl, r3
 800682e:	dc3a      	bgt.n	80068a6 <_printf_float+0x386>
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	07da      	lsls	r2, r3, #31
 8006834:	d437      	bmi.n	80068a6 <_printf_float+0x386>
 8006836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006838:	ebaa 0903 	sub.w	r9, sl, r3
 800683c:	9b06      	ldr	r3, [sp, #24]
 800683e:	ebaa 0303 	sub.w	r3, sl, r3
 8006842:	4599      	cmp	r9, r3
 8006844:	bfa8      	it	ge
 8006846:	4699      	movge	r9, r3
 8006848:	f1b9 0f00 	cmp.w	r9, #0
 800684c:	dc33      	bgt.n	80068b6 <_printf_float+0x396>
 800684e:	f04f 0800 	mov.w	r8, #0
 8006852:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006856:	f104 0b1a 	add.w	fp, r4, #26
 800685a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800685c:	ebaa 0303 	sub.w	r3, sl, r3
 8006860:	eba3 0309 	sub.w	r3, r3, r9
 8006864:	4543      	cmp	r3, r8
 8006866:	f77f af79 	ble.w	800675c <_printf_float+0x23c>
 800686a:	2301      	movs	r3, #1
 800686c:	465a      	mov	r2, fp
 800686e:	4631      	mov	r1, r6
 8006870:	4628      	mov	r0, r5
 8006872:	47b8      	blx	r7
 8006874:	3001      	adds	r0, #1
 8006876:	f43f aeae 	beq.w	80065d6 <_printf_float+0xb6>
 800687a:	f108 0801 	add.w	r8, r8, #1
 800687e:	e7ec      	b.n	800685a <_printf_float+0x33a>
 8006880:	4642      	mov	r2, r8
 8006882:	4631      	mov	r1, r6
 8006884:	4628      	mov	r0, r5
 8006886:	47b8      	blx	r7
 8006888:	3001      	adds	r0, #1
 800688a:	d1c2      	bne.n	8006812 <_printf_float+0x2f2>
 800688c:	e6a3      	b.n	80065d6 <_printf_float+0xb6>
 800688e:	2301      	movs	r3, #1
 8006890:	4631      	mov	r1, r6
 8006892:	4628      	mov	r0, r5
 8006894:	9206      	str	r2, [sp, #24]
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	f43f ae9c 	beq.w	80065d6 <_printf_float+0xb6>
 800689e:	9a06      	ldr	r2, [sp, #24]
 80068a0:	f10b 0b01 	add.w	fp, fp, #1
 80068a4:	e7bb      	b.n	800681e <_printf_float+0x2fe>
 80068a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	d1c0      	bne.n	8006836 <_printf_float+0x316>
 80068b4:	e68f      	b.n	80065d6 <_printf_float+0xb6>
 80068b6:	9a06      	ldr	r2, [sp, #24]
 80068b8:	464b      	mov	r3, r9
 80068ba:	4442      	add	r2, r8
 80068bc:	4631      	mov	r1, r6
 80068be:	4628      	mov	r0, r5
 80068c0:	47b8      	blx	r7
 80068c2:	3001      	adds	r0, #1
 80068c4:	d1c3      	bne.n	800684e <_printf_float+0x32e>
 80068c6:	e686      	b.n	80065d6 <_printf_float+0xb6>
 80068c8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80068cc:	f1ba 0f01 	cmp.w	sl, #1
 80068d0:	dc01      	bgt.n	80068d6 <_printf_float+0x3b6>
 80068d2:	07db      	lsls	r3, r3, #31
 80068d4:	d536      	bpl.n	8006944 <_printf_float+0x424>
 80068d6:	2301      	movs	r3, #1
 80068d8:	4642      	mov	r2, r8
 80068da:	4631      	mov	r1, r6
 80068dc:	4628      	mov	r0, r5
 80068de:	47b8      	blx	r7
 80068e0:	3001      	adds	r0, #1
 80068e2:	f43f ae78 	beq.w	80065d6 <_printf_float+0xb6>
 80068e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068ea:	4631      	mov	r1, r6
 80068ec:	4628      	mov	r0, r5
 80068ee:	47b8      	blx	r7
 80068f0:	3001      	adds	r0, #1
 80068f2:	f43f ae70 	beq.w	80065d6 <_printf_float+0xb6>
 80068f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80068fa:	2200      	movs	r2, #0
 80068fc:	2300      	movs	r3, #0
 80068fe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006902:	f7fa f8f1 	bl	8000ae8 <__aeabi_dcmpeq>
 8006906:	b9c0      	cbnz	r0, 800693a <_printf_float+0x41a>
 8006908:	4653      	mov	r3, sl
 800690a:	f108 0201 	add.w	r2, r8, #1
 800690e:	4631      	mov	r1, r6
 8006910:	4628      	mov	r0, r5
 8006912:	47b8      	blx	r7
 8006914:	3001      	adds	r0, #1
 8006916:	d10c      	bne.n	8006932 <_printf_float+0x412>
 8006918:	e65d      	b.n	80065d6 <_printf_float+0xb6>
 800691a:	2301      	movs	r3, #1
 800691c:	465a      	mov	r2, fp
 800691e:	4631      	mov	r1, r6
 8006920:	4628      	mov	r0, r5
 8006922:	47b8      	blx	r7
 8006924:	3001      	adds	r0, #1
 8006926:	f43f ae56 	beq.w	80065d6 <_printf_float+0xb6>
 800692a:	f108 0801 	add.w	r8, r8, #1
 800692e:	45d0      	cmp	r8, sl
 8006930:	dbf3      	blt.n	800691a <_printf_float+0x3fa>
 8006932:	464b      	mov	r3, r9
 8006934:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006938:	e6df      	b.n	80066fa <_printf_float+0x1da>
 800693a:	f04f 0800 	mov.w	r8, #0
 800693e:	f104 0b1a 	add.w	fp, r4, #26
 8006942:	e7f4      	b.n	800692e <_printf_float+0x40e>
 8006944:	2301      	movs	r3, #1
 8006946:	4642      	mov	r2, r8
 8006948:	e7e1      	b.n	800690e <_printf_float+0x3ee>
 800694a:	2301      	movs	r3, #1
 800694c:	464a      	mov	r2, r9
 800694e:	4631      	mov	r1, r6
 8006950:	4628      	mov	r0, r5
 8006952:	47b8      	blx	r7
 8006954:	3001      	adds	r0, #1
 8006956:	f43f ae3e 	beq.w	80065d6 <_printf_float+0xb6>
 800695a:	f108 0801 	add.w	r8, r8, #1
 800695e:	68e3      	ldr	r3, [r4, #12]
 8006960:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006962:	1a5b      	subs	r3, r3, r1
 8006964:	4543      	cmp	r3, r8
 8006966:	dcf0      	bgt.n	800694a <_printf_float+0x42a>
 8006968:	e6fc      	b.n	8006764 <_printf_float+0x244>
 800696a:	f04f 0800 	mov.w	r8, #0
 800696e:	f104 0919 	add.w	r9, r4, #25
 8006972:	e7f4      	b.n	800695e <_printf_float+0x43e>

08006974 <_printf_common>:
 8006974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006978:	4616      	mov	r6, r2
 800697a:	4698      	mov	r8, r3
 800697c:	688a      	ldr	r2, [r1, #8]
 800697e:	690b      	ldr	r3, [r1, #16]
 8006980:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006984:	4293      	cmp	r3, r2
 8006986:	bfb8      	it	lt
 8006988:	4613      	movlt	r3, r2
 800698a:	6033      	str	r3, [r6, #0]
 800698c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006990:	4607      	mov	r7, r0
 8006992:	460c      	mov	r4, r1
 8006994:	b10a      	cbz	r2, 800699a <_printf_common+0x26>
 8006996:	3301      	adds	r3, #1
 8006998:	6033      	str	r3, [r6, #0]
 800699a:	6823      	ldr	r3, [r4, #0]
 800699c:	0699      	lsls	r1, r3, #26
 800699e:	bf42      	ittt	mi
 80069a0:	6833      	ldrmi	r3, [r6, #0]
 80069a2:	3302      	addmi	r3, #2
 80069a4:	6033      	strmi	r3, [r6, #0]
 80069a6:	6825      	ldr	r5, [r4, #0]
 80069a8:	f015 0506 	ands.w	r5, r5, #6
 80069ac:	d106      	bne.n	80069bc <_printf_common+0x48>
 80069ae:	f104 0a19 	add.w	sl, r4, #25
 80069b2:	68e3      	ldr	r3, [r4, #12]
 80069b4:	6832      	ldr	r2, [r6, #0]
 80069b6:	1a9b      	subs	r3, r3, r2
 80069b8:	42ab      	cmp	r3, r5
 80069ba:	dc26      	bgt.n	8006a0a <_printf_common+0x96>
 80069bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80069c0:	6822      	ldr	r2, [r4, #0]
 80069c2:	3b00      	subs	r3, #0
 80069c4:	bf18      	it	ne
 80069c6:	2301      	movne	r3, #1
 80069c8:	0692      	lsls	r2, r2, #26
 80069ca:	d42b      	bmi.n	8006a24 <_printf_common+0xb0>
 80069cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80069d0:	4641      	mov	r1, r8
 80069d2:	4638      	mov	r0, r7
 80069d4:	47c8      	blx	r9
 80069d6:	3001      	adds	r0, #1
 80069d8:	d01e      	beq.n	8006a18 <_printf_common+0xa4>
 80069da:	6823      	ldr	r3, [r4, #0]
 80069dc:	6922      	ldr	r2, [r4, #16]
 80069de:	f003 0306 	and.w	r3, r3, #6
 80069e2:	2b04      	cmp	r3, #4
 80069e4:	bf02      	ittt	eq
 80069e6:	68e5      	ldreq	r5, [r4, #12]
 80069e8:	6833      	ldreq	r3, [r6, #0]
 80069ea:	1aed      	subeq	r5, r5, r3
 80069ec:	68a3      	ldr	r3, [r4, #8]
 80069ee:	bf0c      	ite	eq
 80069f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80069f4:	2500      	movne	r5, #0
 80069f6:	4293      	cmp	r3, r2
 80069f8:	bfc4      	itt	gt
 80069fa:	1a9b      	subgt	r3, r3, r2
 80069fc:	18ed      	addgt	r5, r5, r3
 80069fe:	2600      	movs	r6, #0
 8006a00:	341a      	adds	r4, #26
 8006a02:	42b5      	cmp	r5, r6
 8006a04:	d11a      	bne.n	8006a3c <_printf_common+0xc8>
 8006a06:	2000      	movs	r0, #0
 8006a08:	e008      	b.n	8006a1c <_printf_common+0xa8>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	4652      	mov	r2, sl
 8006a0e:	4641      	mov	r1, r8
 8006a10:	4638      	mov	r0, r7
 8006a12:	47c8      	blx	r9
 8006a14:	3001      	adds	r0, #1
 8006a16:	d103      	bne.n	8006a20 <_printf_common+0xac>
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a20:	3501      	adds	r5, #1
 8006a22:	e7c6      	b.n	80069b2 <_printf_common+0x3e>
 8006a24:	18e1      	adds	r1, r4, r3
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	2030      	movs	r0, #48	@ 0x30
 8006a2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006a2e:	4422      	add	r2, r4
 8006a30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006a34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006a38:	3302      	adds	r3, #2
 8006a3a:	e7c7      	b.n	80069cc <_printf_common+0x58>
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	4622      	mov	r2, r4
 8006a40:	4641      	mov	r1, r8
 8006a42:	4638      	mov	r0, r7
 8006a44:	47c8      	blx	r9
 8006a46:	3001      	adds	r0, #1
 8006a48:	d0e6      	beq.n	8006a18 <_printf_common+0xa4>
 8006a4a:	3601      	adds	r6, #1
 8006a4c:	e7d9      	b.n	8006a02 <_printf_common+0x8e>
	...

08006a50 <_printf_i>:
 8006a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	7e0f      	ldrb	r7, [r1, #24]
 8006a56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006a58:	2f78      	cmp	r7, #120	@ 0x78
 8006a5a:	4691      	mov	r9, r2
 8006a5c:	4680      	mov	r8, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	469a      	mov	sl, r3
 8006a62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006a66:	d807      	bhi.n	8006a78 <_printf_i+0x28>
 8006a68:	2f62      	cmp	r7, #98	@ 0x62
 8006a6a:	d80a      	bhi.n	8006a82 <_printf_i+0x32>
 8006a6c:	2f00      	cmp	r7, #0
 8006a6e:	f000 80d1 	beq.w	8006c14 <_printf_i+0x1c4>
 8006a72:	2f58      	cmp	r7, #88	@ 0x58
 8006a74:	f000 80b8 	beq.w	8006be8 <_printf_i+0x198>
 8006a78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a80:	e03a      	b.n	8006af8 <_printf_i+0xa8>
 8006a82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a86:	2b15      	cmp	r3, #21
 8006a88:	d8f6      	bhi.n	8006a78 <_printf_i+0x28>
 8006a8a:	a101      	add	r1, pc, #4	@ (adr r1, 8006a90 <_printf_i+0x40>)
 8006a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a90:	08006ae9 	.word	0x08006ae9
 8006a94:	08006afd 	.word	0x08006afd
 8006a98:	08006a79 	.word	0x08006a79
 8006a9c:	08006a79 	.word	0x08006a79
 8006aa0:	08006a79 	.word	0x08006a79
 8006aa4:	08006a79 	.word	0x08006a79
 8006aa8:	08006afd 	.word	0x08006afd
 8006aac:	08006a79 	.word	0x08006a79
 8006ab0:	08006a79 	.word	0x08006a79
 8006ab4:	08006a79 	.word	0x08006a79
 8006ab8:	08006a79 	.word	0x08006a79
 8006abc:	08006bfb 	.word	0x08006bfb
 8006ac0:	08006b27 	.word	0x08006b27
 8006ac4:	08006bb5 	.word	0x08006bb5
 8006ac8:	08006a79 	.word	0x08006a79
 8006acc:	08006a79 	.word	0x08006a79
 8006ad0:	08006c1d 	.word	0x08006c1d
 8006ad4:	08006a79 	.word	0x08006a79
 8006ad8:	08006b27 	.word	0x08006b27
 8006adc:	08006a79 	.word	0x08006a79
 8006ae0:	08006a79 	.word	0x08006a79
 8006ae4:	08006bbd 	.word	0x08006bbd
 8006ae8:	6833      	ldr	r3, [r6, #0]
 8006aea:	1d1a      	adds	r2, r3, #4
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6032      	str	r2, [r6, #0]
 8006af0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006af4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006af8:	2301      	movs	r3, #1
 8006afa:	e09c      	b.n	8006c36 <_printf_i+0x1e6>
 8006afc:	6833      	ldr	r3, [r6, #0]
 8006afe:	6820      	ldr	r0, [r4, #0]
 8006b00:	1d19      	adds	r1, r3, #4
 8006b02:	6031      	str	r1, [r6, #0]
 8006b04:	0606      	lsls	r6, r0, #24
 8006b06:	d501      	bpl.n	8006b0c <_printf_i+0xbc>
 8006b08:	681d      	ldr	r5, [r3, #0]
 8006b0a:	e003      	b.n	8006b14 <_printf_i+0xc4>
 8006b0c:	0645      	lsls	r5, r0, #25
 8006b0e:	d5fb      	bpl.n	8006b08 <_printf_i+0xb8>
 8006b10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b14:	2d00      	cmp	r5, #0
 8006b16:	da03      	bge.n	8006b20 <_printf_i+0xd0>
 8006b18:	232d      	movs	r3, #45	@ 0x2d
 8006b1a:	426d      	negs	r5, r5
 8006b1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b20:	4858      	ldr	r0, [pc, #352]	@ (8006c84 <_printf_i+0x234>)
 8006b22:	230a      	movs	r3, #10
 8006b24:	e011      	b.n	8006b4a <_printf_i+0xfa>
 8006b26:	6821      	ldr	r1, [r4, #0]
 8006b28:	6833      	ldr	r3, [r6, #0]
 8006b2a:	0608      	lsls	r0, r1, #24
 8006b2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006b30:	d402      	bmi.n	8006b38 <_printf_i+0xe8>
 8006b32:	0649      	lsls	r1, r1, #25
 8006b34:	bf48      	it	mi
 8006b36:	b2ad      	uxthmi	r5, r5
 8006b38:	2f6f      	cmp	r7, #111	@ 0x6f
 8006b3a:	4852      	ldr	r0, [pc, #328]	@ (8006c84 <_printf_i+0x234>)
 8006b3c:	6033      	str	r3, [r6, #0]
 8006b3e:	bf14      	ite	ne
 8006b40:	230a      	movne	r3, #10
 8006b42:	2308      	moveq	r3, #8
 8006b44:	2100      	movs	r1, #0
 8006b46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006b4a:	6866      	ldr	r6, [r4, #4]
 8006b4c:	60a6      	str	r6, [r4, #8]
 8006b4e:	2e00      	cmp	r6, #0
 8006b50:	db05      	blt.n	8006b5e <_printf_i+0x10e>
 8006b52:	6821      	ldr	r1, [r4, #0]
 8006b54:	432e      	orrs	r6, r5
 8006b56:	f021 0104 	bic.w	r1, r1, #4
 8006b5a:	6021      	str	r1, [r4, #0]
 8006b5c:	d04b      	beq.n	8006bf6 <_printf_i+0x1a6>
 8006b5e:	4616      	mov	r6, r2
 8006b60:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b64:	fb03 5711 	mls	r7, r3, r1, r5
 8006b68:	5dc7      	ldrb	r7, [r0, r7]
 8006b6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b6e:	462f      	mov	r7, r5
 8006b70:	42bb      	cmp	r3, r7
 8006b72:	460d      	mov	r5, r1
 8006b74:	d9f4      	bls.n	8006b60 <_printf_i+0x110>
 8006b76:	2b08      	cmp	r3, #8
 8006b78:	d10b      	bne.n	8006b92 <_printf_i+0x142>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	07df      	lsls	r7, r3, #31
 8006b7e:	d508      	bpl.n	8006b92 <_printf_i+0x142>
 8006b80:	6923      	ldr	r3, [r4, #16]
 8006b82:	6861      	ldr	r1, [r4, #4]
 8006b84:	4299      	cmp	r1, r3
 8006b86:	bfde      	ittt	le
 8006b88:	2330      	movle	r3, #48	@ 0x30
 8006b8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b92:	1b92      	subs	r2, r2, r6
 8006b94:	6122      	str	r2, [r4, #16]
 8006b96:	f8cd a000 	str.w	sl, [sp]
 8006b9a:	464b      	mov	r3, r9
 8006b9c:	aa03      	add	r2, sp, #12
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	4640      	mov	r0, r8
 8006ba2:	f7ff fee7 	bl	8006974 <_printf_common>
 8006ba6:	3001      	adds	r0, #1
 8006ba8:	d14a      	bne.n	8006c40 <_printf_i+0x1f0>
 8006baa:	f04f 30ff 	mov.w	r0, #4294967295
 8006bae:	b004      	add	sp, #16
 8006bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb4:	6823      	ldr	r3, [r4, #0]
 8006bb6:	f043 0320 	orr.w	r3, r3, #32
 8006bba:	6023      	str	r3, [r4, #0]
 8006bbc:	4832      	ldr	r0, [pc, #200]	@ (8006c88 <_printf_i+0x238>)
 8006bbe:	2778      	movs	r7, #120	@ 0x78
 8006bc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006bc4:	6823      	ldr	r3, [r4, #0]
 8006bc6:	6831      	ldr	r1, [r6, #0]
 8006bc8:	061f      	lsls	r7, r3, #24
 8006bca:	f851 5b04 	ldr.w	r5, [r1], #4
 8006bce:	d402      	bmi.n	8006bd6 <_printf_i+0x186>
 8006bd0:	065f      	lsls	r7, r3, #25
 8006bd2:	bf48      	it	mi
 8006bd4:	b2ad      	uxthmi	r5, r5
 8006bd6:	6031      	str	r1, [r6, #0]
 8006bd8:	07d9      	lsls	r1, r3, #31
 8006bda:	bf44      	itt	mi
 8006bdc:	f043 0320 	orrmi.w	r3, r3, #32
 8006be0:	6023      	strmi	r3, [r4, #0]
 8006be2:	b11d      	cbz	r5, 8006bec <_printf_i+0x19c>
 8006be4:	2310      	movs	r3, #16
 8006be6:	e7ad      	b.n	8006b44 <_printf_i+0xf4>
 8006be8:	4826      	ldr	r0, [pc, #152]	@ (8006c84 <_printf_i+0x234>)
 8006bea:	e7e9      	b.n	8006bc0 <_printf_i+0x170>
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	f023 0320 	bic.w	r3, r3, #32
 8006bf2:	6023      	str	r3, [r4, #0]
 8006bf4:	e7f6      	b.n	8006be4 <_printf_i+0x194>
 8006bf6:	4616      	mov	r6, r2
 8006bf8:	e7bd      	b.n	8006b76 <_printf_i+0x126>
 8006bfa:	6833      	ldr	r3, [r6, #0]
 8006bfc:	6825      	ldr	r5, [r4, #0]
 8006bfe:	6961      	ldr	r1, [r4, #20]
 8006c00:	1d18      	adds	r0, r3, #4
 8006c02:	6030      	str	r0, [r6, #0]
 8006c04:	062e      	lsls	r6, r5, #24
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	d501      	bpl.n	8006c0e <_printf_i+0x1be>
 8006c0a:	6019      	str	r1, [r3, #0]
 8006c0c:	e002      	b.n	8006c14 <_printf_i+0x1c4>
 8006c0e:	0668      	lsls	r0, r5, #25
 8006c10:	d5fb      	bpl.n	8006c0a <_printf_i+0x1ba>
 8006c12:	8019      	strh	r1, [r3, #0]
 8006c14:	2300      	movs	r3, #0
 8006c16:	6123      	str	r3, [r4, #16]
 8006c18:	4616      	mov	r6, r2
 8006c1a:	e7bc      	b.n	8006b96 <_printf_i+0x146>
 8006c1c:	6833      	ldr	r3, [r6, #0]
 8006c1e:	1d1a      	adds	r2, r3, #4
 8006c20:	6032      	str	r2, [r6, #0]
 8006c22:	681e      	ldr	r6, [r3, #0]
 8006c24:	6862      	ldr	r2, [r4, #4]
 8006c26:	2100      	movs	r1, #0
 8006c28:	4630      	mov	r0, r6
 8006c2a:	f7f9 fae1 	bl	80001f0 <memchr>
 8006c2e:	b108      	cbz	r0, 8006c34 <_printf_i+0x1e4>
 8006c30:	1b80      	subs	r0, r0, r6
 8006c32:	6060      	str	r0, [r4, #4]
 8006c34:	6863      	ldr	r3, [r4, #4]
 8006c36:	6123      	str	r3, [r4, #16]
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c3e:	e7aa      	b.n	8006b96 <_printf_i+0x146>
 8006c40:	6923      	ldr	r3, [r4, #16]
 8006c42:	4632      	mov	r2, r6
 8006c44:	4649      	mov	r1, r9
 8006c46:	4640      	mov	r0, r8
 8006c48:	47d0      	blx	sl
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	d0ad      	beq.n	8006baa <_printf_i+0x15a>
 8006c4e:	6823      	ldr	r3, [r4, #0]
 8006c50:	079b      	lsls	r3, r3, #30
 8006c52:	d413      	bmi.n	8006c7c <_printf_i+0x22c>
 8006c54:	68e0      	ldr	r0, [r4, #12]
 8006c56:	9b03      	ldr	r3, [sp, #12]
 8006c58:	4298      	cmp	r0, r3
 8006c5a:	bfb8      	it	lt
 8006c5c:	4618      	movlt	r0, r3
 8006c5e:	e7a6      	b.n	8006bae <_printf_i+0x15e>
 8006c60:	2301      	movs	r3, #1
 8006c62:	4632      	mov	r2, r6
 8006c64:	4649      	mov	r1, r9
 8006c66:	4640      	mov	r0, r8
 8006c68:	47d0      	blx	sl
 8006c6a:	3001      	adds	r0, #1
 8006c6c:	d09d      	beq.n	8006baa <_printf_i+0x15a>
 8006c6e:	3501      	adds	r5, #1
 8006c70:	68e3      	ldr	r3, [r4, #12]
 8006c72:	9903      	ldr	r1, [sp, #12]
 8006c74:	1a5b      	subs	r3, r3, r1
 8006c76:	42ab      	cmp	r3, r5
 8006c78:	dcf2      	bgt.n	8006c60 <_printf_i+0x210>
 8006c7a:	e7eb      	b.n	8006c54 <_printf_i+0x204>
 8006c7c:	2500      	movs	r5, #0
 8006c7e:	f104 0619 	add.w	r6, r4, #25
 8006c82:	e7f5      	b.n	8006c70 <_printf_i+0x220>
 8006c84:	0800a184 	.word	0x0800a184
 8006c88:	0800a195 	.word	0x0800a195

08006c8c <_scanf_float>:
 8006c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c90:	b087      	sub	sp, #28
 8006c92:	4691      	mov	r9, r2
 8006c94:	9303      	str	r3, [sp, #12]
 8006c96:	688b      	ldr	r3, [r1, #8]
 8006c98:	1e5a      	subs	r2, r3, #1
 8006c9a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006c9e:	bf81      	itttt	hi
 8006ca0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006ca4:	eb03 0b05 	addhi.w	fp, r3, r5
 8006ca8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006cac:	608b      	strhi	r3, [r1, #8]
 8006cae:	680b      	ldr	r3, [r1, #0]
 8006cb0:	460a      	mov	r2, r1
 8006cb2:	f04f 0500 	mov.w	r5, #0
 8006cb6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006cba:	f842 3b1c 	str.w	r3, [r2], #28
 8006cbe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006cc2:	4680      	mov	r8, r0
 8006cc4:	460c      	mov	r4, r1
 8006cc6:	bf98      	it	ls
 8006cc8:	f04f 0b00 	movls.w	fp, #0
 8006ccc:	9201      	str	r2, [sp, #4]
 8006cce:	4616      	mov	r6, r2
 8006cd0:	46aa      	mov	sl, r5
 8006cd2:	462f      	mov	r7, r5
 8006cd4:	9502      	str	r5, [sp, #8]
 8006cd6:	68a2      	ldr	r2, [r4, #8]
 8006cd8:	b15a      	cbz	r2, 8006cf2 <_scanf_float+0x66>
 8006cda:	f8d9 3000 	ldr.w	r3, [r9]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b4e      	cmp	r3, #78	@ 0x4e
 8006ce2:	d863      	bhi.n	8006dac <_scanf_float+0x120>
 8006ce4:	2b40      	cmp	r3, #64	@ 0x40
 8006ce6:	d83b      	bhi.n	8006d60 <_scanf_float+0xd4>
 8006ce8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006cec:	b2c8      	uxtb	r0, r1
 8006cee:	280e      	cmp	r0, #14
 8006cf0:	d939      	bls.n	8006d66 <_scanf_float+0xda>
 8006cf2:	b11f      	cbz	r7, 8006cfc <_scanf_float+0x70>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cfa:	6023      	str	r3, [r4, #0]
 8006cfc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d00:	f1ba 0f01 	cmp.w	sl, #1
 8006d04:	f200 8114 	bhi.w	8006f30 <_scanf_float+0x2a4>
 8006d08:	9b01      	ldr	r3, [sp, #4]
 8006d0a:	429e      	cmp	r6, r3
 8006d0c:	f200 8105 	bhi.w	8006f1a <_scanf_float+0x28e>
 8006d10:	2001      	movs	r0, #1
 8006d12:	b007      	add	sp, #28
 8006d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d18:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006d1c:	2a0d      	cmp	r2, #13
 8006d1e:	d8e8      	bhi.n	8006cf2 <_scanf_float+0x66>
 8006d20:	a101      	add	r1, pc, #4	@ (adr r1, 8006d28 <_scanf_float+0x9c>)
 8006d22:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006d26:	bf00      	nop
 8006d28:	08006e71 	.word	0x08006e71
 8006d2c:	08006cf3 	.word	0x08006cf3
 8006d30:	08006cf3 	.word	0x08006cf3
 8006d34:	08006cf3 	.word	0x08006cf3
 8006d38:	08006ecd 	.word	0x08006ecd
 8006d3c:	08006ea7 	.word	0x08006ea7
 8006d40:	08006cf3 	.word	0x08006cf3
 8006d44:	08006cf3 	.word	0x08006cf3
 8006d48:	08006e7f 	.word	0x08006e7f
 8006d4c:	08006cf3 	.word	0x08006cf3
 8006d50:	08006cf3 	.word	0x08006cf3
 8006d54:	08006cf3 	.word	0x08006cf3
 8006d58:	08006cf3 	.word	0x08006cf3
 8006d5c:	08006e3b 	.word	0x08006e3b
 8006d60:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006d64:	e7da      	b.n	8006d1c <_scanf_float+0x90>
 8006d66:	290e      	cmp	r1, #14
 8006d68:	d8c3      	bhi.n	8006cf2 <_scanf_float+0x66>
 8006d6a:	a001      	add	r0, pc, #4	@ (adr r0, 8006d70 <_scanf_float+0xe4>)
 8006d6c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d70:	08006e2b 	.word	0x08006e2b
 8006d74:	08006cf3 	.word	0x08006cf3
 8006d78:	08006e2b 	.word	0x08006e2b
 8006d7c:	08006ebb 	.word	0x08006ebb
 8006d80:	08006cf3 	.word	0x08006cf3
 8006d84:	08006dcd 	.word	0x08006dcd
 8006d88:	08006e11 	.word	0x08006e11
 8006d8c:	08006e11 	.word	0x08006e11
 8006d90:	08006e11 	.word	0x08006e11
 8006d94:	08006e11 	.word	0x08006e11
 8006d98:	08006e11 	.word	0x08006e11
 8006d9c:	08006e11 	.word	0x08006e11
 8006da0:	08006e11 	.word	0x08006e11
 8006da4:	08006e11 	.word	0x08006e11
 8006da8:	08006e11 	.word	0x08006e11
 8006dac:	2b6e      	cmp	r3, #110	@ 0x6e
 8006dae:	d809      	bhi.n	8006dc4 <_scanf_float+0x138>
 8006db0:	2b60      	cmp	r3, #96	@ 0x60
 8006db2:	d8b1      	bhi.n	8006d18 <_scanf_float+0x8c>
 8006db4:	2b54      	cmp	r3, #84	@ 0x54
 8006db6:	d07b      	beq.n	8006eb0 <_scanf_float+0x224>
 8006db8:	2b59      	cmp	r3, #89	@ 0x59
 8006dba:	d19a      	bne.n	8006cf2 <_scanf_float+0x66>
 8006dbc:	2d07      	cmp	r5, #7
 8006dbe:	d198      	bne.n	8006cf2 <_scanf_float+0x66>
 8006dc0:	2508      	movs	r5, #8
 8006dc2:	e02f      	b.n	8006e24 <_scanf_float+0x198>
 8006dc4:	2b74      	cmp	r3, #116	@ 0x74
 8006dc6:	d073      	beq.n	8006eb0 <_scanf_float+0x224>
 8006dc8:	2b79      	cmp	r3, #121	@ 0x79
 8006dca:	e7f6      	b.n	8006dba <_scanf_float+0x12e>
 8006dcc:	6821      	ldr	r1, [r4, #0]
 8006dce:	05c8      	lsls	r0, r1, #23
 8006dd0:	d51e      	bpl.n	8006e10 <_scanf_float+0x184>
 8006dd2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006dd6:	6021      	str	r1, [r4, #0]
 8006dd8:	3701      	adds	r7, #1
 8006dda:	f1bb 0f00 	cmp.w	fp, #0
 8006dde:	d003      	beq.n	8006de8 <_scanf_float+0x15c>
 8006de0:	3201      	adds	r2, #1
 8006de2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006de6:	60a2      	str	r2, [r4, #8]
 8006de8:	68a3      	ldr	r3, [r4, #8]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	60a3      	str	r3, [r4, #8]
 8006dee:	6923      	ldr	r3, [r4, #16]
 8006df0:	3301      	adds	r3, #1
 8006df2:	6123      	str	r3, [r4, #16]
 8006df4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	f8c9 3004 	str.w	r3, [r9, #4]
 8006e00:	f340 8082 	ble.w	8006f08 <_scanf_float+0x27c>
 8006e04:	f8d9 3000 	ldr.w	r3, [r9]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	f8c9 3000 	str.w	r3, [r9]
 8006e0e:	e762      	b.n	8006cd6 <_scanf_float+0x4a>
 8006e10:	eb1a 0105 	adds.w	r1, sl, r5
 8006e14:	f47f af6d 	bne.w	8006cf2 <_scanf_float+0x66>
 8006e18:	6822      	ldr	r2, [r4, #0]
 8006e1a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006e1e:	6022      	str	r2, [r4, #0]
 8006e20:	460d      	mov	r5, r1
 8006e22:	468a      	mov	sl, r1
 8006e24:	f806 3b01 	strb.w	r3, [r6], #1
 8006e28:	e7de      	b.n	8006de8 <_scanf_float+0x15c>
 8006e2a:	6822      	ldr	r2, [r4, #0]
 8006e2c:	0610      	lsls	r0, r2, #24
 8006e2e:	f57f af60 	bpl.w	8006cf2 <_scanf_float+0x66>
 8006e32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e36:	6022      	str	r2, [r4, #0]
 8006e38:	e7f4      	b.n	8006e24 <_scanf_float+0x198>
 8006e3a:	f1ba 0f00 	cmp.w	sl, #0
 8006e3e:	d10c      	bne.n	8006e5a <_scanf_float+0x1ce>
 8006e40:	b977      	cbnz	r7, 8006e60 <_scanf_float+0x1d4>
 8006e42:	6822      	ldr	r2, [r4, #0]
 8006e44:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e48:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e4c:	d108      	bne.n	8006e60 <_scanf_float+0x1d4>
 8006e4e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e52:	6022      	str	r2, [r4, #0]
 8006e54:	f04f 0a01 	mov.w	sl, #1
 8006e58:	e7e4      	b.n	8006e24 <_scanf_float+0x198>
 8006e5a:	f1ba 0f02 	cmp.w	sl, #2
 8006e5e:	d050      	beq.n	8006f02 <_scanf_float+0x276>
 8006e60:	2d01      	cmp	r5, #1
 8006e62:	d002      	beq.n	8006e6a <_scanf_float+0x1de>
 8006e64:	2d04      	cmp	r5, #4
 8006e66:	f47f af44 	bne.w	8006cf2 <_scanf_float+0x66>
 8006e6a:	3501      	adds	r5, #1
 8006e6c:	b2ed      	uxtb	r5, r5
 8006e6e:	e7d9      	b.n	8006e24 <_scanf_float+0x198>
 8006e70:	f1ba 0f01 	cmp.w	sl, #1
 8006e74:	f47f af3d 	bne.w	8006cf2 <_scanf_float+0x66>
 8006e78:	f04f 0a02 	mov.w	sl, #2
 8006e7c:	e7d2      	b.n	8006e24 <_scanf_float+0x198>
 8006e7e:	b975      	cbnz	r5, 8006e9e <_scanf_float+0x212>
 8006e80:	2f00      	cmp	r7, #0
 8006e82:	f47f af37 	bne.w	8006cf4 <_scanf_float+0x68>
 8006e86:	6822      	ldr	r2, [r4, #0]
 8006e88:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e8c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e90:	f040 8103 	bne.w	800709a <_scanf_float+0x40e>
 8006e94:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e98:	6022      	str	r2, [r4, #0]
 8006e9a:	2501      	movs	r5, #1
 8006e9c:	e7c2      	b.n	8006e24 <_scanf_float+0x198>
 8006e9e:	2d03      	cmp	r5, #3
 8006ea0:	d0e3      	beq.n	8006e6a <_scanf_float+0x1de>
 8006ea2:	2d05      	cmp	r5, #5
 8006ea4:	e7df      	b.n	8006e66 <_scanf_float+0x1da>
 8006ea6:	2d02      	cmp	r5, #2
 8006ea8:	f47f af23 	bne.w	8006cf2 <_scanf_float+0x66>
 8006eac:	2503      	movs	r5, #3
 8006eae:	e7b9      	b.n	8006e24 <_scanf_float+0x198>
 8006eb0:	2d06      	cmp	r5, #6
 8006eb2:	f47f af1e 	bne.w	8006cf2 <_scanf_float+0x66>
 8006eb6:	2507      	movs	r5, #7
 8006eb8:	e7b4      	b.n	8006e24 <_scanf_float+0x198>
 8006eba:	6822      	ldr	r2, [r4, #0]
 8006ebc:	0591      	lsls	r1, r2, #22
 8006ebe:	f57f af18 	bpl.w	8006cf2 <_scanf_float+0x66>
 8006ec2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006ec6:	6022      	str	r2, [r4, #0]
 8006ec8:	9702      	str	r7, [sp, #8]
 8006eca:	e7ab      	b.n	8006e24 <_scanf_float+0x198>
 8006ecc:	6822      	ldr	r2, [r4, #0]
 8006ece:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006ed2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006ed6:	d005      	beq.n	8006ee4 <_scanf_float+0x258>
 8006ed8:	0550      	lsls	r0, r2, #21
 8006eda:	f57f af0a 	bpl.w	8006cf2 <_scanf_float+0x66>
 8006ede:	2f00      	cmp	r7, #0
 8006ee0:	f000 80db 	beq.w	800709a <_scanf_float+0x40e>
 8006ee4:	0591      	lsls	r1, r2, #22
 8006ee6:	bf58      	it	pl
 8006ee8:	9902      	ldrpl	r1, [sp, #8]
 8006eea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006eee:	bf58      	it	pl
 8006ef0:	1a79      	subpl	r1, r7, r1
 8006ef2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006ef6:	bf58      	it	pl
 8006ef8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006efc:	6022      	str	r2, [r4, #0]
 8006efe:	2700      	movs	r7, #0
 8006f00:	e790      	b.n	8006e24 <_scanf_float+0x198>
 8006f02:	f04f 0a03 	mov.w	sl, #3
 8006f06:	e78d      	b.n	8006e24 <_scanf_float+0x198>
 8006f08:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006f0c:	4649      	mov	r1, r9
 8006f0e:	4640      	mov	r0, r8
 8006f10:	4798      	blx	r3
 8006f12:	2800      	cmp	r0, #0
 8006f14:	f43f aedf 	beq.w	8006cd6 <_scanf_float+0x4a>
 8006f18:	e6eb      	b.n	8006cf2 <_scanf_float+0x66>
 8006f1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f1e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f22:	464a      	mov	r2, r9
 8006f24:	4640      	mov	r0, r8
 8006f26:	4798      	blx	r3
 8006f28:	6923      	ldr	r3, [r4, #16]
 8006f2a:	3b01      	subs	r3, #1
 8006f2c:	6123      	str	r3, [r4, #16]
 8006f2e:	e6eb      	b.n	8006d08 <_scanf_float+0x7c>
 8006f30:	1e6b      	subs	r3, r5, #1
 8006f32:	2b06      	cmp	r3, #6
 8006f34:	d824      	bhi.n	8006f80 <_scanf_float+0x2f4>
 8006f36:	2d02      	cmp	r5, #2
 8006f38:	d836      	bhi.n	8006fa8 <_scanf_float+0x31c>
 8006f3a:	9b01      	ldr	r3, [sp, #4]
 8006f3c:	429e      	cmp	r6, r3
 8006f3e:	f67f aee7 	bls.w	8006d10 <_scanf_float+0x84>
 8006f42:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f4a:	464a      	mov	r2, r9
 8006f4c:	4640      	mov	r0, r8
 8006f4e:	4798      	blx	r3
 8006f50:	6923      	ldr	r3, [r4, #16]
 8006f52:	3b01      	subs	r3, #1
 8006f54:	6123      	str	r3, [r4, #16]
 8006f56:	e7f0      	b.n	8006f3a <_scanf_float+0x2ae>
 8006f58:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f5c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006f60:	464a      	mov	r2, r9
 8006f62:	4640      	mov	r0, r8
 8006f64:	4798      	blx	r3
 8006f66:	6923      	ldr	r3, [r4, #16]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	6123      	str	r3, [r4, #16]
 8006f6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f70:	fa5f fa8a 	uxtb.w	sl, sl
 8006f74:	f1ba 0f02 	cmp.w	sl, #2
 8006f78:	d1ee      	bne.n	8006f58 <_scanf_float+0x2cc>
 8006f7a:	3d03      	subs	r5, #3
 8006f7c:	b2ed      	uxtb	r5, r5
 8006f7e:	1b76      	subs	r6, r6, r5
 8006f80:	6823      	ldr	r3, [r4, #0]
 8006f82:	05da      	lsls	r2, r3, #23
 8006f84:	d530      	bpl.n	8006fe8 <_scanf_float+0x35c>
 8006f86:	055b      	lsls	r3, r3, #21
 8006f88:	d511      	bpl.n	8006fae <_scanf_float+0x322>
 8006f8a:	9b01      	ldr	r3, [sp, #4]
 8006f8c:	429e      	cmp	r6, r3
 8006f8e:	f67f aebf 	bls.w	8006d10 <_scanf_float+0x84>
 8006f92:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f9a:	464a      	mov	r2, r9
 8006f9c:	4640      	mov	r0, r8
 8006f9e:	4798      	blx	r3
 8006fa0:	6923      	ldr	r3, [r4, #16]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	6123      	str	r3, [r4, #16]
 8006fa6:	e7f0      	b.n	8006f8a <_scanf_float+0x2fe>
 8006fa8:	46aa      	mov	sl, r5
 8006faa:	46b3      	mov	fp, r6
 8006fac:	e7de      	b.n	8006f6c <_scanf_float+0x2e0>
 8006fae:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006fb2:	6923      	ldr	r3, [r4, #16]
 8006fb4:	2965      	cmp	r1, #101	@ 0x65
 8006fb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fba:	f106 35ff 	add.w	r5, r6, #4294967295
 8006fbe:	6123      	str	r3, [r4, #16]
 8006fc0:	d00c      	beq.n	8006fdc <_scanf_float+0x350>
 8006fc2:	2945      	cmp	r1, #69	@ 0x45
 8006fc4:	d00a      	beq.n	8006fdc <_scanf_float+0x350>
 8006fc6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fca:	464a      	mov	r2, r9
 8006fcc:	4640      	mov	r0, r8
 8006fce:	4798      	blx	r3
 8006fd0:	6923      	ldr	r3, [r4, #16]
 8006fd2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	1eb5      	subs	r5, r6, #2
 8006fda:	6123      	str	r3, [r4, #16]
 8006fdc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fe0:	464a      	mov	r2, r9
 8006fe2:	4640      	mov	r0, r8
 8006fe4:	4798      	blx	r3
 8006fe6:	462e      	mov	r6, r5
 8006fe8:	6822      	ldr	r2, [r4, #0]
 8006fea:	f012 0210 	ands.w	r2, r2, #16
 8006fee:	d001      	beq.n	8006ff4 <_scanf_float+0x368>
 8006ff0:	2000      	movs	r0, #0
 8006ff2:	e68e      	b.n	8006d12 <_scanf_float+0x86>
 8006ff4:	7032      	strb	r2, [r6, #0]
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007000:	d125      	bne.n	800704e <_scanf_float+0x3c2>
 8007002:	9b02      	ldr	r3, [sp, #8]
 8007004:	429f      	cmp	r7, r3
 8007006:	d00a      	beq.n	800701e <_scanf_float+0x392>
 8007008:	1bda      	subs	r2, r3, r7
 800700a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800700e:	429e      	cmp	r6, r3
 8007010:	bf28      	it	cs
 8007012:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007016:	4922      	ldr	r1, [pc, #136]	@ (80070a0 <_scanf_float+0x414>)
 8007018:	4630      	mov	r0, r6
 800701a:	f000 f9ad 	bl	8007378 <siprintf>
 800701e:	9901      	ldr	r1, [sp, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	4640      	mov	r0, r8
 8007024:	f7ff f944 	bl	80062b0 <_strtod_r>
 8007028:	9b03      	ldr	r3, [sp, #12]
 800702a:	6821      	ldr	r1, [r4, #0]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f011 0f02 	tst.w	r1, #2
 8007032:	ec57 6b10 	vmov	r6, r7, d0
 8007036:	f103 0204 	add.w	r2, r3, #4
 800703a:	d015      	beq.n	8007068 <_scanf_float+0x3dc>
 800703c:	9903      	ldr	r1, [sp, #12]
 800703e:	600a      	str	r2, [r1, #0]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	e9c3 6700 	strd	r6, r7, [r3]
 8007046:	68e3      	ldr	r3, [r4, #12]
 8007048:	3301      	adds	r3, #1
 800704a:	60e3      	str	r3, [r4, #12]
 800704c:	e7d0      	b.n	8006ff0 <_scanf_float+0x364>
 800704e:	9b04      	ldr	r3, [sp, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d0e4      	beq.n	800701e <_scanf_float+0x392>
 8007054:	9905      	ldr	r1, [sp, #20]
 8007056:	230a      	movs	r3, #10
 8007058:	3101      	adds	r1, #1
 800705a:	4640      	mov	r0, r8
 800705c:	f7ff f9b4 	bl	80063c8 <_strtol_r>
 8007060:	9b04      	ldr	r3, [sp, #16]
 8007062:	9e05      	ldr	r6, [sp, #20]
 8007064:	1ac2      	subs	r2, r0, r3
 8007066:	e7d0      	b.n	800700a <_scanf_float+0x37e>
 8007068:	f011 0f04 	tst.w	r1, #4
 800706c:	9903      	ldr	r1, [sp, #12]
 800706e:	600a      	str	r2, [r1, #0]
 8007070:	d1e6      	bne.n	8007040 <_scanf_float+0x3b4>
 8007072:	681d      	ldr	r5, [r3, #0]
 8007074:	4632      	mov	r2, r6
 8007076:	463b      	mov	r3, r7
 8007078:	4630      	mov	r0, r6
 800707a:	4639      	mov	r1, r7
 800707c:	f7f9 fd66 	bl	8000b4c <__aeabi_dcmpun>
 8007080:	b128      	cbz	r0, 800708e <_scanf_float+0x402>
 8007082:	4808      	ldr	r0, [pc, #32]	@ (80070a4 <_scanf_float+0x418>)
 8007084:	f000 fb8c 	bl	80077a0 <nanf>
 8007088:	ed85 0a00 	vstr	s0, [r5]
 800708c:	e7db      	b.n	8007046 <_scanf_float+0x3ba>
 800708e:	4630      	mov	r0, r6
 8007090:	4639      	mov	r1, r7
 8007092:	f7f9 fdb9 	bl	8000c08 <__aeabi_d2f>
 8007096:	6028      	str	r0, [r5, #0]
 8007098:	e7d5      	b.n	8007046 <_scanf_float+0x3ba>
 800709a:	2700      	movs	r7, #0
 800709c:	e62e      	b.n	8006cfc <_scanf_float+0x70>
 800709e:	bf00      	nop
 80070a0:	0800a1a6 	.word	0x0800a1a6
 80070a4:	0800a25f 	.word	0x0800a25f

080070a8 <std>:
 80070a8:	2300      	movs	r3, #0
 80070aa:	b510      	push	{r4, lr}
 80070ac:	4604      	mov	r4, r0
 80070ae:	e9c0 3300 	strd	r3, r3, [r0]
 80070b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070b6:	6083      	str	r3, [r0, #8]
 80070b8:	8181      	strh	r1, [r0, #12]
 80070ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80070bc:	81c2      	strh	r2, [r0, #14]
 80070be:	6183      	str	r3, [r0, #24]
 80070c0:	4619      	mov	r1, r3
 80070c2:	2208      	movs	r2, #8
 80070c4:	305c      	adds	r0, #92	@ 0x5c
 80070c6:	f000 fa51 	bl	800756c <memset>
 80070ca:	4b0d      	ldr	r3, [pc, #52]	@ (8007100 <std+0x58>)
 80070cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80070ce:	4b0d      	ldr	r3, [pc, #52]	@ (8007104 <std+0x5c>)
 80070d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80070d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007108 <std+0x60>)
 80070d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80070d6:	4b0d      	ldr	r3, [pc, #52]	@ (800710c <std+0x64>)
 80070d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80070da:	4b0d      	ldr	r3, [pc, #52]	@ (8007110 <std+0x68>)
 80070dc:	6224      	str	r4, [r4, #32]
 80070de:	429c      	cmp	r4, r3
 80070e0:	d006      	beq.n	80070f0 <std+0x48>
 80070e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80070e6:	4294      	cmp	r4, r2
 80070e8:	d002      	beq.n	80070f0 <std+0x48>
 80070ea:	33d0      	adds	r3, #208	@ 0xd0
 80070ec:	429c      	cmp	r4, r3
 80070ee:	d105      	bne.n	80070fc <std+0x54>
 80070f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80070f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070f8:	f000 bb36 	b.w	8007768 <__retarget_lock_init_recursive>
 80070fc:	bd10      	pop	{r4, pc}
 80070fe:	bf00      	nop
 8007100:	080073bd 	.word	0x080073bd
 8007104:	080073df 	.word	0x080073df
 8007108:	08007417 	.word	0x08007417
 800710c:	0800743b 	.word	0x0800743b
 8007110:	20001404 	.word	0x20001404

08007114 <stdio_exit_handler>:
 8007114:	4a02      	ldr	r2, [pc, #8]	@ (8007120 <stdio_exit_handler+0xc>)
 8007116:	4903      	ldr	r1, [pc, #12]	@ (8007124 <stdio_exit_handler+0x10>)
 8007118:	4803      	ldr	r0, [pc, #12]	@ (8007128 <stdio_exit_handler+0x14>)
 800711a:	f000 b869 	b.w	80071f0 <_fwalk_sglue>
 800711e:	bf00      	nop
 8007120:	20000030 	.word	0x20000030
 8007124:	08009cd9 	.word	0x08009cd9
 8007128:	200001ac 	.word	0x200001ac

0800712c <cleanup_stdio>:
 800712c:	6841      	ldr	r1, [r0, #4]
 800712e:	4b0c      	ldr	r3, [pc, #48]	@ (8007160 <cleanup_stdio+0x34>)
 8007130:	4299      	cmp	r1, r3
 8007132:	b510      	push	{r4, lr}
 8007134:	4604      	mov	r4, r0
 8007136:	d001      	beq.n	800713c <cleanup_stdio+0x10>
 8007138:	f002 fdce 	bl	8009cd8 <_fflush_r>
 800713c:	68a1      	ldr	r1, [r4, #8]
 800713e:	4b09      	ldr	r3, [pc, #36]	@ (8007164 <cleanup_stdio+0x38>)
 8007140:	4299      	cmp	r1, r3
 8007142:	d002      	beq.n	800714a <cleanup_stdio+0x1e>
 8007144:	4620      	mov	r0, r4
 8007146:	f002 fdc7 	bl	8009cd8 <_fflush_r>
 800714a:	68e1      	ldr	r1, [r4, #12]
 800714c:	4b06      	ldr	r3, [pc, #24]	@ (8007168 <cleanup_stdio+0x3c>)
 800714e:	4299      	cmp	r1, r3
 8007150:	d004      	beq.n	800715c <cleanup_stdio+0x30>
 8007152:	4620      	mov	r0, r4
 8007154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007158:	f002 bdbe 	b.w	8009cd8 <_fflush_r>
 800715c:	bd10      	pop	{r4, pc}
 800715e:	bf00      	nop
 8007160:	20001404 	.word	0x20001404
 8007164:	2000146c 	.word	0x2000146c
 8007168:	200014d4 	.word	0x200014d4

0800716c <global_stdio_init.part.0>:
 800716c:	b510      	push	{r4, lr}
 800716e:	4b0b      	ldr	r3, [pc, #44]	@ (800719c <global_stdio_init.part.0+0x30>)
 8007170:	4c0b      	ldr	r4, [pc, #44]	@ (80071a0 <global_stdio_init.part.0+0x34>)
 8007172:	4a0c      	ldr	r2, [pc, #48]	@ (80071a4 <global_stdio_init.part.0+0x38>)
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	4620      	mov	r0, r4
 8007178:	2200      	movs	r2, #0
 800717a:	2104      	movs	r1, #4
 800717c:	f7ff ff94 	bl	80070a8 <std>
 8007180:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007184:	2201      	movs	r2, #1
 8007186:	2109      	movs	r1, #9
 8007188:	f7ff ff8e 	bl	80070a8 <std>
 800718c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007190:	2202      	movs	r2, #2
 8007192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007196:	2112      	movs	r1, #18
 8007198:	f7ff bf86 	b.w	80070a8 <std>
 800719c:	2000153c 	.word	0x2000153c
 80071a0:	20001404 	.word	0x20001404
 80071a4:	08007115 	.word	0x08007115

080071a8 <__sfp_lock_acquire>:
 80071a8:	4801      	ldr	r0, [pc, #4]	@ (80071b0 <__sfp_lock_acquire+0x8>)
 80071aa:	f000 bade 	b.w	800776a <__retarget_lock_acquire_recursive>
 80071ae:	bf00      	nop
 80071b0:	20001545 	.word	0x20001545

080071b4 <__sfp_lock_release>:
 80071b4:	4801      	ldr	r0, [pc, #4]	@ (80071bc <__sfp_lock_release+0x8>)
 80071b6:	f000 bad9 	b.w	800776c <__retarget_lock_release_recursive>
 80071ba:	bf00      	nop
 80071bc:	20001545 	.word	0x20001545

080071c0 <__sinit>:
 80071c0:	b510      	push	{r4, lr}
 80071c2:	4604      	mov	r4, r0
 80071c4:	f7ff fff0 	bl	80071a8 <__sfp_lock_acquire>
 80071c8:	6a23      	ldr	r3, [r4, #32]
 80071ca:	b11b      	cbz	r3, 80071d4 <__sinit+0x14>
 80071cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071d0:	f7ff bff0 	b.w	80071b4 <__sfp_lock_release>
 80071d4:	4b04      	ldr	r3, [pc, #16]	@ (80071e8 <__sinit+0x28>)
 80071d6:	6223      	str	r3, [r4, #32]
 80071d8:	4b04      	ldr	r3, [pc, #16]	@ (80071ec <__sinit+0x2c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1f5      	bne.n	80071cc <__sinit+0xc>
 80071e0:	f7ff ffc4 	bl	800716c <global_stdio_init.part.0>
 80071e4:	e7f2      	b.n	80071cc <__sinit+0xc>
 80071e6:	bf00      	nop
 80071e8:	0800712d 	.word	0x0800712d
 80071ec:	2000153c 	.word	0x2000153c

080071f0 <_fwalk_sglue>:
 80071f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071f4:	4607      	mov	r7, r0
 80071f6:	4688      	mov	r8, r1
 80071f8:	4614      	mov	r4, r2
 80071fa:	2600      	movs	r6, #0
 80071fc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007200:	f1b9 0901 	subs.w	r9, r9, #1
 8007204:	d505      	bpl.n	8007212 <_fwalk_sglue+0x22>
 8007206:	6824      	ldr	r4, [r4, #0]
 8007208:	2c00      	cmp	r4, #0
 800720a:	d1f7      	bne.n	80071fc <_fwalk_sglue+0xc>
 800720c:	4630      	mov	r0, r6
 800720e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007212:	89ab      	ldrh	r3, [r5, #12]
 8007214:	2b01      	cmp	r3, #1
 8007216:	d907      	bls.n	8007228 <_fwalk_sglue+0x38>
 8007218:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800721c:	3301      	adds	r3, #1
 800721e:	d003      	beq.n	8007228 <_fwalk_sglue+0x38>
 8007220:	4629      	mov	r1, r5
 8007222:	4638      	mov	r0, r7
 8007224:	47c0      	blx	r8
 8007226:	4306      	orrs	r6, r0
 8007228:	3568      	adds	r5, #104	@ 0x68
 800722a:	e7e9      	b.n	8007200 <_fwalk_sglue+0x10>

0800722c <iprintf>:
 800722c:	b40f      	push	{r0, r1, r2, r3}
 800722e:	b507      	push	{r0, r1, r2, lr}
 8007230:	4906      	ldr	r1, [pc, #24]	@ (800724c <iprintf+0x20>)
 8007232:	ab04      	add	r3, sp, #16
 8007234:	6808      	ldr	r0, [r1, #0]
 8007236:	f853 2b04 	ldr.w	r2, [r3], #4
 800723a:	6881      	ldr	r1, [r0, #8]
 800723c:	9301      	str	r3, [sp, #4]
 800723e:	f002 fbaf 	bl	80099a0 <_vfiprintf_r>
 8007242:	b003      	add	sp, #12
 8007244:	f85d eb04 	ldr.w	lr, [sp], #4
 8007248:	b004      	add	sp, #16
 800724a:	4770      	bx	lr
 800724c:	200001a8 	.word	0x200001a8

08007250 <_puts_r>:
 8007250:	6a03      	ldr	r3, [r0, #32]
 8007252:	b570      	push	{r4, r5, r6, lr}
 8007254:	6884      	ldr	r4, [r0, #8]
 8007256:	4605      	mov	r5, r0
 8007258:	460e      	mov	r6, r1
 800725a:	b90b      	cbnz	r3, 8007260 <_puts_r+0x10>
 800725c:	f7ff ffb0 	bl	80071c0 <__sinit>
 8007260:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007262:	07db      	lsls	r3, r3, #31
 8007264:	d405      	bmi.n	8007272 <_puts_r+0x22>
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	0598      	lsls	r0, r3, #22
 800726a:	d402      	bmi.n	8007272 <_puts_r+0x22>
 800726c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800726e:	f000 fa7c 	bl	800776a <__retarget_lock_acquire_recursive>
 8007272:	89a3      	ldrh	r3, [r4, #12]
 8007274:	0719      	lsls	r1, r3, #28
 8007276:	d502      	bpl.n	800727e <_puts_r+0x2e>
 8007278:	6923      	ldr	r3, [r4, #16]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d135      	bne.n	80072ea <_puts_r+0x9a>
 800727e:	4621      	mov	r1, r4
 8007280:	4628      	mov	r0, r5
 8007282:	f000 f91d 	bl	80074c0 <__swsetup_r>
 8007286:	b380      	cbz	r0, 80072ea <_puts_r+0x9a>
 8007288:	f04f 35ff 	mov.w	r5, #4294967295
 800728c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800728e:	07da      	lsls	r2, r3, #31
 8007290:	d405      	bmi.n	800729e <_puts_r+0x4e>
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	059b      	lsls	r3, r3, #22
 8007296:	d402      	bmi.n	800729e <_puts_r+0x4e>
 8007298:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800729a:	f000 fa67 	bl	800776c <__retarget_lock_release_recursive>
 800729e:	4628      	mov	r0, r5
 80072a0:	bd70      	pop	{r4, r5, r6, pc}
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	da04      	bge.n	80072b0 <_puts_r+0x60>
 80072a6:	69a2      	ldr	r2, [r4, #24]
 80072a8:	429a      	cmp	r2, r3
 80072aa:	dc17      	bgt.n	80072dc <_puts_r+0x8c>
 80072ac:	290a      	cmp	r1, #10
 80072ae:	d015      	beq.n	80072dc <_puts_r+0x8c>
 80072b0:	6823      	ldr	r3, [r4, #0]
 80072b2:	1c5a      	adds	r2, r3, #1
 80072b4:	6022      	str	r2, [r4, #0]
 80072b6:	7019      	strb	r1, [r3, #0]
 80072b8:	68a3      	ldr	r3, [r4, #8]
 80072ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072be:	3b01      	subs	r3, #1
 80072c0:	60a3      	str	r3, [r4, #8]
 80072c2:	2900      	cmp	r1, #0
 80072c4:	d1ed      	bne.n	80072a2 <_puts_r+0x52>
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	da11      	bge.n	80072ee <_puts_r+0x9e>
 80072ca:	4622      	mov	r2, r4
 80072cc:	210a      	movs	r1, #10
 80072ce:	4628      	mov	r0, r5
 80072d0:	f000 f8b7 	bl	8007442 <__swbuf_r>
 80072d4:	3001      	adds	r0, #1
 80072d6:	d0d7      	beq.n	8007288 <_puts_r+0x38>
 80072d8:	250a      	movs	r5, #10
 80072da:	e7d7      	b.n	800728c <_puts_r+0x3c>
 80072dc:	4622      	mov	r2, r4
 80072de:	4628      	mov	r0, r5
 80072e0:	f000 f8af 	bl	8007442 <__swbuf_r>
 80072e4:	3001      	adds	r0, #1
 80072e6:	d1e7      	bne.n	80072b8 <_puts_r+0x68>
 80072e8:	e7ce      	b.n	8007288 <_puts_r+0x38>
 80072ea:	3e01      	subs	r6, #1
 80072ec:	e7e4      	b.n	80072b8 <_puts_r+0x68>
 80072ee:	6823      	ldr	r3, [r4, #0]
 80072f0:	1c5a      	adds	r2, r3, #1
 80072f2:	6022      	str	r2, [r4, #0]
 80072f4:	220a      	movs	r2, #10
 80072f6:	701a      	strb	r2, [r3, #0]
 80072f8:	e7ee      	b.n	80072d8 <_puts_r+0x88>
	...

080072fc <puts>:
 80072fc:	4b02      	ldr	r3, [pc, #8]	@ (8007308 <puts+0xc>)
 80072fe:	4601      	mov	r1, r0
 8007300:	6818      	ldr	r0, [r3, #0]
 8007302:	f7ff bfa5 	b.w	8007250 <_puts_r>
 8007306:	bf00      	nop
 8007308:	200001a8 	.word	0x200001a8

0800730c <sniprintf>:
 800730c:	b40c      	push	{r2, r3}
 800730e:	b530      	push	{r4, r5, lr}
 8007310:	4b18      	ldr	r3, [pc, #96]	@ (8007374 <sniprintf+0x68>)
 8007312:	1e0c      	subs	r4, r1, #0
 8007314:	681d      	ldr	r5, [r3, #0]
 8007316:	b09d      	sub	sp, #116	@ 0x74
 8007318:	da08      	bge.n	800732c <sniprintf+0x20>
 800731a:	238b      	movs	r3, #139	@ 0x8b
 800731c:	602b      	str	r3, [r5, #0]
 800731e:	f04f 30ff 	mov.w	r0, #4294967295
 8007322:	b01d      	add	sp, #116	@ 0x74
 8007324:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007328:	b002      	add	sp, #8
 800732a:	4770      	bx	lr
 800732c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007330:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007334:	f04f 0300 	mov.w	r3, #0
 8007338:	931b      	str	r3, [sp, #108]	@ 0x6c
 800733a:	bf14      	ite	ne
 800733c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007340:	4623      	moveq	r3, r4
 8007342:	9304      	str	r3, [sp, #16]
 8007344:	9307      	str	r3, [sp, #28]
 8007346:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800734a:	9002      	str	r0, [sp, #8]
 800734c:	9006      	str	r0, [sp, #24]
 800734e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007352:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007354:	ab21      	add	r3, sp, #132	@ 0x84
 8007356:	a902      	add	r1, sp, #8
 8007358:	4628      	mov	r0, r5
 800735a:	9301      	str	r3, [sp, #4]
 800735c:	f002 f9fa 	bl	8009754 <_svfiprintf_r>
 8007360:	1c43      	adds	r3, r0, #1
 8007362:	bfbc      	itt	lt
 8007364:	238b      	movlt	r3, #139	@ 0x8b
 8007366:	602b      	strlt	r3, [r5, #0]
 8007368:	2c00      	cmp	r4, #0
 800736a:	d0da      	beq.n	8007322 <sniprintf+0x16>
 800736c:	9b02      	ldr	r3, [sp, #8]
 800736e:	2200      	movs	r2, #0
 8007370:	701a      	strb	r2, [r3, #0]
 8007372:	e7d6      	b.n	8007322 <sniprintf+0x16>
 8007374:	200001a8 	.word	0x200001a8

08007378 <siprintf>:
 8007378:	b40e      	push	{r1, r2, r3}
 800737a:	b510      	push	{r4, lr}
 800737c:	b09d      	sub	sp, #116	@ 0x74
 800737e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007380:	9002      	str	r0, [sp, #8]
 8007382:	9006      	str	r0, [sp, #24]
 8007384:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007388:	480a      	ldr	r0, [pc, #40]	@ (80073b4 <siprintf+0x3c>)
 800738a:	9107      	str	r1, [sp, #28]
 800738c:	9104      	str	r1, [sp, #16]
 800738e:	490a      	ldr	r1, [pc, #40]	@ (80073b8 <siprintf+0x40>)
 8007390:	f853 2b04 	ldr.w	r2, [r3], #4
 8007394:	9105      	str	r1, [sp, #20]
 8007396:	2400      	movs	r4, #0
 8007398:	a902      	add	r1, sp, #8
 800739a:	6800      	ldr	r0, [r0, #0]
 800739c:	9301      	str	r3, [sp, #4]
 800739e:	941b      	str	r4, [sp, #108]	@ 0x6c
 80073a0:	f002 f9d8 	bl	8009754 <_svfiprintf_r>
 80073a4:	9b02      	ldr	r3, [sp, #8]
 80073a6:	701c      	strb	r4, [r3, #0]
 80073a8:	b01d      	add	sp, #116	@ 0x74
 80073aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073ae:	b003      	add	sp, #12
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	200001a8 	.word	0x200001a8
 80073b8:	ffff0208 	.word	0xffff0208

080073bc <__sread>:
 80073bc:	b510      	push	{r4, lr}
 80073be:	460c      	mov	r4, r1
 80073c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073c4:	f000 f982 	bl	80076cc <_read_r>
 80073c8:	2800      	cmp	r0, #0
 80073ca:	bfab      	itete	ge
 80073cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80073ce:	89a3      	ldrhlt	r3, [r4, #12]
 80073d0:	181b      	addge	r3, r3, r0
 80073d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80073d6:	bfac      	ite	ge
 80073d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80073da:	81a3      	strhlt	r3, [r4, #12]
 80073dc:	bd10      	pop	{r4, pc}

080073de <__swrite>:
 80073de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073e2:	461f      	mov	r7, r3
 80073e4:	898b      	ldrh	r3, [r1, #12]
 80073e6:	05db      	lsls	r3, r3, #23
 80073e8:	4605      	mov	r5, r0
 80073ea:	460c      	mov	r4, r1
 80073ec:	4616      	mov	r6, r2
 80073ee:	d505      	bpl.n	80073fc <__swrite+0x1e>
 80073f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f4:	2302      	movs	r3, #2
 80073f6:	2200      	movs	r2, #0
 80073f8:	f000 f956 	bl	80076a8 <_lseek_r>
 80073fc:	89a3      	ldrh	r3, [r4, #12]
 80073fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007402:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007406:	81a3      	strh	r3, [r4, #12]
 8007408:	4632      	mov	r2, r6
 800740a:	463b      	mov	r3, r7
 800740c:	4628      	mov	r0, r5
 800740e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007412:	f000 b96d 	b.w	80076f0 <_write_r>

08007416 <__sseek>:
 8007416:	b510      	push	{r4, lr}
 8007418:	460c      	mov	r4, r1
 800741a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800741e:	f000 f943 	bl	80076a8 <_lseek_r>
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	89a3      	ldrh	r3, [r4, #12]
 8007426:	bf15      	itete	ne
 8007428:	6560      	strne	r0, [r4, #84]	@ 0x54
 800742a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800742e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007432:	81a3      	strheq	r3, [r4, #12]
 8007434:	bf18      	it	ne
 8007436:	81a3      	strhne	r3, [r4, #12]
 8007438:	bd10      	pop	{r4, pc}

0800743a <__sclose>:
 800743a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800743e:	f000 b923 	b.w	8007688 <_close_r>

08007442 <__swbuf_r>:
 8007442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007444:	460e      	mov	r6, r1
 8007446:	4614      	mov	r4, r2
 8007448:	4605      	mov	r5, r0
 800744a:	b118      	cbz	r0, 8007454 <__swbuf_r+0x12>
 800744c:	6a03      	ldr	r3, [r0, #32]
 800744e:	b90b      	cbnz	r3, 8007454 <__swbuf_r+0x12>
 8007450:	f7ff feb6 	bl	80071c0 <__sinit>
 8007454:	69a3      	ldr	r3, [r4, #24]
 8007456:	60a3      	str	r3, [r4, #8]
 8007458:	89a3      	ldrh	r3, [r4, #12]
 800745a:	071a      	lsls	r2, r3, #28
 800745c:	d501      	bpl.n	8007462 <__swbuf_r+0x20>
 800745e:	6923      	ldr	r3, [r4, #16]
 8007460:	b943      	cbnz	r3, 8007474 <__swbuf_r+0x32>
 8007462:	4621      	mov	r1, r4
 8007464:	4628      	mov	r0, r5
 8007466:	f000 f82b 	bl	80074c0 <__swsetup_r>
 800746a:	b118      	cbz	r0, 8007474 <__swbuf_r+0x32>
 800746c:	f04f 37ff 	mov.w	r7, #4294967295
 8007470:	4638      	mov	r0, r7
 8007472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	6922      	ldr	r2, [r4, #16]
 8007478:	1a98      	subs	r0, r3, r2
 800747a:	6963      	ldr	r3, [r4, #20]
 800747c:	b2f6      	uxtb	r6, r6
 800747e:	4283      	cmp	r3, r0
 8007480:	4637      	mov	r7, r6
 8007482:	dc05      	bgt.n	8007490 <__swbuf_r+0x4e>
 8007484:	4621      	mov	r1, r4
 8007486:	4628      	mov	r0, r5
 8007488:	f002 fc26 	bl	8009cd8 <_fflush_r>
 800748c:	2800      	cmp	r0, #0
 800748e:	d1ed      	bne.n	800746c <__swbuf_r+0x2a>
 8007490:	68a3      	ldr	r3, [r4, #8]
 8007492:	3b01      	subs	r3, #1
 8007494:	60a3      	str	r3, [r4, #8]
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	6022      	str	r2, [r4, #0]
 800749c:	701e      	strb	r6, [r3, #0]
 800749e:	6962      	ldr	r2, [r4, #20]
 80074a0:	1c43      	adds	r3, r0, #1
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d004      	beq.n	80074b0 <__swbuf_r+0x6e>
 80074a6:	89a3      	ldrh	r3, [r4, #12]
 80074a8:	07db      	lsls	r3, r3, #31
 80074aa:	d5e1      	bpl.n	8007470 <__swbuf_r+0x2e>
 80074ac:	2e0a      	cmp	r6, #10
 80074ae:	d1df      	bne.n	8007470 <__swbuf_r+0x2e>
 80074b0:	4621      	mov	r1, r4
 80074b2:	4628      	mov	r0, r5
 80074b4:	f002 fc10 	bl	8009cd8 <_fflush_r>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d0d9      	beq.n	8007470 <__swbuf_r+0x2e>
 80074bc:	e7d6      	b.n	800746c <__swbuf_r+0x2a>
	...

080074c0 <__swsetup_r>:
 80074c0:	b538      	push	{r3, r4, r5, lr}
 80074c2:	4b29      	ldr	r3, [pc, #164]	@ (8007568 <__swsetup_r+0xa8>)
 80074c4:	4605      	mov	r5, r0
 80074c6:	6818      	ldr	r0, [r3, #0]
 80074c8:	460c      	mov	r4, r1
 80074ca:	b118      	cbz	r0, 80074d4 <__swsetup_r+0x14>
 80074cc:	6a03      	ldr	r3, [r0, #32]
 80074ce:	b90b      	cbnz	r3, 80074d4 <__swsetup_r+0x14>
 80074d0:	f7ff fe76 	bl	80071c0 <__sinit>
 80074d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074d8:	0719      	lsls	r1, r3, #28
 80074da:	d422      	bmi.n	8007522 <__swsetup_r+0x62>
 80074dc:	06da      	lsls	r2, r3, #27
 80074de:	d407      	bmi.n	80074f0 <__swsetup_r+0x30>
 80074e0:	2209      	movs	r2, #9
 80074e2:	602a      	str	r2, [r5, #0]
 80074e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074e8:	81a3      	strh	r3, [r4, #12]
 80074ea:	f04f 30ff 	mov.w	r0, #4294967295
 80074ee:	e033      	b.n	8007558 <__swsetup_r+0x98>
 80074f0:	0758      	lsls	r0, r3, #29
 80074f2:	d512      	bpl.n	800751a <__swsetup_r+0x5a>
 80074f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80074f6:	b141      	cbz	r1, 800750a <__swsetup_r+0x4a>
 80074f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074fc:	4299      	cmp	r1, r3
 80074fe:	d002      	beq.n	8007506 <__swsetup_r+0x46>
 8007500:	4628      	mov	r0, r5
 8007502:	f000 ffc9 	bl	8008498 <_free_r>
 8007506:	2300      	movs	r3, #0
 8007508:	6363      	str	r3, [r4, #52]	@ 0x34
 800750a:	89a3      	ldrh	r3, [r4, #12]
 800750c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007510:	81a3      	strh	r3, [r4, #12]
 8007512:	2300      	movs	r3, #0
 8007514:	6063      	str	r3, [r4, #4]
 8007516:	6923      	ldr	r3, [r4, #16]
 8007518:	6023      	str	r3, [r4, #0]
 800751a:	89a3      	ldrh	r3, [r4, #12]
 800751c:	f043 0308 	orr.w	r3, r3, #8
 8007520:	81a3      	strh	r3, [r4, #12]
 8007522:	6923      	ldr	r3, [r4, #16]
 8007524:	b94b      	cbnz	r3, 800753a <__swsetup_r+0x7a>
 8007526:	89a3      	ldrh	r3, [r4, #12]
 8007528:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800752c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007530:	d003      	beq.n	800753a <__swsetup_r+0x7a>
 8007532:	4621      	mov	r1, r4
 8007534:	4628      	mov	r0, r5
 8007536:	f002 fc2f 	bl	8009d98 <__smakebuf_r>
 800753a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800753e:	f013 0201 	ands.w	r2, r3, #1
 8007542:	d00a      	beq.n	800755a <__swsetup_r+0x9a>
 8007544:	2200      	movs	r2, #0
 8007546:	60a2      	str	r2, [r4, #8]
 8007548:	6962      	ldr	r2, [r4, #20]
 800754a:	4252      	negs	r2, r2
 800754c:	61a2      	str	r2, [r4, #24]
 800754e:	6922      	ldr	r2, [r4, #16]
 8007550:	b942      	cbnz	r2, 8007564 <__swsetup_r+0xa4>
 8007552:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007556:	d1c5      	bne.n	80074e4 <__swsetup_r+0x24>
 8007558:	bd38      	pop	{r3, r4, r5, pc}
 800755a:	0799      	lsls	r1, r3, #30
 800755c:	bf58      	it	pl
 800755e:	6962      	ldrpl	r2, [r4, #20]
 8007560:	60a2      	str	r2, [r4, #8]
 8007562:	e7f4      	b.n	800754e <__swsetup_r+0x8e>
 8007564:	2000      	movs	r0, #0
 8007566:	e7f7      	b.n	8007558 <__swsetup_r+0x98>
 8007568:	200001a8 	.word	0x200001a8

0800756c <memset>:
 800756c:	4402      	add	r2, r0
 800756e:	4603      	mov	r3, r0
 8007570:	4293      	cmp	r3, r2
 8007572:	d100      	bne.n	8007576 <memset+0xa>
 8007574:	4770      	bx	lr
 8007576:	f803 1b01 	strb.w	r1, [r3], #1
 800757a:	e7f9      	b.n	8007570 <memset+0x4>

0800757c <strncmp>:
 800757c:	b510      	push	{r4, lr}
 800757e:	b16a      	cbz	r2, 800759c <strncmp+0x20>
 8007580:	3901      	subs	r1, #1
 8007582:	1884      	adds	r4, r0, r2
 8007584:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007588:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800758c:	429a      	cmp	r2, r3
 800758e:	d103      	bne.n	8007598 <strncmp+0x1c>
 8007590:	42a0      	cmp	r0, r4
 8007592:	d001      	beq.n	8007598 <strncmp+0x1c>
 8007594:	2a00      	cmp	r2, #0
 8007596:	d1f5      	bne.n	8007584 <strncmp+0x8>
 8007598:	1ad0      	subs	r0, r2, r3
 800759a:	bd10      	pop	{r4, pc}
 800759c:	4610      	mov	r0, r2
 800759e:	e7fc      	b.n	800759a <strncmp+0x1e>

080075a0 <strncpy>:
 80075a0:	b510      	push	{r4, lr}
 80075a2:	3901      	subs	r1, #1
 80075a4:	4603      	mov	r3, r0
 80075a6:	b132      	cbz	r2, 80075b6 <strncpy+0x16>
 80075a8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80075ac:	f803 4b01 	strb.w	r4, [r3], #1
 80075b0:	3a01      	subs	r2, #1
 80075b2:	2c00      	cmp	r4, #0
 80075b4:	d1f7      	bne.n	80075a6 <strncpy+0x6>
 80075b6:	441a      	add	r2, r3
 80075b8:	2100      	movs	r1, #0
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d100      	bne.n	80075c0 <strncpy+0x20>
 80075be:	bd10      	pop	{r4, pc}
 80075c0:	f803 1b01 	strb.w	r1, [r3], #1
 80075c4:	e7f9      	b.n	80075ba <strncpy+0x1a>
	...

080075c8 <strtok>:
 80075c8:	4b16      	ldr	r3, [pc, #88]	@ (8007624 <strtok+0x5c>)
 80075ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075ce:	681f      	ldr	r7, [r3, #0]
 80075d0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80075d2:	4605      	mov	r5, r0
 80075d4:	460e      	mov	r6, r1
 80075d6:	b9ec      	cbnz	r4, 8007614 <strtok+0x4c>
 80075d8:	2050      	movs	r0, #80	@ 0x50
 80075da:	f001 fae1 	bl	8008ba0 <malloc>
 80075de:	4602      	mov	r2, r0
 80075e0:	6478      	str	r0, [r7, #68]	@ 0x44
 80075e2:	b920      	cbnz	r0, 80075ee <strtok+0x26>
 80075e4:	4b10      	ldr	r3, [pc, #64]	@ (8007628 <strtok+0x60>)
 80075e6:	4811      	ldr	r0, [pc, #68]	@ (800762c <strtok+0x64>)
 80075e8:	215b      	movs	r1, #91	@ 0x5b
 80075ea:	f000 f8df 	bl	80077ac <__assert_func>
 80075ee:	e9c0 4400 	strd	r4, r4, [r0]
 80075f2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80075f6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80075fa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80075fe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8007602:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8007606:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800760a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800760e:	6184      	str	r4, [r0, #24]
 8007610:	7704      	strb	r4, [r0, #28]
 8007612:	6244      	str	r4, [r0, #36]	@ 0x24
 8007614:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007616:	4631      	mov	r1, r6
 8007618:	4628      	mov	r0, r5
 800761a:	2301      	movs	r3, #1
 800761c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007620:	f000 b806 	b.w	8007630 <__strtok_r>
 8007624:	200001a8 	.word	0x200001a8
 8007628:	0800a1ab 	.word	0x0800a1ab
 800762c:	0800a1c2 	.word	0x0800a1c2

08007630 <__strtok_r>:
 8007630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007632:	4604      	mov	r4, r0
 8007634:	b908      	cbnz	r0, 800763a <__strtok_r+0xa>
 8007636:	6814      	ldr	r4, [r2, #0]
 8007638:	b144      	cbz	r4, 800764c <__strtok_r+0x1c>
 800763a:	4620      	mov	r0, r4
 800763c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007640:	460f      	mov	r7, r1
 8007642:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007646:	b91e      	cbnz	r6, 8007650 <__strtok_r+0x20>
 8007648:	b965      	cbnz	r5, 8007664 <__strtok_r+0x34>
 800764a:	6015      	str	r5, [r2, #0]
 800764c:	2000      	movs	r0, #0
 800764e:	e005      	b.n	800765c <__strtok_r+0x2c>
 8007650:	42b5      	cmp	r5, r6
 8007652:	d1f6      	bne.n	8007642 <__strtok_r+0x12>
 8007654:	2b00      	cmp	r3, #0
 8007656:	d1f0      	bne.n	800763a <__strtok_r+0xa>
 8007658:	6014      	str	r4, [r2, #0]
 800765a:	7003      	strb	r3, [r0, #0]
 800765c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800765e:	461c      	mov	r4, r3
 8007660:	e00c      	b.n	800767c <__strtok_r+0x4c>
 8007662:	b91d      	cbnz	r5, 800766c <__strtok_r+0x3c>
 8007664:	4627      	mov	r7, r4
 8007666:	f814 3b01 	ldrb.w	r3, [r4], #1
 800766a:	460e      	mov	r6, r1
 800766c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007670:	42ab      	cmp	r3, r5
 8007672:	d1f6      	bne.n	8007662 <__strtok_r+0x32>
 8007674:	2b00      	cmp	r3, #0
 8007676:	d0f2      	beq.n	800765e <__strtok_r+0x2e>
 8007678:	2300      	movs	r3, #0
 800767a:	703b      	strb	r3, [r7, #0]
 800767c:	6014      	str	r4, [r2, #0]
 800767e:	e7ed      	b.n	800765c <__strtok_r+0x2c>

08007680 <_localeconv_r>:
 8007680:	4800      	ldr	r0, [pc, #0]	@ (8007684 <_localeconv_r+0x4>)
 8007682:	4770      	bx	lr
 8007684:	2000012c 	.word	0x2000012c

08007688 <_close_r>:
 8007688:	b538      	push	{r3, r4, r5, lr}
 800768a:	4d06      	ldr	r5, [pc, #24]	@ (80076a4 <_close_r+0x1c>)
 800768c:	2300      	movs	r3, #0
 800768e:	4604      	mov	r4, r0
 8007690:	4608      	mov	r0, r1
 8007692:	602b      	str	r3, [r5, #0]
 8007694:	f7f9 fece 	bl	8001434 <_close>
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	d102      	bne.n	80076a2 <_close_r+0x1a>
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	b103      	cbz	r3, 80076a2 <_close_r+0x1a>
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	20001540 	.word	0x20001540

080076a8 <_lseek_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4d07      	ldr	r5, [pc, #28]	@ (80076c8 <_lseek_r+0x20>)
 80076ac:	4604      	mov	r4, r0
 80076ae:	4608      	mov	r0, r1
 80076b0:	4611      	mov	r1, r2
 80076b2:	2200      	movs	r2, #0
 80076b4:	602a      	str	r2, [r5, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	f7f9 fee3 	bl	8001482 <_lseek>
 80076bc:	1c43      	adds	r3, r0, #1
 80076be:	d102      	bne.n	80076c6 <_lseek_r+0x1e>
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	b103      	cbz	r3, 80076c6 <_lseek_r+0x1e>
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	bd38      	pop	{r3, r4, r5, pc}
 80076c8:	20001540 	.word	0x20001540

080076cc <_read_r>:
 80076cc:	b538      	push	{r3, r4, r5, lr}
 80076ce:	4d07      	ldr	r5, [pc, #28]	@ (80076ec <_read_r+0x20>)
 80076d0:	4604      	mov	r4, r0
 80076d2:	4608      	mov	r0, r1
 80076d4:	4611      	mov	r1, r2
 80076d6:	2200      	movs	r2, #0
 80076d8:	602a      	str	r2, [r5, #0]
 80076da:	461a      	mov	r2, r3
 80076dc:	f7f9 fe71 	bl	80013c2 <_read>
 80076e0:	1c43      	adds	r3, r0, #1
 80076e2:	d102      	bne.n	80076ea <_read_r+0x1e>
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	b103      	cbz	r3, 80076ea <_read_r+0x1e>
 80076e8:	6023      	str	r3, [r4, #0]
 80076ea:	bd38      	pop	{r3, r4, r5, pc}
 80076ec:	20001540 	.word	0x20001540

080076f0 <_write_r>:
 80076f0:	b538      	push	{r3, r4, r5, lr}
 80076f2:	4d07      	ldr	r5, [pc, #28]	@ (8007710 <_write_r+0x20>)
 80076f4:	4604      	mov	r4, r0
 80076f6:	4608      	mov	r0, r1
 80076f8:	4611      	mov	r1, r2
 80076fa:	2200      	movs	r2, #0
 80076fc:	602a      	str	r2, [r5, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	f7f9 fe7c 	bl	80013fc <_write>
 8007704:	1c43      	adds	r3, r0, #1
 8007706:	d102      	bne.n	800770e <_write_r+0x1e>
 8007708:	682b      	ldr	r3, [r5, #0]
 800770a:	b103      	cbz	r3, 800770e <_write_r+0x1e>
 800770c:	6023      	str	r3, [r4, #0]
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	20001540 	.word	0x20001540

08007714 <__errno>:
 8007714:	4b01      	ldr	r3, [pc, #4]	@ (800771c <__errno+0x8>)
 8007716:	6818      	ldr	r0, [r3, #0]
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	200001a8 	.word	0x200001a8

08007720 <__libc_init_array>:
 8007720:	b570      	push	{r4, r5, r6, lr}
 8007722:	4d0d      	ldr	r5, [pc, #52]	@ (8007758 <__libc_init_array+0x38>)
 8007724:	4c0d      	ldr	r4, [pc, #52]	@ (800775c <__libc_init_array+0x3c>)
 8007726:	1b64      	subs	r4, r4, r5
 8007728:	10a4      	asrs	r4, r4, #2
 800772a:	2600      	movs	r6, #0
 800772c:	42a6      	cmp	r6, r4
 800772e:	d109      	bne.n	8007744 <__libc_init_array+0x24>
 8007730:	4d0b      	ldr	r5, [pc, #44]	@ (8007760 <__libc_init_array+0x40>)
 8007732:	4c0c      	ldr	r4, [pc, #48]	@ (8007764 <__libc_init_array+0x44>)
 8007734:	f002 fc4e 	bl	8009fd4 <_init>
 8007738:	1b64      	subs	r4, r4, r5
 800773a:	10a4      	asrs	r4, r4, #2
 800773c:	2600      	movs	r6, #0
 800773e:	42a6      	cmp	r6, r4
 8007740:	d105      	bne.n	800774e <__libc_init_array+0x2e>
 8007742:	bd70      	pop	{r4, r5, r6, pc}
 8007744:	f855 3b04 	ldr.w	r3, [r5], #4
 8007748:	4798      	blx	r3
 800774a:	3601      	adds	r6, #1
 800774c:	e7ee      	b.n	800772c <__libc_init_array+0xc>
 800774e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007752:	4798      	blx	r3
 8007754:	3601      	adds	r6, #1
 8007756:	e7f2      	b.n	800773e <__libc_init_array+0x1e>
 8007758:	0800a5f8 	.word	0x0800a5f8
 800775c:	0800a5f8 	.word	0x0800a5f8
 8007760:	0800a5f8 	.word	0x0800a5f8
 8007764:	0800a5fc 	.word	0x0800a5fc

08007768 <__retarget_lock_init_recursive>:
 8007768:	4770      	bx	lr

0800776a <__retarget_lock_acquire_recursive>:
 800776a:	4770      	bx	lr

0800776c <__retarget_lock_release_recursive>:
 800776c:	4770      	bx	lr

0800776e <memcpy>:
 800776e:	440a      	add	r2, r1
 8007770:	4291      	cmp	r1, r2
 8007772:	f100 33ff 	add.w	r3, r0, #4294967295
 8007776:	d100      	bne.n	800777a <memcpy+0xc>
 8007778:	4770      	bx	lr
 800777a:	b510      	push	{r4, lr}
 800777c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007780:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007784:	4291      	cmp	r1, r2
 8007786:	d1f9      	bne.n	800777c <memcpy+0xe>
 8007788:	bd10      	pop	{r4, pc}
 800778a:	0000      	movs	r0, r0
 800778c:	0000      	movs	r0, r0
	...

08007790 <nan>:
 8007790:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007798 <nan+0x8>
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	00000000 	.word	0x00000000
 800779c:	7ff80000 	.word	0x7ff80000

080077a0 <nanf>:
 80077a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80077a8 <nanf+0x8>
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	7fc00000 	.word	0x7fc00000

080077ac <__assert_func>:
 80077ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077ae:	4614      	mov	r4, r2
 80077b0:	461a      	mov	r2, r3
 80077b2:	4b09      	ldr	r3, [pc, #36]	@ (80077d8 <__assert_func+0x2c>)
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4605      	mov	r5, r0
 80077b8:	68d8      	ldr	r0, [r3, #12]
 80077ba:	b14c      	cbz	r4, 80077d0 <__assert_func+0x24>
 80077bc:	4b07      	ldr	r3, [pc, #28]	@ (80077dc <__assert_func+0x30>)
 80077be:	9100      	str	r1, [sp, #0]
 80077c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077c4:	4906      	ldr	r1, [pc, #24]	@ (80077e0 <__assert_func+0x34>)
 80077c6:	462b      	mov	r3, r5
 80077c8:	f002 faae 	bl	8009d28 <fiprintf>
 80077cc:	f002 fb6c 	bl	8009ea8 <abort>
 80077d0:	4b04      	ldr	r3, [pc, #16]	@ (80077e4 <__assert_func+0x38>)
 80077d2:	461c      	mov	r4, r3
 80077d4:	e7f3      	b.n	80077be <__assert_func+0x12>
 80077d6:	bf00      	nop
 80077d8:	200001a8 	.word	0x200001a8
 80077dc:	0800a224 	.word	0x0800a224
 80077e0:	0800a231 	.word	0x0800a231
 80077e4:	0800a25f 	.word	0x0800a25f

080077e8 <quorem>:
 80077e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077ec:	6903      	ldr	r3, [r0, #16]
 80077ee:	690c      	ldr	r4, [r1, #16]
 80077f0:	42a3      	cmp	r3, r4
 80077f2:	4607      	mov	r7, r0
 80077f4:	db7e      	blt.n	80078f4 <quorem+0x10c>
 80077f6:	3c01      	subs	r4, #1
 80077f8:	f101 0814 	add.w	r8, r1, #20
 80077fc:	00a3      	lsls	r3, r4, #2
 80077fe:	f100 0514 	add.w	r5, r0, #20
 8007802:	9300      	str	r3, [sp, #0]
 8007804:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007808:	9301      	str	r3, [sp, #4]
 800780a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800780e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007812:	3301      	adds	r3, #1
 8007814:	429a      	cmp	r2, r3
 8007816:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800781a:	fbb2 f6f3 	udiv	r6, r2, r3
 800781e:	d32e      	bcc.n	800787e <quorem+0x96>
 8007820:	f04f 0a00 	mov.w	sl, #0
 8007824:	46c4      	mov	ip, r8
 8007826:	46ae      	mov	lr, r5
 8007828:	46d3      	mov	fp, sl
 800782a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800782e:	b298      	uxth	r0, r3
 8007830:	fb06 a000 	mla	r0, r6, r0, sl
 8007834:	0c02      	lsrs	r2, r0, #16
 8007836:	0c1b      	lsrs	r3, r3, #16
 8007838:	fb06 2303 	mla	r3, r6, r3, r2
 800783c:	f8de 2000 	ldr.w	r2, [lr]
 8007840:	b280      	uxth	r0, r0
 8007842:	b292      	uxth	r2, r2
 8007844:	1a12      	subs	r2, r2, r0
 8007846:	445a      	add	r2, fp
 8007848:	f8de 0000 	ldr.w	r0, [lr]
 800784c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007850:	b29b      	uxth	r3, r3
 8007852:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007856:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800785a:	b292      	uxth	r2, r2
 800785c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007860:	45e1      	cmp	r9, ip
 8007862:	f84e 2b04 	str.w	r2, [lr], #4
 8007866:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800786a:	d2de      	bcs.n	800782a <quorem+0x42>
 800786c:	9b00      	ldr	r3, [sp, #0]
 800786e:	58eb      	ldr	r3, [r5, r3]
 8007870:	b92b      	cbnz	r3, 800787e <quorem+0x96>
 8007872:	9b01      	ldr	r3, [sp, #4]
 8007874:	3b04      	subs	r3, #4
 8007876:	429d      	cmp	r5, r3
 8007878:	461a      	mov	r2, r3
 800787a:	d32f      	bcc.n	80078dc <quorem+0xf4>
 800787c:	613c      	str	r4, [r7, #16]
 800787e:	4638      	mov	r0, r7
 8007880:	f001 fd12 	bl	80092a8 <__mcmp>
 8007884:	2800      	cmp	r0, #0
 8007886:	db25      	blt.n	80078d4 <quorem+0xec>
 8007888:	4629      	mov	r1, r5
 800788a:	2000      	movs	r0, #0
 800788c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007890:	f8d1 c000 	ldr.w	ip, [r1]
 8007894:	fa1f fe82 	uxth.w	lr, r2
 8007898:	fa1f f38c 	uxth.w	r3, ip
 800789c:	eba3 030e 	sub.w	r3, r3, lr
 80078a0:	4403      	add	r3, r0
 80078a2:	0c12      	lsrs	r2, r2, #16
 80078a4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80078a8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078b2:	45c1      	cmp	r9, r8
 80078b4:	f841 3b04 	str.w	r3, [r1], #4
 80078b8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80078bc:	d2e6      	bcs.n	800788c <quorem+0xa4>
 80078be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078c6:	b922      	cbnz	r2, 80078d2 <quorem+0xea>
 80078c8:	3b04      	subs	r3, #4
 80078ca:	429d      	cmp	r5, r3
 80078cc:	461a      	mov	r2, r3
 80078ce:	d30b      	bcc.n	80078e8 <quorem+0x100>
 80078d0:	613c      	str	r4, [r7, #16]
 80078d2:	3601      	adds	r6, #1
 80078d4:	4630      	mov	r0, r6
 80078d6:	b003      	add	sp, #12
 80078d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078dc:	6812      	ldr	r2, [r2, #0]
 80078de:	3b04      	subs	r3, #4
 80078e0:	2a00      	cmp	r2, #0
 80078e2:	d1cb      	bne.n	800787c <quorem+0x94>
 80078e4:	3c01      	subs	r4, #1
 80078e6:	e7c6      	b.n	8007876 <quorem+0x8e>
 80078e8:	6812      	ldr	r2, [r2, #0]
 80078ea:	3b04      	subs	r3, #4
 80078ec:	2a00      	cmp	r2, #0
 80078ee:	d1ef      	bne.n	80078d0 <quorem+0xe8>
 80078f0:	3c01      	subs	r4, #1
 80078f2:	e7ea      	b.n	80078ca <quorem+0xe2>
 80078f4:	2000      	movs	r0, #0
 80078f6:	e7ee      	b.n	80078d6 <quorem+0xee>

080078f8 <_dtoa_r>:
 80078f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078fc:	69c7      	ldr	r7, [r0, #28]
 80078fe:	b097      	sub	sp, #92	@ 0x5c
 8007900:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007904:	ec55 4b10 	vmov	r4, r5, d0
 8007908:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800790a:	9107      	str	r1, [sp, #28]
 800790c:	4681      	mov	r9, r0
 800790e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007910:	9311      	str	r3, [sp, #68]	@ 0x44
 8007912:	b97f      	cbnz	r7, 8007934 <_dtoa_r+0x3c>
 8007914:	2010      	movs	r0, #16
 8007916:	f001 f943 	bl	8008ba0 <malloc>
 800791a:	4602      	mov	r2, r0
 800791c:	f8c9 001c 	str.w	r0, [r9, #28]
 8007920:	b920      	cbnz	r0, 800792c <_dtoa_r+0x34>
 8007922:	4ba9      	ldr	r3, [pc, #676]	@ (8007bc8 <_dtoa_r+0x2d0>)
 8007924:	21ef      	movs	r1, #239	@ 0xef
 8007926:	48a9      	ldr	r0, [pc, #676]	@ (8007bcc <_dtoa_r+0x2d4>)
 8007928:	f7ff ff40 	bl	80077ac <__assert_func>
 800792c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007930:	6007      	str	r7, [r0, #0]
 8007932:	60c7      	str	r7, [r0, #12]
 8007934:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007938:	6819      	ldr	r1, [r3, #0]
 800793a:	b159      	cbz	r1, 8007954 <_dtoa_r+0x5c>
 800793c:	685a      	ldr	r2, [r3, #4]
 800793e:	604a      	str	r2, [r1, #4]
 8007940:	2301      	movs	r3, #1
 8007942:	4093      	lsls	r3, r2
 8007944:	608b      	str	r3, [r1, #8]
 8007946:	4648      	mov	r0, r9
 8007948:	f001 fa32 	bl	8008db0 <_Bfree>
 800794c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007950:	2200      	movs	r2, #0
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	1e2b      	subs	r3, r5, #0
 8007956:	bfb9      	ittee	lt
 8007958:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800795c:	9305      	strlt	r3, [sp, #20]
 800795e:	2300      	movge	r3, #0
 8007960:	6033      	strge	r3, [r6, #0]
 8007962:	9f05      	ldr	r7, [sp, #20]
 8007964:	4b9a      	ldr	r3, [pc, #616]	@ (8007bd0 <_dtoa_r+0x2d8>)
 8007966:	bfbc      	itt	lt
 8007968:	2201      	movlt	r2, #1
 800796a:	6032      	strlt	r2, [r6, #0]
 800796c:	43bb      	bics	r3, r7
 800796e:	d112      	bne.n	8007996 <_dtoa_r+0x9e>
 8007970:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007972:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007976:	6013      	str	r3, [r2, #0]
 8007978:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800797c:	4323      	orrs	r3, r4
 800797e:	f000 855a 	beq.w	8008436 <_dtoa_r+0xb3e>
 8007982:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007984:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007be4 <_dtoa_r+0x2ec>
 8007988:	2b00      	cmp	r3, #0
 800798a:	f000 855c 	beq.w	8008446 <_dtoa_r+0xb4e>
 800798e:	f10a 0303 	add.w	r3, sl, #3
 8007992:	f000 bd56 	b.w	8008442 <_dtoa_r+0xb4a>
 8007996:	ed9d 7b04 	vldr	d7, [sp, #16]
 800799a:	2200      	movs	r2, #0
 800799c:	ec51 0b17 	vmov	r0, r1, d7
 80079a0:	2300      	movs	r3, #0
 80079a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80079a6:	f7f9 f89f 	bl	8000ae8 <__aeabi_dcmpeq>
 80079aa:	4680      	mov	r8, r0
 80079ac:	b158      	cbz	r0, 80079c6 <_dtoa_r+0xce>
 80079ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80079b0:	2301      	movs	r3, #1
 80079b2:	6013      	str	r3, [r2, #0]
 80079b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079b6:	b113      	cbz	r3, 80079be <_dtoa_r+0xc6>
 80079b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80079ba:	4b86      	ldr	r3, [pc, #536]	@ (8007bd4 <_dtoa_r+0x2dc>)
 80079bc:	6013      	str	r3, [r2, #0]
 80079be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007be8 <_dtoa_r+0x2f0>
 80079c2:	f000 bd40 	b.w	8008446 <_dtoa_r+0xb4e>
 80079c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80079ca:	aa14      	add	r2, sp, #80	@ 0x50
 80079cc:	a915      	add	r1, sp, #84	@ 0x54
 80079ce:	4648      	mov	r0, r9
 80079d0:	f001 fd8a 	bl	80094e8 <__d2b>
 80079d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80079d8:	9002      	str	r0, [sp, #8]
 80079da:	2e00      	cmp	r6, #0
 80079dc:	d078      	beq.n	8007ad0 <_dtoa_r+0x1d8>
 80079de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80079e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80079ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80079f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80079f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80079f8:	4619      	mov	r1, r3
 80079fa:	2200      	movs	r2, #0
 80079fc:	4b76      	ldr	r3, [pc, #472]	@ (8007bd8 <_dtoa_r+0x2e0>)
 80079fe:	f7f8 fc53 	bl	80002a8 <__aeabi_dsub>
 8007a02:	a36b      	add	r3, pc, #428	@ (adr r3, 8007bb0 <_dtoa_r+0x2b8>)
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	f7f8 fe06 	bl	8000618 <__aeabi_dmul>
 8007a0c:	a36a      	add	r3, pc, #424	@ (adr r3, 8007bb8 <_dtoa_r+0x2c0>)
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	f7f8 fc4b 	bl	80002ac <__adddf3>
 8007a16:	4604      	mov	r4, r0
 8007a18:	4630      	mov	r0, r6
 8007a1a:	460d      	mov	r5, r1
 8007a1c:	f7f8 fd92 	bl	8000544 <__aeabi_i2d>
 8007a20:	a367      	add	r3, pc, #412	@ (adr r3, 8007bc0 <_dtoa_r+0x2c8>)
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	f7f8 fdf7 	bl	8000618 <__aeabi_dmul>
 8007a2a:	4602      	mov	r2, r0
 8007a2c:	460b      	mov	r3, r1
 8007a2e:	4620      	mov	r0, r4
 8007a30:	4629      	mov	r1, r5
 8007a32:	f7f8 fc3b 	bl	80002ac <__adddf3>
 8007a36:	4604      	mov	r4, r0
 8007a38:	460d      	mov	r5, r1
 8007a3a:	f7f9 f89d 	bl	8000b78 <__aeabi_d2iz>
 8007a3e:	2200      	movs	r2, #0
 8007a40:	4607      	mov	r7, r0
 8007a42:	2300      	movs	r3, #0
 8007a44:	4620      	mov	r0, r4
 8007a46:	4629      	mov	r1, r5
 8007a48:	f7f9 f858 	bl	8000afc <__aeabi_dcmplt>
 8007a4c:	b140      	cbz	r0, 8007a60 <_dtoa_r+0x168>
 8007a4e:	4638      	mov	r0, r7
 8007a50:	f7f8 fd78 	bl	8000544 <__aeabi_i2d>
 8007a54:	4622      	mov	r2, r4
 8007a56:	462b      	mov	r3, r5
 8007a58:	f7f9 f846 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a5c:	b900      	cbnz	r0, 8007a60 <_dtoa_r+0x168>
 8007a5e:	3f01      	subs	r7, #1
 8007a60:	2f16      	cmp	r7, #22
 8007a62:	d852      	bhi.n	8007b0a <_dtoa_r+0x212>
 8007a64:	4b5d      	ldr	r3, [pc, #372]	@ (8007bdc <_dtoa_r+0x2e4>)
 8007a66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007a72:	f7f9 f843 	bl	8000afc <__aeabi_dcmplt>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d049      	beq.n	8007b0e <_dtoa_r+0x216>
 8007a7a:	3f01      	subs	r7, #1
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a80:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a82:	1b9b      	subs	r3, r3, r6
 8007a84:	1e5a      	subs	r2, r3, #1
 8007a86:	bf45      	ittet	mi
 8007a88:	f1c3 0301 	rsbmi	r3, r3, #1
 8007a8c:	9300      	strmi	r3, [sp, #0]
 8007a8e:	2300      	movpl	r3, #0
 8007a90:	2300      	movmi	r3, #0
 8007a92:	9206      	str	r2, [sp, #24]
 8007a94:	bf54      	ite	pl
 8007a96:	9300      	strpl	r3, [sp, #0]
 8007a98:	9306      	strmi	r3, [sp, #24]
 8007a9a:	2f00      	cmp	r7, #0
 8007a9c:	db39      	blt.n	8007b12 <_dtoa_r+0x21a>
 8007a9e:	9b06      	ldr	r3, [sp, #24]
 8007aa0:	970d      	str	r7, [sp, #52]	@ 0x34
 8007aa2:	443b      	add	r3, r7
 8007aa4:	9306      	str	r3, [sp, #24]
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	9308      	str	r3, [sp, #32]
 8007aaa:	9b07      	ldr	r3, [sp, #28]
 8007aac:	2b09      	cmp	r3, #9
 8007aae:	d863      	bhi.n	8007b78 <_dtoa_r+0x280>
 8007ab0:	2b05      	cmp	r3, #5
 8007ab2:	bfc4      	itt	gt
 8007ab4:	3b04      	subgt	r3, #4
 8007ab6:	9307      	strgt	r3, [sp, #28]
 8007ab8:	9b07      	ldr	r3, [sp, #28]
 8007aba:	f1a3 0302 	sub.w	r3, r3, #2
 8007abe:	bfcc      	ite	gt
 8007ac0:	2400      	movgt	r4, #0
 8007ac2:	2401      	movle	r4, #1
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d863      	bhi.n	8007b90 <_dtoa_r+0x298>
 8007ac8:	e8df f003 	tbb	[pc, r3]
 8007acc:	2b375452 	.word	0x2b375452
 8007ad0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007ad4:	441e      	add	r6, r3
 8007ad6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007ada:	2b20      	cmp	r3, #32
 8007adc:	bfc1      	itttt	gt
 8007ade:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007ae2:	409f      	lslgt	r7, r3
 8007ae4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007ae8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007aec:	bfd6      	itet	le
 8007aee:	f1c3 0320 	rsble	r3, r3, #32
 8007af2:	ea47 0003 	orrgt.w	r0, r7, r3
 8007af6:	fa04 f003 	lslle.w	r0, r4, r3
 8007afa:	f7f8 fd13 	bl	8000524 <__aeabi_ui2d>
 8007afe:	2201      	movs	r2, #1
 8007b00:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007b04:	3e01      	subs	r6, #1
 8007b06:	9212      	str	r2, [sp, #72]	@ 0x48
 8007b08:	e776      	b.n	80079f8 <_dtoa_r+0x100>
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e7b7      	b.n	8007a7e <_dtoa_r+0x186>
 8007b0e:	9010      	str	r0, [sp, #64]	@ 0x40
 8007b10:	e7b6      	b.n	8007a80 <_dtoa_r+0x188>
 8007b12:	9b00      	ldr	r3, [sp, #0]
 8007b14:	1bdb      	subs	r3, r3, r7
 8007b16:	9300      	str	r3, [sp, #0]
 8007b18:	427b      	negs	r3, r7
 8007b1a:	9308      	str	r3, [sp, #32]
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	930d      	str	r3, [sp, #52]	@ 0x34
 8007b20:	e7c3      	b.n	8007aaa <_dtoa_r+0x1b2>
 8007b22:	2301      	movs	r3, #1
 8007b24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b28:	eb07 0b03 	add.w	fp, r7, r3
 8007b2c:	f10b 0301 	add.w	r3, fp, #1
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	9303      	str	r3, [sp, #12]
 8007b34:	bfb8      	it	lt
 8007b36:	2301      	movlt	r3, #1
 8007b38:	e006      	b.n	8007b48 <_dtoa_r+0x250>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	dd28      	ble.n	8007b96 <_dtoa_r+0x29e>
 8007b44:	469b      	mov	fp, r3
 8007b46:	9303      	str	r3, [sp, #12]
 8007b48:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	2204      	movs	r2, #4
 8007b50:	f102 0514 	add.w	r5, r2, #20
 8007b54:	429d      	cmp	r5, r3
 8007b56:	d926      	bls.n	8007ba6 <_dtoa_r+0x2ae>
 8007b58:	6041      	str	r1, [r0, #4]
 8007b5a:	4648      	mov	r0, r9
 8007b5c:	f001 f8e8 	bl	8008d30 <_Balloc>
 8007b60:	4682      	mov	sl, r0
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d142      	bne.n	8007bec <_dtoa_r+0x2f4>
 8007b66:	4b1e      	ldr	r3, [pc, #120]	@ (8007be0 <_dtoa_r+0x2e8>)
 8007b68:	4602      	mov	r2, r0
 8007b6a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007b6e:	e6da      	b.n	8007926 <_dtoa_r+0x2e>
 8007b70:	2300      	movs	r3, #0
 8007b72:	e7e3      	b.n	8007b3c <_dtoa_r+0x244>
 8007b74:	2300      	movs	r3, #0
 8007b76:	e7d5      	b.n	8007b24 <_dtoa_r+0x22c>
 8007b78:	2401      	movs	r4, #1
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	9307      	str	r3, [sp, #28]
 8007b7e:	9409      	str	r4, [sp, #36]	@ 0x24
 8007b80:	f04f 3bff 	mov.w	fp, #4294967295
 8007b84:	2200      	movs	r2, #0
 8007b86:	f8cd b00c 	str.w	fp, [sp, #12]
 8007b8a:	2312      	movs	r3, #18
 8007b8c:	920c      	str	r2, [sp, #48]	@ 0x30
 8007b8e:	e7db      	b.n	8007b48 <_dtoa_r+0x250>
 8007b90:	2301      	movs	r3, #1
 8007b92:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b94:	e7f4      	b.n	8007b80 <_dtoa_r+0x288>
 8007b96:	f04f 0b01 	mov.w	fp, #1
 8007b9a:	f8cd b00c 	str.w	fp, [sp, #12]
 8007b9e:	465b      	mov	r3, fp
 8007ba0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007ba4:	e7d0      	b.n	8007b48 <_dtoa_r+0x250>
 8007ba6:	3101      	adds	r1, #1
 8007ba8:	0052      	lsls	r2, r2, #1
 8007baa:	e7d1      	b.n	8007b50 <_dtoa_r+0x258>
 8007bac:	f3af 8000 	nop.w
 8007bb0:	636f4361 	.word	0x636f4361
 8007bb4:	3fd287a7 	.word	0x3fd287a7
 8007bb8:	8b60c8b3 	.word	0x8b60c8b3
 8007bbc:	3fc68a28 	.word	0x3fc68a28
 8007bc0:	509f79fb 	.word	0x509f79fb
 8007bc4:	3fd34413 	.word	0x3fd34413
 8007bc8:	0800a1ab 	.word	0x0800a1ab
 8007bcc:	0800a26d 	.word	0x0800a26d
 8007bd0:	7ff00000 	.word	0x7ff00000
 8007bd4:	0800a183 	.word	0x0800a183
 8007bd8:	3ff80000 	.word	0x3ff80000
 8007bdc:	0800a528 	.word	0x0800a528
 8007be0:	0800a2c5 	.word	0x0800a2c5
 8007be4:	0800a269 	.word	0x0800a269
 8007be8:	0800a182 	.word	0x0800a182
 8007bec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007bf0:	6018      	str	r0, [r3, #0]
 8007bf2:	9b03      	ldr	r3, [sp, #12]
 8007bf4:	2b0e      	cmp	r3, #14
 8007bf6:	f200 80a1 	bhi.w	8007d3c <_dtoa_r+0x444>
 8007bfa:	2c00      	cmp	r4, #0
 8007bfc:	f000 809e 	beq.w	8007d3c <_dtoa_r+0x444>
 8007c00:	2f00      	cmp	r7, #0
 8007c02:	dd33      	ble.n	8007c6c <_dtoa_r+0x374>
 8007c04:	4b9c      	ldr	r3, [pc, #624]	@ (8007e78 <_dtoa_r+0x580>)
 8007c06:	f007 020f 	and.w	r2, r7, #15
 8007c0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c0e:	ed93 7b00 	vldr	d7, [r3]
 8007c12:	05f8      	lsls	r0, r7, #23
 8007c14:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007c18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007c1c:	d516      	bpl.n	8007c4c <_dtoa_r+0x354>
 8007c1e:	4b97      	ldr	r3, [pc, #604]	@ (8007e7c <_dtoa_r+0x584>)
 8007c20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007c24:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c28:	f7f8 fe20 	bl	800086c <__aeabi_ddiv>
 8007c2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c30:	f004 040f 	and.w	r4, r4, #15
 8007c34:	2603      	movs	r6, #3
 8007c36:	4d91      	ldr	r5, [pc, #580]	@ (8007e7c <_dtoa_r+0x584>)
 8007c38:	b954      	cbnz	r4, 8007c50 <_dtoa_r+0x358>
 8007c3a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007c3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c42:	f7f8 fe13 	bl	800086c <__aeabi_ddiv>
 8007c46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c4a:	e028      	b.n	8007c9e <_dtoa_r+0x3a6>
 8007c4c:	2602      	movs	r6, #2
 8007c4e:	e7f2      	b.n	8007c36 <_dtoa_r+0x33e>
 8007c50:	07e1      	lsls	r1, r4, #31
 8007c52:	d508      	bpl.n	8007c66 <_dtoa_r+0x36e>
 8007c54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007c58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c5c:	f7f8 fcdc 	bl	8000618 <__aeabi_dmul>
 8007c60:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007c64:	3601      	adds	r6, #1
 8007c66:	1064      	asrs	r4, r4, #1
 8007c68:	3508      	adds	r5, #8
 8007c6a:	e7e5      	b.n	8007c38 <_dtoa_r+0x340>
 8007c6c:	f000 80af 	beq.w	8007dce <_dtoa_r+0x4d6>
 8007c70:	427c      	negs	r4, r7
 8007c72:	4b81      	ldr	r3, [pc, #516]	@ (8007e78 <_dtoa_r+0x580>)
 8007c74:	4d81      	ldr	r5, [pc, #516]	@ (8007e7c <_dtoa_r+0x584>)
 8007c76:	f004 020f 	and.w	r2, r4, #15
 8007c7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007c86:	f7f8 fcc7 	bl	8000618 <__aeabi_dmul>
 8007c8a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c8e:	1124      	asrs	r4, r4, #4
 8007c90:	2300      	movs	r3, #0
 8007c92:	2602      	movs	r6, #2
 8007c94:	2c00      	cmp	r4, #0
 8007c96:	f040 808f 	bne.w	8007db8 <_dtoa_r+0x4c0>
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1d3      	bne.n	8007c46 <_dtoa_r+0x34e>
 8007c9e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007ca0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	f000 8094 	beq.w	8007dd2 <_dtoa_r+0x4da>
 8007caa:	4b75      	ldr	r3, [pc, #468]	@ (8007e80 <_dtoa_r+0x588>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	4620      	mov	r0, r4
 8007cb0:	4629      	mov	r1, r5
 8007cb2:	f7f8 ff23 	bl	8000afc <__aeabi_dcmplt>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	f000 808b 	beq.w	8007dd2 <_dtoa_r+0x4da>
 8007cbc:	9b03      	ldr	r3, [sp, #12]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 8087 	beq.w	8007dd2 <_dtoa_r+0x4da>
 8007cc4:	f1bb 0f00 	cmp.w	fp, #0
 8007cc8:	dd34      	ble.n	8007d34 <_dtoa_r+0x43c>
 8007cca:	4620      	mov	r0, r4
 8007ccc:	4b6d      	ldr	r3, [pc, #436]	@ (8007e84 <_dtoa_r+0x58c>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	4629      	mov	r1, r5
 8007cd2:	f7f8 fca1 	bl	8000618 <__aeabi_dmul>
 8007cd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cda:	f107 38ff 	add.w	r8, r7, #4294967295
 8007cde:	3601      	adds	r6, #1
 8007ce0:	465c      	mov	r4, fp
 8007ce2:	4630      	mov	r0, r6
 8007ce4:	f7f8 fc2e 	bl	8000544 <__aeabi_i2d>
 8007ce8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cec:	f7f8 fc94 	bl	8000618 <__aeabi_dmul>
 8007cf0:	4b65      	ldr	r3, [pc, #404]	@ (8007e88 <_dtoa_r+0x590>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f7f8 fada 	bl	80002ac <__adddf3>
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007cfe:	2c00      	cmp	r4, #0
 8007d00:	d16a      	bne.n	8007dd8 <_dtoa_r+0x4e0>
 8007d02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d06:	4b61      	ldr	r3, [pc, #388]	@ (8007e8c <_dtoa_r+0x594>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	f7f8 facd 	bl	80002a8 <__aeabi_dsub>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	460b      	mov	r3, r1
 8007d12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007d16:	462a      	mov	r2, r5
 8007d18:	4633      	mov	r3, r6
 8007d1a:	f7f8 ff0d 	bl	8000b38 <__aeabi_dcmpgt>
 8007d1e:	2800      	cmp	r0, #0
 8007d20:	f040 8298 	bne.w	8008254 <_dtoa_r+0x95c>
 8007d24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d28:	462a      	mov	r2, r5
 8007d2a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007d2e:	f7f8 fee5 	bl	8000afc <__aeabi_dcmplt>
 8007d32:	bb38      	cbnz	r0, 8007d84 <_dtoa_r+0x48c>
 8007d34:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007d38:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d3c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f2c0 8157 	blt.w	8007ff2 <_dtoa_r+0x6fa>
 8007d44:	2f0e      	cmp	r7, #14
 8007d46:	f300 8154 	bgt.w	8007ff2 <_dtoa_r+0x6fa>
 8007d4a:	4b4b      	ldr	r3, [pc, #300]	@ (8007e78 <_dtoa_r+0x580>)
 8007d4c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d50:	ed93 7b00 	vldr	d7, [r3]
 8007d54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	ed8d 7b00 	vstr	d7, [sp]
 8007d5c:	f280 80e5 	bge.w	8007f2a <_dtoa_r+0x632>
 8007d60:	9b03      	ldr	r3, [sp, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f300 80e1 	bgt.w	8007f2a <_dtoa_r+0x632>
 8007d68:	d10c      	bne.n	8007d84 <_dtoa_r+0x48c>
 8007d6a:	4b48      	ldr	r3, [pc, #288]	@ (8007e8c <_dtoa_r+0x594>)
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	ec51 0b17 	vmov	r0, r1, d7
 8007d72:	f7f8 fc51 	bl	8000618 <__aeabi_dmul>
 8007d76:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d7a:	f7f8 fed3 	bl	8000b24 <__aeabi_dcmpge>
 8007d7e:	2800      	cmp	r0, #0
 8007d80:	f000 8266 	beq.w	8008250 <_dtoa_r+0x958>
 8007d84:	2400      	movs	r4, #0
 8007d86:	4625      	mov	r5, r4
 8007d88:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d8a:	4656      	mov	r6, sl
 8007d8c:	ea6f 0803 	mvn.w	r8, r3
 8007d90:	2700      	movs	r7, #0
 8007d92:	4621      	mov	r1, r4
 8007d94:	4648      	mov	r0, r9
 8007d96:	f001 f80b 	bl	8008db0 <_Bfree>
 8007d9a:	2d00      	cmp	r5, #0
 8007d9c:	f000 80bd 	beq.w	8007f1a <_dtoa_r+0x622>
 8007da0:	b12f      	cbz	r7, 8007dae <_dtoa_r+0x4b6>
 8007da2:	42af      	cmp	r7, r5
 8007da4:	d003      	beq.n	8007dae <_dtoa_r+0x4b6>
 8007da6:	4639      	mov	r1, r7
 8007da8:	4648      	mov	r0, r9
 8007daa:	f001 f801 	bl	8008db0 <_Bfree>
 8007dae:	4629      	mov	r1, r5
 8007db0:	4648      	mov	r0, r9
 8007db2:	f000 fffd 	bl	8008db0 <_Bfree>
 8007db6:	e0b0      	b.n	8007f1a <_dtoa_r+0x622>
 8007db8:	07e2      	lsls	r2, r4, #31
 8007dba:	d505      	bpl.n	8007dc8 <_dtoa_r+0x4d0>
 8007dbc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007dc0:	f7f8 fc2a 	bl	8000618 <__aeabi_dmul>
 8007dc4:	3601      	adds	r6, #1
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	1064      	asrs	r4, r4, #1
 8007dca:	3508      	adds	r5, #8
 8007dcc:	e762      	b.n	8007c94 <_dtoa_r+0x39c>
 8007dce:	2602      	movs	r6, #2
 8007dd0:	e765      	b.n	8007c9e <_dtoa_r+0x3a6>
 8007dd2:	9c03      	ldr	r4, [sp, #12]
 8007dd4:	46b8      	mov	r8, r7
 8007dd6:	e784      	b.n	8007ce2 <_dtoa_r+0x3ea>
 8007dd8:	4b27      	ldr	r3, [pc, #156]	@ (8007e78 <_dtoa_r+0x580>)
 8007dda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007ddc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007de0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007de4:	4454      	add	r4, sl
 8007de6:	2900      	cmp	r1, #0
 8007de8:	d054      	beq.n	8007e94 <_dtoa_r+0x59c>
 8007dea:	4929      	ldr	r1, [pc, #164]	@ (8007e90 <_dtoa_r+0x598>)
 8007dec:	2000      	movs	r0, #0
 8007dee:	f7f8 fd3d 	bl	800086c <__aeabi_ddiv>
 8007df2:	4633      	mov	r3, r6
 8007df4:	462a      	mov	r2, r5
 8007df6:	f7f8 fa57 	bl	80002a8 <__aeabi_dsub>
 8007dfa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007dfe:	4656      	mov	r6, sl
 8007e00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e04:	f7f8 feb8 	bl	8000b78 <__aeabi_d2iz>
 8007e08:	4605      	mov	r5, r0
 8007e0a:	f7f8 fb9b 	bl	8000544 <__aeabi_i2d>
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e16:	f7f8 fa47 	bl	80002a8 <__aeabi_dsub>
 8007e1a:	3530      	adds	r5, #48	@ 0x30
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	460b      	mov	r3, r1
 8007e20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e24:	f806 5b01 	strb.w	r5, [r6], #1
 8007e28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007e2c:	f7f8 fe66 	bl	8000afc <__aeabi_dcmplt>
 8007e30:	2800      	cmp	r0, #0
 8007e32:	d172      	bne.n	8007f1a <_dtoa_r+0x622>
 8007e34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e38:	4911      	ldr	r1, [pc, #68]	@ (8007e80 <_dtoa_r+0x588>)
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	f7f8 fa34 	bl	80002a8 <__aeabi_dsub>
 8007e40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007e44:	f7f8 fe5a 	bl	8000afc <__aeabi_dcmplt>
 8007e48:	2800      	cmp	r0, #0
 8007e4a:	f040 80b4 	bne.w	8007fb6 <_dtoa_r+0x6be>
 8007e4e:	42a6      	cmp	r6, r4
 8007e50:	f43f af70 	beq.w	8007d34 <_dtoa_r+0x43c>
 8007e54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007e58:	4b0a      	ldr	r3, [pc, #40]	@ (8007e84 <_dtoa_r+0x58c>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f7f8 fbdc 	bl	8000618 <__aeabi_dmul>
 8007e60:	4b08      	ldr	r3, [pc, #32]	@ (8007e84 <_dtoa_r+0x58c>)
 8007e62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007e66:	2200      	movs	r2, #0
 8007e68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e6c:	f7f8 fbd4 	bl	8000618 <__aeabi_dmul>
 8007e70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e74:	e7c4      	b.n	8007e00 <_dtoa_r+0x508>
 8007e76:	bf00      	nop
 8007e78:	0800a528 	.word	0x0800a528
 8007e7c:	0800a500 	.word	0x0800a500
 8007e80:	3ff00000 	.word	0x3ff00000
 8007e84:	40240000 	.word	0x40240000
 8007e88:	401c0000 	.word	0x401c0000
 8007e8c:	40140000 	.word	0x40140000
 8007e90:	3fe00000 	.word	0x3fe00000
 8007e94:	4631      	mov	r1, r6
 8007e96:	4628      	mov	r0, r5
 8007e98:	f7f8 fbbe 	bl	8000618 <__aeabi_dmul>
 8007e9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007ea0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007ea2:	4656      	mov	r6, sl
 8007ea4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ea8:	f7f8 fe66 	bl	8000b78 <__aeabi_d2iz>
 8007eac:	4605      	mov	r5, r0
 8007eae:	f7f8 fb49 	bl	8000544 <__aeabi_i2d>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eba:	f7f8 f9f5 	bl	80002a8 <__aeabi_dsub>
 8007ebe:	3530      	adds	r5, #48	@ 0x30
 8007ec0:	f806 5b01 	strb.w	r5, [r6], #1
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	42a6      	cmp	r6, r4
 8007eca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007ece:	f04f 0200 	mov.w	r2, #0
 8007ed2:	d124      	bne.n	8007f1e <_dtoa_r+0x626>
 8007ed4:	4baf      	ldr	r3, [pc, #700]	@ (8008194 <_dtoa_r+0x89c>)
 8007ed6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007eda:	f7f8 f9e7 	bl	80002ac <__adddf3>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007ee6:	f7f8 fe27 	bl	8000b38 <__aeabi_dcmpgt>
 8007eea:	2800      	cmp	r0, #0
 8007eec:	d163      	bne.n	8007fb6 <_dtoa_r+0x6be>
 8007eee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007ef2:	49a8      	ldr	r1, [pc, #672]	@ (8008194 <_dtoa_r+0x89c>)
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	f7f8 f9d7 	bl	80002a8 <__aeabi_dsub>
 8007efa:	4602      	mov	r2, r0
 8007efc:	460b      	mov	r3, r1
 8007efe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f02:	f7f8 fdfb 	bl	8000afc <__aeabi_dcmplt>
 8007f06:	2800      	cmp	r0, #0
 8007f08:	f43f af14 	beq.w	8007d34 <_dtoa_r+0x43c>
 8007f0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007f0e:	1e73      	subs	r3, r6, #1
 8007f10:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f16:	2b30      	cmp	r3, #48	@ 0x30
 8007f18:	d0f8      	beq.n	8007f0c <_dtoa_r+0x614>
 8007f1a:	4647      	mov	r7, r8
 8007f1c:	e03b      	b.n	8007f96 <_dtoa_r+0x69e>
 8007f1e:	4b9e      	ldr	r3, [pc, #632]	@ (8008198 <_dtoa_r+0x8a0>)
 8007f20:	f7f8 fb7a 	bl	8000618 <__aeabi_dmul>
 8007f24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f28:	e7bc      	b.n	8007ea4 <_dtoa_r+0x5ac>
 8007f2a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007f2e:	4656      	mov	r6, sl
 8007f30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f34:	4620      	mov	r0, r4
 8007f36:	4629      	mov	r1, r5
 8007f38:	f7f8 fc98 	bl	800086c <__aeabi_ddiv>
 8007f3c:	f7f8 fe1c 	bl	8000b78 <__aeabi_d2iz>
 8007f40:	4680      	mov	r8, r0
 8007f42:	f7f8 faff 	bl	8000544 <__aeabi_i2d>
 8007f46:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f4a:	f7f8 fb65 	bl	8000618 <__aeabi_dmul>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	460b      	mov	r3, r1
 8007f52:	4620      	mov	r0, r4
 8007f54:	4629      	mov	r1, r5
 8007f56:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f5a:	f7f8 f9a5 	bl	80002a8 <__aeabi_dsub>
 8007f5e:	f806 4b01 	strb.w	r4, [r6], #1
 8007f62:	9d03      	ldr	r5, [sp, #12]
 8007f64:	eba6 040a 	sub.w	r4, r6, sl
 8007f68:	42a5      	cmp	r5, r4
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	d133      	bne.n	8007fd8 <_dtoa_r+0x6e0>
 8007f70:	f7f8 f99c 	bl	80002ac <__adddf3>
 8007f74:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f78:	4604      	mov	r4, r0
 8007f7a:	460d      	mov	r5, r1
 8007f7c:	f7f8 fddc 	bl	8000b38 <__aeabi_dcmpgt>
 8007f80:	b9c0      	cbnz	r0, 8007fb4 <_dtoa_r+0x6bc>
 8007f82:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f86:	4620      	mov	r0, r4
 8007f88:	4629      	mov	r1, r5
 8007f8a:	f7f8 fdad 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f8e:	b110      	cbz	r0, 8007f96 <_dtoa_r+0x69e>
 8007f90:	f018 0f01 	tst.w	r8, #1
 8007f94:	d10e      	bne.n	8007fb4 <_dtoa_r+0x6bc>
 8007f96:	9902      	ldr	r1, [sp, #8]
 8007f98:	4648      	mov	r0, r9
 8007f9a:	f000 ff09 	bl	8008db0 <_Bfree>
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	7033      	strb	r3, [r6, #0]
 8007fa2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007fa4:	3701      	adds	r7, #1
 8007fa6:	601f      	str	r7, [r3, #0]
 8007fa8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f000 824b 	beq.w	8008446 <_dtoa_r+0xb4e>
 8007fb0:	601e      	str	r6, [r3, #0]
 8007fb2:	e248      	b.n	8008446 <_dtoa_r+0xb4e>
 8007fb4:	46b8      	mov	r8, r7
 8007fb6:	4633      	mov	r3, r6
 8007fb8:	461e      	mov	r6, r3
 8007fba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fbe:	2a39      	cmp	r2, #57	@ 0x39
 8007fc0:	d106      	bne.n	8007fd0 <_dtoa_r+0x6d8>
 8007fc2:	459a      	cmp	sl, r3
 8007fc4:	d1f8      	bne.n	8007fb8 <_dtoa_r+0x6c0>
 8007fc6:	2230      	movs	r2, #48	@ 0x30
 8007fc8:	f108 0801 	add.w	r8, r8, #1
 8007fcc:	f88a 2000 	strb.w	r2, [sl]
 8007fd0:	781a      	ldrb	r2, [r3, #0]
 8007fd2:	3201      	adds	r2, #1
 8007fd4:	701a      	strb	r2, [r3, #0]
 8007fd6:	e7a0      	b.n	8007f1a <_dtoa_r+0x622>
 8007fd8:	4b6f      	ldr	r3, [pc, #444]	@ (8008198 <_dtoa_r+0x8a0>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f7f8 fb1c 	bl	8000618 <__aeabi_dmul>
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	460d      	mov	r5, r1
 8007fe8:	f7f8 fd7e 	bl	8000ae8 <__aeabi_dcmpeq>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d09f      	beq.n	8007f30 <_dtoa_r+0x638>
 8007ff0:	e7d1      	b.n	8007f96 <_dtoa_r+0x69e>
 8007ff2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ff4:	2a00      	cmp	r2, #0
 8007ff6:	f000 80ea 	beq.w	80081ce <_dtoa_r+0x8d6>
 8007ffa:	9a07      	ldr	r2, [sp, #28]
 8007ffc:	2a01      	cmp	r2, #1
 8007ffe:	f300 80cd 	bgt.w	800819c <_dtoa_r+0x8a4>
 8008002:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008004:	2a00      	cmp	r2, #0
 8008006:	f000 80c1 	beq.w	800818c <_dtoa_r+0x894>
 800800a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800800e:	9c08      	ldr	r4, [sp, #32]
 8008010:	9e00      	ldr	r6, [sp, #0]
 8008012:	9a00      	ldr	r2, [sp, #0]
 8008014:	441a      	add	r2, r3
 8008016:	9200      	str	r2, [sp, #0]
 8008018:	9a06      	ldr	r2, [sp, #24]
 800801a:	2101      	movs	r1, #1
 800801c:	441a      	add	r2, r3
 800801e:	4648      	mov	r0, r9
 8008020:	9206      	str	r2, [sp, #24]
 8008022:	f000 ffc3 	bl	8008fac <__i2b>
 8008026:	4605      	mov	r5, r0
 8008028:	b166      	cbz	r6, 8008044 <_dtoa_r+0x74c>
 800802a:	9b06      	ldr	r3, [sp, #24]
 800802c:	2b00      	cmp	r3, #0
 800802e:	dd09      	ble.n	8008044 <_dtoa_r+0x74c>
 8008030:	42b3      	cmp	r3, r6
 8008032:	9a00      	ldr	r2, [sp, #0]
 8008034:	bfa8      	it	ge
 8008036:	4633      	movge	r3, r6
 8008038:	1ad2      	subs	r2, r2, r3
 800803a:	9200      	str	r2, [sp, #0]
 800803c:	9a06      	ldr	r2, [sp, #24]
 800803e:	1af6      	subs	r6, r6, r3
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	9306      	str	r3, [sp, #24]
 8008044:	9b08      	ldr	r3, [sp, #32]
 8008046:	b30b      	cbz	r3, 800808c <_dtoa_r+0x794>
 8008048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 80c6 	beq.w	80081dc <_dtoa_r+0x8e4>
 8008050:	2c00      	cmp	r4, #0
 8008052:	f000 80c0 	beq.w	80081d6 <_dtoa_r+0x8de>
 8008056:	4629      	mov	r1, r5
 8008058:	4622      	mov	r2, r4
 800805a:	4648      	mov	r0, r9
 800805c:	f001 f85e 	bl	800911c <__pow5mult>
 8008060:	9a02      	ldr	r2, [sp, #8]
 8008062:	4601      	mov	r1, r0
 8008064:	4605      	mov	r5, r0
 8008066:	4648      	mov	r0, r9
 8008068:	f000 ffb6 	bl	8008fd8 <__multiply>
 800806c:	9902      	ldr	r1, [sp, #8]
 800806e:	4680      	mov	r8, r0
 8008070:	4648      	mov	r0, r9
 8008072:	f000 fe9d 	bl	8008db0 <_Bfree>
 8008076:	9b08      	ldr	r3, [sp, #32]
 8008078:	1b1b      	subs	r3, r3, r4
 800807a:	9308      	str	r3, [sp, #32]
 800807c:	f000 80b1 	beq.w	80081e2 <_dtoa_r+0x8ea>
 8008080:	9a08      	ldr	r2, [sp, #32]
 8008082:	4641      	mov	r1, r8
 8008084:	4648      	mov	r0, r9
 8008086:	f001 f849 	bl	800911c <__pow5mult>
 800808a:	9002      	str	r0, [sp, #8]
 800808c:	2101      	movs	r1, #1
 800808e:	4648      	mov	r0, r9
 8008090:	f000 ff8c 	bl	8008fac <__i2b>
 8008094:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008096:	4604      	mov	r4, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 81d8 	beq.w	800844e <_dtoa_r+0xb56>
 800809e:	461a      	mov	r2, r3
 80080a0:	4601      	mov	r1, r0
 80080a2:	4648      	mov	r0, r9
 80080a4:	f001 f83a 	bl	800911c <__pow5mult>
 80080a8:	9b07      	ldr	r3, [sp, #28]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	4604      	mov	r4, r0
 80080ae:	f300 809f 	bgt.w	80081f0 <_dtoa_r+0x8f8>
 80080b2:	9b04      	ldr	r3, [sp, #16]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f040 8097 	bne.w	80081e8 <_dtoa_r+0x8f0>
 80080ba:	9b05      	ldr	r3, [sp, #20]
 80080bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f040 8093 	bne.w	80081ec <_dtoa_r+0x8f4>
 80080c6:	9b05      	ldr	r3, [sp, #20]
 80080c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080cc:	0d1b      	lsrs	r3, r3, #20
 80080ce:	051b      	lsls	r3, r3, #20
 80080d0:	b133      	cbz	r3, 80080e0 <_dtoa_r+0x7e8>
 80080d2:	9b00      	ldr	r3, [sp, #0]
 80080d4:	3301      	adds	r3, #1
 80080d6:	9300      	str	r3, [sp, #0]
 80080d8:	9b06      	ldr	r3, [sp, #24]
 80080da:	3301      	adds	r3, #1
 80080dc:	9306      	str	r3, [sp, #24]
 80080de:	2301      	movs	r3, #1
 80080e0:	9308      	str	r3, [sp, #32]
 80080e2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f000 81b8 	beq.w	800845a <_dtoa_r+0xb62>
 80080ea:	6923      	ldr	r3, [r4, #16]
 80080ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80080f0:	6918      	ldr	r0, [r3, #16]
 80080f2:	f000 ff0f 	bl	8008f14 <__hi0bits>
 80080f6:	f1c0 0020 	rsb	r0, r0, #32
 80080fa:	9b06      	ldr	r3, [sp, #24]
 80080fc:	4418      	add	r0, r3
 80080fe:	f010 001f 	ands.w	r0, r0, #31
 8008102:	f000 8082 	beq.w	800820a <_dtoa_r+0x912>
 8008106:	f1c0 0320 	rsb	r3, r0, #32
 800810a:	2b04      	cmp	r3, #4
 800810c:	dd73      	ble.n	80081f6 <_dtoa_r+0x8fe>
 800810e:	9b00      	ldr	r3, [sp, #0]
 8008110:	f1c0 001c 	rsb	r0, r0, #28
 8008114:	4403      	add	r3, r0
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	9b06      	ldr	r3, [sp, #24]
 800811a:	4403      	add	r3, r0
 800811c:	4406      	add	r6, r0
 800811e:	9306      	str	r3, [sp, #24]
 8008120:	9b00      	ldr	r3, [sp, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	dd05      	ble.n	8008132 <_dtoa_r+0x83a>
 8008126:	9902      	ldr	r1, [sp, #8]
 8008128:	461a      	mov	r2, r3
 800812a:	4648      	mov	r0, r9
 800812c:	f001 f850 	bl	80091d0 <__lshift>
 8008130:	9002      	str	r0, [sp, #8]
 8008132:	9b06      	ldr	r3, [sp, #24]
 8008134:	2b00      	cmp	r3, #0
 8008136:	dd05      	ble.n	8008144 <_dtoa_r+0x84c>
 8008138:	4621      	mov	r1, r4
 800813a:	461a      	mov	r2, r3
 800813c:	4648      	mov	r0, r9
 800813e:	f001 f847 	bl	80091d0 <__lshift>
 8008142:	4604      	mov	r4, r0
 8008144:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008146:	2b00      	cmp	r3, #0
 8008148:	d061      	beq.n	800820e <_dtoa_r+0x916>
 800814a:	9802      	ldr	r0, [sp, #8]
 800814c:	4621      	mov	r1, r4
 800814e:	f001 f8ab 	bl	80092a8 <__mcmp>
 8008152:	2800      	cmp	r0, #0
 8008154:	da5b      	bge.n	800820e <_dtoa_r+0x916>
 8008156:	2300      	movs	r3, #0
 8008158:	9902      	ldr	r1, [sp, #8]
 800815a:	220a      	movs	r2, #10
 800815c:	4648      	mov	r0, r9
 800815e:	f000 fe49 	bl	8008df4 <__multadd>
 8008162:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008164:	9002      	str	r0, [sp, #8]
 8008166:	f107 38ff 	add.w	r8, r7, #4294967295
 800816a:	2b00      	cmp	r3, #0
 800816c:	f000 8177 	beq.w	800845e <_dtoa_r+0xb66>
 8008170:	4629      	mov	r1, r5
 8008172:	2300      	movs	r3, #0
 8008174:	220a      	movs	r2, #10
 8008176:	4648      	mov	r0, r9
 8008178:	f000 fe3c 	bl	8008df4 <__multadd>
 800817c:	f1bb 0f00 	cmp.w	fp, #0
 8008180:	4605      	mov	r5, r0
 8008182:	dc6f      	bgt.n	8008264 <_dtoa_r+0x96c>
 8008184:	9b07      	ldr	r3, [sp, #28]
 8008186:	2b02      	cmp	r3, #2
 8008188:	dc49      	bgt.n	800821e <_dtoa_r+0x926>
 800818a:	e06b      	b.n	8008264 <_dtoa_r+0x96c>
 800818c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800818e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008192:	e73c      	b.n	800800e <_dtoa_r+0x716>
 8008194:	3fe00000 	.word	0x3fe00000
 8008198:	40240000 	.word	0x40240000
 800819c:	9b03      	ldr	r3, [sp, #12]
 800819e:	1e5c      	subs	r4, r3, #1
 80081a0:	9b08      	ldr	r3, [sp, #32]
 80081a2:	42a3      	cmp	r3, r4
 80081a4:	db09      	blt.n	80081ba <_dtoa_r+0x8c2>
 80081a6:	1b1c      	subs	r4, r3, r4
 80081a8:	9b03      	ldr	r3, [sp, #12]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f6bf af30 	bge.w	8008010 <_dtoa_r+0x718>
 80081b0:	9b00      	ldr	r3, [sp, #0]
 80081b2:	9a03      	ldr	r2, [sp, #12]
 80081b4:	1a9e      	subs	r6, r3, r2
 80081b6:	2300      	movs	r3, #0
 80081b8:	e72b      	b.n	8008012 <_dtoa_r+0x71a>
 80081ba:	9b08      	ldr	r3, [sp, #32]
 80081bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80081be:	9408      	str	r4, [sp, #32]
 80081c0:	1ae3      	subs	r3, r4, r3
 80081c2:	441a      	add	r2, r3
 80081c4:	9e00      	ldr	r6, [sp, #0]
 80081c6:	9b03      	ldr	r3, [sp, #12]
 80081c8:	920d      	str	r2, [sp, #52]	@ 0x34
 80081ca:	2400      	movs	r4, #0
 80081cc:	e721      	b.n	8008012 <_dtoa_r+0x71a>
 80081ce:	9c08      	ldr	r4, [sp, #32]
 80081d0:	9e00      	ldr	r6, [sp, #0]
 80081d2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80081d4:	e728      	b.n	8008028 <_dtoa_r+0x730>
 80081d6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80081da:	e751      	b.n	8008080 <_dtoa_r+0x788>
 80081dc:	9a08      	ldr	r2, [sp, #32]
 80081de:	9902      	ldr	r1, [sp, #8]
 80081e0:	e750      	b.n	8008084 <_dtoa_r+0x78c>
 80081e2:	f8cd 8008 	str.w	r8, [sp, #8]
 80081e6:	e751      	b.n	800808c <_dtoa_r+0x794>
 80081e8:	2300      	movs	r3, #0
 80081ea:	e779      	b.n	80080e0 <_dtoa_r+0x7e8>
 80081ec:	9b04      	ldr	r3, [sp, #16]
 80081ee:	e777      	b.n	80080e0 <_dtoa_r+0x7e8>
 80081f0:	2300      	movs	r3, #0
 80081f2:	9308      	str	r3, [sp, #32]
 80081f4:	e779      	b.n	80080ea <_dtoa_r+0x7f2>
 80081f6:	d093      	beq.n	8008120 <_dtoa_r+0x828>
 80081f8:	9a00      	ldr	r2, [sp, #0]
 80081fa:	331c      	adds	r3, #28
 80081fc:	441a      	add	r2, r3
 80081fe:	9200      	str	r2, [sp, #0]
 8008200:	9a06      	ldr	r2, [sp, #24]
 8008202:	441a      	add	r2, r3
 8008204:	441e      	add	r6, r3
 8008206:	9206      	str	r2, [sp, #24]
 8008208:	e78a      	b.n	8008120 <_dtoa_r+0x828>
 800820a:	4603      	mov	r3, r0
 800820c:	e7f4      	b.n	80081f8 <_dtoa_r+0x900>
 800820e:	9b03      	ldr	r3, [sp, #12]
 8008210:	2b00      	cmp	r3, #0
 8008212:	46b8      	mov	r8, r7
 8008214:	dc20      	bgt.n	8008258 <_dtoa_r+0x960>
 8008216:	469b      	mov	fp, r3
 8008218:	9b07      	ldr	r3, [sp, #28]
 800821a:	2b02      	cmp	r3, #2
 800821c:	dd1e      	ble.n	800825c <_dtoa_r+0x964>
 800821e:	f1bb 0f00 	cmp.w	fp, #0
 8008222:	f47f adb1 	bne.w	8007d88 <_dtoa_r+0x490>
 8008226:	4621      	mov	r1, r4
 8008228:	465b      	mov	r3, fp
 800822a:	2205      	movs	r2, #5
 800822c:	4648      	mov	r0, r9
 800822e:	f000 fde1 	bl	8008df4 <__multadd>
 8008232:	4601      	mov	r1, r0
 8008234:	4604      	mov	r4, r0
 8008236:	9802      	ldr	r0, [sp, #8]
 8008238:	f001 f836 	bl	80092a8 <__mcmp>
 800823c:	2800      	cmp	r0, #0
 800823e:	f77f ada3 	ble.w	8007d88 <_dtoa_r+0x490>
 8008242:	4656      	mov	r6, sl
 8008244:	2331      	movs	r3, #49	@ 0x31
 8008246:	f806 3b01 	strb.w	r3, [r6], #1
 800824a:	f108 0801 	add.w	r8, r8, #1
 800824e:	e59f      	b.n	8007d90 <_dtoa_r+0x498>
 8008250:	9c03      	ldr	r4, [sp, #12]
 8008252:	46b8      	mov	r8, r7
 8008254:	4625      	mov	r5, r4
 8008256:	e7f4      	b.n	8008242 <_dtoa_r+0x94a>
 8008258:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800825c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 8101 	beq.w	8008466 <_dtoa_r+0xb6e>
 8008264:	2e00      	cmp	r6, #0
 8008266:	dd05      	ble.n	8008274 <_dtoa_r+0x97c>
 8008268:	4629      	mov	r1, r5
 800826a:	4632      	mov	r2, r6
 800826c:	4648      	mov	r0, r9
 800826e:	f000 ffaf 	bl	80091d0 <__lshift>
 8008272:	4605      	mov	r5, r0
 8008274:	9b08      	ldr	r3, [sp, #32]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d05c      	beq.n	8008334 <_dtoa_r+0xa3c>
 800827a:	6869      	ldr	r1, [r5, #4]
 800827c:	4648      	mov	r0, r9
 800827e:	f000 fd57 	bl	8008d30 <_Balloc>
 8008282:	4606      	mov	r6, r0
 8008284:	b928      	cbnz	r0, 8008292 <_dtoa_r+0x99a>
 8008286:	4b82      	ldr	r3, [pc, #520]	@ (8008490 <_dtoa_r+0xb98>)
 8008288:	4602      	mov	r2, r0
 800828a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800828e:	f7ff bb4a 	b.w	8007926 <_dtoa_r+0x2e>
 8008292:	692a      	ldr	r2, [r5, #16]
 8008294:	3202      	adds	r2, #2
 8008296:	0092      	lsls	r2, r2, #2
 8008298:	f105 010c 	add.w	r1, r5, #12
 800829c:	300c      	adds	r0, #12
 800829e:	f7ff fa66 	bl	800776e <memcpy>
 80082a2:	2201      	movs	r2, #1
 80082a4:	4631      	mov	r1, r6
 80082a6:	4648      	mov	r0, r9
 80082a8:	f000 ff92 	bl	80091d0 <__lshift>
 80082ac:	f10a 0301 	add.w	r3, sl, #1
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	eb0a 030b 	add.w	r3, sl, fp
 80082b6:	9308      	str	r3, [sp, #32]
 80082b8:	9b04      	ldr	r3, [sp, #16]
 80082ba:	f003 0301 	and.w	r3, r3, #1
 80082be:	462f      	mov	r7, r5
 80082c0:	9306      	str	r3, [sp, #24]
 80082c2:	4605      	mov	r5, r0
 80082c4:	9b00      	ldr	r3, [sp, #0]
 80082c6:	9802      	ldr	r0, [sp, #8]
 80082c8:	4621      	mov	r1, r4
 80082ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80082ce:	f7ff fa8b 	bl	80077e8 <quorem>
 80082d2:	4603      	mov	r3, r0
 80082d4:	3330      	adds	r3, #48	@ 0x30
 80082d6:	9003      	str	r0, [sp, #12]
 80082d8:	4639      	mov	r1, r7
 80082da:	9802      	ldr	r0, [sp, #8]
 80082dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80082de:	f000 ffe3 	bl	80092a8 <__mcmp>
 80082e2:	462a      	mov	r2, r5
 80082e4:	9004      	str	r0, [sp, #16]
 80082e6:	4621      	mov	r1, r4
 80082e8:	4648      	mov	r0, r9
 80082ea:	f000 fff9 	bl	80092e0 <__mdiff>
 80082ee:	68c2      	ldr	r2, [r0, #12]
 80082f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082f2:	4606      	mov	r6, r0
 80082f4:	bb02      	cbnz	r2, 8008338 <_dtoa_r+0xa40>
 80082f6:	4601      	mov	r1, r0
 80082f8:	9802      	ldr	r0, [sp, #8]
 80082fa:	f000 ffd5 	bl	80092a8 <__mcmp>
 80082fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008300:	4602      	mov	r2, r0
 8008302:	4631      	mov	r1, r6
 8008304:	4648      	mov	r0, r9
 8008306:	920c      	str	r2, [sp, #48]	@ 0x30
 8008308:	9309      	str	r3, [sp, #36]	@ 0x24
 800830a:	f000 fd51 	bl	8008db0 <_Bfree>
 800830e:	9b07      	ldr	r3, [sp, #28]
 8008310:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008312:	9e00      	ldr	r6, [sp, #0]
 8008314:	ea42 0103 	orr.w	r1, r2, r3
 8008318:	9b06      	ldr	r3, [sp, #24]
 800831a:	4319      	orrs	r1, r3
 800831c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800831e:	d10d      	bne.n	800833c <_dtoa_r+0xa44>
 8008320:	2b39      	cmp	r3, #57	@ 0x39
 8008322:	d027      	beq.n	8008374 <_dtoa_r+0xa7c>
 8008324:	9a04      	ldr	r2, [sp, #16]
 8008326:	2a00      	cmp	r2, #0
 8008328:	dd01      	ble.n	800832e <_dtoa_r+0xa36>
 800832a:	9b03      	ldr	r3, [sp, #12]
 800832c:	3331      	adds	r3, #49	@ 0x31
 800832e:	f88b 3000 	strb.w	r3, [fp]
 8008332:	e52e      	b.n	8007d92 <_dtoa_r+0x49a>
 8008334:	4628      	mov	r0, r5
 8008336:	e7b9      	b.n	80082ac <_dtoa_r+0x9b4>
 8008338:	2201      	movs	r2, #1
 800833a:	e7e2      	b.n	8008302 <_dtoa_r+0xa0a>
 800833c:	9904      	ldr	r1, [sp, #16]
 800833e:	2900      	cmp	r1, #0
 8008340:	db04      	blt.n	800834c <_dtoa_r+0xa54>
 8008342:	9807      	ldr	r0, [sp, #28]
 8008344:	4301      	orrs	r1, r0
 8008346:	9806      	ldr	r0, [sp, #24]
 8008348:	4301      	orrs	r1, r0
 800834a:	d120      	bne.n	800838e <_dtoa_r+0xa96>
 800834c:	2a00      	cmp	r2, #0
 800834e:	ddee      	ble.n	800832e <_dtoa_r+0xa36>
 8008350:	9902      	ldr	r1, [sp, #8]
 8008352:	9300      	str	r3, [sp, #0]
 8008354:	2201      	movs	r2, #1
 8008356:	4648      	mov	r0, r9
 8008358:	f000 ff3a 	bl	80091d0 <__lshift>
 800835c:	4621      	mov	r1, r4
 800835e:	9002      	str	r0, [sp, #8]
 8008360:	f000 ffa2 	bl	80092a8 <__mcmp>
 8008364:	2800      	cmp	r0, #0
 8008366:	9b00      	ldr	r3, [sp, #0]
 8008368:	dc02      	bgt.n	8008370 <_dtoa_r+0xa78>
 800836a:	d1e0      	bne.n	800832e <_dtoa_r+0xa36>
 800836c:	07da      	lsls	r2, r3, #31
 800836e:	d5de      	bpl.n	800832e <_dtoa_r+0xa36>
 8008370:	2b39      	cmp	r3, #57	@ 0x39
 8008372:	d1da      	bne.n	800832a <_dtoa_r+0xa32>
 8008374:	2339      	movs	r3, #57	@ 0x39
 8008376:	f88b 3000 	strb.w	r3, [fp]
 800837a:	4633      	mov	r3, r6
 800837c:	461e      	mov	r6, r3
 800837e:	3b01      	subs	r3, #1
 8008380:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008384:	2a39      	cmp	r2, #57	@ 0x39
 8008386:	d04e      	beq.n	8008426 <_dtoa_r+0xb2e>
 8008388:	3201      	adds	r2, #1
 800838a:	701a      	strb	r2, [r3, #0]
 800838c:	e501      	b.n	8007d92 <_dtoa_r+0x49a>
 800838e:	2a00      	cmp	r2, #0
 8008390:	dd03      	ble.n	800839a <_dtoa_r+0xaa2>
 8008392:	2b39      	cmp	r3, #57	@ 0x39
 8008394:	d0ee      	beq.n	8008374 <_dtoa_r+0xa7c>
 8008396:	3301      	adds	r3, #1
 8008398:	e7c9      	b.n	800832e <_dtoa_r+0xa36>
 800839a:	9a00      	ldr	r2, [sp, #0]
 800839c:	9908      	ldr	r1, [sp, #32]
 800839e:	f802 3c01 	strb.w	r3, [r2, #-1]
 80083a2:	428a      	cmp	r2, r1
 80083a4:	d028      	beq.n	80083f8 <_dtoa_r+0xb00>
 80083a6:	9902      	ldr	r1, [sp, #8]
 80083a8:	2300      	movs	r3, #0
 80083aa:	220a      	movs	r2, #10
 80083ac:	4648      	mov	r0, r9
 80083ae:	f000 fd21 	bl	8008df4 <__multadd>
 80083b2:	42af      	cmp	r7, r5
 80083b4:	9002      	str	r0, [sp, #8]
 80083b6:	f04f 0300 	mov.w	r3, #0
 80083ba:	f04f 020a 	mov.w	r2, #10
 80083be:	4639      	mov	r1, r7
 80083c0:	4648      	mov	r0, r9
 80083c2:	d107      	bne.n	80083d4 <_dtoa_r+0xadc>
 80083c4:	f000 fd16 	bl	8008df4 <__multadd>
 80083c8:	4607      	mov	r7, r0
 80083ca:	4605      	mov	r5, r0
 80083cc:	9b00      	ldr	r3, [sp, #0]
 80083ce:	3301      	adds	r3, #1
 80083d0:	9300      	str	r3, [sp, #0]
 80083d2:	e777      	b.n	80082c4 <_dtoa_r+0x9cc>
 80083d4:	f000 fd0e 	bl	8008df4 <__multadd>
 80083d8:	4629      	mov	r1, r5
 80083da:	4607      	mov	r7, r0
 80083dc:	2300      	movs	r3, #0
 80083de:	220a      	movs	r2, #10
 80083e0:	4648      	mov	r0, r9
 80083e2:	f000 fd07 	bl	8008df4 <__multadd>
 80083e6:	4605      	mov	r5, r0
 80083e8:	e7f0      	b.n	80083cc <_dtoa_r+0xad4>
 80083ea:	f1bb 0f00 	cmp.w	fp, #0
 80083ee:	bfcc      	ite	gt
 80083f0:	465e      	movgt	r6, fp
 80083f2:	2601      	movle	r6, #1
 80083f4:	4456      	add	r6, sl
 80083f6:	2700      	movs	r7, #0
 80083f8:	9902      	ldr	r1, [sp, #8]
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	2201      	movs	r2, #1
 80083fe:	4648      	mov	r0, r9
 8008400:	f000 fee6 	bl	80091d0 <__lshift>
 8008404:	4621      	mov	r1, r4
 8008406:	9002      	str	r0, [sp, #8]
 8008408:	f000 ff4e 	bl	80092a8 <__mcmp>
 800840c:	2800      	cmp	r0, #0
 800840e:	dcb4      	bgt.n	800837a <_dtoa_r+0xa82>
 8008410:	d102      	bne.n	8008418 <_dtoa_r+0xb20>
 8008412:	9b00      	ldr	r3, [sp, #0]
 8008414:	07db      	lsls	r3, r3, #31
 8008416:	d4b0      	bmi.n	800837a <_dtoa_r+0xa82>
 8008418:	4633      	mov	r3, r6
 800841a:	461e      	mov	r6, r3
 800841c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008420:	2a30      	cmp	r2, #48	@ 0x30
 8008422:	d0fa      	beq.n	800841a <_dtoa_r+0xb22>
 8008424:	e4b5      	b.n	8007d92 <_dtoa_r+0x49a>
 8008426:	459a      	cmp	sl, r3
 8008428:	d1a8      	bne.n	800837c <_dtoa_r+0xa84>
 800842a:	2331      	movs	r3, #49	@ 0x31
 800842c:	f108 0801 	add.w	r8, r8, #1
 8008430:	f88a 3000 	strb.w	r3, [sl]
 8008434:	e4ad      	b.n	8007d92 <_dtoa_r+0x49a>
 8008436:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008438:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008494 <_dtoa_r+0xb9c>
 800843c:	b11b      	cbz	r3, 8008446 <_dtoa_r+0xb4e>
 800843e:	f10a 0308 	add.w	r3, sl, #8
 8008442:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008444:	6013      	str	r3, [r2, #0]
 8008446:	4650      	mov	r0, sl
 8008448:	b017      	add	sp, #92	@ 0x5c
 800844a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800844e:	9b07      	ldr	r3, [sp, #28]
 8008450:	2b01      	cmp	r3, #1
 8008452:	f77f ae2e 	ble.w	80080b2 <_dtoa_r+0x7ba>
 8008456:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008458:	9308      	str	r3, [sp, #32]
 800845a:	2001      	movs	r0, #1
 800845c:	e64d      	b.n	80080fa <_dtoa_r+0x802>
 800845e:	f1bb 0f00 	cmp.w	fp, #0
 8008462:	f77f aed9 	ble.w	8008218 <_dtoa_r+0x920>
 8008466:	4656      	mov	r6, sl
 8008468:	9802      	ldr	r0, [sp, #8]
 800846a:	4621      	mov	r1, r4
 800846c:	f7ff f9bc 	bl	80077e8 <quorem>
 8008470:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008474:	f806 3b01 	strb.w	r3, [r6], #1
 8008478:	eba6 020a 	sub.w	r2, r6, sl
 800847c:	4593      	cmp	fp, r2
 800847e:	ddb4      	ble.n	80083ea <_dtoa_r+0xaf2>
 8008480:	9902      	ldr	r1, [sp, #8]
 8008482:	2300      	movs	r3, #0
 8008484:	220a      	movs	r2, #10
 8008486:	4648      	mov	r0, r9
 8008488:	f000 fcb4 	bl	8008df4 <__multadd>
 800848c:	9002      	str	r0, [sp, #8]
 800848e:	e7eb      	b.n	8008468 <_dtoa_r+0xb70>
 8008490:	0800a2c5 	.word	0x0800a2c5
 8008494:	0800a260 	.word	0x0800a260

08008498 <_free_r>:
 8008498:	b538      	push	{r3, r4, r5, lr}
 800849a:	4605      	mov	r5, r0
 800849c:	2900      	cmp	r1, #0
 800849e:	d041      	beq.n	8008524 <_free_r+0x8c>
 80084a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084a4:	1f0c      	subs	r4, r1, #4
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	bfb8      	it	lt
 80084aa:	18e4      	addlt	r4, r4, r3
 80084ac:	f000 fc34 	bl	8008d18 <__malloc_lock>
 80084b0:	4a1d      	ldr	r2, [pc, #116]	@ (8008528 <_free_r+0x90>)
 80084b2:	6813      	ldr	r3, [r2, #0]
 80084b4:	b933      	cbnz	r3, 80084c4 <_free_r+0x2c>
 80084b6:	6063      	str	r3, [r4, #4]
 80084b8:	6014      	str	r4, [r2, #0]
 80084ba:	4628      	mov	r0, r5
 80084bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80084c0:	f000 bc30 	b.w	8008d24 <__malloc_unlock>
 80084c4:	42a3      	cmp	r3, r4
 80084c6:	d908      	bls.n	80084da <_free_r+0x42>
 80084c8:	6820      	ldr	r0, [r4, #0]
 80084ca:	1821      	adds	r1, r4, r0
 80084cc:	428b      	cmp	r3, r1
 80084ce:	bf01      	itttt	eq
 80084d0:	6819      	ldreq	r1, [r3, #0]
 80084d2:	685b      	ldreq	r3, [r3, #4]
 80084d4:	1809      	addeq	r1, r1, r0
 80084d6:	6021      	streq	r1, [r4, #0]
 80084d8:	e7ed      	b.n	80084b6 <_free_r+0x1e>
 80084da:	461a      	mov	r2, r3
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	b10b      	cbz	r3, 80084e4 <_free_r+0x4c>
 80084e0:	42a3      	cmp	r3, r4
 80084e2:	d9fa      	bls.n	80084da <_free_r+0x42>
 80084e4:	6811      	ldr	r1, [r2, #0]
 80084e6:	1850      	adds	r0, r2, r1
 80084e8:	42a0      	cmp	r0, r4
 80084ea:	d10b      	bne.n	8008504 <_free_r+0x6c>
 80084ec:	6820      	ldr	r0, [r4, #0]
 80084ee:	4401      	add	r1, r0
 80084f0:	1850      	adds	r0, r2, r1
 80084f2:	4283      	cmp	r3, r0
 80084f4:	6011      	str	r1, [r2, #0]
 80084f6:	d1e0      	bne.n	80084ba <_free_r+0x22>
 80084f8:	6818      	ldr	r0, [r3, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	6053      	str	r3, [r2, #4]
 80084fe:	4408      	add	r0, r1
 8008500:	6010      	str	r0, [r2, #0]
 8008502:	e7da      	b.n	80084ba <_free_r+0x22>
 8008504:	d902      	bls.n	800850c <_free_r+0x74>
 8008506:	230c      	movs	r3, #12
 8008508:	602b      	str	r3, [r5, #0]
 800850a:	e7d6      	b.n	80084ba <_free_r+0x22>
 800850c:	6820      	ldr	r0, [r4, #0]
 800850e:	1821      	adds	r1, r4, r0
 8008510:	428b      	cmp	r3, r1
 8008512:	bf04      	itt	eq
 8008514:	6819      	ldreq	r1, [r3, #0]
 8008516:	685b      	ldreq	r3, [r3, #4]
 8008518:	6063      	str	r3, [r4, #4]
 800851a:	bf04      	itt	eq
 800851c:	1809      	addeq	r1, r1, r0
 800851e:	6021      	streq	r1, [r4, #0]
 8008520:	6054      	str	r4, [r2, #4]
 8008522:	e7ca      	b.n	80084ba <_free_r+0x22>
 8008524:	bd38      	pop	{r3, r4, r5, pc}
 8008526:	bf00      	nop
 8008528:	2000154c 	.word	0x2000154c

0800852c <rshift>:
 800852c:	6903      	ldr	r3, [r0, #16]
 800852e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008532:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008536:	ea4f 1261 	mov.w	r2, r1, asr #5
 800853a:	f100 0414 	add.w	r4, r0, #20
 800853e:	dd45      	ble.n	80085cc <rshift+0xa0>
 8008540:	f011 011f 	ands.w	r1, r1, #31
 8008544:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008548:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800854c:	d10c      	bne.n	8008568 <rshift+0x3c>
 800854e:	f100 0710 	add.w	r7, r0, #16
 8008552:	4629      	mov	r1, r5
 8008554:	42b1      	cmp	r1, r6
 8008556:	d334      	bcc.n	80085c2 <rshift+0x96>
 8008558:	1a9b      	subs	r3, r3, r2
 800855a:	009b      	lsls	r3, r3, #2
 800855c:	1eea      	subs	r2, r5, #3
 800855e:	4296      	cmp	r6, r2
 8008560:	bf38      	it	cc
 8008562:	2300      	movcc	r3, #0
 8008564:	4423      	add	r3, r4
 8008566:	e015      	b.n	8008594 <rshift+0x68>
 8008568:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800856c:	f1c1 0820 	rsb	r8, r1, #32
 8008570:	40cf      	lsrs	r7, r1
 8008572:	f105 0e04 	add.w	lr, r5, #4
 8008576:	46a1      	mov	r9, r4
 8008578:	4576      	cmp	r6, lr
 800857a:	46f4      	mov	ip, lr
 800857c:	d815      	bhi.n	80085aa <rshift+0x7e>
 800857e:	1a9a      	subs	r2, r3, r2
 8008580:	0092      	lsls	r2, r2, #2
 8008582:	3a04      	subs	r2, #4
 8008584:	3501      	adds	r5, #1
 8008586:	42ae      	cmp	r6, r5
 8008588:	bf38      	it	cc
 800858a:	2200      	movcc	r2, #0
 800858c:	18a3      	adds	r3, r4, r2
 800858e:	50a7      	str	r7, [r4, r2]
 8008590:	b107      	cbz	r7, 8008594 <rshift+0x68>
 8008592:	3304      	adds	r3, #4
 8008594:	1b1a      	subs	r2, r3, r4
 8008596:	42a3      	cmp	r3, r4
 8008598:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800859c:	bf08      	it	eq
 800859e:	2300      	moveq	r3, #0
 80085a0:	6102      	str	r2, [r0, #16]
 80085a2:	bf08      	it	eq
 80085a4:	6143      	streq	r3, [r0, #20]
 80085a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085aa:	f8dc c000 	ldr.w	ip, [ip]
 80085ae:	fa0c fc08 	lsl.w	ip, ip, r8
 80085b2:	ea4c 0707 	orr.w	r7, ip, r7
 80085b6:	f849 7b04 	str.w	r7, [r9], #4
 80085ba:	f85e 7b04 	ldr.w	r7, [lr], #4
 80085be:	40cf      	lsrs	r7, r1
 80085c0:	e7da      	b.n	8008578 <rshift+0x4c>
 80085c2:	f851 cb04 	ldr.w	ip, [r1], #4
 80085c6:	f847 cf04 	str.w	ip, [r7, #4]!
 80085ca:	e7c3      	b.n	8008554 <rshift+0x28>
 80085cc:	4623      	mov	r3, r4
 80085ce:	e7e1      	b.n	8008594 <rshift+0x68>

080085d0 <__hexdig_fun>:
 80085d0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80085d4:	2b09      	cmp	r3, #9
 80085d6:	d802      	bhi.n	80085de <__hexdig_fun+0xe>
 80085d8:	3820      	subs	r0, #32
 80085da:	b2c0      	uxtb	r0, r0
 80085dc:	4770      	bx	lr
 80085de:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80085e2:	2b05      	cmp	r3, #5
 80085e4:	d801      	bhi.n	80085ea <__hexdig_fun+0x1a>
 80085e6:	3847      	subs	r0, #71	@ 0x47
 80085e8:	e7f7      	b.n	80085da <__hexdig_fun+0xa>
 80085ea:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80085ee:	2b05      	cmp	r3, #5
 80085f0:	d801      	bhi.n	80085f6 <__hexdig_fun+0x26>
 80085f2:	3827      	subs	r0, #39	@ 0x27
 80085f4:	e7f1      	b.n	80085da <__hexdig_fun+0xa>
 80085f6:	2000      	movs	r0, #0
 80085f8:	4770      	bx	lr
	...

080085fc <__gethex>:
 80085fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008600:	b085      	sub	sp, #20
 8008602:	468a      	mov	sl, r1
 8008604:	9302      	str	r3, [sp, #8]
 8008606:	680b      	ldr	r3, [r1, #0]
 8008608:	9001      	str	r0, [sp, #4]
 800860a:	4690      	mov	r8, r2
 800860c:	1c9c      	adds	r4, r3, #2
 800860e:	46a1      	mov	r9, r4
 8008610:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008614:	2830      	cmp	r0, #48	@ 0x30
 8008616:	d0fa      	beq.n	800860e <__gethex+0x12>
 8008618:	eba9 0303 	sub.w	r3, r9, r3
 800861c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008620:	f7ff ffd6 	bl	80085d0 <__hexdig_fun>
 8008624:	4605      	mov	r5, r0
 8008626:	2800      	cmp	r0, #0
 8008628:	d168      	bne.n	80086fc <__gethex+0x100>
 800862a:	49a0      	ldr	r1, [pc, #640]	@ (80088ac <__gethex+0x2b0>)
 800862c:	2201      	movs	r2, #1
 800862e:	4648      	mov	r0, r9
 8008630:	f7fe ffa4 	bl	800757c <strncmp>
 8008634:	4607      	mov	r7, r0
 8008636:	2800      	cmp	r0, #0
 8008638:	d167      	bne.n	800870a <__gethex+0x10e>
 800863a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800863e:	4626      	mov	r6, r4
 8008640:	f7ff ffc6 	bl	80085d0 <__hexdig_fun>
 8008644:	2800      	cmp	r0, #0
 8008646:	d062      	beq.n	800870e <__gethex+0x112>
 8008648:	4623      	mov	r3, r4
 800864a:	7818      	ldrb	r0, [r3, #0]
 800864c:	2830      	cmp	r0, #48	@ 0x30
 800864e:	4699      	mov	r9, r3
 8008650:	f103 0301 	add.w	r3, r3, #1
 8008654:	d0f9      	beq.n	800864a <__gethex+0x4e>
 8008656:	f7ff ffbb 	bl	80085d0 <__hexdig_fun>
 800865a:	fab0 f580 	clz	r5, r0
 800865e:	096d      	lsrs	r5, r5, #5
 8008660:	f04f 0b01 	mov.w	fp, #1
 8008664:	464a      	mov	r2, r9
 8008666:	4616      	mov	r6, r2
 8008668:	3201      	adds	r2, #1
 800866a:	7830      	ldrb	r0, [r6, #0]
 800866c:	f7ff ffb0 	bl	80085d0 <__hexdig_fun>
 8008670:	2800      	cmp	r0, #0
 8008672:	d1f8      	bne.n	8008666 <__gethex+0x6a>
 8008674:	498d      	ldr	r1, [pc, #564]	@ (80088ac <__gethex+0x2b0>)
 8008676:	2201      	movs	r2, #1
 8008678:	4630      	mov	r0, r6
 800867a:	f7fe ff7f 	bl	800757c <strncmp>
 800867e:	2800      	cmp	r0, #0
 8008680:	d13f      	bne.n	8008702 <__gethex+0x106>
 8008682:	b944      	cbnz	r4, 8008696 <__gethex+0x9a>
 8008684:	1c74      	adds	r4, r6, #1
 8008686:	4622      	mov	r2, r4
 8008688:	4616      	mov	r6, r2
 800868a:	3201      	adds	r2, #1
 800868c:	7830      	ldrb	r0, [r6, #0]
 800868e:	f7ff ff9f 	bl	80085d0 <__hexdig_fun>
 8008692:	2800      	cmp	r0, #0
 8008694:	d1f8      	bne.n	8008688 <__gethex+0x8c>
 8008696:	1ba4      	subs	r4, r4, r6
 8008698:	00a7      	lsls	r7, r4, #2
 800869a:	7833      	ldrb	r3, [r6, #0]
 800869c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80086a0:	2b50      	cmp	r3, #80	@ 0x50
 80086a2:	d13e      	bne.n	8008722 <__gethex+0x126>
 80086a4:	7873      	ldrb	r3, [r6, #1]
 80086a6:	2b2b      	cmp	r3, #43	@ 0x2b
 80086a8:	d033      	beq.n	8008712 <__gethex+0x116>
 80086aa:	2b2d      	cmp	r3, #45	@ 0x2d
 80086ac:	d034      	beq.n	8008718 <__gethex+0x11c>
 80086ae:	1c71      	adds	r1, r6, #1
 80086b0:	2400      	movs	r4, #0
 80086b2:	7808      	ldrb	r0, [r1, #0]
 80086b4:	f7ff ff8c 	bl	80085d0 <__hexdig_fun>
 80086b8:	1e43      	subs	r3, r0, #1
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	2b18      	cmp	r3, #24
 80086be:	d830      	bhi.n	8008722 <__gethex+0x126>
 80086c0:	f1a0 0210 	sub.w	r2, r0, #16
 80086c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80086c8:	f7ff ff82 	bl	80085d0 <__hexdig_fun>
 80086cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80086d0:	fa5f fc8c 	uxtb.w	ip, ip
 80086d4:	f1bc 0f18 	cmp.w	ip, #24
 80086d8:	f04f 030a 	mov.w	r3, #10
 80086dc:	d91e      	bls.n	800871c <__gethex+0x120>
 80086de:	b104      	cbz	r4, 80086e2 <__gethex+0xe6>
 80086e0:	4252      	negs	r2, r2
 80086e2:	4417      	add	r7, r2
 80086e4:	f8ca 1000 	str.w	r1, [sl]
 80086e8:	b1ed      	cbz	r5, 8008726 <__gethex+0x12a>
 80086ea:	f1bb 0f00 	cmp.w	fp, #0
 80086ee:	bf0c      	ite	eq
 80086f0:	2506      	moveq	r5, #6
 80086f2:	2500      	movne	r5, #0
 80086f4:	4628      	mov	r0, r5
 80086f6:	b005      	add	sp, #20
 80086f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086fc:	2500      	movs	r5, #0
 80086fe:	462c      	mov	r4, r5
 8008700:	e7b0      	b.n	8008664 <__gethex+0x68>
 8008702:	2c00      	cmp	r4, #0
 8008704:	d1c7      	bne.n	8008696 <__gethex+0x9a>
 8008706:	4627      	mov	r7, r4
 8008708:	e7c7      	b.n	800869a <__gethex+0x9e>
 800870a:	464e      	mov	r6, r9
 800870c:	462f      	mov	r7, r5
 800870e:	2501      	movs	r5, #1
 8008710:	e7c3      	b.n	800869a <__gethex+0x9e>
 8008712:	2400      	movs	r4, #0
 8008714:	1cb1      	adds	r1, r6, #2
 8008716:	e7cc      	b.n	80086b2 <__gethex+0xb6>
 8008718:	2401      	movs	r4, #1
 800871a:	e7fb      	b.n	8008714 <__gethex+0x118>
 800871c:	fb03 0002 	mla	r0, r3, r2, r0
 8008720:	e7ce      	b.n	80086c0 <__gethex+0xc4>
 8008722:	4631      	mov	r1, r6
 8008724:	e7de      	b.n	80086e4 <__gethex+0xe8>
 8008726:	eba6 0309 	sub.w	r3, r6, r9
 800872a:	3b01      	subs	r3, #1
 800872c:	4629      	mov	r1, r5
 800872e:	2b07      	cmp	r3, #7
 8008730:	dc0a      	bgt.n	8008748 <__gethex+0x14c>
 8008732:	9801      	ldr	r0, [sp, #4]
 8008734:	f000 fafc 	bl	8008d30 <_Balloc>
 8008738:	4604      	mov	r4, r0
 800873a:	b940      	cbnz	r0, 800874e <__gethex+0x152>
 800873c:	4b5c      	ldr	r3, [pc, #368]	@ (80088b0 <__gethex+0x2b4>)
 800873e:	4602      	mov	r2, r0
 8008740:	21e4      	movs	r1, #228	@ 0xe4
 8008742:	485c      	ldr	r0, [pc, #368]	@ (80088b4 <__gethex+0x2b8>)
 8008744:	f7ff f832 	bl	80077ac <__assert_func>
 8008748:	3101      	adds	r1, #1
 800874a:	105b      	asrs	r3, r3, #1
 800874c:	e7ef      	b.n	800872e <__gethex+0x132>
 800874e:	f100 0a14 	add.w	sl, r0, #20
 8008752:	2300      	movs	r3, #0
 8008754:	4655      	mov	r5, sl
 8008756:	469b      	mov	fp, r3
 8008758:	45b1      	cmp	r9, r6
 800875a:	d337      	bcc.n	80087cc <__gethex+0x1d0>
 800875c:	f845 bb04 	str.w	fp, [r5], #4
 8008760:	eba5 050a 	sub.w	r5, r5, sl
 8008764:	10ad      	asrs	r5, r5, #2
 8008766:	6125      	str	r5, [r4, #16]
 8008768:	4658      	mov	r0, fp
 800876a:	f000 fbd3 	bl	8008f14 <__hi0bits>
 800876e:	016d      	lsls	r5, r5, #5
 8008770:	f8d8 6000 	ldr.w	r6, [r8]
 8008774:	1a2d      	subs	r5, r5, r0
 8008776:	42b5      	cmp	r5, r6
 8008778:	dd54      	ble.n	8008824 <__gethex+0x228>
 800877a:	1bad      	subs	r5, r5, r6
 800877c:	4629      	mov	r1, r5
 800877e:	4620      	mov	r0, r4
 8008780:	f000 ff5f 	bl	8009642 <__any_on>
 8008784:	4681      	mov	r9, r0
 8008786:	b178      	cbz	r0, 80087a8 <__gethex+0x1ac>
 8008788:	1e6b      	subs	r3, r5, #1
 800878a:	1159      	asrs	r1, r3, #5
 800878c:	f003 021f 	and.w	r2, r3, #31
 8008790:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008794:	f04f 0901 	mov.w	r9, #1
 8008798:	fa09 f202 	lsl.w	r2, r9, r2
 800879c:	420a      	tst	r2, r1
 800879e:	d003      	beq.n	80087a8 <__gethex+0x1ac>
 80087a0:	454b      	cmp	r3, r9
 80087a2:	dc36      	bgt.n	8008812 <__gethex+0x216>
 80087a4:	f04f 0902 	mov.w	r9, #2
 80087a8:	4629      	mov	r1, r5
 80087aa:	4620      	mov	r0, r4
 80087ac:	f7ff febe 	bl	800852c <rshift>
 80087b0:	442f      	add	r7, r5
 80087b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087b6:	42bb      	cmp	r3, r7
 80087b8:	da42      	bge.n	8008840 <__gethex+0x244>
 80087ba:	9801      	ldr	r0, [sp, #4]
 80087bc:	4621      	mov	r1, r4
 80087be:	f000 faf7 	bl	8008db0 <_Bfree>
 80087c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087c4:	2300      	movs	r3, #0
 80087c6:	6013      	str	r3, [r2, #0]
 80087c8:	25a3      	movs	r5, #163	@ 0xa3
 80087ca:	e793      	b.n	80086f4 <__gethex+0xf8>
 80087cc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80087d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80087d2:	d012      	beq.n	80087fa <__gethex+0x1fe>
 80087d4:	2b20      	cmp	r3, #32
 80087d6:	d104      	bne.n	80087e2 <__gethex+0x1e6>
 80087d8:	f845 bb04 	str.w	fp, [r5], #4
 80087dc:	f04f 0b00 	mov.w	fp, #0
 80087e0:	465b      	mov	r3, fp
 80087e2:	7830      	ldrb	r0, [r6, #0]
 80087e4:	9303      	str	r3, [sp, #12]
 80087e6:	f7ff fef3 	bl	80085d0 <__hexdig_fun>
 80087ea:	9b03      	ldr	r3, [sp, #12]
 80087ec:	f000 000f 	and.w	r0, r0, #15
 80087f0:	4098      	lsls	r0, r3
 80087f2:	ea4b 0b00 	orr.w	fp, fp, r0
 80087f6:	3304      	adds	r3, #4
 80087f8:	e7ae      	b.n	8008758 <__gethex+0x15c>
 80087fa:	45b1      	cmp	r9, r6
 80087fc:	d8ea      	bhi.n	80087d4 <__gethex+0x1d8>
 80087fe:	492b      	ldr	r1, [pc, #172]	@ (80088ac <__gethex+0x2b0>)
 8008800:	9303      	str	r3, [sp, #12]
 8008802:	2201      	movs	r2, #1
 8008804:	4630      	mov	r0, r6
 8008806:	f7fe feb9 	bl	800757c <strncmp>
 800880a:	9b03      	ldr	r3, [sp, #12]
 800880c:	2800      	cmp	r0, #0
 800880e:	d1e1      	bne.n	80087d4 <__gethex+0x1d8>
 8008810:	e7a2      	b.n	8008758 <__gethex+0x15c>
 8008812:	1ea9      	subs	r1, r5, #2
 8008814:	4620      	mov	r0, r4
 8008816:	f000 ff14 	bl	8009642 <__any_on>
 800881a:	2800      	cmp	r0, #0
 800881c:	d0c2      	beq.n	80087a4 <__gethex+0x1a8>
 800881e:	f04f 0903 	mov.w	r9, #3
 8008822:	e7c1      	b.n	80087a8 <__gethex+0x1ac>
 8008824:	da09      	bge.n	800883a <__gethex+0x23e>
 8008826:	1b75      	subs	r5, r6, r5
 8008828:	4621      	mov	r1, r4
 800882a:	9801      	ldr	r0, [sp, #4]
 800882c:	462a      	mov	r2, r5
 800882e:	f000 fccf 	bl	80091d0 <__lshift>
 8008832:	1b7f      	subs	r7, r7, r5
 8008834:	4604      	mov	r4, r0
 8008836:	f100 0a14 	add.w	sl, r0, #20
 800883a:	f04f 0900 	mov.w	r9, #0
 800883e:	e7b8      	b.n	80087b2 <__gethex+0x1b6>
 8008840:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008844:	42bd      	cmp	r5, r7
 8008846:	dd6f      	ble.n	8008928 <__gethex+0x32c>
 8008848:	1bed      	subs	r5, r5, r7
 800884a:	42ae      	cmp	r6, r5
 800884c:	dc34      	bgt.n	80088b8 <__gethex+0x2bc>
 800884e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008852:	2b02      	cmp	r3, #2
 8008854:	d022      	beq.n	800889c <__gethex+0x2a0>
 8008856:	2b03      	cmp	r3, #3
 8008858:	d024      	beq.n	80088a4 <__gethex+0x2a8>
 800885a:	2b01      	cmp	r3, #1
 800885c:	d115      	bne.n	800888a <__gethex+0x28e>
 800885e:	42ae      	cmp	r6, r5
 8008860:	d113      	bne.n	800888a <__gethex+0x28e>
 8008862:	2e01      	cmp	r6, #1
 8008864:	d10b      	bne.n	800887e <__gethex+0x282>
 8008866:	9a02      	ldr	r2, [sp, #8]
 8008868:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	2301      	movs	r3, #1
 8008870:	6123      	str	r3, [r4, #16]
 8008872:	f8ca 3000 	str.w	r3, [sl]
 8008876:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008878:	2562      	movs	r5, #98	@ 0x62
 800887a:	601c      	str	r4, [r3, #0]
 800887c:	e73a      	b.n	80086f4 <__gethex+0xf8>
 800887e:	1e71      	subs	r1, r6, #1
 8008880:	4620      	mov	r0, r4
 8008882:	f000 fede 	bl	8009642 <__any_on>
 8008886:	2800      	cmp	r0, #0
 8008888:	d1ed      	bne.n	8008866 <__gethex+0x26a>
 800888a:	9801      	ldr	r0, [sp, #4]
 800888c:	4621      	mov	r1, r4
 800888e:	f000 fa8f 	bl	8008db0 <_Bfree>
 8008892:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008894:	2300      	movs	r3, #0
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	2550      	movs	r5, #80	@ 0x50
 800889a:	e72b      	b.n	80086f4 <__gethex+0xf8>
 800889c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1f3      	bne.n	800888a <__gethex+0x28e>
 80088a2:	e7e0      	b.n	8008866 <__gethex+0x26a>
 80088a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1dd      	bne.n	8008866 <__gethex+0x26a>
 80088aa:	e7ee      	b.n	800888a <__gethex+0x28e>
 80088ac:	0800a170 	.word	0x0800a170
 80088b0:	0800a2c5 	.word	0x0800a2c5
 80088b4:	0800a2d6 	.word	0x0800a2d6
 80088b8:	1e6f      	subs	r7, r5, #1
 80088ba:	f1b9 0f00 	cmp.w	r9, #0
 80088be:	d130      	bne.n	8008922 <__gethex+0x326>
 80088c0:	b127      	cbz	r7, 80088cc <__gethex+0x2d0>
 80088c2:	4639      	mov	r1, r7
 80088c4:	4620      	mov	r0, r4
 80088c6:	f000 febc 	bl	8009642 <__any_on>
 80088ca:	4681      	mov	r9, r0
 80088cc:	117a      	asrs	r2, r7, #5
 80088ce:	2301      	movs	r3, #1
 80088d0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80088d4:	f007 071f 	and.w	r7, r7, #31
 80088d8:	40bb      	lsls	r3, r7
 80088da:	4213      	tst	r3, r2
 80088dc:	4629      	mov	r1, r5
 80088de:	4620      	mov	r0, r4
 80088e0:	bf18      	it	ne
 80088e2:	f049 0902 	orrne.w	r9, r9, #2
 80088e6:	f7ff fe21 	bl	800852c <rshift>
 80088ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80088ee:	1b76      	subs	r6, r6, r5
 80088f0:	2502      	movs	r5, #2
 80088f2:	f1b9 0f00 	cmp.w	r9, #0
 80088f6:	d047      	beq.n	8008988 <__gethex+0x38c>
 80088f8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088fc:	2b02      	cmp	r3, #2
 80088fe:	d015      	beq.n	800892c <__gethex+0x330>
 8008900:	2b03      	cmp	r3, #3
 8008902:	d017      	beq.n	8008934 <__gethex+0x338>
 8008904:	2b01      	cmp	r3, #1
 8008906:	d109      	bne.n	800891c <__gethex+0x320>
 8008908:	f019 0f02 	tst.w	r9, #2
 800890c:	d006      	beq.n	800891c <__gethex+0x320>
 800890e:	f8da 3000 	ldr.w	r3, [sl]
 8008912:	ea49 0903 	orr.w	r9, r9, r3
 8008916:	f019 0f01 	tst.w	r9, #1
 800891a:	d10e      	bne.n	800893a <__gethex+0x33e>
 800891c:	f045 0510 	orr.w	r5, r5, #16
 8008920:	e032      	b.n	8008988 <__gethex+0x38c>
 8008922:	f04f 0901 	mov.w	r9, #1
 8008926:	e7d1      	b.n	80088cc <__gethex+0x2d0>
 8008928:	2501      	movs	r5, #1
 800892a:	e7e2      	b.n	80088f2 <__gethex+0x2f6>
 800892c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800892e:	f1c3 0301 	rsb	r3, r3, #1
 8008932:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008934:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0f0      	beq.n	800891c <__gethex+0x320>
 800893a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800893e:	f104 0314 	add.w	r3, r4, #20
 8008942:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008946:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800894a:	f04f 0c00 	mov.w	ip, #0
 800894e:	4618      	mov	r0, r3
 8008950:	f853 2b04 	ldr.w	r2, [r3], #4
 8008954:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008958:	d01b      	beq.n	8008992 <__gethex+0x396>
 800895a:	3201      	adds	r2, #1
 800895c:	6002      	str	r2, [r0, #0]
 800895e:	2d02      	cmp	r5, #2
 8008960:	f104 0314 	add.w	r3, r4, #20
 8008964:	d13c      	bne.n	80089e0 <__gethex+0x3e4>
 8008966:	f8d8 2000 	ldr.w	r2, [r8]
 800896a:	3a01      	subs	r2, #1
 800896c:	42b2      	cmp	r2, r6
 800896e:	d109      	bne.n	8008984 <__gethex+0x388>
 8008970:	1171      	asrs	r1, r6, #5
 8008972:	2201      	movs	r2, #1
 8008974:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008978:	f006 061f 	and.w	r6, r6, #31
 800897c:	fa02 f606 	lsl.w	r6, r2, r6
 8008980:	421e      	tst	r6, r3
 8008982:	d13a      	bne.n	80089fa <__gethex+0x3fe>
 8008984:	f045 0520 	orr.w	r5, r5, #32
 8008988:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800898a:	601c      	str	r4, [r3, #0]
 800898c:	9b02      	ldr	r3, [sp, #8]
 800898e:	601f      	str	r7, [r3, #0]
 8008990:	e6b0      	b.n	80086f4 <__gethex+0xf8>
 8008992:	4299      	cmp	r1, r3
 8008994:	f843 cc04 	str.w	ip, [r3, #-4]
 8008998:	d8d9      	bhi.n	800894e <__gethex+0x352>
 800899a:	68a3      	ldr	r3, [r4, #8]
 800899c:	459b      	cmp	fp, r3
 800899e:	db17      	blt.n	80089d0 <__gethex+0x3d4>
 80089a0:	6861      	ldr	r1, [r4, #4]
 80089a2:	9801      	ldr	r0, [sp, #4]
 80089a4:	3101      	adds	r1, #1
 80089a6:	f000 f9c3 	bl	8008d30 <_Balloc>
 80089aa:	4681      	mov	r9, r0
 80089ac:	b918      	cbnz	r0, 80089b6 <__gethex+0x3ba>
 80089ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008a18 <__gethex+0x41c>)
 80089b0:	4602      	mov	r2, r0
 80089b2:	2184      	movs	r1, #132	@ 0x84
 80089b4:	e6c5      	b.n	8008742 <__gethex+0x146>
 80089b6:	6922      	ldr	r2, [r4, #16]
 80089b8:	3202      	adds	r2, #2
 80089ba:	f104 010c 	add.w	r1, r4, #12
 80089be:	0092      	lsls	r2, r2, #2
 80089c0:	300c      	adds	r0, #12
 80089c2:	f7fe fed4 	bl	800776e <memcpy>
 80089c6:	4621      	mov	r1, r4
 80089c8:	9801      	ldr	r0, [sp, #4]
 80089ca:	f000 f9f1 	bl	8008db0 <_Bfree>
 80089ce:	464c      	mov	r4, r9
 80089d0:	6923      	ldr	r3, [r4, #16]
 80089d2:	1c5a      	adds	r2, r3, #1
 80089d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089d8:	6122      	str	r2, [r4, #16]
 80089da:	2201      	movs	r2, #1
 80089dc:	615a      	str	r2, [r3, #20]
 80089de:	e7be      	b.n	800895e <__gethex+0x362>
 80089e0:	6922      	ldr	r2, [r4, #16]
 80089e2:	455a      	cmp	r2, fp
 80089e4:	dd0b      	ble.n	80089fe <__gethex+0x402>
 80089e6:	2101      	movs	r1, #1
 80089e8:	4620      	mov	r0, r4
 80089ea:	f7ff fd9f 	bl	800852c <rshift>
 80089ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089f2:	3701      	adds	r7, #1
 80089f4:	42bb      	cmp	r3, r7
 80089f6:	f6ff aee0 	blt.w	80087ba <__gethex+0x1be>
 80089fa:	2501      	movs	r5, #1
 80089fc:	e7c2      	b.n	8008984 <__gethex+0x388>
 80089fe:	f016 061f 	ands.w	r6, r6, #31
 8008a02:	d0fa      	beq.n	80089fa <__gethex+0x3fe>
 8008a04:	4453      	add	r3, sl
 8008a06:	f1c6 0620 	rsb	r6, r6, #32
 8008a0a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008a0e:	f000 fa81 	bl	8008f14 <__hi0bits>
 8008a12:	42b0      	cmp	r0, r6
 8008a14:	dbe7      	blt.n	80089e6 <__gethex+0x3ea>
 8008a16:	e7f0      	b.n	80089fa <__gethex+0x3fe>
 8008a18:	0800a2c5 	.word	0x0800a2c5

08008a1c <L_shift>:
 8008a1c:	f1c2 0208 	rsb	r2, r2, #8
 8008a20:	0092      	lsls	r2, r2, #2
 8008a22:	b570      	push	{r4, r5, r6, lr}
 8008a24:	f1c2 0620 	rsb	r6, r2, #32
 8008a28:	6843      	ldr	r3, [r0, #4]
 8008a2a:	6804      	ldr	r4, [r0, #0]
 8008a2c:	fa03 f506 	lsl.w	r5, r3, r6
 8008a30:	432c      	orrs	r4, r5
 8008a32:	40d3      	lsrs	r3, r2
 8008a34:	6004      	str	r4, [r0, #0]
 8008a36:	f840 3f04 	str.w	r3, [r0, #4]!
 8008a3a:	4288      	cmp	r0, r1
 8008a3c:	d3f4      	bcc.n	8008a28 <L_shift+0xc>
 8008a3e:	bd70      	pop	{r4, r5, r6, pc}

08008a40 <__match>:
 8008a40:	b530      	push	{r4, r5, lr}
 8008a42:	6803      	ldr	r3, [r0, #0]
 8008a44:	3301      	adds	r3, #1
 8008a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a4a:	b914      	cbnz	r4, 8008a52 <__match+0x12>
 8008a4c:	6003      	str	r3, [r0, #0]
 8008a4e:	2001      	movs	r0, #1
 8008a50:	bd30      	pop	{r4, r5, pc}
 8008a52:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a56:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008a5a:	2d19      	cmp	r5, #25
 8008a5c:	bf98      	it	ls
 8008a5e:	3220      	addls	r2, #32
 8008a60:	42a2      	cmp	r2, r4
 8008a62:	d0f0      	beq.n	8008a46 <__match+0x6>
 8008a64:	2000      	movs	r0, #0
 8008a66:	e7f3      	b.n	8008a50 <__match+0x10>

08008a68 <__hexnan>:
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	680b      	ldr	r3, [r1, #0]
 8008a6e:	6801      	ldr	r1, [r0, #0]
 8008a70:	115e      	asrs	r6, r3, #5
 8008a72:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008a76:	f013 031f 	ands.w	r3, r3, #31
 8008a7a:	b087      	sub	sp, #28
 8008a7c:	bf18      	it	ne
 8008a7e:	3604      	addne	r6, #4
 8008a80:	2500      	movs	r5, #0
 8008a82:	1f37      	subs	r7, r6, #4
 8008a84:	4682      	mov	sl, r0
 8008a86:	4690      	mov	r8, r2
 8008a88:	9301      	str	r3, [sp, #4]
 8008a8a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a8e:	46b9      	mov	r9, r7
 8008a90:	463c      	mov	r4, r7
 8008a92:	9502      	str	r5, [sp, #8]
 8008a94:	46ab      	mov	fp, r5
 8008a96:	784a      	ldrb	r2, [r1, #1]
 8008a98:	1c4b      	adds	r3, r1, #1
 8008a9a:	9303      	str	r3, [sp, #12]
 8008a9c:	b342      	cbz	r2, 8008af0 <__hexnan+0x88>
 8008a9e:	4610      	mov	r0, r2
 8008aa0:	9105      	str	r1, [sp, #20]
 8008aa2:	9204      	str	r2, [sp, #16]
 8008aa4:	f7ff fd94 	bl	80085d0 <__hexdig_fun>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d151      	bne.n	8008b50 <__hexnan+0xe8>
 8008aac:	9a04      	ldr	r2, [sp, #16]
 8008aae:	9905      	ldr	r1, [sp, #20]
 8008ab0:	2a20      	cmp	r2, #32
 8008ab2:	d818      	bhi.n	8008ae6 <__hexnan+0x7e>
 8008ab4:	9b02      	ldr	r3, [sp, #8]
 8008ab6:	459b      	cmp	fp, r3
 8008ab8:	dd13      	ble.n	8008ae2 <__hexnan+0x7a>
 8008aba:	454c      	cmp	r4, r9
 8008abc:	d206      	bcs.n	8008acc <__hexnan+0x64>
 8008abe:	2d07      	cmp	r5, #7
 8008ac0:	dc04      	bgt.n	8008acc <__hexnan+0x64>
 8008ac2:	462a      	mov	r2, r5
 8008ac4:	4649      	mov	r1, r9
 8008ac6:	4620      	mov	r0, r4
 8008ac8:	f7ff ffa8 	bl	8008a1c <L_shift>
 8008acc:	4544      	cmp	r4, r8
 8008ace:	d952      	bls.n	8008b76 <__hexnan+0x10e>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	f1a4 0904 	sub.w	r9, r4, #4
 8008ad6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ada:	f8cd b008 	str.w	fp, [sp, #8]
 8008ade:	464c      	mov	r4, r9
 8008ae0:	461d      	mov	r5, r3
 8008ae2:	9903      	ldr	r1, [sp, #12]
 8008ae4:	e7d7      	b.n	8008a96 <__hexnan+0x2e>
 8008ae6:	2a29      	cmp	r2, #41	@ 0x29
 8008ae8:	d157      	bne.n	8008b9a <__hexnan+0x132>
 8008aea:	3102      	adds	r1, #2
 8008aec:	f8ca 1000 	str.w	r1, [sl]
 8008af0:	f1bb 0f00 	cmp.w	fp, #0
 8008af4:	d051      	beq.n	8008b9a <__hexnan+0x132>
 8008af6:	454c      	cmp	r4, r9
 8008af8:	d206      	bcs.n	8008b08 <__hexnan+0xa0>
 8008afa:	2d07      	cmp	r5, #7
 8008afc:	dc04      	bgt.n	8008b08 <__hexnan+0xa0>
 8008afe:	462a      	mov	r2, r5
 8008b00:	4649      	mov	r1, r9
 8008b02:	4620      	mov	r0, r4
 8008b04:	f7ff ff8a 	bl	8008a1c <L_shift>
 8008b08:	4544      	cmp	r4, r8
 8008b0a:	d936      	bls.n	8008b7a <__hexnan+0x112>
 8008b0c:	f1a8 0204 	sub.w	r2, r8, #4
 8008b10:	4623      	mov	r3, r4
 8008b12:	f853 1b04 	ldr.w	r1, [r3], #4
 8008b16:	f842 1f04 	str.w	r1, [r2, #4]!
 8008b1a:	429f      	cmp	r7, r3
 8008b1c:	d2f9      	bcs.n	8008b12 <__hexnan+0xaa>
 8008b1e:	1b3b      	subs	r3, r7, r4
 8008b20:	f023 0303 	bic.w	r3, r3, #3
 8008b24:	3304      	adds	r3, #4
 8008b26:	3401      	adds	r4, #1
 8008b28:	3e03      	subs	r6, #3
 8008b2a:	42b4      	cmp	r4, r6
 8008b2c:	bf88      	it	hi
 8008b2e:	2304      	movhi	r3, #4
 8008b30:	4443      	add	r3, r8
 8008b32:	2200      	movs	r2, #0
 8008b34:	f843 2b04 	str.w	r2, [r3], #4
 8008b38:	429f      	cmp	r7, r3
 8008b3a:	d2fb      	bcs.n	8008b34 <__hexnan+0xcc>
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	b91b      	cbnz	r3, 8008b48 <__hexnan+0xe0>
 8008b40:	4547      	cmp	r7, r8
 8008b42:	d128      	bne.n	8008b96 <__hexnan+0x12e>
 8008b44:	2301      	movs	r3, #1
 8008b46:	603b      	str	r3, [r7, #0]
 8008b48:	2005      	movs	r0, #5
 8008b4a:	b007      	add	sp, #28
 8008b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b50:	3501      	adds	r5, #1
 8008b52:	2d08      	cmp	r5, #8
 8008b54:	f10b 0b01 	add.w	fp, fp, #1
 8008b58:	dd06      	ble.n	8008b68 <__hexnan+0x100>
 8008b5a:	4544      	cmp	r4, r8
 8008b5c:	d9c1      	bls.n	8008ae2 <__hexnan+0x7a>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b64:	2501      	movs	r5, #1
 8008b66:	3c04      	subs	r4, #4
 8008b68:	6822      	ldr	r2, [r4, #0]
 8008b6a:	f000 000f 	and.w	r0, r0, #15
 8008b6e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008b72:	6020      	str	r0, [r4, #0]
 8008b74:	e7b5      	b.n	8008ae2 <__hexnan+0x7a>
 8008b76:	2508      	movs	r5, #8
 8008b78:	e7b3      	b.n	8008ae2 <__hexnan+0x7a>
 8008b7a:	9b01      	ldr	r3, [sp, #4]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d0dd      	beq.n	8008b3c <__hexnan+0xd4>
 8008b80:	f1c3 0320 	rsb	r3, r3, #32
 8008b84:	f04f 32ff 	mov.w	r2, #4294967295
 8008b88:	40da      	lsrs	r2, r3
 8008b8a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008b8e:	4013      	ands	r3, r2
 8008b90:	f846 3c04 	str.w	r3, [r6, #-4]
 8008b94:	e7d2      	b.n	8008b3c <__hexnan+0xd4>
 8008b96:	3f04      	subs	r7, #4
 8008b98:	e7d0      	b.n	8008b3c <__hexnan+0xd4>
 8008b9a:	2004      	movs	r0, #4
 8008b9c:	e7d5      	b.n	8008b4a <__hexnan+0xe2>
	...

08008ba0 <malloc>:
 8008ba0:	4b02      	ldr	r3, [pc, #8]	@ (8008bac <malloc+0xc>)
 8008ba2:	4601      	mov	r1, r0
 8008ba4:	6818      	ldr	r0, [r3, #0]
 8008ba6:	f000 b825 	b.w	8008bf4 <_malloc_r>
 8008baa:	bf00      	nop
 8008bac:	200001a8 	.word	0x200001a8

08008bb0 <sbrk_aligned>:
 8008bb0:	b570      	push	{r4, r5, r6, lr}
 8008bb2:	4e0f      	ldr	r6, [pc, #60]	@ (8008bf0 <sbrk_aligned+0x40>)
 8008bb4:	460c      	mov	r4, r1
 8008bb6:	6831      	ldr	r1, [r6, #0]
 8008bb8:	4605      	mov	r5, r0
 8008bba:	b911      	cbnz	r1, 8008bc2 <sbrk_aligned+0x12>
 8008bbc:	f001 f964 	bl	8009e88 <_sbrk_r>
 8008bc0:	6030      	str	r0, [r6, #0]
 8008bc2:	4621      	mov	r1, r4
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	f001 f95f 	bl	8009e88 <_sbrk_r>
 8008bca:	1c43      	adds	r3, r0, #1
 8008bcc:	d103      	bne.n	8008bd6 <sbrk_aligned+0x26>
 8008bce:	f04f 34ff 	mov.w	r4, #4294967295
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	bd70      	pop	{r4, r5, r6, pc}
 8008bd6:	1cc4      	adds	r4, r0, #3
 8008bd8:	f024 0403 	bic.w	r4, r4, #3
 8008bdc:	42a0      	cmp	r0, r4
 8008bde:	d0f8      	beq.n	8008bd2 <sbrk_aligned+0x22>
 8008be0:	1a21      	subs	r1, r4, r0
 8008be2:	4628      	mov	r0, r5
 8008be4:	f001 f950 	bl	8009e88 <_sbrk_r>
 8008be8:	3001      	adds	r0, #1
 8008bea:	d1f2      	bne.n	8008bd2 <sbrk_aligned+0x22>
 8008bec:	e7ef      	b.n	8008bce <sbrk_aligned+0x1e>
 8008bee:	bf00      	nop
 8008bf0:	20001548 	.word	0x20001548

08008bf4 <_malloc_r>:
 8008bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf8:	1ccd      	adds	r5, r1, #3
 8008bfa:	f025 0503 	bic.w	r5, r5, #3
 8008bfe:	3508      	adds	r5, #8
 8008c00:	2d0c      	cmp	r5, #12
 8008c02:	bf38      	it	cc
 8008c04:	250c      	movcc	r5, #12
 8008c06:	2d00      	cmp	r5, #0
 8008c08:	4606      	mov	r6, r0
 8008c0a:	db01      	blt.n	8008c10 <_malloc_r+0x1c>
 8008c0c:	42a9      	cmp	r1, r5
 8008c0e:	d904      	bls.n	8008c1a <_malloc_r+0x26>
 8008c10:	230c      	movs	r3, #12
 8008c12:	6033      	str	r3, [r6, #0]
 8008c14:	2000      	movs	r0, #0
 8008c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cf0 <_malloc_r+0xfc>
 8008c1e:	f000 f87b 	bl	8008d18 <__malloc_lock>
 8008c22:	f8d8 3000 	ldr.w	r3, [r8]
 8008c26:	461c      	mov	r4, r3
 8008c28:	bb44      	cbnz	r4, 8008c7c <_malloc_r+0x88>
 8008c2a:	4629      	mov	r1, r5
 8008c2c:	4630      	mov	r0, r6
 8008c2e:	f7ff ffbf 	bl	8008bb0 <sbrk_aligned>
 8008c32:	1c43      	adds	r3, r0, #1
 8008c34:	4604      	mov	r4, r0
 8008c36:	d158      	bne.n	8008cea <_malloc_r+0xf6>
 8008c38:	f8d8 4000 	ldr.w	r4, [r8]
 8008c3c:	4627      	mov	r7, r4
 8008c3e:	2f00      	cmp	r7, #0
 8008c40:	d143      	bne.n	8008cca <_malloc_r+0xd6>
 8008c42:	2c00      	cmp	r4, #0
 8008c44:	d04b      	beq.n	8008cde <_malloc_r+0xea>
 8008c46:	6823      	ldr	r3, [r4, #0]
 8008c48:	4639      	mov	r1, r7
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	eb04 0903 	add.w	r9, r4, r3
 8008c50:	f001 f91a 	bl	8009e88 <_sbrk_r>
 8008c54:	4581      	cmp	r9, r0
 8008c56:	d142      	bne.n	8008cde <_malloc_r+0xea>
 8008c58:	6821      	ldr	r1, [r4, #0]
 8008c5a:	1a6d      	subs	r5, r5, r1
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	4630      	mov	r0, r6
 8008c60:	f7ff ffa6 	bl	8008bb0 <sbrk_aligned>
 8008c64:	3001      	adds	r0, #1
 8008c66:	d03a      	beq.n	8008cde <_malloc_r+0xea>
 8008c68:	6823      	ldr	r3, [r4, #0]
 8008c6a:	442b      	add	r3, r5
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	f8d8 3000 	ldr.w	r3, [r8]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	bb62      	cbnz	r2, 8008cd0 <_malloc_r+0xdc>
 8008c76:	f8c8 7000 	str.w	r7, [r8]
 8008c7a:	e00f      	b.n	8008c9c <_malloc_r+0xa8>
 8008c7c:	6822      	ldr	r2, [r4, #0]
 8008c7e:	1b52      	subs	r2, r2, r5
 8008c80:	d420      	bmi.n	8008cc4 <_malloc_r+0xd0>
 8008c82:	2a0b      	cmp	r2, #11
 8008c84:	d917      	bls.n	8008cb6 <_malloc_r+0xc2>
 8008c86:	1961      	adds	r1, r4, r5
 8008c88:	42a3      	cmp	r3, r4
 8008c8a:	6025      	str	r5, [r4, #0]
 8008c8c:	bf18      	it	ne
 8008c8e:	6059      	strne	r1, [r3, #4]
 8008c90:	6863      	ldr	r3, [r4, #4]
 8008c92:	bf08      	it	eq
 8008c94:	f8c8 1000 	streq.w	r1, [r8]
 8008c98:	5162      	str	r2, [r4, r5]
 8008c9a:	604b      	str	r3, [r1, #4]
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	f000 f841 	bl	8008d24 <__malloc_unlock>
 8008ca2:	f104 000b 	add.w	r0, r4, #11
 8008ca6:	1d23      	adds	r3, r4, #4
 8008ca8:	f020 0007 	bic.w	r0, r0, #7
 8008cac:	1ac2      	subs	r2, r0, r3
 8008cae:	bf1c      	itt	ne
 8008cb0:	1a1b      	subne	r3, r3, r0
 8008cb2:	50a3      	strne	r3, [r4, r2]
 8008cb4:	e7af      	b.n	8008c16 <_malloc_r+0x22>
 8008cb6:	6862      	ldr	r2, [r4, #4]
 8008cb8:	42a3      	cmp	r3, r4
 8008cba:	bf0c      	ite	eq
 8008cbc:	f8c8 2000 	streq.w	r2, [r8]
 8008cc0:	605a      	strne	r2, [r3, #4]
 8008cc2:	e7eb      	b.n	8008c9c <_malloc_r+0xa8>
 8008cc4:	4623      	mov	r3, r4
 8008cc6:	6864      	ldr	r4, [r4, #4]
 8008cc8:	e7ae      	b.n	8008c28 <_malloc_r+0x34>
 8008cca:	463c      	mov	r4, r7
 8008ccc:	687f      	ldr	r7, [r7, #4]
 8008cce:	e7b6      	b.n	8008c3e <_malloc_r+0x4a>
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	42a3      	cmp	r3, r4
 8008cd6:	d1fb      	bne.n	8008cd0 <_malloc_r+0xdc>
 8008cd8:	2300      	movs	r3, #0
 8008cda:	6053      	str	r3, [r2, #4]
 8008cdc:	e7de      	b.n	8008c9c <_malloc_r+0xa8>
 8008cde:	230c      	movs	r3, #12
 8008ce0:	6033      	str	r3, [r6, #0]
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f000 f81e 	bl	8008d24 <__malloc_unlock>
 8008ce8:	e794      	b.n	8008c14 <_malloc_r+0x20>
 8008cea:	6005      	str	r5, [r0, #0]
 8008cec:	e7d6      	b.n	8008c9c <_malloc_r+0xa8>
 8008cee:	bf00      	nop
 8008cf0:	2000154c 	.word	0x2000154c

08008cf4 <__ascii_mbtowc>:
 8008cf4:	b082      	sub	sp, #8
 8008cf6:	b901      	cbnz	r1, 8008cfa <__ascii_mbtowc+0x6>
 8008cf8:	a901      	add	r1, sp, #4
 8008cfa:	b142      	cbz	r2, 8008d0e <__ascii_mbtowc+0x1a>
 8008cfc:	b14b      	cbz	r3, 8008d12 <__ascii_mbtowc+0x1e>
 8008cfe:	7813      	ldrb	r3, [r2, #0]
 8008d00:	600b      	str	r3, [r1, #0]
 8008d02:	7812      	ldrb	r2, [r2, #0]
 8008d04:	1e10      	subs	r0, r2, #0
 8008d06:	bf18      	it	ne
 8008d08:	2001      	movne	r0, #1
 8008d0a:	b002      	add	sp, #8
 8008d0c:	4770      	bx	lr
 8008d0e:	4610      	mov	r0, r2
 8008d10:	e7fb      	b.n	8008d0a <__ascii_mbtowc+0x16>
 8008d12:	f06f 0001 	mvn.w	r0, #1
 8008d16:	e7f8      	b.n	8008d0a <__ascii_mbtowc+0x16>

08008d18 <__malloc_lock>:
 8008d18:	4801      	ldr	r0, [pc, #4]	@ (8008d20 <__malloc_lock+0x8>)
 8008d1a:	f7fe bd26 	b.w	800776a <__retarget_lock_acquire_recursive>
 8008d1e:	bf00      	nop
 8008d20:	20001544 	.word	0x20001544

08008d24 <__malloc_unlock>:
 8008d24:	4801      	ldr	r0, [pc, #4]	@ (8008d2c <__malloc_unlock+0x8>)
 8008d26:	f7fe bd21 	b.w	800776c <__retarget_lock_release_recursive>
 8008d2a:	bf00      	nop
 8008d2c:	20001544 	.word	0x20001544

08008d30 <_Balloc>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	69c6      	ldr	r6, [r0, #28]
 8008d34:	4604      	mov	r4, r0
 8008d36:	460d      	mov	r5, r1
 8008d38:	b976      	cbnz	r6, 8008d58 <_Balloc+0x28>
 8008d3a:	2010      	movs	r0, #16
 8008d3c:	f7ff ff30 	bl	8008ba0 <malloc>
 8008d40:	4602      	mov	r2, r0
 8008d42:	61e0      	str	r0, [r4, #28]
 8008d44:	b920      	cbnz	r0, 8008d50 <_Balloc+0x20>
 8008d46:	4b18      	ldr	r3, [pc, #96]	@ (8008da8 <_Balloc+0x78>)
 8008d48:	4818      	ldr	r0, [pc, #96]	@ (8008dac <_Balloc+0x7c>)
 8008d4a:	216b      	movs	r1, #107	@ 0x6b
 8008d4c:	f7fe fd2e 	bl	80077ac <__assert_func>
 8008d50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d54:	6006      	str	r6, [r0, #0]
 8008d56:	60c6      	str	r6, [r0, #12]
 8008d58:	69e6      	ldr	r6, [r4, #28]
 8008d5a:	68f3      	ldr	r3, [r6, #12]
 8008d5c:	b183      	cbz	r3, 8008d80 <_Balloc+0x50>
 8008d5e:	69e3      	ldr	r3, [r4, #28]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d66:	b9b8      	cbnz	r0, 8008d98 <_Balloc+0x68>
 8008d68:	2101      	movs	r1, #1
 8008d6a:	fa01 f605 	lsl.w	r6, r1, r5
 8008d6e:	1d72      	adds	r2, r6, #5
 8008d70:	0092      	lsls	r2, r2, #2
 8008d72:	4620      	mov	r0, r4
 8008d74:	f001 f89f 	bl	8009eb6 <_calloc_r>
 8008d78:	b160      	cbz	r0, 8008d94 <_Balloc+0x64>
 8008d7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d7e:	e00e      	b.n	8008d9e <_Balloc+0x6e>
 8008d80:	2221      	movs	r2, #33	@ 0x21
 8008d82:	2104      	movs	r1, #4
 8008d84:	4620      	mov	r0, r4
 8008d86:	f001 f896 	bl	8009eb6 <_calloc_r>
 8008d8a:	69e3      	ldr	r3, [r4, #28]
 8008d8c:	60f0      	str	r0, [r6, #12]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1e4      	bne.n	8008d5e <_Balloc+0x2e>
 8008d94:	2000      	movs	r0, #0
 8008d96:	bd70      	pop	{r4, r5, r6, pc}
 8008d98:	6802      	ldr	r2, [r0, #0]
 8008d9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d9e:	2300      	movs	r3, #0
 8008da0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008da4:	e7f7      	b.n	8008d96 <_Balloc+0x66>
 8008da6:	bf00      	nop
 8008da8:	0800a1ab 	.word	0x0800a1ab
 8008dac:	0800a336 	.word	0x0800a336

08008db0 <_Bfree>:
 8008db0:	b570      	push	{r4, r5, r6, lr}
 8008db2:	69c6      	ldr	r6, [r0, #28]
 8008db4:	4605      	mov	r5, r0
 8008db6:	460c      	mov	r4, r1
 8008db8:	b976      	cbnz	r6, 8008dd8 <_Bfree+0x28>
 8008dba:	2010      	movs	r0, #16
 8008dbc:	f7ff fef0 	bl	8008ba0 <malloc>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	61e8      	str	r0, [r5, #28]
 8008dc4:	b920      	cbnz	r0, 8008dd0 <_Bfree+0x20>
 8008dc6:	4b09      	ldr	r3, [pc, #36]	@ (8008dec <_Bfree+0x3c>)
 8008dc8:	4809      	ldr	r0, [pc, #36]	@ (8008df0 <_Bfree+0x40>)
 8008dca:	218f      	movs	r1, #143	@ 0x8f
 8008dcc:	f7fe fcee 	bl	80077ac <__assert_func>
 8008dd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dd4:	6006      	str	r6, [r0, #0]
 8008dd6:	60c6      	str	r6, [r0, #12]
 8008dd8:	b13c      	cbz	r4, 8008dea <_Bfree+0x3a>
 8008dda:	69eb      	ldr	r3, [r5, #28]
 8008ddc:	6862      	ldr	r2, [r4, #4]
 8008dde:	68db      	ldr	r3, [r3, #12]
 8008de0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008de4:	6021      	str	r1, [r4, #0]
 8008de6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dea:	bd70      	pop	{r4, r5, r6, pc}
 8008dec:	0800a1ab 	.word	0x0800a1ab
 8008df0:	0800a336 	.word	0x0800a336

08008df4 <__multadd>:
 8008df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008df8:	690d      	ldr	r5, [r1, #16]
 8008dfa:	4607      	mov	r7, r0
 8008dfc:	460c      	mov	r4, r1
 8008dfe:	461e      	mov	r6, r3
 8008e00:	f101 0c14 	add.w	ip, r1, #20
 8008e04:	2000      	movs	r0, #0
 8008e06:	f8dc 3000 	ldr.w	r3, [ip]
 8008e0a:	b299      	uxth	r1, r3
 8008e0c:	fb02 6101 	mla	r1, r2, r1, r6
 8008e10:	0c1e      	lsrs	r6, r3, #16
 8008e12:	0c0b      	lsrs	r3, r1, #16
 8008e14:	fb02 3306 	mla	r3, r2, r6, r3
 8008e18:	b289      	uxth	r1, r1
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e20:	4285      	cmp	r5, r0
 8008e22:	f84c 1b04 	str.w	r1, [ip], #4
 8008e26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e2a:	dcec      	bgt.n	8008e06 <__multadd+0x12>
 8008e2c:	b30e      	cbz	r6, 8008e72 <__multadd+0x7e>
 8008e2e:	68a3      	ldr	r3, [r4, #8]
 8008e30:	42ab      	cmp	r3, r5
 8008e32:	dc19      	bgt.n	8008e68 <__multadd+0x74>
 8008e34:	6861      	ldr	r1, [r4, #4]
 8008e36:	4638      	mov	r0, r7
 8008e38:	3101      	adds	r1, #1
 8008e3a:	f7ff ff79 	bl	8008d30 <_Balloc>
 8008e3e:	4680      	mov	r8, r0
 8008e40:	b928      	cbnz	r0, 8008e4e <__multadd+0x5a>
 8008e42:	4602      	mov	r2, r0
 8008e44:	4b0c      	ldr	r3, [pc, #48]	@ (8008e78 <__multadd+0x84>)
 8008e46:	480d      	ldr	r0, [pc, #52]	@ (8008e7c <__multadd+0x88>)
 8008e48:	21ba      	movs	r1, #186	@ 0xba
 8008e4a:	f7fe fcaf 	bl	80077ac <__assert_func>
 8008e4e:	6922      	ldr	r2, [r4, #16]
 8008e50:	3202      	adds	r2, #2
 8008e52:	f104 010c 	add.w	r1, r4, #12
 8008e56:	0092      	lsls	r2, r2, #2
 8008e58:	300c      	adds	r0, #12
 8008e5a:	f7fe fc88 	bl	800776e <memcpy>
 8008e5e:	4621      	mov	r1, r4
 8008e60:	4638      	mov	r0, r7
 8008e62:	f7ff ffa5 	bl	8008db0 <_Bfree>
 8008e66:	4644      	mov	r4, r8
 8008e68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e6c:	3501      	adds	r5, #1
 8008e6e:	615e      	str	r6, [r3, #20]
 8008e70:	6125      	str	r5, [r4, #16]
 8008e72:	4620      	mov	r0, r4
 8008e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e78:	0800a2c5 	.word	0x0800a2c5
 8008e7c:	0800a336 	.word	0x0800a336

08008e80 <__s2b>:
 8008e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e84:	460c      	mov	r4, r1
 8008e86:	4615      	mov	r5, r2
 8008e88:	461f      	mov	r7, r3
 8008e8a:	2209      	movs	r2, #9
 8008e8c:	3308      	adds	r3, #8
 8008e8e:	4606      	mov	r6, r0
 8008e90:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e94:	2100      	movs	r1, #0
 8008e96:	2201      	movs	r2, #1
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	db09      	blt.n	8008eb0 <__s2b+0x30>
 8008e9c:	4630      	mov	r0, r6
 8008e9e:	f7ff ff47 	bl	8008d30 <_Balloc>
 8008ea2:	b940      	cbnz	r0, 8008eb6 <__s2b+0x36>
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	4b19      	ldr	r3, [pc, #100]	@ (8008f0c <__s2b+0x8c>)
 8008ea8:	4819      	ldr	r0, [pc, #100]	@ (8008f10 <__s2b+0x90>)
 8008eaa:	21d3      	movs	r1, #211	@ 0xd3
 8008eac:	f7fe fc7e 	bl	80077ac <__assert_func>
 8008eb0:	0052      	lsls	r2, r2, #1
 8008eb2:	3101      	adds	r1, #1
 8008eb4:	e7f0      	b.n	8008e98 <__s2b+0x18>
 8008eb6:	9b08      	ldr	r3, [sp, #32]
 8008eb8:	6143      	str	r3, [r0, #20]
 8008eba:	2d09      	cmp	r5, #9
 8008ebc:	f04f 0301 	mov.w	r3, #1
 8008ec0:	6103      	str	r3, [r0, #16]
 8008ec2:	dd16      	ble.n	8008ef2 <__s2b+0x72>
 8008ec4:	f104 0909 	add.w	r9, r4, #9
 8008ec8:	46c8      	mov	r8, r9
 8008eca:	442c      	add	r4, r5
 8008ecc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ed0:	4601      	mov	r1, r0
 8008ed2:	3b30      	subs	r3, #48	@ 0x30
 8008ed4:	220a      	movs	r2, #10
 8008ed6:	4630      	mov	r0, r6
 8008ed8:	f7ff ff8c 	bl	8008df4 <__multadd>
 8008edc:	45a0      	cmp	r8, r4
 8008ede:	d1f5      	bne.n	8008ecc <__s2b+0x4c>
 8008ee0:	f1a5 0408 	sub.w	r4, r5, #8
 8008ee4:	444c      	add	r4, r9
 8008ee6:	1b2d      	subs	r5, r5, r4
 8008ee8:	1963      	adds	r3, r4, r5
 8008eea:	42bb      	cmp	r3, r7
 8008eec:	db04      	blt.n	8008ef8 <__s2b+0x78>
 8008eee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ef2:	340a      	adds	r4, #10
 8008ef4:	2509      	movs	r5, #9
 8008ef6:	e7f6      	b.n	8008ee6 <__s2b+0x66>
 8008ef8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008efc:	4601      	mov	r1, r0
 8008efe:	3b30      	subs	r3, #48	@ 0x30
 8008f00:	220a      	movs	r2, #10
 8008f02:	4630      	mov	r0, r6
 8008f04:	f7ff ff76 	bl	8008df4 <__multadd>
 8008f08:	e7ee      	b.n	8008ee8 <__s2b+0x68>
 8008f0a:	bf00      	nop
 8008f0c:	0800a2c5 	.word	0x0800a2c5
 8008f10:	0800a336 	.word	0x0800a336

08008f14 <__hi0bits>:
 8008f14:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008f18:	4603      	mov	r3, r0
 8008f1a:	bf36      	itet	cc
 8008f1c:	0403      	lslcc	r3, r0, #16
 8008f1e:	2000      	movcs	r0, #0
 8008f20:	2010      	movcc	r0, #16
 8008f22:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f26:	bf3c      	itt	cc
 8008f28:	021b      	lslcc	r3, r3, #8
 8008f2a:	3008      	addcc	r0, #8
 8008f2c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f30:	bf3c      	itt	cc
 8008f32:	011b      	lslcc	r3, r3, #4
 8008f34:	3004      	addcc	r0, #4
 8008f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f3a:	bf3c      	itt	cc
 8008f3c:	009b      	lslcc	r3, r3, #2
 8008f3e:	3002      	addcc	r0, #2
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	db05      	blt.n	8008f50 <__hi0bits+0x3c>
 8008f44:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008f48:	f100 0001 	add.w	r0, r0, #1
 8008f4c:	bf08      	it	eq
 8008f4e:	2020      	moveq	r0, #32
 8008f50:	4770      	bx	lr

08008f52 <__lo0bits>:
 8008f52:	6803      	ldr	r3, [r0, #0]
 8008f54:	4602      	mov	r2, r0
 8008f56:	f013 0007 	ands.w	r0, r3, #7
 8008f5a:	d00b      	beq.n	8008f74 <__lo0bits+0x22>
 8008f5c:	07d9      	lsls	r1, r3, #31
 8008f5e:	d421      	bmi.n	8008fa4 <__lo0bits+0x52>
 8008f60:	0798      	lsls	r0, r3, #30
 8008f62:	bf49      	itett	mi
 8008f64:	085b      	lsrmi	r3, r3, #1
 8008f66:	089b      	lsrpl	r3, r3, #2
 8008f68:	2001      	movmi	r0, #1
 8008f6a:	6013      	strmi	r3, [r2, #0]
 8008f6c:	bf5c      	itt	pl
 8008f6e:	6013      	strpl	r3, [r2, #0]
 8008f70:	2002      	movpl	r0, #2
 8008f72:	4770      	bx	lr
 8008f74:	b299      	uxth	r1, r3
 8008f76:	b909      	cbnz	r1, 8008f7c <__lo0bits+0x2a>
 8008f78:	0c1b      	lsrs	r3, r3, #16
 8008f7a:	2010      	movs	r0, #16
 8008f7c:	b2d9      	uxtb	r1, r3
 8008f7e:	b909      	cbnz	r1, 8008f84 <__lo0bits+0x32>
 8008f80:	3008      	adds	r0, #8
 8008f82:	0a1b      	lsrs	r3, r3, #8
 8008f84:	0719      	lsls	r1, r3, #28
 8008f86:	bf04      	itt	eq
 8008f88:	091b      	lsreq	r3, r3, #4
 8008f8a:	3004      	addeq	r0, #4
 8008f8c:	0799      	lsls	r1, r3, #30
 8008f8e:	bf04      	itt	eq
 8008f90:	089b      	lsreq	r3, r3, #2
 8008f92:	3002      	addeq	r0, #2
 8008f94:	07d9      	lsls	r1, r3, #31
 8008f96:	d403      	bmi.n	8008fa0 <__lo0bits+0x4e>
 8008f98:	085b      	lsrs	r3, r3, #1
 8008f9a:	f100 0001 	add.w	r0, r0, #1
 8008f9e:	d003      	beq.n	8008fa8 <__lo0bits+0x56>
 8008fa0:	6013      	str	r3, [r2, #0]
 8008fa2:	4770      	bx	lr
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	4770      	bx	lr
 8008fa8:	2020      	movs	r0, #32
 8008faa:	4770      	bx	lr

08008fac <__i2b>:
 8008fac:	b510      	push	{r4, lr}
 8008fae:	460c      	mov	r4, r1
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	f7ff febd 	bl	8008d30 <_Balloc>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	b928      	cbnz	r0, 8008fc6 <__i2b+0x1a>
 8008fba:	4b05      	ldr	r3, [pc, #20]	@ (8008fd0 <__i2b+0x24>)
 8008fbc:	4805      	ldr	r0, [pc, #20]	@ (8008fd4 <__i2b+0x28>)
 8008fbe:	f240 1145 	movw	r1, #325	@ 0x145
 8008fc2:	f7fe fbf3 	bl	80077ac <__assert_func>
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	6144      	str	r4, [r0, #20]
 8008fca:	6103      	str	r3, [r0, #16]
 8008fcc:	bd10      	pop	{r4, pc}
 8008fce:	bf00      	nop
 8008fd0:	0800a2c5 	.word	0x0800a2c5
 8008fd4:	0800a336 	.word	0x0800a336

08008fd8 <__multiply>:
 8008fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	4617      	mov	r7, r2
 8008fde:	690a      	ldr	r2, [r1, #16]
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	bfa8      	it	ge
 8008fe6:	463b      	movge	r3, r7
 8008fe8:	4689      	mov	r9, r1
 8008fea:	bfa4      	itt	ge
 8008fec:	460f      	movge	r7, r1
 8008fee:	4699      	movge	r9, r3
 8008ff0:	693d      	ldr	r5, [r7, #16]
 8008ff2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	6879      	ldr	r1, [r7, #4]
 8008ffa:	eb05 060a 	add.w	r6, r5, sl
 8008ffe:	42b3      	cmp	r3, r6
 8009000:	b085      	sub	sp, #20
 8009002:	bfb8      	it	lt
 8009004:	3101      	addlt	r1, #1
 8009006:	f7ff fe93 	bl	8008d30 <_Balloc>
 800900a:	b930      	cbnz	r0, 800901a <__multiply+0x42>
 800900c:	4602      	mov	r2, r0
 800900e:	4b41      	ldr	r3, [pc, #260]	@ (8009114 <__multiply+0x13c>)
 8009010:	4841      	ldr	r0, [pc, #260]	@ (8009118 <__multiply+0x140>)
 8009012:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009016:	f7fe fbc9 	bl	80077ac <__assert_func>
 800901a:	f100 0414 	add.w	r4, r0, #20
 800901e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8009022:	4623      	mov	r3, r4
 8009024:	2200      	movs	r2, #0
 8009026:	4573      	cmp	r3, lr
 8009028:	d320      	bcc.n	800906c <__multiply+0x94>
 800902a:	f107 0814 	add.w	r8, r7, #20
 800902e:	f109 0114 	add.w	r1, r9, #20
 8009032:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009036:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800903a:	9302      	str	r3, [sp, #8]
 800903c:	1beb      	subs	r3, r5, r7
 800903e:	3b15      	subs	r3, #21
 8009040:	f023 0303 	bic.w	r3, r3, #3
 8009044:	3304      	adds	r3, #4
 8009046:	3715      	adds	r7, #21
 8009048:	42bd      	cmp	r5, r7
 800904a:	bf38      	it	cc
 800904c:	2304      	movcc	r3, #4
 800904e:	9301      	str	r3, [sp, #4]
 8009050:	9b02      	ldr	r3, [sp, #8]
 8009052:	9103      	str	r1, [sp, #12]
 8009054:	428b      	cmp	r3, r1
 8009056:	d80c      	bhi.n	8009072 <__multiply+0x9a>
 8009058:	2e00      	cmp	r6, #0
 800905a:	dd03      	ble.n	8009064 <__multiply+0x8c>
 800905c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009060:	2b00      	cmp	r3, #0
 8009062:	d055      	beq.n	8009110 <__multiply+0x138>
 8009064:	6106      	str	r6, [r0, #16]
 8009066:	b005      	add	sp, #20
 8009068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800906c:	f843 2b04 	str.w	r2, [r3], #4
 8009070:	e7d9      	b.n	8009026 <__multiply+0x4e>
 8009072:	f8b1 a000 	ldrh.w	sl, [r1]
 8009076:	f1ba 0f00 	cmp.w	sl, #0
 800907a:	d01f      	beq.n	80090bc <__multiply+0xe4>
 800907c:	46c4      	mov	ip, r8
 800907e:	46a1      	mov	r9, r4
 8009080:	2700      	movs	r7, #0
 8009082:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009086:	f8d9 3000 	ldr.w	r3, [r9]
 800908a:	fa1f fb82 	uxth.w	fp, r2
 800908e:	b29b      	uxth	r3, r3
 8009090:	fb0a 330b 	mla	r3, sl, fp, r3
 8009094:	443b      	add	r3, r7
 8009096:	f8d9 7000 	ldr.w	r7, [r9]
 800909a:	0c12      	lsrs	r2, r2, #16
 800909c:	0c3f      	lsrs	r7, r7, #16
 800909e:	fb0a 7202 	mla	r2, sl, r2, r7
 80090a2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090ac:	4565      	cmp	r5, ip
 80090ae:	f849 3b04 	str.w	r3, [r9], #4
 80090b2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80090b6:	d8e4      	bhi.n	8009082 <__multiply+0xaa>
 80090b8:	9b01      	ldr	r3, [sp, #4]
 80090ba:	50e7      	str	r7, [r4, r3]
 80090bc:	9b03      	ldr	r3, [sp, #12]
 80090be:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80090c2:	3104      	adds	r1, #4
 80090c4:	f1b9 0f00 	cmp.w	r9, #0
 80090c8:	d020      	beq.n	800910c <__multiply+0x134>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	4647      	mov	r7, r8
 80090ce:	46a4      	mov	ip, r4
 80090d0:	f04f 0a00 	mov.w	sl, #0
 80090d4:	f8b7 b000 	ldrh.w	fp, [r7]
 80090d8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80090dc:	fb09 220b 	mla	r2, r9, fp, r2
 80090e0:	4452      	add	r2, sl
 80090e2:	b29b      	uxth	r3, r3
 80090e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090e8:	f84c 3b04 	str.w	r3, [ip], #4
 80090ec:	f857 3b04 	ldr.w	r3, [r7], #4
 80090f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090f4:	f8bc 3000 	ldrh.w	r3, [ip]
 80090f8:	fb09 330a 	mla	r3, r9, sl, r3
 80090fc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009100:	42bd      	cmp	r5, r7
 8009102:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009106:	d8e5      	bhi.n	80090d4 <__multiply+0xfc>
 8009108:	9a01      	ldr	r2, [sp, #4]
 800910a:	50a3      	str	r3, [r4, r2]
 800910c:	3404      	adds	r4, #4
 800910e:	e79f      	b.n	8009050 <__multiply+0x78>
 8009110:	3e01      	subs	r6, #1
 8009112:	e7a1      	b.n	8009058 <__multiply+0x80>
 8009114:	0800a2c5 	.word	0x0800a2c5
 8009118:	0800a336 	.word	0x0800a336

0800911c <__pow5mult>:
 800911c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009120:	4615      	mov	r5, r2
 8009122:	f012 0203 	ands.w	r2, r2, #3
 8009126:	4607      	mov	r7, r0
 8009128:	460e      	mov	r6, r1
 800912a:	d007      	beq.n	800913c <__pow5mult+0x20>
 800912c:	4c25      	ldr	r4, [pc, #148]	@ (80091c4 <__pow5mult+0xa8>)
 800912e:	3a01      	subs	r2, #1
 8009130:	2300      	movs	r3, #0
 8009132:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009136:	f7ff fe5d 	bl	8008df4 <__multadd>
 800913a:	4606      	mov	r6, r0
 800913c:	10ad      	asrs	r5, r5, #2
 800913e:	d03d      	beq.n	80091bc <__pow5mult+0xa0>
 8009140:	69fc      	ldr	r4, [r7, #28]
 8009142:	b97c      	cbnz	r4, 8009164 <__pow5mult+0x48>
 8009144:	2010      	movs	r0, #16
 8009146:	f7ff fd2b 	bl	8008ba0 <malloc>
 800914a:	4602      	mov	r2, r0
 800914c:	61f8      	str	r0, [r7, #28]
 800914e:	b928      	cbnz	r0, 800915c <__pow5mult+0x40>
 8009150:	4b1d      	ldr	r3, [pc, #116]	@ (80091c8 <__pow5mult+0xac>)
 8009152:	481e      	ldr	r0, [pc, #120]	@ (80091cc <__pow5mult+0xb0>)
 8009154:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009158:	f7fe fb28 	bl	80077ac <__assert_func>
 800915c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009160:	6004      	str	r4, [r0, #0]
 8009162:	60c4      	str	r4, [r0, #12]
 8009164:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009168:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800916c:	b94c      	cbnz	r4, 8009182 <__pow5mult+0x66>
 800916e:	f240 2171 	movw	r1, #625	@ 0x271
 8009172:	4638      	mov	r0, r7
 8009174:	f7ff ff1a 	bl	8008fac <__i2b>
 8009178:	2300      	movs	r3, #0
 800917a:	f8c8 0008 	str.w	r0, [r8, #8]
 800917e:	4604      	mov	r4, r0
 8009180:	6003      	str	r3, [r0, #0]
 8009182:	f04f 0900 	mov.w	r9, #0
 8009186:	07eb      	lsls	r3, r5, #31
 8009188:	d50a      	bpl.n	80091a0 <__pow5mult+0x84>
 800918a:	4631      	mov	r1, r6
 800918c:	4622      	mov	r2, r4
 800918e:	4638      	mov	r0, r7
 8009190:	f7ff ff22 	bl	8008fd8 <__multiply>
 8009194:	4631      	mov	r1, r6
 8009196:	4680      	mov	r8, r0
 8009198:	4638      	mov	r0, r7
 800919a:	f7ff fe09 	bl	8008db0 <_Bfree>
 800919e:	4646      	mov	r6, r8
 80091a0:	106d      	asrs	r5, r5, #1
 80091a2:	d00b      	beq.n	80091bc <__pow5mult+0xa0>
 80091a4:	6820      	ldr	r0, [r4, #0]
 80091a6:	b938      	cbnz	r0, 80091b8 <__pow5mult+0x9c>
 80091a8:	4622      	mov	r2, r4
 80091aa:	4621      	mov	r1, r4
 80091ac:	4638      	mov	r0, r7
 80091ae:	f7ff ff13 	bl	8008fd8 <__multiply>
 80091b2:	6020      	str	r0, [r4, #0]
 80091b4:	f8c0 9000 	str.w	r9, [r0]
 80091b8:	4604      	mov	r4, r0
 80091ba:	e7e4      	b.n	8009186 <__pow5mult+0x6a>
 80091bc:	4630      	mov	r0, r6
 80091be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091c2:	bf00      	nop
 80091c4:	0800a4f4 	.word	0x0800a4f4
 80091c8:	0800a1ab 	.word	0x0800a1ab
 80091cc:	0800a336 	.word	0x0800a336

080091d0 <__lshift>:
 80091d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d4:	460c      	mov	r4, r1
 80091d6:	6849      	ldr	r1, [r1, #4]
 80091d8:	6923      	ldr	r3, [r4, #16]
 80091da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091de:	68a3      	ldr	r3, [r4, #8]
 80091e0:	4607      	mov	r7, r0
 80091e2:	4691      	mov	r9, r2
 80091e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091e8:	f108 0601 	add.w	r6, r8, #1
 80091ec:	42b3      	cmp	r3, r6
 80091ee:	db0b      	blt.n	8009208 <__lshift+0x38>
 80091f0:	4638      	mov	r0, r7
 80091f2:	f7ff fd9d 	bl	8008d30 <_Balloc>
 80091f6:	4605      	mov	r5, r0
 80091f8:	b948      	cbnz	r0, 800920e <__lshift+0x3e>
 80091fa:	4602      	mov	r2, r0
 80091fc:	4b28      	ldr	r3, [pc, #160]	@ (80092a0 <__lshift+0xd0>)
 80091fe:	4829      	ldr	r0, [pc, #164]	@ (80092a4 <__lshift+0xd4>)
 8009200:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009204:	f7fe fad2 	bl	80077ac <__assert_func>
 8009208:	3101      	adds	r1, #1
 800920a:	005b      	lsls	r3, r3, #1
 800920c:	e7ee      	b.n	80091ec <__lshift+0x1c>
 800920e:	2300      	movs	r3, #0
 8009210:	f100 0114 	add.w	r1, r0, #20
 8009214:	f100 0210 	add.w	r2, r0, #16
 8009218:	4618      	mov	r0, r3
 800921a:	4553      	cmp	r3, sl
 800921c:	db33      	blt.n	8009286 <__lshift+0xb6>
 800921e:	6920      	ldr	r0, [r4, #16]
 8009220:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009224:	f104 0314 	add.w	r3, r4, #20
 8009228:	f019 091f 	ands.w	r9, r9, #31
 800922c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009230:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009234:	d02b      	beq.n	800928e <__lshift+0xbe>
 8009236:	f1c9 0e20 	rsb	lr, r9, #32
 800923a:	468a      	mov	sl, r1
 800923c:	2200      	movs	r2, #0
 800923e:	6818      	ldr	r0, [r3, #0]
 8009240:	fa00 f009 	lsl.w	r0, r0, r9
 8009244:	4310      	orrs	r0, r2
 8009246:	f84a 0b04 	str.w	r0, [sl], #4
 800924a:	f853 2b04 	ldr.w	r2, [r3], #4
 800924e:	459c      	cmp	ip, r3
 8009250:	fa22 f20e 	lsr.w	r2, r2, lr
 8009254:	d8f3      	bhi.n	800923e <__lshift+0x6e>
 8009256:	ebac 0304 	sub.w	r3, ip, r4
 800925a:	3b15      	subs	r3, #21
 800925c:	f023 0303 	bic.w	r3, r3, #3
 8009260:	3304      	adds	r3, #4
 8009262:	f104 0015 	add.w	r0, r4, #21
 8009266:	4560      	cmp	r0, ip
 8009268:	bf88      	it	hi
 800926a:	2304      	movhi	r3, #4
 800926c:	50ca      	str	r2, [r1, r3]
 800926e:	b10a      	cbz	r2, 8009274 <__lshift+0xa4>
 8009270:	f108 0602 	add.w	r6, r8, #2
 8009274:	3e01      	subs	r6, #1
 8009276:	4638      	mov	r0, r7
 8009278:	612e      	str	r6, [r5, #16]
 800927a:	4621      	mov	r1, r4
 800927c:	f7ff fd98 	bl	8008db0 <_Bfree>
 8009280:	4628      	mov	r0, r5
 8009282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009286:	f842 0f04 	str.w	r0, [r2, #4]!
 800928a:	3301      	adds	r3, #1
 800928c:	e7c5      	b.n	800921a <__lshift+0x4a>
 800928e:	3904      	subs	r1, #4
 8009290:	f853 2b04 	ldr.w	r2, [r3], #4
 8009294:	f841 2f04 	str.w	r2, [r1, #4]!
 8009298:	459c      	cmp	ip, r3
 800929a:	d8f9      	bhi.n	8009290 <__lshift+0xc0>
 800929c:	e7ea      	b.n	8009274 <__lshift+0xa4>
 800929e:	bf00      	nop
 80092a0:	0800a2c5 	.word	0x0800a2c5
 80092a4:	0800a336 	.word	0x0800a336

080092a8 <__mcmp>:
 80092a8:	690a      	ldr	r2, [r1, #16]
 80092aa:	4603      	mov	r3, r0
 80092ac:	6900      	ldr	r0, [r0, #16]
 80092ae:	1a80      	subs	r0, r0, r2
 80092b0:	b530      	push	{r4, r5, lr}
 80092b2:	d10e      	bne.n	80092d2 <__mcmp+0x2a>
 80092b4:	3314      	adds	r3, #20
 80092b6:	3114      	adds	r1, #20
 80092b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80092bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80092c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80092c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80092c8:	4295      	cmp	r5, r2
 80092ca:	d003      	beq.n	80092d4 <__mcmp+0x2c>
 80092cc:	d205      	bcs.n	80092da <__mcmp+0x32>
 80092ce:	f04f 30ff 	mov.w	r0, #4294967295
 80092d2:	bd30      	pop	{r4, r5, pc}
 80092d4:	42a3      	cmp	r3, r4
 80092d6:	d3f3      	bcc.n	80092c0 <__mcmp+0x18>
 80092d8:	e7fb      	b.n	80092d2 <__mcmp+0x2a>
 80092da:	2001      	movs	r0, #1
 80092dc:	e7f9      	b.n	80092d2 <__mcmp+0x2a>
	...

080092e0 <__mdiff>:
 80092e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e4:	4689      	mov	r9, r1
 80092e6:	4606      	mov	r6, r0
 80092e8:	4611      	mov	r1, r2
 80092ea:	4648      	mov	r0, r9
 80092ec:	4614      	mov	r4, r2
 80092ee:	f7ff ffdb 	bl	80092a8 <__mcmp>
 80092f2:	1e05      	subs	r5, r0, #0
 80092f4:	d112      	bne.n	800931c <__mdiff+0x3c>
 80092f6:	4629      	mov	r1, r5
 80092f8:	4630      	mov	r0, r6
 80092fa:	f7ff fd19 	bl	8008d30 <_Balloc>
 80092fe:	4602      	mov	r2, r0
 8009300:	b928      	cbnz	r0, 800930e <__mdiff+0x2e>
 8009302:	4b3f      	ldr	r3, [pc, #252]	@ (8009400 <__mdiff+0x120>)
 8009304:	f240 2137 	movw	r1, #567	@ 0x237
 8009308:	483e      	ldr	r0, [pc, #248]	@ (8009404 <__mdiff+0x124>)
 800930a:	f7fe fa4f 	bl	80077ac <__assert_func>
 800930e:	2301      	movs	r3, #1
 8009310:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009314:	4610      	mov	r0, r2
 8009316:	b003      	add	sp, #12
 8009318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800931c:	bfbc      	itt	lt
 800931e:	464b      	movlt	r3, r9
 8009320:	46a1      	movlt	r9, r4
 8009322:	4630      	mov	r0, r6
 8009324:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009328:	bfba      	itte	lt
 800932a:	461c      	movlt	r4, r3
 800932c:	2501      	movlt	r5, #1
 800932e:	2500      	movge	r5, #0
 8009330:	f7ff fcfe 	bl	8008d30 <_Balloc>
 8009334:	4602      	mov	r2, r0
 8009336:	b918      	cbnz	r0, 8009340 <__mdiff+0x60>
 8009338:	4b31      	ldr	r3, [pc, #196]	@ (8009400 <__mdiff+0x120>)
 800933a:	f240 2145 	movw	r1, #581	@ 0x245
 800933e:	e7e3      	b.n	8009308 <__mdiff+0x28>
 8009340:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009344:	6926      	ldr	r6, [r4, #16]
 8009346:	60c5      	str	r5, [r0, #12]
 8009348:	f109 0310 	add.w	r3, r9, #16
 800934c:	f109 0514 	add.w	r5, r9, #20
 8009350:	f104 0e14 	add.w	lr, r4, #20
 8009354:	f100 0b14 	add.w	fp, r0, #20
 8009358:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800935c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009360:	9301      	str	r3, [sp, #4]
 8009362:	46d9      	mov	r9, fp
 8009364:	f04f 0c00 	mov.w	ip, #0
 8009368:	9b01      	ldr	r3, [sp, #4]
 800936a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800936e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009372:	9301      	str	r3, [sp, #4]
 8009374:	fa1f f38a 	uxth.w	r3, sl
 8009378:	4619      	mov	r1, r3
 800937a:	b283      	uxth	r3, r0
 800937c:	1acb      	subs	r3, r1, r3
 800937e:	0c00      	lsrs	r0, r0, #16
 8009380:	4463      	add	r3, ip
 8009382:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009386:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800938a:	b29b      	uxth	r3, r3
 800938c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009390:	4576      	cmp	r6, lr
 8009392:	f849 3b04 	str.w	r3, [r9], #4
 8009396:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800939a:	d8e5      	bhi.n	8009368 <__mdiff+0x88>
 800939c:	1b33      	subs	r3, r6, r4
 800939e:	3b15      	subs	r3, #21
 80093a0:	f023 0303 	bic.w	r3, r3, #3
 80093a4:	3415      	adds	r4, #21
 80093a6:	3304      	adds	r3, #4
 80093a8:	42a6      	cmp	r6, r4
 80093aa:	bf38      	it	cc
 80093ac:	2304      	movcc	r3, #4
 80093ae:	441d      	add	r5, r3
 80093b0:	445b      	add	r3, fp
 80093b2:	461e      	mov	r6, r3
 80093b4:	462c      	mov	r4, r5
 80093b6:	4544      	cmp	r4, r8
 80093b8:	d30e      	bcc.n	80093d8 <__mdiff+0xf8>
 80093ba:	f108 0103 	add.w	r1, r8, #3
 80093be:	1b49      	subs	r1, r1, r5
 80093c0:	f021 0103 	bic.w	r1, r1, #3
 80093c4:	3d03      	subs	r5, #3
 80093c6:	45a8      	cmp	r8, r5
 80093c8:	bf38      	it	cc
 80093ca:	2100      	movcc	r1, #0
 80093cc:	440b      	add	r3, r1
 80093ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093d2:	b191      	cbz	r1, 80093fa <__mdiff+0x11a>
 80093d4:	6117      	str	r7, [r2, #16]
 80093d6:	e79d      	b.n	8009314 <__mdiff+0x34>
 80093d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80093dc:	46e6      	mov	lr, ip
 80093de:	0c08      	lsrs	r0, r1, #16
 80093e0:	fa1c fc81 	uxtah	ip, ip, r1
 80093e4:	4471      	add	r1, lr
 80093e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80093ea:	b289      	uxth	r1, r1
 80093ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80093f0:	f846 1b04 	str.w	r1, [r6], #4
 80093f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80093f8:	e7dd      	b.n	80093b6 <__mdiff+0xd6>
 80093fa:	3f01      	subs	r7, #1
 80093fc:	e7e7      	b.n	80093ce <__mdiff+0xee>
 80093fe:	bf00      	nop
 8009400:	0800a2c5 	.word	0x0800a2c5
 8009404:	0800a336 	.word	0x0800a336

08009408 <__ulp>:
 8009408:	b082      	sub	sp, #8
 800940a:	ed8d 0b00 	vstr	d0, [sp]
 800940e:	9a01      	ldr	r2, [sp, #4]
 8009410:	4b0f      	ldr	r3, [pc, #60]	@ (8009450 <__ulp+0x48>)
 8009412:	4013      	ands	r3, r2
 8009414:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009418:	2b00      	cmp	r3, #0
 800941a:	dc08      	bgt.n	800942e <__ulp+0x26>
 800941c:	425b      	negs	r3, r3
 800941e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009422:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009426:	da04      	bge.n	8009432 <__ulp+0x2a>
 8009428:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800942c:	4113      	asrs	r3, r2
 800942e:	2200      	movs	r2, #0
 8009430:	e008      	b.n	8009444 <__ulp+0x3c>
 8009432:	f1a2 0314 	sub.w	r3, r2, #20
 8009436:	2b1e      	cmp	r3, #30
 8009438:	bfda      	itte	le
 800943a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800943e:	40da      	lsrle	r2, r3
 8009440:	2201      	movgt	r2, #1
 8009442:	2300      	movs	r3, #0
 8009444:	4619      	mov	r1, r3
 8009446:	4610      	mov	r0, r2
 8009448:	ec41 0b10 	vmov	d0, r0, r1
 800944c:	b002      	add	sp, #8
 800944e:	4770      	bx	lr
 8009450:	7ff00000 	.word	0x7ff00000

08009454 <__b2d>:
 8009454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009458:	6906      	ldr	r6, [r0, #16]
 800945a:	f100 0814 	add.w	r8, r0, #20
 800945e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009462:	1f37      	subs	r7, r6, #4
 8009464:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009468:	4610      	mov	r0, r2
 800946a:	f7ff fd53 	bl	8008f14 <__hi0bits>
 800946e:	f1c0 0320 	rsb	r3, r0, #32
 8009472:	280a      	cmp	r0, #10
 8009474:	600b      	str	r3, [r1, #0]
 8009476:	491b      	ldr	r1, [pc, #108]	@ (80094e4 <__b2d+0x90>)
 8009478:	dc15      	bgt.n	80094a6 <__b2d+0x52>
 800947a:	f1c0 0c0b 	rsb	ip, r0, #11
 800947e:	fa22 f30c 	lsr.w	r3, r2, ip
 8009482:	45b8      	cmp	r8, r7
 8009484:	ea43 0501 	orr.w	r5, r3, r1
 8009488:	bf34      	ite	cc
 800948a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800948e:	2300      	movcs	r3, #0
 8009490:	3015      	adds	r0, #21
 8009492:	fa02 f000 	lsl.w	r0, r2, r0
 8009496:	fa23 f30c 	lsr.w	r3, r3, ip
 800949a:	4303      	orrs	r3, r0
 800949c:	461c      	mov	r4, r3
 800949e:	ec45 4b10 	vmov	d0, r4, r5
 80094a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094a6:	45b8      	cmp	r8, r7
 80094a8:	bf3a      	itte	cc
 80094aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80094ae:	f1a6 0708 	subcc.w	r7, r6, #8
 80094b2:	2300      	movcs	r3, #0
 80094b4:	380b      	subs	r0, #11
 80094b6:	d012      	beq.n	80094de <__b2d+0x8a>
 80094b8:	f1c0 0120 	rsb	r1, r0, #32
 80094bc:	fa23 f401 	lsr.w	r4, r3, r1
 80094c0:	4082      	lsls	r2, r0
 80094c2:	4322      	orrs	r2, r4
 80094c4:	4547      	cmp	r7, r8
 80094c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80094ca:	bf8c      	ite	hi
 80094cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80094d0:	2200      	movls	r2, #0
 80094d2:	4083      	lsls	r3, r0
 80094d4:	40ca      	lsrs	r2, r1
 80094d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80094da:	4313      	orrs	r3, r2
 80094dc:	e7de      	b.n	800949c <__b2d+0x48>
 80094de:	ea42 0501 	orr.w	r5, r2, r1
 80094e2:	e7db      	b.n	800949c <__b2d+0x48>
 80094e4:	3ff00000 	.word	0x3ff00000

080094e8 <__d2b>:
 80094e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094ec:	460f      	mov	r7, r1
 80094ee:	2101      	movs	r1, #1
 80094f0:	ec59 8b10 	vmov	r8, r9, d0
 80094f4:	4616      	mov	r6, r2
 80094f6:	f7ff fc1b 	bl	8008d30 <_Balloc>
 80094fa:	4604      	mov	r4, r0
 80094fc:	b930      	cbnz	r0, 800950c <__d2b+0x24>
 80094fe:	4602      	mov	r2, r0
 8009500:	4b23      	ldr	r3, [pc, #140]	@ (8009590 <__d2b+0xa8>)
 8009502:	4824      	ldr	r0, [pc, #144]	@ (8009594 <__d2b+0xac>)
 8009504:	f240 310f 	movw	r1, #783	@ 0x30f
 8009508:	f7fe f950 	bl	80077ac <__assert_func>
 800950c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009510:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009514:	b10d      	cbz	r5, 800951a <__d2b+0x32>
 8009516:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800951a:	9301      	str	r3, [sp, #4]
 800951c:	f1b8 0300 	subs.w	r3, r8, #0
 8009520:	d023      	beq.n	800956a <__d2b+0x82>
 8009522:	4668      	mov	r0, sp
 8009524:	9300      	str	r3, [sp, #0]
 8009526:	f7ff fd14 	bl	8008f52 <__lo0bits>
 800952a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800952e:	b1d0      	cbz	r0, 8009566 <__d2b+0x7e>
 8009530:	f1c0 0320 	rsb	r3, r0, #32
 8009534:	fa02 f303 	lsl.w	r3, r2, r3
 8009538:	430b      	orrs	r3, r1
 800953a:	40c2      	lsrs	r2, r0
 800953c:	6163      	str	r3, [r4, #20]
 800953e:	9201      	str	r2, [sp, #4]
 8009540:	9b01      	ldr	r3, [sp, #4]
 8009542:	61a3      	str	r3, [r4, #24]
 8009544:	2b00      	cmp	r3, #0
 8009546:	bf0c      	ite	eq
 8009548:	2201      	moveq	r2, #1
 800954a:	2202      	movne	r2, #2
 800954c:	6122      	str	r2, [r4, #16]
 800954e:	b1a5      	cbz	r5, 800957a <__d2b+0x92>
 8009550:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009554:	4405      	add	r5, r0
 8009556:	603d      	str	r5, [r7, #0]
 8009558:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800955c:	6030      	str	r0, [r6, #0]
 800955e:	4620      	mov	r0, r4
 8009560:	b003      	add	sp, #12
 8009562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009566:	6161      	str	r1, [r4, #20]
 8009568:	e7ea      	b.n	8009540 <__d2b+0x58>
 800956a:	a801      	add	r0, sp, #4
 800956c:	f7ff fcf1 	bl	8008f52 <__lo0bits>
 8009570:	9b01      	ldr	r3, [sp, #4]
 8009572:	6163      	str	r3, [r4, #20]
 8009574:	3020      	adds	r0, #32
 8009576:	2201      	movs	r2, #1
 8009578:	e7e8      	b.n	800954c <__d2b+0x64>
 800957a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800957e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009582:	6038      	str	r0, [r7, #0]
 8009584:	6918      	ldr	r0, [r3, #16]
 8009586:	f7ff fcc5 	bl	8008f14 <__hi0bits>
 800958a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800958e:	e7e5      	b.n	800955c <__d2b+0x74>
 8009590:	0800a2c5 	.word	0x0800a2c5
 8009594:	0800a336 	.word	0x0800a336

08009598 <__ratio>:
 8009598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	b085      	sub	sp, #20
 800959e:	e9cd 1000 	strd	r1, r0, [sp]
 80095a2:	a902      	add	r1, sp, #8
 80095a4:	f7ff ff56 	bl	8009454 <__b2d>
 80095a8:	9800      	ldr	r0, [sp, #0]
 80095aa:	a903      	add	r1, sp, #12
 80095ac:	ec55 4b10 	vmov	r4, r5, d0
 80095b0:	f7ff ff50 	bl	8009454 <__b2d>
 80095b4:	9b01      	ldr	r3, [sp, #4]
 80095b6:	6919      	ldr	r1, [r3, #16]
 80095b8:	9b00      	ldr	r3, [sp, #0]
 80095ba:	691b      	ldr	r3, [r3, #16]
 80095bc:	1ac9      	subs	r1, r1, r3
 80095be:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80095c2:	1a9b      	subs	r3, r3, r2
 80095c4:	ec5b ab10 	vmov	sl, fp, d0
 80095c8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	bfce      	itee	gt
 80095d0:	462a      	movgt	r2, r5
 80095d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80095d6:	465a      	movle	r2, fp
 80095d8:	462f      	mov	r7, r5
 80095da:	46d9      	mov	r9, fp
 80095dc:	bfcc      	ite	gt
 80095de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80095e2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80095e6:	464b      	mov	r3, r9
 80095e8:	4652      	mov	r2, sl
 80095ea:	4620      	mov	r0, r4
 80095ec:	4639      	mov	r1, r7
 80095ee:	f7f7 f93d 	bl	800086c <__aeabi_ddiv>
 80095f2:	ec41 0b10 	vmov	d0, r0, r1
 80095f6:	b005      	add	sp, #20
 80095f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095fc <__copybits>:
 80095fc:	3901      	subs	r1, #1
 80095fe:	b570      	push	{r4, r5, r6, lr}
 8009600:	1149      	asrs	r1, r1, #5
 8009602:	6914      	ldr	r4, [r2, #16]
 8009604:	3101      	adds	r1, #1
 8009606:	f102 0314 	add.w	r3, r2, #20
 800960a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800960e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009612:	1f05      	subs	r5, r0, #4
 8009614:	42a3      	cmp	r3, r4
 8009616:	d30c      	bcc.n	8009632 <__copybits+0x36>
 8009618:	1aa3      	subs	r3, r4, r2
 800961a:	3b11      	subs	r3, #17
 800961c:	f023 0303 	bic.w	r3, r3, #3
 8009620:	3211      	adds	r2, #17
 8009622:	42a2      	cmp	r2, r4
 8009624:	bf88      	it	hi
 8009626:	2300      	movhi	r3, #0
 8009628:	4418      	add	r0, r3
 800962a:	2300      	movs	r3, #0
 800962c:	4288      	cmp	r0, r1
 800962e:	d305      	bcc.n	800963c <__copybits+0x40>
 8009630:	bd70      	pop	{r4, r5, r6, pc}
 8009632:	f853 6b04 	ldr.w	r6, [r3], #4
 8009636:	f845 6f04 	str.w	r6, [r5, #4]!
 800963a:	e7eb      	b.n	8009614 <__copybits+0x18>
 800963c:	f840 3b04 	str.w	r3, [r0], #4
 8009640:	e7f4      	b.n	800962c <__copybits+0x30>

08009642 <__any_on>:
 8009642:	f100 0214 	add.w	r2, r0, #20
 8009646:	6900      	ldr	r0, [r0, #16]
 8009648:	114b      	asrs	r3, r1, #5
 800964a:	4298      	cmp	r0, r3
 800964c:	b510      	push	{r4, lr}
 800964e:	db11      	blt.n	8009674 <__any_on+0x32>
 8009650:	dd0a      	ble.n	8009668 <__any_on+0x26>
 8009652:	f011 011f 	ands.w	r1, r1, #31
 8009656:	d007      	beq.n	8009668 <__any_on+0x26>
 8009658:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800965c:	fa24 f001 	lsr.w	r0, r4, r1
 8009660:	fa00 f101 	lsl.w	r1, r0, r1
 8009664:	428c      	cmp	r4, r1
 8009666:	d10b      	bne.n	8009680 <__any_on+0x3e>
 8009668:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800966c:	4293      	cmp	r3, r2
 800966e:	d803      	bhi.n	8009678 <__any_on+0x36>
 8009670:	2000      	movs	r0, #0
 8009672:	bd10      	pop	{r4, pc}
 8009674:	4603      	mov	r3, r0
 8009676:	e7f7      	b.n	8009668 <__any_on+0x26>
 8009678:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800967c:	2900      	cmp	r1, #0
 800967e:	d0f5      	beq.n	800966c <__any_on+0x2a>
 8009680:	2001      	movs	r0, #1
 8009682:	e7f6      	b.n	8009672 <__any_on+0x30>

08009684 <__ascii_wctomb>:
 8009684:	4603      	mov	r3, r0
 8009686:	4608      	mov	r0, r1
 8009688:	b141      	cbz	r1, 800969c <__ascii_wctomb+0x18>
 800968a:	2aff      	cmp	r2, #255	@ 0xff
 800968c:	d904      	bls.n	8009698 <__ascii_wctomb+0x14>
 800968e:	228a      	movs	r2, #138	@ 0x8a
 8009690:	601a      	str	r2, [r3, #0]
 8009692:	f04f 30ff 	mov.w	r0, #4294967295
 8009696:	4770      	bx	lr
 8009698:	700a      	strb	r2, [r1, #0]
 800969a:	2001      	movs	r0, #1
 800969c:	4770      	bx	lr

0800969e <__ssputs_r>:
 800969e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096a2:	688e      	ldr	r6, [r1, #8]
 80096a4:	461f      	mov	r7, r3
 80096a6:	42be      	cmp	r6, r7
 80096a8:	680b      	ldr	r3, [r1, #0]
 80096aa:	4682      	mov	sl, r0
 80096ac:	460c      	mov	r4, r1
 80096ae:	4690      	mov	r8, r2
 80096b0:	d82d      	bhi.n	800970e <__ssputs_r+0x70>
 80096b2:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096b6:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80096ba:	d026      	beq.n	800970a <__ssputs_r+0x6c>
 80096bc:	6965      	ldr	r5, [r4, #20]
 80096be:	6909      	ldr	r1, [r1, #16]
 80096c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096c4:	eba3 0901 	sub.w	r9, r3, r1
 80096c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096cc:	1c7b      	adds	r3, r7, #1
 80096ce:	444b      	add	r3, r9
 80096d0:	106d      	asrs	r5, r5, #1
 80096d2:	429d      	cmp	r5, r3
 80096d4:	bf38      	it	cc
 80096d6:	461d      	movcc	r5, r3
 80096d8:	0553      	lsls	r3, r2, #21
 80096da:	d527      	bpl.n	800972c <__ssputs_r+0x8e>
 80096dc:	4629      	mov	r1, r5
 80096de:	f7ff fa89 	bl	8008bf4 <_malloc_r>
 80096e2:	4606      	mov	r6, r0
 80096e4:	b360      	cbz	r0, 8009740 <__ssputs_r+0xa2>
 80096e6:	6921      	ldr	r1, [r4, #16]
 80096e8:	464a      	mov	r2, r9
 80096ea:	f7fe f840 	bl	800776e <memcpy>
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80096f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80096f8:	81a3      	strh	r3, [r4, #12]
 80096fa:	6126      	str	r6, [r4, #16]
 80096fc:	6165      	str	r5, [r4, #20]
 80096fe:	444e      	add	r6, r9
 8009700:	eba5 0509 	sub.w	r5, r5, r9
 8009704:	6026      	str	r6, [r4, #0]
 8009706:	60a5      	str	r5, [r4, #8]
 8009708:	463e      	mov	r6, r7
 800970a:	42be      	cmp	r6, r7
 800970c:	d900      	bls.n	8009710 <__ssputs_r+0x72>
 800970e:	463e      	mov	r6, r7
 8009710:	6820      	ldr	r0, [r4, #0]
 8009712:	4632      	mov	r2, r6
 8009714:	4641      	mov	r1, r8
 8009716:	f000 fb7b 	bl	8009e10 <memmove>
 800971a:	68a3      	ldr	r3, [r4, #8]
 800971c:	1b9b      	subs	r3, r3, r6
 800971e:	60a3      	str	r3, [r4, #8]
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	4433      	add	r3, r6
 8009724:	6023      	str	r3, [r4, #0]
 8009726:	2000      	movs	r0, #0
 8009728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800972c:	462a      	mov	r2, r5
 800972e:	f000 fbd6 	bl	8009ede <_realloc_r>
 8009732:	4606      	mov	r6, r0
 8009734:	2800      	cmp	r0, #0
 8009736:	d1e0      	bne.n	80096fa <__ssputs_r+0x5c>
 8009738:	6921      	ldr	r1, [r4, #16]
 800973a:	4650      	mov	r0, sl
 800973c:	f7fe feac 	bl	8008498 <_free_r>
 8009740:	230c      	movs	r3, #12
 8009742:	f8ca 3000 	str.w	r3, [sl]
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800974c:	81a3      	strh	r3, [r4, #12]
 800974e:	f04f 30ff 	mov.w	r0, #4294967295
 8009752:	e7e9      	b.n	8009728 <__ssputs_r+0x8a>

08009754 <_svfiprintf_r>:
 8009754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009758:	4698      	mov	r8, r3
 800975a:	898b      	ldrh	r3, [r1, #12]
 800975c:	061b      	lsls	r3, r3, #24
 800975e:	b09d      	sub	sp, #116	@ 0x74
 8009760:	4607      	mov	r7, r0
 8009762:	460d      	mov	r5, r1
 8009764:	4614      	mov	r4, r2
 8009766:	d510      	bpl.n	800978a <_svfiprintf_r+0x36>
 8009768:	690b      	ldr	r3, [r1, #16]
 800976a:	b973      	cbnz	r3, 800978a <_svfiprintf_r+0x36>
 800976c:	2140      	movs	r1, #64	@ 0x40
 800976e:	f7ff fa41 	bl	8008bf4 <_malloc_r>
 8009772:	6028      	str	r0, [r5, #0]
 8009774:	6128      	str	r0, [r5, #16]
 8009776:	b930      	cbnz	r0, 8009786 <_svfiprintf_r+0x32>
 8009778:	230c      	movs	r3, #12
 800977a:	603b      	str	r3, [r7, #0]
 800977c:	f04f 30ff 	mov.w	r0, #4294967295
 8009780:	b01d      	add	sp, #116	@ 0x74
 8009782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009786:	2340      	movs	r3, #64	@ 0x40
 8009788:	616b      	str	r3, [r5, #20]
 800978a:	2300      	movs	r3, #0
 800978c:	9309      	str	r3, [sp, #36]	@ 0x24
 800978e:	2320      	movs	r3, #32
 8009790:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009794:	f8cd 800c 	str.w	r8, [sp, #12]
 8009798:	2330      	movs	r3, #48	@ 0x30
 800979a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009938 <_svfiprintf_r+0x1e4>
 800979e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097a2:	f04f 0901 	mov.w	r9, #1
 80097a6:	4623      	mov	r3, r4
 80097a8:	469a      	mov	sl, r3
 80097aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097ae:	b10a      	cbz	r2, 80097b4 <_svfiprintf_r+0x60>
 80097b0:	2a25      	cmp	r2, #37	@ 0x25
 80097b2:	d1f9      	bne.n	80097a8 <_svfiprintf_r+0x54>
 80097b4:	ebba 0b04 	subs.w	fp, sl, r4
 80097b8:	d00b      	beq.n	80097d2 <_svfiprintf_r+0x7e>
 80097ba:	465b      	mov	r3, fp
 80097bc:	4622      	mov	r2, r4
 80097be:	4629      	mov	r1, r5
 80097c0:	4638      	mov	r0, r7
 80097c2:	f7ff ff6c 	bl	800969e <__ssputs_r>
 80097c6:	3001      	adds	r0, #1
 80097c8:	f000 80a7 	beq.w	800991a <_svfiprintf_r+0x1c6>
 80097cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097ce:	445a      	add	r2, fp
 80097d0:	9209      	str	r2, [sp, #36]	@ 0x24
 80097d2:	f89a 3000 	ldrb.w	r3, [sl]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	f000 809f 	beq.w	800991a <_svfiprintf_r+0x1c6>
 80097dc:	2300      	movs	r3, #0
 80097de:	f04f 32ff 	mov.w	r2, #4294967295
 80097e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80097e6:	f10a 0a01 	add.w	sl, sl, #1
 80097ea:	9304      	str	r3, [sp, #16]
 80097ec:	9307      	str	r3, [sp, #28]
 80097ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80097f2:	931a      	str	r3, [sp, #104]	@ 0x68
 80097f4:	4654      	mov	r4, sl
 80097f6:	2205      	movs	r2, #5
 80097f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097fc:	484e      	ldr	r0, [pc, #312]	@ (8009938 <_svfiprintf_r+0x1e4>)
 80097fe:	f7f6 fcf7 	bl	80001f0 <memchr>
 8009802:	9a04      	ldr	r2, [sp, #16]
 8009804:	b9d8      	cbnz	r0, 800983e <_svfiprintf_r+0xea>
 8009806:	06d0      	lsls	r0, r2, #27
 8009808:	bf44      	itt	mi
 800980a:	2320      	movmi	r3, #32
 800980c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009810:	0711      	lsls	r1, r2, #28
 8009812:	bf44      	itt	mi
 8009814:	232b      	movmi	r3, #43	@ 0x2b
 8009816:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800981a:	f89a 3000 	ldrb.w	r3, [sl]
 800981e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009820:	d015      	beq.n	800984e <_svfiprintf_r+0xfa>
 8009822:	9a07      	ldr	r2, [sp, #28]
 8009824:	4654      	mov	r4, sl
 8009826:	2000      	movs	r0, #0
 8009828:	f04f 0c0a 	mov.w	ip, #10
 800982c:	4621      	mov	r1, r4
 800982e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009832:	3b30      	subs	r3, #48	@ 0x30
 8009834:	2b09      	cmp	r3, #9
 8009836:	d94b      	bls.n	80098d0 <_svfiprintf_r+0x17c>
 8009838:	b1b0      	cbz	r0, 8009868 <_svfiprintf_r+0x114>
 800983a:	9207      	str	r2, [sp, #28]
 800983c:	e014      	b.n	8009868 <_svfiprintf_r+0x114>
 800983e:	eba0 0308 	sub.w	r3, r0, r8
 8009842:	fa09 f303 	lsl.w	r3, r9, r3
 8009846:	4313      	orrs	r3, r2
 8009848:	9304      	str	r3, [sp, #16]
 800984a:	46a2      	mov	sl, r4
 800984c:	e7d2      	b.n	80097f4 <_svfiprintf_r+0xa0>
 800984e:	9b03      	ldr	r3, [sp, #12]
 8009850:	1d19      	adds	r1, r3, #4
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	9103      	str	r1, [sp, #12]
 8009856:	2b00      	cmp	r3, #0
 8009858:	bfbb      	ittet	lt
 800985a:	425b      	neglt	r3, r3
 800985c:	f042 0202 	orrlt.w	r2, r2, #2
 8009860:	9307      	strge	r3, [sp, #28]
 8009862:	9307      	strlt	r3, [sp, #28]
 8009864:	bfb8      	it	lt
 8009866:	9204      	strlt	r2, [sp, #16]
 8009868:	7823      	ldrb	r3, [r4, #0]
 800986a:	2b2e      	cmp	r3, #46	@ 0x2e
 800986c:	d10a      	bne.n	8009884 <_svfiprintf_r+0x130>
 800986e:	7863      	ldrb	r3, [r4, #1]
 8009870:	2b2a      	cmp	r3, #42	@ 0x2a
 8009872:	d132      	bne.n	80098da <_svfiprintf_r+0x186>
 8009874:	9b03      	ldr	r3, [sp, #12]
 8009876:	1d1a      	adds	r2, r3, #4
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	9203      	str	r2, [sp, #12]
 800987c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009880:	3402      	adds	r4, #2
 8009882:	9305      	str	r3, [sp, #20]
 8009884:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009948 <_svfiprintf_r+0x1f4>
 8009888:	7821      	ldrb	r1, [r4, #0]
 800988a:	2203      	movs	r2, #3
 800988c:	4650      	mov	r0, sl
 800988e:	f7f6 fcaf 	bl	80001f0 <memchr>
 8009892:	b138      	cbz	r0, 80098a4 <_svfiprintf_r+0x150>
 8009894:	9b04      	ldr	r3, [sp, #16]
 8009896:	eba0 000a 	sub.w	r0, r0, sl
 800989a:	2240      	movs	r2, #64	@ 0x40
 800989c:	4082      	lsls	r2, r0
 800989e:	4313      	orrs	r3, r2
 80098a0:	3401      	adds	r4, #1
 80098a2:	9304      	str	r3, [sp, #16]
 80098a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a8:	4824      	ldr	r0, [pc, #144]	@ (800993c <_svfiprintf_r+0x1e8>)
 80098aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098ae:	2206      	movs	r2, #6
 80098b0:	f7f6 fc9e 	bl	80001f0 <memchr>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d036      	beq.n	8009926 <_svfiprintf_r+0x1d2>
 80098b8:	4b21      	ldr	r3, [pc, #132]	@ (8009940 <_svfiprintf_r+0x1ec>)
 80098ba:	bb1b      	cbnz	r3, 8009904 <_svfiprintf_r+0x1b0>
 80098bc:	9b03      	ldr	r3, [sp, #12]
 80098be:	3307      	adds	r3, #7
 80098c0:	f023 0307 	bic.w	r3, r3, #7
 80098c4:	3308      	adds	r3, #8
 80098c6:	9303      	str	r3, [sp, #12]
 80098c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098ca:	4433      	add	r3, r6
 80098cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80098ce:	e76a      	b.n	80097a6 <_svfiprintf_r+0x52>
 80098d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80098d4:	460c      	mov	r4, r1
 80098d6:	2001      	movs	r0, #1
 80098d8:	e7a8      	b.n	800982c <_svfiprintf_r+0xd8>
 80098da:	2300      	movs	r3, #0
 80098dc:	3401      	adds	r4, #1
 80098de:	9305      	str	r3, [sp, #20]
 80098e0:	4619      	mov	r1, r3
 80098e2:	f04f 0c0a 	mov.w	ip, #10
 80098e6:	4620      	mov	r0, r4
 80098e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80098ec:	3a30      	subs	r2, #48	@ 0x30
 80098ee:	2a09      	cmp	r2, #9
 80098f0:	d903      	bls.n	80098fa <_svfiprintf_r+0x1a6>
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d0c6      	beq.n	8009884 <_svfiprintf_r+0x130>
 80098f6:	9105      	str	r1, [sp, #20]
 80098f8:	e7c4      	b.n	8009884 <_svfiprintf_r+0x130>
 80098fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80098fe:	4604      	mov	r4, r0
 8009900:	2301      	movs	r3, #1
 8009902:	e7f0      	b.n	80098e6 <_svfiprintf_r+0x192>
 8009904:	ab03      	add	r3, sp, #12
 8009906:	9300      	str	r3, [sp, #0]
 8009908:	462a      	mov	r2, r5
 800990a:	4b0e      	ldr	r3, [pc, #56]	@ (8009944 <_svfiprintf_r+0x1f0>)
 800990c:	a904      	add	r1, sp, #16
 800990e:	4638      	mov	r0, r7
 8009910:	f7fc fe06 	bl	8006520 <_printf_float>
 8009914:	1c42      	adds	r2, r0, #1
 8009916:	4606      	mov	r6, r0
 8009918:	d1d6      	bne.n	80098c8 <_svfiprintf_r+0x174>
 800991a:	89ab      	ldrh	r3, [r5, #12]
 800991c:	065b      	lsls	r3, r3, #25
 800991e:	f53f af2d 	bmi.w	800977c <_svfiprintf_r+0x28>
 8009922:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009924:	e72c      	b.n	8009780 <_svfiprintf_r+0x2c>
 8009926:	ab03      	add	r3, sp, #12
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	462a      	mov	r2, r5
 800992c:	4b05      	ldr	r3, [pc, #20]	@ (8009944 <_svfiprintf_r+0x1f0>)
 800992e:	a904      	add	r1, sp, #16
 8009930:	4638      	mov	r0, r7
 8009932:	f7fd f88d 	bl	8006a50 <_printf_i>
 8009936:	e7ed      	b.n	8009914 <_svfiprintf_r+0x1c0>
 8009938:	0800a38f 	.word	0x0800a38f
 800993c:	0800a399 	.word	0x0800a399
 8009940:	08006521 	.word	0x08006521
 8009944:	0800969f 	.word	0x0800969f
 8009948:	0800a395 	.word	0x0800a395

0800994c <__sfputc_r>:
 800994c:	6893      	ldr	r3, [r2, #8]
 800994e:	3b01      	subs	r3, #1
 8009950:	2b00      	cmp	r3, #0
 8009952:	b410      	push	{r4}
 8009954:	6093      	str	r3, [r2, #8]
 8009956:	da08      	bge.n	800996a <__sfputc_r+0x1e>
 8009958:	6994      	ldr	r4, [r2, #24]
 800995a:	42a3      	cmp	r3, r4
 800995c:	db01      	blt.n	8009962 <__sfputc_r+0x16>
 800995e:	290a      	cmp	r1, #10
 8009960:	d103      	bne.n	800996a <__sfputc_r+0x1e>
 8009962:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009966:	f7fd bd6c 	b.w	8007442 <__swbuf_r>
 800996a:	6813      	ldr	r3, [r2, #0]
 800996c:	1c58      	adds	r0, r3, #1
 800996e:	6010      	str	r0, [r2, #0]
 8009970:	7019      	strb	r1, [r3, #0]
 8009972:	4608      	mov	r0, r1
 8009974:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009978:	4770      	bx	lr

0800997a <__sfputs_r>:
 800997a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800997c:	4606      	mov	r6, r0
 800997e:	460f      	mov	r7, r1
 8009980:	4614      	mov	r4, r2
 8009982:	18d5      	adds	r5, r2, r3
 8009984:	42ac      	cmp	r4, r5
 8009986:	d101      	bne.n	800998c <__sfputs_r+0x12>
 8009988:	2000      	movs	r0, #0
 800998a:	e007      	b.n	800999c <__sfputs_r+0x22>
 800998c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009990:	463a      	mov	r2, r7
 8009992:	4630      	mov	r0, r6
 8009994:	f7ff ffda 	bl	800994c <__sfputc_r>
 8009998:	1c43      	adds	r3, r0, #1
 800999a:	d1f3      	bne.n	8009984 <__sfputs_r+0xa>
 800999c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080099a0 <_vfiprintf_r>:
 80099a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099a4:	460d      	mov	r5, r1
 80099a6:	b09d      	sub	sp, #116	@ 0x74
 80099a8:	4614      	mov	r4, r2
 80099aa:	4698      	mov	r8, r3
 80099ac:	4606      	mov	r6, r0
 80099ae:	b118      	cbz	r0, 80099b8 <_vfiprintf_r+0x18>
 80099b0:	6a03      	ldr	r3, [r0, #32]
 80099b2:	b90b      	cbnz	r3, 80099b8 <_vfiprintf_r+0x18>
 80099b4:	f7fd fc04 	bl	80071c0 <__sinit>
 80099b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099ba:	07d9      	lsls	r1, r3, #31
 80099bc:	d405      	bmi.n	80099ca <_vfiprintf_r+0x2a>
 80099be:	89ab      	ldrh	r3, [r5, #12]
 80099c0:	059a      	lsls	r2, r3, #22
 80099c2:	d402      	bmi.n	80099ca <_vfiprintf_r+0x2a>
 80099c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099c6:	f7fd fed0 	bl	800776a <__retarget_lock_acquire_recursive>
 80099ca:	89ab      	ldrh	r3, [r5, #12]
 80099cc:	071b      	lsls	r3, r3, #28
 80099ce:	d501      	bpl.n	80099d4 <_vfiprintf_r+0x34>
 80099d0:	692b      	ldr	r3, [r5, #16]
 80099d2:	b99b      	cbnz	r3, 80099fc <_vfiprintf_r+0x5c>
 80099d4:	4629      	mov	r1, r5
 80099d6:	4630      	mov	r0, r6
 80099d8:	f7fd fd72 	bl	80074c0 <__swsetup_r>
 80099dc:	b170      	cbz	r0, 80099fc <_vfiprintf_r+0x5c>
 80099de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099e0:	07dc      	lsls	r4, r3, #31
 80099e2:	d504      	bpl.n	80099ee <_vfiprintf_r+0x4e>
 80099e4:	f04f 30ff 	mov.w	r0, #4294967295
 80099e8:	b01d      	add	sp, #116	@ 0x74
 80099ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ee:	89ab      	ldrh	r3, [r5, #12]
 80099f0:	0598      	lsls	r0, r3, #22
 80099f2:	d4f7      	bmi.n	80099e4 <_vfiprintf_r+0x44>
 80099f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099f6:	f7fd feb9 	bl	800776c <__retarget_lock_release_recursive>
 80099fa:	e7f3      	b.n	80099e4 <_vfiprintf_r+0x44>
 80099fc:	2300      	movs	r3, #0
 80099fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a00:	2320      	movs	r3, #32
 8009a02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a06:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a0a:	2330      	movs	r3, #48	@ 0x30
 8009a0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009bbc <_vfiprintf_r+0x21c>
 8009a10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a14:	f04f 0901 	mov.w	r9, #1
 8009a18:	4623      	mov	r3, r4
 8009a1a:	469a      	mov	sl, r3
 8009a1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a20:	b10a      	cbz	r2, 8009a26 <_vfiprintf_r+0x86>
 8009a22:	2a25      	cmp	r2, #37	@ 0x25
 8009a24:	d1f9      	bne.n	8009a1a <_vfiprintf_r+0x7a>
 8009a26:	ebba 0b04 	subs.w	fp, sl, r4
 8009a2a:	d00b      	beq.n	8009a44 <_vfiprintf_r+0xa4>
 8009a2c:	465b      	mov	r3, fp
 8009a2e:	4622      	mov	r2, r4
 8009a30:	4629      	mov	r1, r5
 8009a32:	4630      	mov	r0, r6
 8009a34:	f7ff ffa1 	bl	800997a <__sfputs_r>
 8009a38:	3001      	adds	r0, #1
 8009a3a:	f000 80a7 	beq.w	8009b8c <_vfiprintf_r+0x1ec>
 8009a3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a40:	445a      	add	r2, fp
 8009a42:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a44:	f89a 3000 	ldrb.w	r3, [sl]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 809f 	beq.w	8009b8c <_vfiprintf_r+0x1ec>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	f04f 32ff 	mov.w	r2, #4294967295
 8009a54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a58:	f10a 0a01 	add.w	sl, sl, #1
 8009a5c:	9304      	str	r3, [sp, #16]
 8009a5e:	9307      	str	r3, [sp, #28]
 8009a60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a64:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a66:	4654      	mov	r4, sl
 8009a68:	2205      	movs	r2, #5
 8009a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a6e:	4853      	ldr	r0, [pc, #332]	@ (8009bbc <_vfiprintf_r+0x21c>)
 8009a70:	f7f6 fbbe 	bl	80001f0 <memchr>
 8009a74:	9a04      	ldr	r2, [sp, #16]
 8009a76:	b9d8      	cbnz	r0, 8009ab0 <_vfiprintf_r+0x110>
 8009a78:	06d1      	lsls	r1, r2, #27
 8009a7a:	bf44      	itt	mi
 8009a7c:	2320      	movmi	r3, #32
 8009a7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a82:	0713      	lsls	r3, r2, #28
 8009a84:	bf44      	itt	mi
 8009a86:	232b      	movmi	r3, #43	@ 0x2b
 8009a88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a8c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a92:	d015      	beq.n	8009ac0 <_vfiprintf_r+0x120>
 8009a94:	9a07      	ldr	r2, [sp, #28]
 8009a96:	4654      	mov	r4, sl
 8009a98:	2000      	movs	r0, #0
 8009a9a:	f04f 0c0a 	mov.w	ip, #10
 8009a9e:	4621      	mov	r1, r4
 8009aa0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009aa4:	3b30      	subs	r3, #48	@ 0x30
 8009aa6:	2b09      	cmp	r3, #9
 8009aa8:	d94b      	bls.n	8009b42 <_vfiprintf_r+0x1a2>
 8009aaa:	b1b0      	cbz	r0, 8009ada <_vfiprintf_r+0x13a>
 8009aac:	9207      	str	r2, [sp, #28]
 8009aae:	e014      	b.n	8009ada <_vfiprintf_r+0x13a>
 8009ab0:	eba0 0308 	sub.w	r3, r0, r8
 8009ab4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	9304      	str	r3, [sp, #16]
 8009abc:	46a2      	mov	sl, r4
 8009abe:	e7d2      	b.n	8009a66 <_vfiprintf_r+0xc6>
 8009ac0:	9b03      	ldr	r3, [sp, #12]
 8009ac2:	1d19      	adds	r1, r3, #4
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	9103      	str	r1, [sp, #12]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	bfbb      	ittet	lt
 8009acc:	425b      	neglt	r3, r3
 8009ace:	f042 0202 	orrlt.w	r2, r2, #2
 8009ad2:	9307      	strge	r3, [sp, #28]
 8009ad4:	9307      	strlt	r3, [sp, #28]
 8009ad6:	bfb8      	it	lt
 8009ad8:	9204      	strlt	r2, [sp, #16]
 8009ada:	7823      	ldrb	r3, [r4, #0]
 8009adc:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ade:	d10a      	bne.n	8009af6 <_vfiprintf_r+0x156>
 8009ae0:	7863      	ldrb	r3, [r4, #1]
 8009ae2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ae4:	d132      	bne.n	8009b4c <_vfiprintf_r+0x1ac>
 8009ae6:	9b03      	ldr	r3, [sp, #12]
 8009ae8:	1d1a      	adds	r2, r3, #4
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	9203      	str	r2, [sp, #12]
 8009aee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009af2:	3402      	adds	r4, #2
 8009af4:	9305      	str	r3, [sp, #20]
 8009af6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009bcc <_vfiprintf_r+0x22c>
 8009afa:	7821      	ldrb	r1, [r4, #0]
 8009afc:	2203      	movs	r2, #3
 8009afe:	4650      	mov	r0, sl
 8009b00:	f7f6 fb76 	bl	80001f0 <memchr>
 8009b04:	b138      	cbz	r0, 8009b16 <_vfiprintf_r+0x176>
 8009b06:	9b04      	ldr	r3, [sp, #16]
 8009b08:	eba0 000a 	sub.w	r0, r0, sl
 8009b0c:	2240      	movs	r2, #64	@ 0x40
 8009b0e:	4082      	lsls	r2, r0
 8009b10:	4313      	orrs	r3, r2
 8009b12:	3401      	adds	r4, #1
 8009b14:	9304      	str	r3, [sp, #16]
 8009b16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b1a:	4829      	ldr	r0, [pc, #164]	@ (8009bc0 <_vfiprintf_r+0x220>)
 8009b1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b20:	2206      	movs	r2, #6
 8009b22:	f7f6 fb65 	bl	80001f0 <memchr>
 8009b26:	2800      	cmp	r0, #0
 8009b28:	d03f      	beq.n	8009baa <_vfiprintf_r+0x20a>
 8009b2a:	4b26      	ldr	r3, [pc, #152]	@ (8009bc4 <_vfiprintf_r+0x224>)
 8009b2c:	bb1b      	cbnz	r3, 8009b76 <_vfiprintf_r+0x1d6>
 8009b2e:	9b03      	ldr	r3, [sp, #12]
 8009b30:	3307      	adds	r3, #7
 8009b32:	f023 0307 	bic.w	r3, r3, #7
 8009b36:	3308      	adds	r3, #8
 8009b38:	9303      	str	r3, [sp, #12]
 8009b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b3c:	443b      	add	r3, r7
 8009b3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b40:	e76a      	b.n	8009a18 <_vfiprintf_r+0x78>
 8009b42:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b46:	460c      	mov	r4, r1
 8009b48:	2001      	movs	r0, #1
 8009b4a:	e7a8      	b.n	8009a9e <_vfiprintf_r+0xfe>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	3401      	adds	r4, #1
 8009b50:	9305      	str	r3, [sp, #20]
 8009b52:	4619      	mov	r1, r3
 8009b54:	f04f 0c0a 	mov.w	ip, #10
 8009b58:	4620      	mov	r0, r4
 8009b5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b5e:	3a30      	subs	r2, #48	@ 0x30
 8009b60:	2a09      	cmp	r2, #9
 8009b62:	d903      	bls.n	8009b6c <_vfiprintf_r+0x1cc>
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d0c6      	beq.n	8009af6 <_vfiprintf_r+0x156>
 8009b68:	9105      	str	r1, [sp, #20]
 8009b6a:	e7c4      	b.n	8009af6 <_vfiprintf_r+0x156>
 8009b6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b70:	4604      	mov	r4, r0
 8009b72:	2301      	movs	r3, #1
 8009b74:	e7f0      	b.n	8009b58 <_vfiprintf_r+0x1b8>
 8009b76:	ab03      	add	r3, sp, #12
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	462a      	mov	r2, r5
 8009b7c:	4b12      	ldr	r3, [pc, #72]	@ (8009bc8 <_vfiprintf_r+0x228>)
 8009b7e:	a904      	add	r1, sp, #16
 8009b80:	4630      	mov	r0, r6
 8009b82:	f7fc fccd 	bl	8006520 <_printf_float>
 8009b86:	4607      	mov	r7, r0
 8009b88:	1c78      	adds	r0, r7, #1
 8009b8a:	d1d6      	bne.n	8009b3a <_vfiprintf_r+0x19a>
 8009b8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b8e:	07d9      	lsls	r1, r3, #31
 8009b90:	d405      	bmi.n	8009b9e <_vfiprintf_r+0x1fe>
 8009b92:	89ab      	ldrh	r3, [r5, #12]
 8009b94:	059a      	lsls	r2, r3, #22
 8009b96:	d402      	bmi.n	8009b9e <_vfiprintf_r+0x1fe>
 8009b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b9a:	f7fd fde7 	bl	800776c <__retarget_lock_release_recursive>
 8009b9e:	89ab      	ldrh	r3, [r5, #12]
 8009ba0:	065b      	lsls	r3, r3, #25
 8009ba2:	f53f af1f 	bmi.w	80099e4 <_vfiprintf_r+0x44>
 8009ba6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ba8:	e71e      	b.n	80099e8 <_vfiprintf_r+0x48>
 8009baa:	ab03      	add	r3, sp, #12
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	462a      	mov	r2, r5
 8009bb0:	4b05      	ldr	r3, [pc, #20]	@ (8009bc8 <_vfiprintf_r+0x228>)
 8009bb2:	a904      	add	r1, sp, #16
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	f7fc ff4b 	bl	8006a50 <_printf_i>
 8009bba:	e7e4      	b.n	8009b86 <_vfiprintf_r+0x1e6>
 8009bbc:	0800a38f 	.word	0x0800a38f
 8009bc0:	0800a399 	.word	0x0800a399
 8009bc4:	08006521 	.word	0x08006521
 8009bc8:	0800997b 	.word	0x0800997b
 8009bcc:	0800a395 	.word	0x0800a395

08009bd0 <__sflush_r>:
 8009bd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009bd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bd8:	0716      	lsls	r6, r2, #28
 8009bda:	4605      	mov	r5, r0
 8009bdc:	460c      	mov	r4, r1
 8009bde:	d454      	bmi.n	8009c8a <__sflush_r+0xba>
 8009be0:	684b      	ldr	r3, [r1, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	dc02      	bgt.n	8009bec <__sflush_r+0x1c>
 8009be6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	dd48      	ble.n	8009c7e <__sflush_r+0xae>
 8009bec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bee:	2e00      	cmp	r6, #0
 8009bf0:	d045      	beq.n	8009c7e <__sflush_r+0xae>
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009bf8:	682f      	ldr	r7, [r5, #0]
 8009bfa:	6a21      	ldr	r1, [r4, #32]
 8009bfc:	602b      	str	r3, [r5, #0]
 8009bfe:	d030      	beq.n	8009c62 <__sflush_r+0x92>
 8009c00:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c02:	89a3      	ldrh	r3, [r4, #12]
 8009c04:	0759      	lsls	r1, r3, #29
 8009c06:	d505      	bpl.n	8009c14 <__sflush_r+0x44>
 8009c08:	6863      	ldr	r3, [r4, #4]
 8009c0a:	1ad2      	subs	r2, r2, r3
 8009c0c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c0e:	b10b      	cbz	r3, 8009c14 <__sflush_r+0x44>
 8009c10:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c12:	1ad2      	subs	r2, r2, r3
 8009c14:	2300      	movs	r3, #0
 8009c16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c18:	6a21      	ldr	r1, [r4, #32]
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	47b0      	blx	r6
 8009c1e:	1c43      	adds	r3, r0, #1
 8009c20:	89a3      	ldrh	r3, [r4, #12]
 8009c22:	d106      	bne.n	8009c32 <__sflush_r+0x62>
 8009c24:	6829      	ldr	r1, [r5, #0]
 8009c26:	291d      	cmp	r1, #29
 8009c28:	d82b      	bhi.n	8009c82 <__sflush_r+0xb2>
 8009c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8009cd4 <__sflush_r+0x104>)
 8009c2c:	40ca      	lsrs	r2, r1
 8009c2e:	07d6      	lsls	r6, r2, #31
 8009c30:	d527      	bpl.n	8009c82 <__sflush_r+0xb2>
 8009c32:	2200      	movs	r2, #0
 8009c34:	6062      	str	r2, [r4, #4]
 8009c36:	04d9      	lsls	r1, r3, #19
 8009c38:	6922      	ldr	r2, [r4, #16]
 8009c3a:	6022      	str	r2, [r4, #0]
 8009c3c:	d504      	bpl.n	8009c48 <__sflush_r+0x78>
 8009c3e:	1c42      	adds	r2, r0, #1
 8009c40:	d101      	bne.n	8009c46 <__sflush_r+0x76>
 8009c42:	682b      	ldr	r3, [r5, #0]
 8009c44:	b903      	cbnz	r3, 8009c48 <__sflush_r+0x78>
 8009c46:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c4a:	602f      	str	r7, [r5, #0]
 8009c4c:	b1b9      	cbz	r1, 8009c7e <__sflush_r+0xae>
 8009c4e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c52:	4299      	cmp	r1, r3
 8009c54:	d002      	beq.n	8009c5c <__sflush_r+0x8c>
 8009c56:	4628      	mov	r0, r5
 8009c58:	f7fe fc1e 	bl	8008498 <_free_r>
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c60:	e00d      	b.n	8009c7e <__sflush_r+0xae>
 8009c62:	2301      	movs	r3, #1
 8009c64:	4628      	mov	r0, r5
 8009c66:	47b0      	blx	r6
 8009c68:	4602      	mov	r2, r0
 8009c6a:	1c50      	adds	r0, r2, #1
 8009c6c:	d1c9      	bne.n	8009c02 <__sflush_r+0x32>
 8009c6e:	682b      	ldr	r3, [r5, #0]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d0c6      	beq.n	8009c02 <__sflush_r+0x32>
 8009c74:	2b1d      	cmp	r3, #29
 8009c76:	d001      	beq.n	8009c7c <__sflush_r+0xac>
 8009c78:	2b16      	cmp	r3, #22
 8009c7a:	d11e      	bne.n	8009cba <__sflush_r+0xea>
 8009c7c:	602f      	str	r7, [r5, #0]
 8009c7e:	2000      	movs	r0, #0
 8009c80:	e022      	b.n	8009cc8 <__sflush_r+0xf8>
 8009c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c86:	b21b      	sxth	r3, r3
 8009c88:	e01b      	b.n	8009cc2 <__sflush_r+0xf2>
 8009c8a:	690f      	ldr	r7, [r1, #16]
 8009c8c:	2f00      	cmp	r7, #0
 8009c8e:	d0f6      	beq.n	8009c7e <__sflush_r+0xae>
 8009c90:	0793      	lsls	r3, r2, #30
 8009c92:	680e      	ldr	r6, [r1, #0]
 8009c94:	bf08      	it	eq
 8009c96:	694b      	ldreq	r3, [r1, #20]
 8009c98:	600f      	str	r7, [r1, #0]
 8009c9a:	bf18      	it	ne
 8009c9c:	2300      	movne	r3, #0
 8009c9e:	eba6 0807 	sub.w	r8, r6, r7
 8009ca2:	608b      	str	r3, [r1, #8]
 8009ca4:	f1b8 0f00 	cmp.w	r8, #0
 8009ca8:	dde9      	ble.n	8009c7e <__sflush_r+0xae>
 8009caa:	6a21      	ldr	r1, [r4, #32]
 8009cac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009cae:	4643      	mov	r3, r8
 8009cb0:	463a      	mov	r2, r7
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	47b0      	blx	r6
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	dc08      	bgt.n	8009ccc <__sflush_r+0xfc>
 8009cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cc2:	81a3      	strh	r3, [r4, #12]
 8009cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ccc:	4407      	add	r7, r0
 8009cce:	eba8 0800 	sub.w	r8, r8, r0
 8009cd2:	e7e7      	b.n	8009ca4 <__sflush_r+0xd4>
 8009cd4:	20400001 	.word	0x20400001

08009cd8 <_fflush_r>:
 8009cd8:	b538      	push	{r3, r4, r5, lr}
 8009cda:	690b      	ldr	r3, [r1, #16]
 8009cdc:	4605      	mov	r5, r0
 8009cde:	460c      	mov	r4, r1
 8009ce0:	b913      	cbnz	r3, 8009ce8 <_fflush_r+0x10>
 8009ce2:	2500      	movs	r5, #0
 8009ce4:	4628      	mov	r0, r5
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	b118      	cbz	r0, 8009cf2 <_fflush_r+0x1a>
 8009cea:	6a03      	ldr	r3, [r0, #32]
 8009cec:	b90b      	cbnz	r3, 8009cf2 <_fflush_r+0x1a>
 8009cee:	f7fd fa67 	bl	80071c0 <__sinit>
 8009cf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0f3      	beq.n	8009ce2 <_fflush_r+0xa>
 8009cfa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009cfc:	07d0      	lsls	r0, r2, #31
 8009cfe:	d404      	bmi.n	8009d0a <_fflush_r+0x32>
 8009d00:	0599      	lsls	r1, r3, #22
 8009d02:	d402      	bmi.n	8009d0a <_fflush_r+0x32>
 8009d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d06:	f7fd fd30 	bl	800776a <__retarget_lock_acquire_recursive>
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	4621      	mov	r1, r4
 8009d0e:	f7ff ff5f 	bl	8009bd0 <__sflush_r>
 8009d12:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d14:	07da      	lsls	r2, r3, #31
 8009d16:	4605      	mov	r5, r0
 8009d18:	d4e4      	bmi.n	8009ce4 <_fflush_r+0xc>
 8009d1a:	89a3      	ldrh	r3, [r4, #12]
 8009d1c:	059b      	lsls	r3, r3, #22
 8009d1e:	d4e1      	bmi.n	8009ce4 <_fflush_r+0xc>
 8009d20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d22:	f7fd fd23 	bl	800776c <__retarget_lock_release_recursive>
 8009d26:	e7dd      	b.n	8009ce4 <_fflush_r+0xc>

08009d28 <fiprintf>:
 8009d28:	b40e      	push	{r1, r2, r3}
 8009d2a:	b503      	push	{r0, r1, lr}
 8009d2c:	4601      	mov	r1, r0
 8009d2e:	ab03      	add	r3, sp, #12
 8009d30:	4805      	ldr	r0, [pc, #20]	@ (8009d48 <fiprintf+0x20>)
 8009d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d36:	6800      	ldr	r0, [r0, #0]
 8009d38:	9301      	str	r3, [sp, #4]
 8009d3a:	f7ff fe31 	bl	80099a0 <_vfiprintf_r>
 8009d3e:	b002      	add	sp, #8
 8009d40:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d44:	b003      	add	sp, #12
 8009d46:	4770      	bx	lr
 8009d48:	200001a8 	.word	0x200001a8

08009d4c <__swhatbuf_r>:
 8009d4c:	b570      	push	{r4, r5, r6, lr}
 8009d4e:	460c      	mov	r4, r1
 8009d50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d54:	2900      	cmp	r1, #0
 8009d56:	b096      	sub	sp, #88	@ 0x58
 8009d58:	4615      	mov	r5, r2
 8009d5a:	461e      	mov	r6, r3
 8009d5c:	da0d      	bge.n	8009d7a <__swhatbuf_r+0x2e>
 8009d5e:	89a3      	ldrh	r3, [r4, #12]
 8009d60:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d64:	f04f 0100 	mov.w	r1, #0
 8009d68:	bf14      	ite	ne
 8009d6a:	2340      	movne	r3, #64	@ 0x40
 8009d6c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d70:	2000      	movs	r0, #0
 8009d72:	6031      	str	r1, [r6, #0]
 8009d74:	602b      	str	r3, [r5, #0]
 8009d76:	b016      	add	sp, #88	@ 0x58
 8009d78:	bd70      	pop	{r4, r5, r6, pc}
 8009d7a:	466a      	mov	r2, sp
 8009d7c:	f000 f862 	bl	8009e44 <_fstat_r>
 8009d80:	2800      	cmp	r0, #0
 8009d82:	dbec      	blt.n	8009d5e <__swhatbuf_r+0x12>
 8009d84:	9901      	ldr	r1, [sp, #4]
 8009d86:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d8a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d8e:	4259      	negs	r1, r3
 8009d90:	4159      	adcs	r1, r3
 8009d92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d96:	e7eb      	b.n	8009d70 <__swhatbuf_r+0x24>

08009d98 <__smakebuf_r>:
 8009d98:	898b      	ldrh	r3, [r1, #12]
 8009d9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d9c:	079d      	lsls	r5, r3, #30
 8009d9e:	4606      	mov	r6, r0
 8009da0:	460c      	mov	r4, r1
 8009da2:	d507      	bpl.n	8009db4 <__smakebuf_r+0x1c>
 8009da4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009da8:	6023      	str	r3, [r4, #0]
 8009daa:	6123      	str	r3, [r4, #16]
 8009dac:	2301      	movs	r3, #1
 8009dae:	6163      	str	r3, [r4, #20]
 8009db0:	b003      	add	sp, #12
 8009db2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009db4:	ab01      	add	r3, sp, #4
 8009db6:	466a      	mov	r2, sp
 8009db8:	f7ff ffc8 	bl	8009d4c <__swhatbuf_r>
 8009dbc:	9f00      	ldr	r7, [sp, #0]
 8009dbe:	4605      	mov	r5, r0
 8009dc0:	4639      	mov	r1, r7
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f7fe ff16 	bl	8008bf4 <_malloc_r>
 8009dc8:	b948      	cbnz	r0, 8009dde <__smakebuf_r+0x46>
 8009dca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dce:	059a      	lsls	r2, r3, #22
 8009dd0:	d4ee      	bmi.n	8009db0 <__smakebuf_r+0x18>
 8009dd2:	f023 0303 	bic.w	r3, r3, #3
 8009dd6:	f043 0302 	orr.w	r3, r3, #2
 8009dda:	81a3      	strh	r3, [r4, #12]
 8009ddc:	e7e2      	b.n	8009da4 <__smakebuf_r+0xc>
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	6020      	str	r0, [r4, #0]
 8009de2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009de6:	81a3      	strh	r3, [r4, #12]
 8009de8:	9b01      	ldr	r3, [sp, #4]
 8009dea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009dee:	b15b      	cbz	r3, 8009e08 <__smakebuf_r+0x70>
 8009df0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009df4:	4630      	mov	r0, r6
 8009df6:	f000 f837 	bl	8009e68 <_isatty_r>
 8009dfa:	b128      	cbz	r0, 8009e08 <__smakebuf_r+0x70>
 8009dfc:	89a3      	ldrh	r3, [r4, #12]
 8009dfe:	f023 0303 	bic.w	r3, r3, #3
 8009e02:	f043 0301 	orr.w	r3, r3, #1
 8009e06:	81a3      	strh	r3, [r4, #12]
 8009e08:	89a3      	ldrh	r3, [r4, #12]
 8009e0a:	431d      	orrs	r5, r3
 8009e0c:	81a5      	strh	r5, [r4, #12]
 8009e0e:	e7cf      	b.n	8009db0 <__smakebuf_r+0x18>

08009e10 <memmove>:
 8009e10:	4288      	cmp	r0, r1
 8009e12:	b510      	push	{r4, lr}
 8009e14:	eb01 0402 	add.w	r4, r1, r2
 8009e18:	d902      	bls.n	8009e20 <memmove+0x10>
 8009e1a:	4284      	cmp	r4, r0
 8009e1c:	4623      	mov	r3, r4
 8009e1e:	d807      	bhi.n	8009e30 <memmove+0x20>
 8009e20:	1e43      	subs	r3, r0, #1
 8009e22:	42a1      	cmp	r1, r4
 8009e24:	d008      	beq.n	8009e38 <memmove+0x28>
 8009e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e2e:	e7f8      	b.n	8009e22 <memmove+0x12>
 8009e30:	4402      	add	r2, r0
 8009e32:	4601      	mov	r1, r0
 8009e34:	428a      	cmp	r2, r1
 8009e36:	d100      	bne.n	8009e3a <memmove+0x2a>
 8009e38:	bd10      	pop	{r4, pc}
 8009e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e42:	e7f7      	b.n	8009e34 <memmove+0x24>

08009e44 <_fstat_r>:
 8009e44:	b538      	push	{r3, r4, r5, lr}
 8009e46:	4d07      	ldr	r5, [pc, #28]	@ (8009e64 <_fstat_r+0x20>)
 8009e48:	2300      	movs	r3, #0
 8009e4a:	4604      	mov	r4, r0
 8009e4c:	4608      	mov	r0, r1
 8009e4e:	4611      	mov	r1, r2
 8009e50:	602b      	str	r3, [r5, #0]
 8009e52:	f7f7 fafb 	bl	800144c <_fstat>
 8009e56:	1c43      	adds	r3, r0, #1
 8009e58:	d102      	bne.n	8009e60 <_fstat_r+0x1c>
 8009e5a:	682b      	ldr	r3, [r5, #0]
 8009e5c:	b103      	cbz	r3, 8009e60 <_fstat_r+0x1c>
 8009e5e:	6023      	str	r3, [r4, #0]
 8009e60:	bd38      	pop	{r3, r4, r5, pc}
 8009e62:	bf00      	nop
 8009e64:	20001540 	.word	0x20001540

08009e68 <_isatty_r>:
 8009e68:	b538      	push	{r3, r4, r5, lr}
 8009e6a:	4d06      	ldr	r5, [pc, #24]	@ (8009e84 <_isatty_r+0x1c>)
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	4604      	mov	r4, r0
 8009e70:	4608      	mov	r0, r1
 8009e72:	602b      	str	r3, [r5, #0]
 8009e74:	f7f7 fafa 	bl	800146c <_isatty>
 8009e78:	1c43      	adds	r3, r0, #1
 8009e7a:	d102      	bne.n	8009e82 <_isatty_r+0x1a>
 8009e7c:	682b      	ldr	r3, [r5, #0]
 8009e7e:	b103      	cbz	r3, 8009e82 <_isatty_r+0x1a>
 8009e80:	6023      	str	r3, [r4, #0]
 8009e82:	bd38      	pop	{r3, r4, r5, pc}
 8009e84:	20001540 	.word	0x20001540

08009e88 <_sbrk_r>:
 8009e88:	b538      	push	{r3, r4, r5, lr}
 8009e8a:	4d06      	ldr	r5, [pc, #24]	@ (8009ea4 <_sbrk_r+0x1c>)
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	4604      	mov	r4, r0
 8009e90:	4608      	mov	r0, r1
 8009e92:	602b      	str	r3, [r5, #0]
 8009e94:	f7f7 fb02 	bl	800149c <_sbrk>
 8009e98:	1c43      	adds	r3, r0, #1
 8009e9a:	d102      	bne.n	8009ea2 <_sbrk_r+0x1a>
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	b103      	cbz	r3, 8009ea2 <_sbrk_r+0x1a>
 8009ea0:	6023      	str	r3, [r4, #0]
 8009ea2:	bd38      	pop	{r3, r4, r5, pc}
 8009ea4:	20001540 	.word	0x20001540

08009ea8 <abort>:
 8009ea8:	b508      	push	{r3, lr}
 8009eaa:	2006      	movs	r0, #6
 8009eac:	f000 f86e 	bl	8009f8c <raise>
 8009eb0:	2001      	movs	r0, #1
 8009eb2:	f7f7 fa7b 	bl	80013ac <_exit>

08009eb6 <_calloc_r>:
 8009eb6:	b570      	push	{r4, r5, r6, lr}
 8009eb8:	fba1 5402 	umull	r5, r4, r1, r2
 8009ebc:	b934      	cbnz	r4, 8009ecc <_calloc_r+0x16>
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	f7fe fe98 	bl	8008bf4 <_malloc_r>
 8009ec4:	4606      	mov	r6, r0
 8009ec6:	b928      	cbnz	r0, 8009ed4 <_calloc_r+0x1e>
 8009ec8:	4630      	mov	r0, r6
 8009eca:	bd70      	pop	{r4, r5, r6, pc}
 8009ecc:	220c      	movs	r2, #12
 8009ece:	6002      	str	r2, [r0, #0]
 8009ed0:	2600      	movs	r6, #0
 8009ed2:	e7f9      	b.n	8009ec8 <_calloc_r+0x12>
 8009ed4:	462a      	mov	r2, r5
 8009ed6:	4621      	mov	r1, r4
 8009ed8:	f7fd fb48 	bl	800756c <memset>
 8009edc:	e7f4      	b.n	8009ec8 <_calloc_r+0x12>

08009ede <_realloc_r>:
 8009ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ee2:	4607      	mov	r7, r0
 8009ee4:	4614      	mov	r4, r2
 8009ee6:	460d      	mov	r5, r1
 8009ee8:	b921      	cbnz	r1, 8009ef4 <_realloc_r+0x16>
 8009eea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eee:	4611      	mov	r1, r2
 8009ef0:	f7fe be80 	b.w	8008bf4 <_malloc_r>
 8009ef4:	b92a      	cbnz	r2, 8009f02 <_realloc_r+0x24>
 8009ef6:	f7fe facf 	bl	8008498 <_free_r>
 8009efa:	4625      	mov	r5, r4
 8009efc:	4628      	mov	r0, r5
 8009efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f02:	f000 f85f 	bl	8009fc4 <_malloc_usable_size_r>
 8009f06:	4284      	cmp	r4, r0
 8009f08:	4606      	mov	r6, r0
 8009f0a:	d802      	bhi.n	8009f12 <_realloc_r+0x34>
 8009f0c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f10:	d8f4      	bhi.n	8009efc <_realloc_r+0x1e>
 8009f12:	4621      	mov	r1, r4
 8009f14:	4638      	mov	r0, r7
 8009f16:	f7fe fe6d 	bl	8008bf4 <_malloc_r>
 8009f1a:	4680      	mov	r8, r0
 8009f1c:	b908      	cbnz	r0, 8009f22 <_realloc_r+0x44>
 8009f1e:	4645      	mov	r5, r8
 8009f20:	e7ec      	b.n	8009efc <_realloc_r+0x1e>
 8009f22:	42b4      	cmp	r4, r6
 8009f24:	4622      	mov	r2, r4
 8009f26:	4629      	mov	r1, r5
 8009f28:	bf28      	it	cs
 8009f2a:	4632      	movcs	r2, r6
 8009f2c:	f7fd fc1f 	bl	800776e <memcpy>
 8009f30:	4629      	mov	r1, r5
 8009f32:	4638      	mov	r0, r7
 8009f34:	f7fe fab0 	bl	8008498 <_free_r>
 8009f38:	e7f1      	b.n	8009f1e <_realloc_r+0x40>

08009f3a <_raise_r>:
 8009f3a:	291f      	cmp	r1, #31
 8009f3c:	b538      	push	{r3, r4, r5, lr}
 8009f3e:	4605      	mov	r5, r0
 8009f40:	460c      	mov	r4, r1
 8009f42:	d904      	bls.n	8009f4e <_raise_r+0x14>
 8009f44:	2316      	movs	r3, #22
 8009f46:	6003      	str	r3, [r0, #0]
 8009f48:	f04f 30ff 	mov.w	r0, #4294967295
 8009f4c:	bd38      	pop	{r3, r4, r5, pc}
 8009f4e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009f50:	b112      	cbz	r2, 8009f58 <_raise_r+0x1e>
 8009f52:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009f56:	b94b      	cbnz	r3, 8009f6c <_raise_r+0x32>
 8009f58:	4628      	mov	r0, r5
 8009f5a:	f000 f831 	bl	8009fc0 <_getpid_r>
 8009f5e:	4622      	mov	r2, r4
 8009f60:	4601      	mov	r1, r0
 8009f62:	4628      	mov	r0, r5
 8009f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f68:	f000 b818 	b.w	8009f9c <_kill_r>
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d00a      	beq.n	8009f86 <_raise_r+0x4c>
 8009f70:	1c59      	adds	r1, r3, #1
 8009f72:	d103      	bne.n	8009f7c <_raise_r+0x42>
 8009f74:	2316      	movs	r3, #22
 8009f76:	6003      	str	r3, [r0, #0]
 8009f78:	2001      	movs	r0, #1
 8009f7a:	e7e7      	b.n	8009f4c <_raise_r+0x12>
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009f82:	4620      	mov	r0, r4
 8009f84:	4798      	blx	r3
 8009f86:	2000      	movs	r0, #0
 8009f88:	e7e0      	b.n	8009f4c <_raise_r+0x12>
	...

08009f8c <raise>:
 8009f8c:	4b02      	ldr	r3, [pc, #8]	@ (8009f98 <raise+0xc>)
 8009f8e:	4601      	mov	r1, r0
 8009f90:	6818      	ldr	r0, [r3, #0]
 8009f92:	f7ff bfd2 	b.w	8009f3a <_raise_r>
 8009f96:	bf00      	nop
 8009f98:	200001a8 	.word	0x200001a8

08009f9c <_kill_r>:
 8009f9c:	b538      	push	{r3, r4, r5, lr}
 8009f9e:	4d07      	ldr	r5, [pc, #28]	@ (8009fbc <_kill_r+0x20>)
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	4604      	mov	r4, r0
 8009fa4:	4608      	mov	r0, r1
 8009fa6:	4611      	mov	r1, r2
 8009fa8:	602b      	str	r3, [r5, #0]
 8009faa:	f7f7 f9ef 	bl	800138c <_kill>
 8009fae:	1c43      	adds	r3, r0, #1
 8009fb0:	d102      	bne.n	8009fb8 <_kill_r+0x1c>
 8009fb2:	682b      	ldr	r3, [r5, #0]
 8009fb4:	b103      	cbz	r3, 8009fb8 <_kill_r+0x1c>
 8009fb6:	6023      	str	r3, [r4, #0]
 8009fb8:	bd38      	pop	{r3, r4, r5, pc}
 8009fba:	bf00      	nop
 8009fbc:	20001540 	.word	0x20001540

08009fc0 <_getpid_r>:
 8009fc0:	f7f7 b9dc 	b.w	800137c <_getpid>

08009fc4 <_malloc_usable_size_r>:
 8009fc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fc8:	1f18      	subs	r0, r3, #4
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	bfbc      	itt	lt
 8009fce:	580b      	ldrlt	r3, [r1, r0]
 8009fd0:	18c0      	addlt	r0, r0, r3
 8009fd2:	4770      	bx	lr

08009fd4 <_init>:
 8009fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fd6:	bf00      	nop
 8009fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fda:	bc08      	pop	{r3}
 8009fdc:	469e      	mov	lr, r3
 8009fde:	4770      	bx	lr

08009fe0 <_fini>:
 8009fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe2:	bf00      	nop
 8009fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fe6:	bc08      	pop	{r3}
 8009fe8:	469e      	mov	lr, r3
 8009fea:	4770      	bx	lr
