
simple_frame.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b30c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000858  0800b4a0  0800b4a0  0000c4a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bcf8  0800bcf8  0000d23c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bcf8  0800bcf8  0000ccf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd00  0800bd00  0000d23c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd00  0800bd00  0000cd00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd04  0800bd04  0000cd04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000023c  20000000  0800bd08  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d23c  2**0
                  CONTENTS
 10 .bss          00001bc0  2000023c  2000023c  0000d23c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001dfc  20001dfc  0000d23c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d23c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011e45  00000000  00000000  0000d26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034e6  00000000  00000000  0001f0b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001048  00000000  00000000  00022598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c89  00000000  00000000  000235e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d2c  00000000  00000000  00024269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001619c  00000000  00000000  00047f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce17e  00000000  00000000  0005e131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c2af  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000058cc  00000000  00000000  0012c2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00131bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000023c 	.word	0x2000023c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b484 	.word	0x0800b484

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000240 	.word	0x20000240
 80001cc:	0800b484 	.word	0x0800b484

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b10      	ldr	r3, [pc, #64]	@ (800108c <MX_DMA_Init+0x4c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a0f      	ldr	r2, [pc, #60]	@ (800108c <MX_DMA_Init+0x4c>)
 8001050:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b0d      	ldr	r3, [pc, #52]	@ (800108c <MX_DMA_Init+0x4c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	203a      	movs	r0, #58	@ 0x3a
 8001068:	f000 fda7 	bl	8001bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800106c:	203a      	movs	r0, #58	@ 0x3a
 800106e:	f000 fdc0 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	2100      	movs	r1, #0
 8001076:	2046      	movs	r0, #70	@ 0x46
 8001078:	f000 fd9f 	bl	8001bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800107c:	2046      	movs	r0, #70	@ 0x46
 800107e:	f000 fdb8 	bl	8001bf2 <HAL_NVIC_EnableIRQ>

}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800

08001090 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 030c 	add.w	r3, r7, #12
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
 80010aa:	4b20      	ldr	r3, [pc, #128]	@ (800112c <MX_GPIO_Init+0x9c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	4a1f      	ldr	r2, [pc, #124]	@ (800112c <MX_GPIO_Init+0x9c>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010b6:	4b1d      	ldr	r3, [pc, #116]	@ (800112c <MX_GPIO_Init+0x9c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	607b      	str	r3, [r7, #4]
 80010c6:	4b19      	ldr	r3, [pc, #100]	@ (800112c <MX_GPIO_Init+0x9c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a18      	ldr	r2, [pc, #96]	@ (800112c <MX_GPIO_Init+0x9c>)
 80010cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b16      	ldr	r3, [pc, #88]	@ (800112c <MX_GPIO_Init+0x9c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010da:	607b      	str	r3, [r7, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	4b12      	ldr	r3, [pc, #72]	@ (800112c <MX_GPIO_Init+0x9c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a11      	ldr	r2, [pc, #68]	@ (800112c <MX_GPIO_Init+0x9c>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <MX_GPIO_Init+0x9c>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	603b      	str	r3, [r7, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : user_key_Pin */
  GPIO_InitStruct.Pin = user_key_Pin;
 80010fa:	2302      	movs	r3, #2
 80010fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // 修改为下降沿中断模式
 80010fe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001102:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001104:	2301      	movs	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(user_key_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	4619      	mov	r1, r3
 800110e:	4808      	ldr	r0, [pc, #32]	@ (8001130 <MX_GPIO_Init+0xa0>)
 8001110:	f001 f98c 	bl	800242c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001114:	2200      	movs	r2, #0
 8001116:	2100      	movs	r1, #0
 8001118:	2007      	movs	r0, #7
 800111a:	f000 fd4e 	bl	8001bba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800111e:	2007      	movs	r0, #7
 8001120:	f000 fd67 	bl	8001bf2 <HAL_NVIC_EnableIRQ>

}
 8001124:	bf00      	nop
 8001126:	3720      	adds	r7, #32
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40023800 	.word	0x40023800
 8001130:	40020800 	.word	0x40020800

08001134 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1 , 0xffff);
 800113c:	1d39      	adds	r1, r7, #4
 800113e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001142:	2201      	movs	r2, #1
 8001144:	4803      	ldr	r0, [pc, #12]	@ (8001154 <__io_putchar+0x20>)
 8001146:	f002 fb39 	bl	80037bc <HAL_UART_Transmit>
    return ch;
 800114a:	687b      	ldr	r3, [r7, #4]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	200002ec 	.word	0x200002ec

08001158 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800115c:	f000 fbe0 	bl	8001920 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001160:	f000 f810 	bl	8001184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001164:	f7ff ff94 	bl	8001090 <MX_GPIO_Init>
  MX_DMA_Init();
 8001168:	f7ff ff6a 	bl	8001040 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800116c:	f000 face 	bl	800170c <MX_USART1_UART_Init>
  MX_TIM6_Init();
 8001170:	f000 fa1a 	bl	80015a8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001174:	f000 fa4e 	bl	8001614 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  sf_entry();
 8001178:	f003 ff6e 	bl	8005058 <sf_entry>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  sf_loop();
 800117c:	f003 ff95 	bl	80050aa <sf_loop>
 8001180:	e7fc      	b.n	800117c <main+0x24>
	...

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b094      	sub	sp, #80	@ 0x50
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0320 	add.w	r3, r7, #32
 800118e:	2230      	movs	r2, #48	@ 0x30
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f007 fc36 	bl	8008a04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	4b28      	ldr	r3, [pc, #160]	@ (8001250 <SystemClock_Config+0xcc>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b0:	4a27      	ldr	r2, [pc, #156]	@ (8001250 <SystemClock_Config+0xcc>)
 80011b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b6:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b8:	4b25      	ldr	r3, [pc, #148]	@ (8001250 <SystemClock_Config+0xcc>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	4b22      	ldr	r3, [pc, #136]	@ (8001254 <SystemClock_Config+0xd0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a21      	ldr	r2, [pc, #132]	@ (8001254 <SystemClock_Config+0xd0>)
 80011ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001254 <SystemClock_Config+0xd0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011e8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ea:	2302      	movs	r3, #2
 80011ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ee:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011f4:	2304      	movs	r3, #4
 80011f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011f8:	23a8      	movs	r3, #168	@ 0xa8
 80011fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001200:	2304      	movs	r3, #4
 8001202:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001204:	f107 0320 	add.w	r3, r7, #32
 8001208:	4618      	mov	r0, r3
 800120a:	f001 fadb 	bl	80027c4 <HAL_RCC_OscConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001214:	f000 f820 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001218:	230f      	movs	r3, #15
 800121a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121c:	2302      	movs	r3, #2
 800121e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001224:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001228:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800122a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2105      	movs	r1, #5
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fd3c 	bl	8002cb4 <HAL_RCC_ClockConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001242:	f000 f809 	bl	8001258 <Error_Handler>
  }
}
 8001246:	bf00      	nop
 8001248:	3750      	adds	r7, #80	@ 0x50
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	40007000 	.word	0x40007000

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <Error_Handler+0x8>

08001264 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b10      	ldr	r3, [pc, #64]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	4a0f      	ldr	r2, [pc, #60]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001278:	6453      	str	r3, [r2, #68]	@ 0x44
 800127a:	4b0d      	ldr	r3, [pc, #52]	@ (80012b0 <HAL_MspInit+0x4c>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800127e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b09      	ldr	r3, [pc, #36]	@ (80012b0 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	4a08      	ldr	r2, [pc, #32]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001290:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001294:	6413      	str	r3, [r2, #64]	@ 0x40
 8001296:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_MspInit+0x4c>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	40023800 	.word	0x40023800

080012b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012b8:	bf00      	nop
 80012ba:	e7fd      	b.n	80012b8 <NMI_Handler+0x4>

080012bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <MemManage_Handler+0x4>

080012cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <UsageFault_Handler+0x4>

080012dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr

080012ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ea:	b480      	push	{r7}
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr

08001306 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800130a:	f000 fb5b 	bl	80019c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  task_system_tick_inc();
 800130e:	f004 fb87 	bl	8005a20 <task_system_tick_inc>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800131c:	4807      	ldr	r0, [pc, #28]	@ (800133c <USART1_IRQHandler+0x24>)
 800131e:	f002 fbed 	bl	8003afc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <USART1_IRQHandler+0x24>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0310 	and.w	r3, r3, #16
 800132c:	2b10      	cmp	r3, #16
 800132e:	d102      	bne.n	8001336 <USART1_IRQHandler+0x1e>
  {
	  uart_manager_idle_callback(&huart1);
 8001330:	4802      	ldr	r0, [pc, #8]	@ (800133c <USART1_IRQHandler+0x24>)
 8001332:	f004 fa8f 	bl	8005854 <uart_manager_idle_callback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	200002ec 	.word	0x200002ec

08001340 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001344:	4802      	ldr	r0, [pc, #8]	@ (8001350 <TIM6_DAC_IRQHandler+0x10>)
 8001346:	f001 ff95 	bl	8003274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	2000025c 	.word	0x2000025c

08001354 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001358:	4802      	ldr	r0, [pc, #8]	@ (8001364 <TIM7_IRQHandler+0x10>)
 800135a:	f001 ff8b 	bl	8003274 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	200002a4 	.word	0x200002a4

08001368 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800136c:	4802      	ldr	r0, [pc, #8]	@ (8001378 <DMA2_Stream2_IRQHandler+0x10>)
 800136e:	f000 fdf3 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000334 	.word	0x20000334

0800137c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001380:	4802      	ldr	r0, [pc, #8]	@ (800138c <DMA2_Stream7_IRQHandler+0x10>)
 8001382:	f000 fde9 	bl	8001f58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	20000394 	.word	0x20000394

08001390 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 1 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	//1S
    if (htim == (&htim6))
    {
    }
    //1ms
    if (htim == (&htim7))
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a05      	ldr	r2, [pc, #20]	@ (80013b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d102      	bne.n	80013a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    {
    	task_execute(TASK_REALTIME);
 80013a0:	2000      	movs	r0, #0
 80013a2:	f004 fbd5 	bl	8005b50 <task_execute>
    }
}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200002a4 	.word	0x200002a4

080013b4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) log_uart_dma_tx_cplt_callback();
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <HAL_UART_TxCpltCallback+0x1c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d101      	bne.n	80013c8 <HAL_UART_TxCpltCallback+0x14>
 80013c4:	f004 f862 	bl	800548c <log_uart_dma_tx_cplt_callback>
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200002ec 	.word	0x200002ec

080013d4 <EXTI1_IRQHandler>:

// 添加EXTI1中断处理函数
void EXTI1_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80013d8:	2002      	movs	r0, #2
 80013da:	f001 f9db 	bl	8002794 <HAL_GPIO_EXTI_IRQHandler>
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_GPIO_EXTI_Callback>:

// 添加GPIO外部中断回调函数
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013e2:	b480      	push	{r7}
 80013e4:	b083      	sub	sp, #12
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	4603      	mov	r3, r0
 80013ea:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_1)
    {
        // 按键中断触发，可以在这里添加调试信息
        // 或者直接调用按键处理函数
    }
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return 1;
 80013fc:	2301      	movs	r3, #1
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <_kill>:

int _kill(int pid, int sig)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001412:	f007 fbd7 	bl	8008bc4 <__errno>
 8001416:	4603      	mov	r3, r0
 8001418:	2216      	movs	r2, #22
 800141a:	601a      	str	r2, [r3, #0]
  return -1;
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <_exit>:

void _exit (int status)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001430:	f04f 31ff 	mov.w	r1, #4294967295
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ffe7 	bl	8001408 <_kill>
  while (1) {}    /* Make sure we hang here */
 800143a:	bf00      	nop
 800143c:	e7fd      	b.n	800143a <_exit+0x12>

0800143e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	60f8      	str	r0, [r7, #12]
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	e00a      	b.n	8001466 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001450:	f3af 8000 	nop.w
 8001454:	4601      	mov	r1, r0
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	1c5a      	adds	r2, r3, #1
 800145a:	60ba      	str	r2, [r7, #8]
 800145c:	b2ca      	uxtb	r2, r1
 800145e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3301      	adds	r3, #1
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	429a      	cmp	r2, r3
 800146c:	dbf0      	blt.n	8001450 <_read+0x12>
  }

  return len;
 800146e:	687b      	ldr	r3, [r7, #4]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	e009      	b.n	800149e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	60ba      	str	r2, [r7, #8]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff fe4e 	bl	8001134 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	3301      	adds	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697a      	ldr	r2, [r7, #20]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	dbf1      	blt.n	800148a <_write+0x12>
  }
  return len;
 80014a6:	687b      	ldr	r3, [r7, #4]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <_close>:

int _close(int file)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014bc:	4618      	mov	r0, r3
 80014be:	370c      	adds	r7, #12
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
 80014d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014d8:	605a      	str	r2, [r3, #4]
  return 0;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <_isatty>:

int _isatty(int file)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014f0:	2301      	movs	r3, #1
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014fe:	b480      	push	{r7}
 8001500:	b085      	sub	sp, #20
 8001502:	af00      	add	r7, sp, #0
 8001504:	60f8      	str	r0, [r7, #12]
 8001506:	60b9      	str	r1, [r7, #8]
 8001508:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001520:	4a14      	ldr	r2, [pc, #80]	@ (8001574 <_sbrk+0x5c>)
 8001522:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <_sbrk+0x60>)
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001528:	697b      	ldr	r3, [r7, #20]
 800152a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800152c:	4b13      	ldr	r3, [pc, #76]	@ (800157c <_sbrk+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d102      	bne.n	800153a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001534:	4b11      	ldr	r3, [pc, #68]	@ (800157c <_sbrk+0x64>)
 8001536:	4a12      	ldr	r2, [pc, #72]	@ (8001580 <_sbrk+0x68>)
 8001538:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	429a      	cmp	r2, r3
 8001546:	d207      	bcs.n	8001558 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001548:	f007 fb3c 	bl	8008bc4 <__errno>
 800154c:	4603      	mov	r3, r0
 800154e:	220c      	movs	r2, #12
 8001550:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001552:	f04f 33ff 	mov.w	r3, #4294967295
 8001556:	e009      	b.n	800156c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001558:	4b08      	ldr	r3, [pc, #32]	@ (800157c <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155e:	4b07      	ldr	r3, [pc, #28]	@ (800157c <_sbrk+0x64>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4413      	add	r3, r2
 8001566:	4a05      	ldr	r2, [pc, #20]	@ (800157c <_sbrk+0x64>)
 8001568:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3718      	adds	r7, #24
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20020000 	.word	0x20020000
 8001578:	00000400 	.word	0x00000400
 800157c:	20000258 	.word	0x20000258
 8001580:	20001e00 	.word	0x20001e00

08001584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <SystemInit+0x20>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800158e:	4a05      	ldr	r2, [pc, #20]	@ (80015a4 <SystemInit+0x20>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000ed00 	.word	0xe000ed00

080015a8 <MX_TIM6_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ae:	463b      	mov	r3, r7
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015b6:	4b15      	ldr	r3, [pc, #84]	@ (800160c <MX_TIM6_Init+0x64>)
 80015b8:	4a15      	ldr	r2, [pc, #84]	@ (8001610 <MX_TIM6_Init+0x68>)
 80015ba:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8400-1;
 80015bc:	4b13      	ldr	r3, [pc, #76]	@ (800160c <MX_TIM6_Init+0x64>)
 80015be:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80015c2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b11      	ldr	r3, [pc, #68]	@ (800160c <MX_TIM6_Init+0x64>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 80015ca:	4b10      	ldr	r3, [pc, #64]	@ (800160c <MX_TIM6_Init+0x64>)
 80015cc:	f242 720f 	movw	r2, #9999	@ 0x270f
 80015d0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <MX_TIM6_Init+0x64>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015d8:	480c      	ldr	r0, [pc, #48]	@ (800160c <MX_TIM6_Init+0x64>)
 80015da:	f001 fd8b 	bl	80030f4 <HAL_TIM_Base_Init>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d001      	beq.n	80015e8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80015e4:	f7ff fe38 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015e8:	2300      	movs	r3, #0
 80015ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	@ (800160c <MX_TIM6_Init+0x64>)
 80015f6:	f002 f801 	bl	80035fc <HAL_TIMEx_MasterConfigSynchronization>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001600:	f7ff fe2a 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000025c 	.word	0x2000025c
 8001610:	40001000 	.word	0x40001000

08001614 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161a:	463b      	mov	r3, r7
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001622:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <MX_TIM7_Init+0x64>)
 8001624:	4a15      	ldr	r2, [pc, #84]	@ (800167c <MX_TIM7_Init+0x68>)
 8001626:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 84-1;
 8001628:	4b13      	ldr	r3, [pc, #76]	@ (8001678 <MX_TIM7_Init+0x64>)
 800162a:	2253      	movs	r2, #83	@ 0x53
 800162c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <MX_TIM7_Init+0x64>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8001634:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <MX_TIM7_Init+0x64>)
 8001636:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800163a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800163c:	4b0e      	ldr	r3, [pc, #56]	@ (8001678 <MX_TIM7_Init+0x64>)
 800163e:	2200      	movs	r2, #0
 8001640:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001642:	480d      	ldr	r0, [pc, #52]	@ (8001678 <MX_TIM7_Init+0x64>)
 8001644:	f001 fd56 	bl	80030f4 <HAL_TIM_Base_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 800164e:	f7ff fe03 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001656:	2300      	movs	r3, #0
 8001658:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800165a:	463b      	mov	r3, r7
 800165c:	4619      	mov	r1, r3
 800165e:	4806      	ldr	r0, [pc, #24]	@ (8001678 <MX_TIM7_Init+0x64>)
 8001660:	f001 ffcc 	bl	80035fc <HAL_TIMEx_MasterConfigSynchronization>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800166a:	f7ff fdf5 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200002a4 	.word	0x200002a4
 800167c:	40001400 	.word	0x40001400

08001680 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1c      	ldr	r2, [pc, #112]	@ (8001700 <HAL_TIM_Base_MspInit+0x80>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d116      	bne.n	80016c0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <HAL_TIM_Base_MspInit+0x84>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169a:	4a1a      	ldr	r2, [pc, #104]	@ (8001704 <HAL_TIM_Base_MspInit+0x84>)
 800169c:	f043 0310 	orr.w	r3, r3, #16
 80016a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <HAL_TIM_Base_MspInit+0x84>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	f003 0310 	and.w	r3, r3, #16
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80016ae:	2200      	movs	r2, #0
 80016b0:	2100      	movs	r1, #0
 80016b2:	2036      	movs	r0, #54	@ 0x36
 80016b4:	f000 fa81 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80016b8:	2036      	movs	r0, #54	@ 0x36
 80016ba:	f000 fa9a 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80016be:	e01a      	b.n	80016f6 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM7)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a10      	ldr	r2, [pc, #64]	@ (8001708 <HAL_TIM_Base_MspInit+0x88>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d115      	bne.n	80016f6 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001704 <HAL_TIM_Base_MspInit+0x84>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001704 <HAL_TIM_Base_MspInit+0x84>)
 80016d4:	f043 0320 	orr.w	r3, r3, #32
 80016d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016da:	4b0a      	ldr	r3, [pc, #40]	@ (8001704 <HAL_TIM_Base_MspInit+0x84>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	2037      	movs	r0, #55	@ 0x37
 80016ec:	f000 fa65 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80016f0:	2037      	movs	r0, #55	@ 0x37
 80016f2:	f000 fa7e 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
}
 80016f6:	bf00      	nop
 80016f8:	3710      	adds	r7, #16
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40001000 	.word	0x40001000
 8001704:	40023800 	.word	0x40023800
 8001708:	40001400 	.word	0x40001400

0800170c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001710:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 8001712:	4a12      	ldr	r2, [pc, #72]	@ (800175c <MX_USART1_UART_Init+0x50>)
 8001714:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001716:	4b10      	ldr	r3, [pc, #64]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	@ (8001758 <MX_USART1_UART_Init+0x4c>)
 8001744:	f001 ffea 	bl	800371c <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800174e:	f7ff fd83 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  /* USER CODE END USART1_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200002ec 	.word	0x200002ec
 800175c:	40011000 	.word	0x40011000

08001760 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	@ 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0314 	add.w	r3, r7, #20
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a4c      	ldr	r2, [pc, #304]	@ (80018b0 <HAL_UART_MspInit+0x150>)
 800177e:	4293      	cmp	r3, r2
 8001780:	f040 8092 	bne.w	80018a8 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	613b      	str	r3, [r7, #16]
 8001788:	4b4a      	ldr	r3, [pc, #296]	@ (80018b4 <HAL_UART_MspInit+0x154>)
 800178a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178c:	4a49      	ldr	r2, [pc, #292]	@ (80018b4 <HAL_UART_MspInit+0x154>)
 800178e:	f043 0310 	orr.w	r3, r3, #16
 8001792:	6453      	str	r3, [r2, #68]	@ 0x44
 8001794:	4b47      	ldr	r3, [pc, #284]	@ (80018b4 <HAL_UART_MspInit+0x154>)
 8001796:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
 80017a4:	4b43      	ldr	r3, [pc, #268]	@ (80018b4 <HAL_UART_MspInit+0x154>)
 80017a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a8:	4a42      	ldr	r2, [pc, #264]	@ (80018b4 <HAL_UART_MspInit+0x154>)
 80017aa:	f043 0301 	orr.w	r3, r3, #1
 80017ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b0:	4b40      	ldr	r3, [pc, #256]	@ (80018b4 <HAL_UART_MspInit+0x154>)
 80017b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	60fb      	str	r3, [r7, #12]
 80017ba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017bc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017ce:	2307      	movs	r3, #7
 80017d0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d2:	f107 0314 	add.w	r3, r7, #20
 80017d6:	4619      	mov	r1, r3
 80017d8:	4837      	ldr	r0, [pc, #220]	@ (80018b8 <HAL_UART_MspInit+0x158>)
 80017da:	f000 fe27 	bl	800242c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80017de:	4b37      	ldr	r3, [pc, #220]	@ (80018bc <HAL_UART_MspInit+0x15c>)
 80017e0:	4a37      	ldr	r2, [pc, #220]	@ (80018c0 <HAL_UART_MspInit+0x160>)
 80017e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80017e4:	4b35      	ldr	r3, [pc, #212]	@ (80018bc <HAL_UART_MspInit+0x15c>)
 80017e6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80017ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ec:	4b33      	ldr	r3, [pc, #204]	@ (80018bc <HAL_UART_MspInit+0x15c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017f2:	4b32      	ldr	r3, [pc, #200]	@ (80018bc <HAL_UART_MspInit+0x15c>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017f8:	4b30      	ldr	r3, [pc, #192]	@ (80018bc <HAL_UART_MspInit+0x15c>)
 80017fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001800:	4b2e      	ldr	r3, [pc, #184]	@ (80018bc <HAL_UART_MspInit+0x15c>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001806:	4b2d      	ldr	r3, [pc, #180]	@ (80018bc <HAL_UART_MspInit+0x15c>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800180c:	4b2b      	ldr	r3, [pc, #172]	@ (80018bc <HAL_UART_MspInit+0x15c>)
 800180e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001812:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001814:	4b29      	ldr	r3, [pc, #164]	@ (80018bc <HAL_UART_MspInit+0x15c>)
 8001816:	2200      	movs	r2, #0
 8001818:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800181a:	4b28      	ldr	r3, [pc, #160]	@ (80018bc <HAL_UART_MspInit+0x15c>)
 800181c:	2200      	movs	r2, #0
 800181e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001820:	4826      	ldr	r0, [pc, #152]	@ (80018bc <HAL_UART_MspInit+0x15c>)
 8001822:	f000 fa01 	bl	8001c28 <HAL_DMA_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800182c:	f7ff fd14 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a22      	ldr	r2, [pc, #136]	@ (80018bc <HAL_UART_MspInit+0x15c>)
 8001834:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001836:	4a21      	ldr	r2, [pc, #132]	@ (80018bc <HAL_UART_MspInit+0x15c>)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800183c:	4b21      	ldr	r3, [pc, #132]	@ (80018c4 <HAL_UART_MspInit+0x164>)
 800183e:	4a22      	ldr	r2, [pc, #136]	@ (80018c8 <HAL_UART_MspInit+0x168>)
 8001840:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001842:	4b20      	ldr	r3, [pc, #128]	@ (80018c4 <HAL_UART_MspInit+0x164>)
 8001844:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001848:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800184a:	4b1e      	ldr	r3, [pc, #120]	@ (80018c4 <HAL_UART_MspInit+0x164>)
 800184c:	2240      	movs	r2, #64	@ 0x40
 800184e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001850:	4b1c      	ldr	r3, [pc, #112]	@ (80018c4 <HAL_UART_MspInit+0x164>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001856:	4b1b      	ldr	r3, [pc, #108]	@ (80018c4 <HAL_UART_MspInit+0x164>)
 8001858:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800185c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800185e:	4b19      	ldr	r3, [pc, #100]	@ (80018c4 <HAL_UART_MspInit+0x164>)
 8001860:	2200      	movs	r2, #0
 8001862:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001864:	4b17      	ldr	r3, [pc, #92]	@ (80018c4 <HAL_UART_MspInit+0x164>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800186a:	4b16      	ldr	r3, [pc, #88]	@ (80018c4 <HAL_UART_MspInit+0x164>)
 800186c:	2200      	movs	r2, #0
 800186e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001870:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <HAL_UART_MspInit+0x164>)
 8001872:	2200      	movs	r2, #0
 8001874:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001876:	4b13      	ldr	r3, [pc, #76]	@ (80018c4 <HAL_UART_MspInit+0x164>)
 8001878:	2200      	movs	r2, #0
 800187a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800187c:	4811      	ldr	r0, [pc, #68]	@ (80018c4 <HAL_UART_MspInit+0x164>)
 800187e:	f000 f9d3 	bl	8001c28 <HAL_DMA_Init>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8001888:	f7ff fce6 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	4a0d      	ldr	r2, [pc, #52]	@ (80018c4 <HAL_UART_MspInit+0x164>)
 8001890:	639a      	str	r2, [r3, #56]	@ 0x38
 8001892:	4a0c      	ldr	r2, [pc, #48]	@ (80018c4 <HAL_UART_MspInit+0x164>)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001898:	2200      	movs	r2, #0
 800189a:	2100      	movs	r1, #0
 800189c:	2025      	movs	r0, #37	@ 0x25
 800189e:	f000 f98c 	bl	8001bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018a2:	2025      	movs	r0, #37	@ 0x25
 80018a4:	f000 f9a5 	bl	8001bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80018a8:	bf00      	nop
 80018aa:	3728      	adds	r7, #40	@ 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40011000 	.word	0x40011000
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40020000 	.word	0x40020000
 80018bc:	20000334 	.word	0x20000334
 80018c0:	40026440 	.word	0x40026440
 80018c4:	20000394 	.word	0x20000394
 80018c8:	400264b8 	.word	0x400264b8

080018cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001904 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018d0:	f7ff fe58 	bl	8001584 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d4:	480c      	ldr	r0, [pc, #48]	@ (8001908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018d6:	490d      	ldr	r1, [pc, #52]	@ (800190c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001918 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018fa:	f007 f969 	bl	8008bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fe:	f7ff fc2b 	bl	8001158 <main>
  bx  lr    
 8001902:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001904:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800190c:	2000023c 	.word	0x2000023c
  ldr r2, =_sidata
 8001910:	0800bd08 	.word	0x0800bd08
  ldr r2, =_sbss
 8001914:	2000023c 	.word	0x2000023c
  ldr r4, =_ebss
 8001918:	20001dfc 	.word	0x20001dfc

0800191c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC_IRQHandler>
	...

08001920 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001924:	4b0e      	ldr	r3, [pc, #56]	@ (8001960 <HAL_Init+0x40>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a0d      	ldr	r2, [pc, #52]	@ (8001960 <HAL_Init+0x40>)
 800192a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800192e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001930:	4b0b      	ldr	r3, [pc, #44]	@ (8001960 <HAL_Init+0x40>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0a      	ldr	r2, [pc, #40]	@ (8001960 <HAL_Init+0x40>)
 8001936:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800193a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800193c:	4b08      	ldr	r3, [pc, #32]	@ (8001960 <HAL_Init+0x40>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a07      	ldr	r2, [pc, #28]	@ (8001960 <HAL_Init+0x40>)
 8001942:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001946:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001948:	2003      	movs	r0, #3
 800194a:	f000 f92b 	bl	8001ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800194e:	200f      	movs	r0, #15
 8001950:	f000 f808 	bl	8001964 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001954:	f7ff fc86 	bl	8001264 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	40023c00 	.word	0x40023c00

08001964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800196c:	4b12      	ldr	r3, [pc, #72]	@ (80019b8 <HAL_InitTick+0x54>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <HAL_InitTick+0x58>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	4619      	mov	r1, r3
 8001976:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800197a:	fbb3 f3f1 	udiv	r3, r3, r1
 800197e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f943 	bl	8001c0e <HAL_SYSTICK_Config>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e00e      	b.n	80019b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2b0f      	cmp	r3, #15
 8001996:	d80a      	bhi.n	80019ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001998:	2200      	movs	r2, #0
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	f000 f90b 	bl	8001bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a4:	4a06      	ldr	r2, [pc, #24]	@ (80019c0 <HAL_InitTick+0x5c>)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
 80019ac:	e000      	b.n	80019b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000000 	.word	0x20000000
 80019bc:	20000008 	.word	0x20000008
 80019c0:	20000004 	.word	0x20000004

080019c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <HAL_IncTick+0x20>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_IncTick+0x24>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4413      	add	r3, r2
 80019d4:	4a04      	ldr	r2, [pc, #16]	@ (80019e8 <HAL_IncTick+0x24>)
 80019d6:	6013      	str	r3, [r2, #0]
}
 80019d8:	bf00      	nop
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	20000008 	.word	0x20000008
 80019e8:	200003f4 	.word	0x200003f4

080019ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  return uwTick;
 80019f0:	4b03      	ldr	r3, [pc, #12]	@ (8001a00 <HAL_GetTick+0x14>)
 80019f2:	681b      	ldr	r3, [r3, #0]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	200003f4 	.word	0x200003f4

08001a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a14:	4b0c      	ldr	r3, [pc, #48]	@ (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a20:	4013      	ands	r3, r2
 8001a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a36:	4a04      	ldr	r2, [pc, #16]	@ (8001a48 <__NVIC_SetPriorityGrouping+0x44>)
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	60d3      	str	r3, [r2, #12]
}
 8001a3c:	bf00      	nop
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a50:	4b04      	ldr	r3, [pc, #16]	@ (8001a64 <__NVIC_GetPriorityGrouping+0x18>)
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	0a1b      	lsrs	r3, r3, #8
 8001a56:	f003 0307 	and.w	r3, r3, #7
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000ed00 	.word	0xe000ed00

08001a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	db0b      	blt.n	8001a92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	f003 021f 	and.w	r2, r3, #31
 8001a80:	4907      	ldr	r1, [pc, #28]	@ (8001aa0 <__NVIC_EnableIRQ+0x38>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	2001      	movs	r0, #1
 8001a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a92:	bf00      	nop
 8001a94:	370c      	adds	r7, #12
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	e000e100 	.word	0xe000e100

08001aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	6039      	str	r1, [r7, #0]
 8001aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	db0a      	blt.n	8001ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	490c      	ldr	r1, [pc, #48]	@ (8001af0 <__NVIC_SetPriority+0x4c>)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	0112      	lsls	r2, r2, #4
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001acc:	e00a      	b.n	8001ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	4908      	ldr	r1, [pc, #32]	@ (8001af4 <__NVIC_SetPriority+0x50>)
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	3b04      	subs	r3, #4
 8001adc:	0112      	lsls	r2, r2, #4
 8001ade:	b2d2      	uxtb	r2, r2
 8001ae0:	440b      	add	r3, r1
 8001ae2:	761a      	strb	r2, [r3, #24]
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000e100 	.word	0xe000e100
 8001af4:	e000ed00 	.word	0xe000ed00

08001af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b089      	sub	sp, #36	@ 0x24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f1c3 0307 	rsb	r3, r3, #7
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	bf28      	it	cs
 8001b16:	2304      	movcs	r3, #4
 8001b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	3304      	adds	r3, #4
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d902      	bls.n	8001b28 <NVIC_EncodePriority+0x30>
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3b03      	subs	r3, #3
 8001b26:	e000      	b.n	8001b2a <NVIC_EncodePriority+0x32>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	43da      	mvns	r2, r3
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b40:	f04f 31ff 	mov.w	r1, #4294967295
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4a:	43d9      	mvns	r1, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	4313      	orrs	r3, r2
         );
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3724      	adds	r7, #36	@ 0x24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
	...

08001b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b70:	d301      	bcc.n	8001b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b72:	2301      	movs	r3, #1
 8001b74:	e00f      	b.n	8001b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b7e:	210f      	movs	r1, #15
 8001b80:	f04f 30ff 	mov.w	r0, #4294967295
 8001b84:	f7ff ff8e 	bl	8001aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b88:	4b05      	ldr	r3, [pc, #20]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b8e:	4b04      	ldr	r3, [pc, #16]	@ (8001ba0 <SysTick_Config+0x40>)
 8001b90:	2207      	movs	r2, #7
 8001b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f7ff ff29 	bl	8001a04 <__NVIC_SetPriorityGrouping>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b086      	sub	sp, #24
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	60b9      	str	r1, [r7, #8]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bcc:	f7ff ff3e 	bl	8001a4c <__NVIC_GetPriorityGrouping>
 8001bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	6978      	ldr	r0, [r7, #20]
 8001bd8:	f7ff ff8e 	bl	8001af8 <NVIC_EncodePriority>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff5d 	bl	8001aa4 <__NVIC_SetPriority>
}
 8001bea:	bf00      	nop
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff ff31 	bl	8001a68 <__NVIC_EnableIRQ>
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ffa2 	bl	8001b60 <SysTick_Config>
 8001c1c:	4603      	mov	r3, r0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
	...

08001c28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c34:	f7ff feda 	bl	80019ec <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e099      	b.n	8001d78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f022 0201 	bic.w	r2, r2, #1
 8001c62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c64:	e00f      	b.n	8001c86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c66:	f7ff fec1 	bl	80019ec <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b05      	cmp	r3, #5
 8001c72:	d908      	bls.n	8001c86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2203      	movs	r2, #3
 8001c7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e078      	b.n	8001d78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0301 	and.w	r3, r3, #1
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1e8      	bne.n	8001c66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c9c:	697a      	ldr	r2, [r7, #20]
 8001c9e:	4b38      	ldr	r3, [pc, #224]	@ (8001d80 <HAL_DMA_Init+0x158>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cdc:	2b04      	cmp	r3, #4
 8001cde:	d107      	bne.n	8001cf0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	f023 0307 	bic.w	r3, r3, #7
 8001d06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d117      	bne.n	8001d4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d00e      	beq.n	8001d4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 fb01 	bl	8002334 <DMA_CheckFifoParam>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d008      	beq.n	8001d4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2240      	movs	r2, #64	@ 0x40
 8001d3c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001d46:	2301      	movs	r3, #1
 8001d48:	e016      	b.n	8001d78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f000 fab8 	bl	80022c8 <DMA_CalcBaseAndBitshift>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d60:	223f      	movs	r2, #63	@ 0x3f
 8001d62:	409a      	lsls	r2, r3
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3718      	adds	r7, #24
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	f010803f 	.word	0xf010803f

08001d84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d92:	2300      	movs	r3, #0
 8001d94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d101      	bne.n	8001daa <HAL_DMA_Start_IT+0x26>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e040      	b.n	8001e2c <HAL_DMA_Start_IT+0xa8>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2201      	movs	r2, #1
 8001dae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d12f      	bne.n	8001e1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2202      	movs	r2, #2
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	68b9      	ldr	r1, [r7, #8]
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 fa4a 	bl	800226c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ddc:	223f      	movs	r2, #63	@ 0x3f
 8001dde:	409a      	lsls	r2, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0216 	orr.w	r2, r2, #22
 8001df2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d007      	beq.n	8001e0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0208 	orr.w	r2, r2, #8
 8001e0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 0201 	orr.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	e005      	b.n	8001e2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e26:	2302      	movs	r3, #2
 8001e28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e40:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e42:	f7ff fdd3 	bl	80019ec <HAL_GetTick>
 8001e46:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d008      	beq.n	8001e66 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2280      	movs	r2, #128	@ 0x80
 8001e58:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e052      	b.n	8001f0c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 0216 	bic.w	r2, r2, #22
 8001e74:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	695a      	ldr	r2, [r3, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e84:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d103      	bne.n	8001e96 <HAL_DMA_Abort+0x62>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d007      	beq.n	8001ea6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0208 	bic.w	r2, r2, #8
 8001ea4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0201 	bic.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb6:	e013      	b.n	8001ee0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001eb8:	f7ff fd98 	bl	80019ec <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d90c      	bls.n	8001ee0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2203      	movs	r2, #3
 8001ed0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e015      	b.n	8001f0c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1e4      	bne.n	8001eb8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ef2:	223f      	movs	r2, #63	@ 0x3f
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3710      	adds	r7, #16
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d004      	beq.n	8001f32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2280      	movs	r2, #128	@ 0x80
 8001f2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e00c      	b.n	8001f4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2205      	movs	r2, #5
 8001f36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0201 	bic.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f4a:	2300      	movs	r3, #0
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b086      	sub	sp, #24
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f64:	4b8e      	ldr	r3, [pc, #568]	@ (80021a0 <HAL_DMA_IRQHandler+0x248>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a8e      	ldr	r2, [pc, #568]	@ (80021a4 <HAL_DMA_IRQHandler+0x24c>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0a9b      	lsrs	r3, r3, #10
 8001f70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f82:	2208      	movs	r2, #8
 8001f84:	409a      	lsls	r2, r3
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d01a      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0204 	bic.w	r2, r2, #4
 8001faa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fb0:	2208      	movs	r2, #8
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fbc:	f043 0201 	orr.w	r2, r3, #1
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc8:	2201      	movs	r2, #1
 8001fca:	409a      	lsls	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d012      	beq.n	8001ffa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00b      	beq.n	8001ffa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff2:	f043 0202 	orr.w	r2, r3, #2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ffe:	2204      	movs	r2, #4
 8002000:	409a      	lsls	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	4013      	ands	r3, r2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d012      	beq.n	8002030 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00b      	beq.n	8002030 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800201c:	2204      	movs	r2, #4
 800201e:	409a      	lsls	r2, r3
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002028:	f043 0204 	orr.w	r2, r3, #4
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002034:	2210      	movs	r2, #16
 8002036:	409a      	lsls	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	4013      	ands	r3, r2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d043      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d03c      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002052:	2210      	movs	r2, #16
 8002054:	409a      	lsls	r2, r3
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d018      	beq.n	800209a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d108      	bne.n	8002088 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	2b00      	cmp	r3, #0
 800207c:	d024      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	4798      	blx	r3
 8002086:	e01f      	b.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800208c:	2b00      	cmp	r3, #0
 800208e:	d01b      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	4798      	blx	r3
 8002098:	e016      	b.n	80020c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d107      	bne.n	80020b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f022 0208 	bic.w	r2, r2, #8
 80020b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020cc:	2220      	movs	r2, #32
 80020ce:	409a      	lsls	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 808f 	beq.w	80021f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0310 	and.w	r3, r3, #16
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 8087 	beq.w	80021f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ee:	2220      	movs	r2, #32
 80020f0:	409a      	lsls	r2, r3
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b05      	cmp	r3, #5
 8002100:	d136      	bne.n	8002170 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0216 	bic.w	r2, r2, #22
 8002110:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002120:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002126:	2b00      	cmp	r3, #0
 8002128:	d103      	bne.n	8002132 <HAL_DMA_IRQHandler+0x1da>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800212e:	2b00      	cmp	r3, #0
 8002130:	d007      	beq.n	8002142 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0208 	bic.w	r2, r2, #8
 8002140:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002146:	223f      	movs	r2, #63	@ 0x3f
 8002148:	409a      	lsls	r2, r3
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002162:	2b00      	cmp	r3, #0
 8002164:	d07e      	beq.n	8002264 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4798      	blx	r3
        }
        return;
 800216e:	e079      	b.n	8002264 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d01d      	beq.n	80021ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d10d      	bne.n	80021a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002190:	2b00      	cmp	r3, #0
 8002192:	d031      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	4798      	blx	r3
 800219c:	e02c      	b.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
 800219e:	bf00      	nop
 80021a0:	20000000 	.word	0x20000000
 80021a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d023      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
 80021b8:	e01e      	b.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10f      	bne.n	80021e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f022 0210 	bic.w	r2, r2, #16
 80021d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d032      	beq.n	8002266 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002204:	f003 0301 	and.w	r3, r3, #1
 8002208:	2b00      	cmp	r3, #0
 800220a:	d022      	beq.n	8002252 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2205      	movs	r2, #5
 8002210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	3301      	adds	r3, #1
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	d307      	bcc.n	8002240 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0301 	and.w	r3, r3, #1
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f2      	bne.n	8002224 <HAL_DMA_IRQHandler+0x2cc>
 800223e:	e000      	b.n	8002242 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002240:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002256:	2b00      	cmp	r3, #0
 8002258:	d005      	beq.n	8002266 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	4798      	blx	r3
 8002262:	e000      	b.n	8002266 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002264:	bf00      	nop
    }
  }
}
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800226c:	b480      	push	{r7}
 800226e:	b085      	sub	sp, #20
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002288:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b40      	cmp	r3, #64	@ 0x40
 8002298:	d108      	bne.n	80022ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022aa:	e007      	b.n	80022bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	60da      	str	r2, [r3, #12]
}
 80022bc:	bf00      	nop
 80022be:	3714      	adds	r7, #20
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	3b10      	subs	r3, #16
 80022d8:	4a14      	ldr	r2, [pc, #80]	@ (800232c <DMA_CalcBaseAndBitshift+0x64>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	091b      	lsrs	r3, r3, #4
 80022e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022e2:	4a13      	ldr	r2, [pc, #76]	@ (8002330 <DMA_CalcBaseAndBitshift+0x68>)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4413      	add	r3, r2
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d909      	bls.n	800230a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80022fe:	f023 0303 	bic.w	r3, r3, #3
 8002302:	1d1a      	adds	r2, r3, #4
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	659a      	str	r2, [r3, #88]	@ 0x58
 8002308:	e007      	b.n	800231a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002312:	f023 0303 	bic.w	r3, r3, #3
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800231e:	4618      	mov	r0, r3
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	aaaaaaab 	.word	0xaaaaaaab
 8002330:	0800b850 	.word	0x0800b850

08002334 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002344:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	699b      	ldr	r3, [r3, #24]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d11f      	bne.n	800238e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	2b03      	cmp	r3, #3
 8002352:	d856      	bhi.n	8002402 <DMA_CheckFifoParam+0xce>
 8002354:	a201      	add	r2, pc, #4	@ (adr r2, 800235c <DMA_CheckFifoParam+0x28>)
 8002356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235a:	bf00      	nop
 800235c:	0800236d 	.word	0x0800236d
 8002360:	0800237f 	.word	0x0800237f
 8002364:	0800236d 	.word	0x0800236d
 8002368:	08002403 	.word	0x08002403
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002370:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d046      	beq.n	8002406 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800237c:	e043      	b.n	8002406 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002382:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002386:	d140      	bne.n	800240a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800238c:	e03d      	b.n	800240a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002396:	d121      	bne.n	80023dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d837      	bhi.n	800240e <DMA_CheckFifoParam+0xda>
 800239e:	a201      	add	r2, pc, #4	@ (adr r2, 80023a4 <DMA_CheckFifoParam+0x70>)
 80023a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a4:	080023b5 	.word	0x080023b5
 80023a8:	080023bb 	.word	0x080023bb
 80023ac:	080023b5 	.word	0x080023b5
 80023b0:	080023cd 	.word	0x080023cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	73fb      	strb	r3, [r7, #15]
      break;
 80023b8:	e030      	b.n	800241c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023be:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d025      	beq.n	8002412 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ca:	e022      	b.n	8002412 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023d0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80023d4:	d11f      	bne.n	8002416 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023da:	e01c      	b.n	8002416 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d903      	bls.n	80023ea <DMA_CheckFifoParam+0xb6>
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d003      	beq.n	80023f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80023e8:	e018      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
      break;
 80023ee:	e015      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d00e      	beq.n	800241a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002400:	e00b      	b.n	800241a <DMA_CheckFifoParam+0xe6>
      break;
 8002402:	bf00      	nop
 8002404:	e00a      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 8002406:	bf00      	nop
 8002408:	e008      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 800240a:	bf00      	nop
 800240c:	e006      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 800240e:	bf00      	nop
 8002410:	e004      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 8002412:	bf00      	nop
 8002414:	e002      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;   
 8002416:	bf00      	nop
 8002418:	e000      	b.n	800241c <DMA_CheckFifoParam+0xe8>
      break;
 800241a:	bf00      	nop
    }
  } 
  
  return status; 
 800241c:	7bfb      	ldrb	r3, [r7, #15]
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop

0800242c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	@ 0x24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	e16b      	b.n	8002720 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4013      	ands	r3, r2
 800245a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	429a      	cmp	r2, r3
 8002462:	f040 815a 	bne.w	800271a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	2b01      	cmp	r3, #1
 8002470:	d005      	beq.n	800247e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800247a:	2b02      	cmp	r3, #2
 800247c:	d130      	bne.n	80024e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	2203      	movs	r2, #3
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	4013      	ands	r3, r2
 8002494:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024b4:	2201      	movs	r2, #1
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 0201 	and.w	r2, r3, #1
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0303 	and.w	r3, r3, #3
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d017      	beq.n	800251c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68db      	ldr	r3, [r3, #12]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	2203      	movs	r2, #3
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	689a      	ldr	r2, [r3, #8]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	fa02 f303 	lsl.w	r3, r2, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4313      	orrs	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0303 	and.w	r3, r3, #3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d123      	bne.n	8002570 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	08da      	lsrs	r2, r3, #3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3208      	adds	r2, #8
 8002530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002534:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	220f      	movs	r2, #15
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	08da      	lsrs	r2, r3, #3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3208      	adds	r2, #8
 800256a:	69b9      	ldr	r1, [r7, #24]
 800256c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4013      	ands	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f003 0203 	and.w	r2, r3, #3
 8002590:	69fb      	ldr	r3, [r7, #28]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4313      	orrs	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80b4 	beq.w	800271a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025b2:	2300      	movs	r3, #0
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	4b60      	ldr	r3, [pc, #384]	@ (8002738 <HAL_GPIO_Init+0x30c>)
 80025b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ba:	4a5f      	ldr	r2, [pc, #380]	@ (8002738 <HAL_GPIO_Init+0x30c>)
 80025bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002738 <HAL_GPIO_Init+0x30c>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ce:	4a5b      	ldr	r2, [pc, #364]	@ (800273c <HAL_GPIO_Init+0x310>)
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	089b      	lsrs	r3, r3, #2
 80025d4:	3302      	adds	r3, #2
 80025d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0303 	and.w	r3, r3, #3
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	220f      	movs	r2, #15
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a52      	ldr	r2, [pc, #328]	@ (8002740 <HAL_GPIO_Init+0x314>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d02b      	beq.n	8002652 <HAL_GPIO_Init+0x226>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a51      	ldr	r2, [pc, #324]	@ (8002744 <HAL_GPIO_Init+0x318>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d025      	beq.n	800264e <HAL_GPIO_Init+0x222>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a50      	ldr	r2, [pc, #320]	@ (8002748 <HAL_GPIO_Init+0x31c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d01f      	beq.n	800264a <HAL_GPIO_Init+0x21e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4f      	ldr	r2, [pc, #316]	@ (800274c <HAL_GPIO_Init+0x320>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d019      	beq.n	8002646 <HAL_GPIO_Init+0x21a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4e      	ldr	r2, [pc, #312]	@ (8002750 <HAL_GPIO_Init+0x324>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <HAL_GPIO_Init+0x216>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4d      	ldr	r2, [pc, #308]	@ (8002754 <HAL_GPIO_Init+0x328>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00d      	beq.n	800263e <HAL_GPIO_Init+0x212>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a4c      	ldr	r2, [pc, #304]	@ (8002758 <HAL_GPIO_Init+0x32c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d007      	beq.n	800263a <HAL_GPIO_Init+0x20e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4b      	ldr	r2, [pc, #300]	@ (800275c <HAL_GPIO_Init+0x330>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d101      	bne.n	8002636 <HAL_GPIO_Init+0x20a>
 8002632:	2307      	movs	r3, #7
 8002634:	e00e      	b.n	8002654 <HAL_GPIO_Init+0x228>
 8002636:	2308      	movs	r3, #8
 8002638:	e00c      	b.n	8002654 <HAL_GPIO_Init+0x228>
 800263a:	2306      	movs	r3, #6
 800263c:	e00a      	b.n	8002654 <HAL_GPIO_Init+0x228>
 800263e:	2305      	movs	r3, #5
 8002640:	e008      	b.n	8002654 <HAL_GPIO_Init+0x228>
 8002642:	2304      	movs	r3, #4
 8002644:	e006      	b.n	8002654 <HAL_GPIO_Init+0x228>
 8002646:	2303      	movs	r3, #3
 8002648:	e004      	b.n	8002654 <HAL_GPIO_Init+0x228>
 800264a:	2302      	movs	r3, #2
 800264c:	e002      	b.n	8002654 <HAL_GPIO_Init+0x228>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_GPIO_Init+0x228>
 8002652:	2300      	movs	r3, #0
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	f002 0203 	and.w	r2, r2, #3
 800265a:	0092      	lsls	r2, r2, #2
 800265c:	4093      	lsls	r3, r2
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002664:	4935      	ldr	r1, [pc, #212]	@ (800273c <HAL_GPIO_Init+0x310>)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	089b      	lsrs	r3, r3, #2
 800266a:	3302      	adds	r3, #2
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002672:	4b3b      	ldr	r3, [pc, #236]	@ (8002760 <HAL_GPIO_Init+0x334>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002696:	4a32      	ldr	r2, [pc, #200]	@ (8002760 <HAL_GPIO_Init+0x334>)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800269c:	4b30      	ldr	r3, [pc, #192]	@ (8002760 <HAL_GPIO_Init+0x334>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c0:	4a27      	ldr	r2, [pc, #156]	@ (8002760 <HAL_GPIO_Init+0x334>)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026c6:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <HAL_GPIO_Init+0x334>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002760 <HAL_GPIO_Init+0x334>)
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <HAL_GPIO_Init+0x334>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002714:	4a12      	ldr	r2, [pc, #72]	@ (8002760 <HAL_GPIO_Init+0x334>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3301      	adds	r3, #1
 800271e:	61fb      	str	r3, [r7, #28]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	2b0f      	cmp	r3, #15
 8002724:	f67f ae90 	bls.w	8002448 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	3724      	adds	r7, #36	@ 0x24
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	40013800 	.word	0x40013800
 8002740:	40020000 	.word	0x40020000
 8002744:	40020400 	.word	0x40020400
 8002748:	40020800 	.word	0x40020800
 800274c:	40020c00 	.word	0x40020c00
 8002750:	40021000 	.word	0x40021000
 8002754:	40021400 	.word	0x40021400
 8002758:	40021800 	.word	0x40021800
 800275c:	40021c00 	.word	0x40021c00
 8002760:	40013c00 	.word	0x40013c00

08002764 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	887b      	ldrh	r3, [r7, #2]
 8002776:	4013      	ands	r3, r2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d002      	beq.n	8002782 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800277c:	2301      	movs	r3, #1
 800277e:	73fb      	strb	r3, [r7, #15]
 8002780:	e001      	b.n	8002786 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002786:	7bfb      	ldrb	r3, [r7, #15]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	4603      	mov	r3, r0
 800279c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800279e:	4b08      	ldr	r3, [pc, #32]	@ (80027c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027a0:	695a      	ldr	r2, [r3, #20]
 80027a2:	88fb      	ldrh	r3, [r7, #6]
 80027a4:	4013      	ands	r3, r2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d006      	beq.n	80027b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027aa:	4a05      	ldr	r2, [pc, #20]	@ (80027c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027ac:	88fb      	ldrh	r3, [r7, #6]
 80027ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fe15 	bl	80013e2 <HAL_GPIO_EXTI_Callback>
  }
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40013c00 	.word	0x40013c00

080027c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e267      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d075      	beq.n	80028ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027e2:	4b88      	ldr	r3, [pc, #544]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d00c      	beq.n	8002808 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ee:	4b85      	ldr	r3, [pc, #532]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d112      	bne.n	8002820 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027fa:	4b82      	ldr	r3, [pc, #520]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002802:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002806:	d10b      	bne.n	8002820 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002808:	4b7e      	ldr	r3, [pc, #504]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d05b      	beq.n	80028cc <HAL_RCC_OscConfig+0x108>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d157      	bne.n	80028cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e242      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002828:	d106      	bne.n	8002838 <HAL_RCC_OscConfig+0x74>
 800282a:	4b76      	ldr	r3, [pc, #472]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a75      	ldr	r2, [pc, #468]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e01d      	b.n	8002874 <HAL_RCC_OscConfig+0xb0>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002840:	d10c      	bne.n	800285c <HAL_RCC_OscConfig+0x98>
 8002842:	4b70      	ldr	r3, [pc, #448]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a6f      	ldr	r2, [pc, #444]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 8002848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a6c      	ldr	r2, [pc, #432]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 8002854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002858:	6013      	str	r3, [r2, #0]
 800285a:	e00b      	b.n	8002874 <HAL_RCC_OscConfig+0xb0>
 800285c:	4b69      	ldr	r3, [pc, #420]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a68      	ldr	r2, [pc, #416]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 8002862:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002866:	6013      	str	r3, [r2, #0]
 8002868:	4b66      	ldr	r3, [pc, #408]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a65      	ldr	r2, [pc, #404]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 800286e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002872:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d013      	beq.n	80028a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7ff f8b6 	bl	80019ec <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002884:	f7ff f8b2 	bl	80019ec <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b64      	cmp	r3, #100	@ 0x64
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e207      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002896:	4b5b      	ldr	r3, [pc, #364]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0xc0>
 80028a2:	e014      	b.n	80028ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a4:	f7ff f8a2 	bl	80019ec <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028ac:	f7ff f89e 	bl	80019ec <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b64      	cmp	r3, #100	@ 0x64
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e1f3      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028be:	4b51      	ldr	r3, [pc, #324]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0xe8>
 80028ca:	e000      	b.n	80028ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d063      	beq.n	80029a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028da:	4b4a      	ldr	r3, [pc, #296]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e6:	4b47      	ldr	r3, [pc, #284]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d11c      	bne.n	800292c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028f2:	4b44      	ldr	r3, [pc, #272]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d116      	bne.n	800292c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fe:	4b41      	ldr	r3, [pc, #260]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d005      	beq.n	8002916 <HAL_RCC_OscConfig+0x152>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d001      	beq.n	8002916 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e1c7      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002916:	4b3b      	ldr	r3, [pc, #236]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	4937      	ldr	r1, [pc, #220]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 8002926:	4313      	orrs	r3, r2
 8002928:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800292a:	e03a      	b.n	80029a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d020      	beq.n	8002976 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002934:	4b34      	ldr	r3, [pc, #208]	@ (8002a08 <HAL_RCC_OscConfig+0x244>)
 8002936:	2201      	movs	r2, #1
 8002938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800293a:	f7ff f857 	bl	80019ec <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002942:	f7ff f853 	bl	80019ec <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e1a8      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002954:	4b2b      	ldr	r3, [pc, #172]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002960:	4b28      	ldr	r3, [pc, #160]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4925      	ldr	r1, [pc, #148]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 8002970:	4313      	orrs	r3, r2
 8002972:	600b      	str	r3, [r1, #0]
 8002974:	e015      	b.n	80029a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002976:	4b24      	ldr	r3, [pc, #144]	@ (8002a08 <HAL_RCC_OscConfig+0x244>)
 8002978:	2200      	movs	r2, #0
 800297a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297c:	f7ff f836 	bl	80019ec <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002984:	f7ff f832 	bl	80019ec <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e187      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002996:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1f0      	bne.n	8002984 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d036      	beq.n	8002a1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	695b      	ldr	r3, [r3, #20]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d016      	beq.n	80029e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b6:	4b15      	ldr	r3, [pc, #84]	@ (8002a0c <HAL_RCC_OscConfig+0x248>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029bc:	f7ff f816 	bl	80019ec <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c4:	f7ff f812 	bl	80019ec <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e167      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <HAL_RCC_OscConfig+0x240>)
 80029d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x200>
 80029e2:	e01b      	b.n	8002a1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e4:	4b09      	ldr	r3, [pc, #36]	@ (8002a0c <HAL_RCC_OscConfig+0x248>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ea:	f7fe ffff 	bl	80019ec <HAL_GetTick>
 80029ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029f0:	e00e      	b.n	8002a10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f2:	f7fe fffb 	bl	80019ec <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d907      	bls.n	8002a10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e150      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4e2>
 8002a04:	40023800 	.word	0x40023800
 8002a08:	42470000 	.word	0x42470000
 8002a0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a10:	4b88      	ldr	r3, [pc, #544]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002a12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1ea      	bne.n	80029f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 8097 	beq.w	8002b58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a2e:	4b81      	ldr	r3, [pc, #516]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10f      	bne.n	8002a5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	4a7c      	ldr	r2, [pc, #496]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a4a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a56:	2301      	movs	r3, #1
 8002a58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5a:	4b77      	ldr	r3, [pc, #476]	@ (8002c38 <HAL_RCC_OscConfig+0x474>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d118      	bne.n	8002a98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a66:	4b74      	ldr	r3, [pc, #464]	@ (8002c38 <HAL_RCC_OscConfig+0x474>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a73      	ldr	r2, [pc, #460]	@ (8002c38 <HAL_RCC_OscConfig+0x474>)
 8002a6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a72:	f7fe ffbb 	bl	80019ec <HAL_GetTick>
 8002a76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a78:	e008      	b.n	8002a8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7a:	f7fe ffb7 	bl	80019ec <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d901      	bls.n	8002a8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a88:	2303      	movs	r3, #3
 8002a8a:	e10c      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c38 <HAL_RCC_OscConfig+0x474>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0f0      	beq.n	8002a7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d106      	bne.n	8002aae <HAL_RCC_OscConfig+0x2ea>
 8002aa0:	4b64      	ldr	r3, [pc, #400]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa4:	4a63      	ldr	r2, [pc, #396]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002aa6:	f043 0301 	orr.w	r3, r3, #1
 8002aaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aac:	e01c      	b.n	8002ae8 <HAL_RCC_OscConfig+0x324>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b05      	cmp	r3, #5
 8002ab4:	d10c      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x30c>
 8002ab6:	4b5f      	ldr	r3, [pc, #380]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aba:	4a5e      	ldr	r2, [pc, #376]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002abc:	f043 0304 	orr.w	r3, r3, #4
 8002ac0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac2:	4b5c      	ldr	r3, [pc, #368]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac6:	4a5b      	ldr	r2, [pc, #364]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ace:	e00b      	b.n	8002ae8 <HAL_RCC_OscConfig+0x324>
 8002ad0:	4b58      	ldr	r3, [pc, #352]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad4:	4a57      	ldr	r2, [pc, #348]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002ad6:	f023 0301 	bic.w	r3, r3, #1
 8002ada:	6713      	str	r3, [r2, #112]	@ 0x70
 8002adc:	4b55      	ldr	r3, [pc, #340]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae0:	4a54      	ldr	r2, [pc, #336]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002ae2:	f023 0304 	bic.w	r3, r3, #4
 8002ae6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d015      	beq.n	8002b1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af0:	f7fe ff7c 	bl	80019ec <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af6:	e00a      	b.n	8002b0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af8:	f7fe ff78 	bl	80019ec <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e0cb      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0e:	4b49      	ldr	r3, [pc, #292]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0ee      	beq.n	8002af8 <HAL_RCC_OscConfig+0x334>
 8002b1a:	e014      	b.n	8002b46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b1c:	f7fe ff66 	bl	80019ec <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b22:	e00a      	b.n	8002b3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b24:	f7fe ff62 	bl	80019ec <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e0b5      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1ee      	bne.n	8002b24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b46:	7dfb      	ldrb	r3, [r7, #23]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d105      	bne.n	8002b58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4c:	4b39      	ldr	r3, [pc, #228]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b50:	4a38      	ldr	r2, [pc, #224]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002b52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 80a1 	beq.w	8002ca4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b62:	4b34      	ldr	r3, [pc, #208]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f003 030c 	and.w	r3, r3, #12
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d05c      	beq.n	8002c28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d141      	bne.n	8002bfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b76:	4b31      	ldr	r3, [pc, #196]	@ (8002c3c <HAL_RCC_OscConfig+0x478>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7c:	f7fe ff36 	bl	80019ec <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b84:	f7fe ff32 	bl	80019ec <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e087      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b96:	4b27      	ldr	r3, [pc, #156]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1f0      	bne.n	8002b84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69da      	ldr	r2, [r3, #28]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6a1b      	ldr	r3, [r3, #32]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	019b      	lsls	r3, r3, #6
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb8:	085b      	lsrs	r3, r3, #1
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	041b      	lsls	r3, r3, #16
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc4:	061b      	lsls	r3, r3, #24
 8002bc6:	491b      	ldr	r1, [pc, #108]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c3c <HAL_RCC_OscConfig+0x478>)
 8002bce:	2201      	movs	r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd2:	f7fe ff0b 	bl	80019ec <HAL_GetTick>
 8002bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bd8:	e008      	b.n	8002bec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bda:	f7fe ff07 	bl	80019ec <HAL_GetTick>
 8002bde:	4602      	mov	r2, r0
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d901      	bls.n	8002bec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e05c      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bec:	4b11      	ldr	r3, [pc, #68]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d0f0      	beq.n	8002bda <HAL_RCC_OscConfig+0x416>
 8002bf8:	e054      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b10      	ldr	r3, [pc, #64]	@ (8002c3c <HAL_RCC_OscConfig+0x478>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fe fef4 	bl	80019ec <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c08:	f7fe fef0 	bl	80019ec <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e045      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <HAL_RCC_OscConfig+0x470>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x444>
 8002c26:	e03d      	b.n	8002ca4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d107      	bne.n	8002c40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e038      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4e2>
 8002c34:	40023800 	.word	0x40023800
 8002c38:	40007000 	.word	0x40007000
 8002c3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c40:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb0 <HAL_RCC_OscConfig+0x4ec>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d028      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d121      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d11a      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c6a:	68fa      	ldr	r2, [r7, #12]
 8002c6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c70:	4013      	ands	r3, r2
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d111      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c86:	085b      	lsrs	r3, r3, #1
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d107      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e000      	b.n	8002ca6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800

08002cb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b084      	sub	sp, #16
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0cc      	b.n	8002e62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b68      	ldr	r3, [pc, #416]	@ (8002e6c <HAL_RCC_ClockConfig+0x1b8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d90c      	bls.n	8002cf0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b65      	ldr	r3, [pc, #404]	@ (8002e6c <HAL_RCC_ClockConfig+0x1b8>)
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	b2d2      	uxtb	r2, r2
 8002cdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cde:	4b63      	ldr	r3, [pc, #396]	@ (8002e6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0b8      	b.n	8002e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d020      	beq.n	8002d3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d08:	4b59      	ldr	r3, [pc, #356]	@ (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	4a58      	ldr	r2, [pc, #352]	@ (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0308 	and.w	r3, r3, #8
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d005      	beq.n	8002d2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d20:	4b53      	ldr	r3, [pc, #332]	@ (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4a52      	ldr	r2, [pc, #328]	@ (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d2c:	4b50      	ldr	r3, [pc, #320]	@ (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	494d      	ldr	r1, [pc, #308]	@ (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d044      	beq.n	8002dd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d107      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d52:	4b47      	ldr	r3, [pc, #284]	@ (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d119      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e07f      	b.n	8002e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d003      	beq.n	8002d72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d107      	bne.n	8002d82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d72:	4b3f      	ldr	r3, [pc, #252]	@ (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d109      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e06f      	b.n	8002e62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d82:	4b3b      	ldr	r3, [pc, #236]	@ (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e067      	b.n	8002e62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d92:	4b37      	ldr	r3, [pc, #220]	@ (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	f023 0203 	bic.w	r2, r3, #3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	4934      	ldr	r1, [pc, #208]	@ (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002da4:	f7fe fe22 	bl	80019ec <HAL_GetTick>
 8002da8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002daa:	e00a      	b.n	8002dc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dac:	f7fe fe1e 	bl	80019ec <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e04f      	b.n	8002e62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 020c 	and.w	r2, r3, #12
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d1eb      	bne.n	8002dac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dd4:	4b25      	ldr	r3, [pc, #148]	@ (8002e6c <HAL_RCC_ClockConfig+0x1b8>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d20c      	bcs.n	8002dfc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de2:	4b22      	ldr	r3, [pc, #136]	@ (8002e6c <HAL_RCC_ClockConfig+0x1b8>)
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	b2d2      	uxtb	r2, r2
 8002de8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dea:	4b20      	ldr	r3, [pc, #128]	@ (8002e6c <HAL_RCC_ClockConfig+0x1b8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d001      	beq.n	8002dfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e032      	b.n	8002e62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0304 	and.w	r3, r3, #4
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d008      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e08:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4916      	ldr	r1, [pc, #88]	@ (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0308 	and.w	r3, r3, #8
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d009      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e26:	4b12      	ldr	r3, [pc, #72]	@ (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	490e      	ldr	r1, [pc, #56]	@ (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e3a:	f000 f821 	bl	8002e80 <HAL_RCC_GetSysClockFreq>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	4b0b      	ldr	r3, [pc, #44]	@ (8002e70 <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	091b      	lsrs	r3, r3, #4
 8002e46:	f003 030f 	and.w	r3, r3, #15
 8002e4a:	490a      	ldr	r1, [pc, #40]	@ (8002e74 <HAL_RCC_ClockConfig+0x1c0>)
 8002e4c:	5ccb      	ldrb	r3, [r1, r3]
 8002e4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e52:	4a09      	ldr	r2, [pc, #36]	@ (8002e78 <HAL_RCC_ClockConfig+0x1c4>)
 8002e54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e56:	4b09      	ldr	r3, [pc, #36]	@ (8002e7c <HAL_RCC_ClockConfig+0x1c8>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe fd82 	bl	8001964 <HAL_InitTick>

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40023c00 	.word	0x40023c00
 8002e70:	40023800 	.word	0x40023800
 8002e74:	0800b838 	.word	0x0800b838
 8002e78:	20000000 	.word	0x20000000
 8002e7c:	20000004 	.word	0x20000004

08002e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e84:	b094      	sub	sp, #80	@ 0x50
 8002e86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e98:	4b79      	ldr	r3, [pc, #484]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	2b08      	cmp	r3, #8
 8002ea2:	d00d      	beq.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	f200 80e1 	bhi.w	800306c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d003      	beq.n	8002eba <HAL_RCC_GetSysClockFreq+0x3a>
 8002eb2:	e0db      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002eb4:	4b73      	ldr	r3, [pc, #460]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eb8:	e0db      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eba:	4b73      	ldr	r3, [pc, #460]	@ (8003088 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ebe:	e0d8      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ec0:	4b6f      	ldr	r3, [pc, #444]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ec8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002eca:	4b6d      	ldr	r3, [pc, #436]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d063      	beq.n	8002f9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ed6:	4b6a      	ldr	r3, [pc, #424]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	099b      	lsrs	r3, r3, #6
 8002edc:	2200      	movs	r2, #0
 8002ede:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ee0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ee4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002eea:	2300      	movs	r3, #0
 8002eec:	637b      	str	r3, [r7, #52]	@ 0x34
 8002eee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ef2:	4622      	mov	r2, r4
 8002ef4:	462b      	mov	r3, r5
 8002ef6:	f04f 0000 	mov.w	r0, #0
 8002efa:	f04f 0100 	mov.w	r1, #0
 8002efe:	0159      	lsls	r1, r3, #5
 8002f00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f04:	0150      	lsls	r0, r2, #5
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	1a51      	subs	r1, r2, r1
 8002f0e:	6139      	str	r1, [r7, #16]
 8002f10:	4629      	mov	r1, r5
 8002f12:	eb63 0301 	sbc.w	r3, r3, r1
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	f04f 0200 	mov.w	r2, #0
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f24:	4659      	mov	r1, fp
 8002f26:	018b      	lsls	r3, r1, #6
 8002f28:	4651      	mov	r1, sl
 8002f2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f2e:	4651      	mov	r1, sl
 8002f30:	018a      	lsls	r2, r1, #6
 8002f32:	4651      	mov	r1, sl
 8002f34:	ebb2 0801 	subs.w	r8, r2, r1
 8002f38:	4659      	mov	r1, fp
 8002f3a:	eb63 0901 	sbc.w	r9, r3, r1
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	f04f 0300 	mov.w	r3, #0
 8002f46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f52:	4690      	mov	r8, r2
 8002f54:	4699      	mov	r9, r3
 8002f56:	4623      	mov	r3, r4
 8002f58:	eb18 0303 	adds.w	r3, r8, r3
 8002f5c:	60bb      	str	r3, [r7, #8]
 8002f5e:	462b      	mov	r3, r5
 8002f60:	eb49 0303 	adc.w	r3, r9, r3
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	f04f 0200 	mov.w	r2, #0
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f72:	4629      	mov	r1, r5
 8002f74:	024b      	lsls	r3, r1, #9
 8002f76:	4621      	mov	r1, r4
 8002f78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f7c:	4621      	mov	r1, r4
 8002f7e:	024a      	lsls	r2, r1, #9
 8002f80:	4610      	mov	r0, r2
 8002f82:	4619      	mov	r1, r3
 8002f84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f86:	2200      	movs	r2, #0
 8002f88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f8a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f90:	f7fd fe8a 	bl	8000ca8 <__aeabi_uldivmod>
 8002f94:	4602      	mov	r2, r0
 8002f96:	460b      	mov	r3, r1
 8002f98:	4613      	mov	r3, r2
 8002f9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f9c:	e058      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f9e:	4b38      	ldr	r3, [pc, #224]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	099b      	lsrs	r3, r3, #6
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	4611      	mov	r1, r2
 8002faa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fae:	623b      	str	r3, [r7, #32]
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fb4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fb8:	4642      	mov	r2, r8
 8002fba:	464b      	mov	r3, r9
 8002fbc:	f04f 0000 	mov.w	r0, #0
 8002fc0:	f04f 0100 	mov.w	r1, #0
 8002fc4:	0159      	lsls	r1, r3, #5
 8002fc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fca:	0150      	lsls	r0, r2, #5
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4641      	mov	r1, r8
 8002fd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fd6:	4649      	mov	r1, r9
 8002fd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fdc:	f04f 0200 	mov.w	r2, #0
 8002fe0:	f04f 0300 	mov.w	r3, #0
 8002fe4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fe8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ff0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ff4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	00eb      	lsls	r3, r5, #3
 8003002:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003006:	00e2      	lsls	r2, r4, #3
 8003008:	4614      	mov	r4, r2
 800300a:	461d      	mov	r5, r3
 800300c:	4643      	mov	r3, r8
 800300e:	18e3      	adds	r3, r4, r3
 8003010:	603b      	str	r3, [r7, #0]
 8003012:	464b      	mov	r3, r9
 8003014:	eb45 0303 	adc.w	r3, r5, r3
 8003018:	607b      	str	r3, [r7, #4]
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	f04f 0300 	mov.w	r3, #0
 8003022:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003026:	4629      	mov	r1, r5
 8003028:	028b      	lsls	r3, r1, #10
 800302a:	4621      	mov	r1, r4
 800302c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003030:	4621      	mov	r1, r4
 8003032:	028a      	lsls	r2, r1, #10
 8003034:	4610      	mov	r0, r2
 8003036:	4619      	mov	r1, r3
 8003038:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800303a:	2200      	movs	r2, #0
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	61fa      	str	r2, [r7, #28]
 8003040:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003044:	f7fd fe30 	bl	8000ca8 <__aeabi_uldivmod>
 8003048:	4602      	mov	r2, r0
 800304a:	460b      	mov	r3, r1
 800304c:	4613      	mov	r3, r2
 800304e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003050:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <HAL_RCC_GetSysClockFreq+0x200>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	0c1b      	lsrs	r3, r3, #16
 8003056:	f003 0303 	and.w	r3, r3, #3
 800305a:	3301      	adds	r3, #1
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003060:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003062:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003064:	fbb2 f3f3 	udiv	r3, r2, r3
 8003068:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800306a:	e002      	b.n	8003072 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800306c:	4b05      	ldr	r3, [pc, #20]	@ (8003084 <HAL_RCC_GetSysClockFreq+0x204>)
 800306e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003070:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003074:	4618      	mov	r0, r3
 8003076:	3750      	adds	r7, #80	@ 0x50
 8003078:	46bd      	mov	sp, r7
 800307a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	00f42400 	.word	0x00f42400
 8003088:	007a1200 	.word	0x007a1200

0800308c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003090:	4b03      	ldr	r3, [pc, #12]	@ (80030a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003092:	681b      	ldr	r3, [r3, #0]
}
 8003094:	4618      	mov	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000000 	.word	0x20000000

080030a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80030a8:	f7ff fff0 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030ac:	4602      	mov	r2, r0
 80030ae:	4b05      	ldr	r3, [pc, #20]	@ (80030c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	0a9b      	lsrs	r3, r3, #10
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	4903      	ldr	r1, [pc, #12]	@ (80030c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ba:	5ccb      	ldrb	r3, [r1, r3]
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	40023800 	.word	0x40023800
 80030c8:	0800b848 	.word	0x0800b848

080030cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030d0:	f7ff ffdc 	bl	800308c <HAL_RCC_GetHCLKFreq>
 80030d4:	4602      	mov	r2, r0
 80030d6:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	0b5b      	lsrs	r3, r3, #13
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	4903      	ldr	r1, [pc, #12]	@ (80030f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030e2:	5ccb      	ldrb	r3, [r1, r3]
 80030e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40023800 	.word	0x40023800
 80030f0:	0800b848 	.word	0x0800b848

080030f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d101      	bne.n	8003106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e041      	b.n	800318a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d106      	bne.n	8003120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7fe fab0 	bl	8001680 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2202      	movs	r2, #2
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	4619      	mov	r1, r3
 8003132:	4610      	mov	r0, r2
 8003134:	f000 f9b6 	bl	80034a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d001      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e04e      	b.n	800324a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2202      	movs	r2, #2
 80031b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a23      	ldr	r2, [pc, #140]	@ (8003258 <HAL_TIM_Base_Start_IT+0xc4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d022      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031d6:	d01d      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1f      	ldr	r2, [pc, #124]	@ (800325c <HAL_TIM_Base_Start_IT+0xc8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d018      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a1e      	ldr	r2, [pc, #120]	@ (8003260 <HAL_TIM_Base_Start_IT+0xcc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d013      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1c      	ldr	r2, [pc, #112]	@ (8003264 <HAL_TIM_Base_Start_IT+0xd0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00e      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1b      	ldr	r2, [pc, #108]	@ (8003268 <HAL_TIM_Base_Start_IT+0xd4>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d009      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a19      	ldr	r2, [pc, #100]	@ (800326c <HAL_TIM_Base_Start_IT+0xd8>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d004      	beq.n	8003214 <HAL_TIM_Base_Start_IT+0x80>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a18      	ldr	r2, [pc, #96]	@ (8003270 <HAL_TIM_Base_Start_IT+0xdc>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d111      	bne.n	8003238 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b06      	cmp	r3, #6
 8003224:	d010      	beq.n	8003248 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f042 0201 	orr.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003236:	e007      	b.n	8003248 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f042 0201 	orr.w	r2, r2, #1
 8003246:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40010000 	.word	0x40010000
 800325c:	40000400 	.word	0x40000400
 8003260:	40000800 	.word	0x40000800
 8003264:	40000c00 	.word	0x40000c00
 8003268:	40010400 	.word	0x40010400
 800326c:	40014000 	.word	0x40014000
 8003270:	40001800 	.word	0x40001800

08003274 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	691b      	ldr	r3, [r3, #16]
 800328a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d020      	beq.n	80032d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f003 0302 	and.w	r3, r3, #2
 800329c:	2b00      	cmp	r3, #0
 800329e:	d01b      	beq.n	80032d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f06f 0202 	mvn.w	r2, #2
 80032a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2201      	movs	r2, #1
 80032ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	f003 0303 	and.w	r3, r3, #3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8d2 	bl	8003468 <HAL_TIM_IC_CaptureCallback>
 80032c4:	e005      	b.n	80032d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 f8c4 	bl	8003454 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f000 f8d5 	bl	800347c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d020      	beq.n	8003324 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01b      	beq.n	8003324 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f06f 0204 	mvn.w	r2, #4
 80032f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2202      	movs	r2, #2
 80032fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 f8ac 	bl	8003468 <HAL_TIM_IC_CaptureCallback>
 8003310:	e005      	b.n	800331e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f89e 	bl	8003454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f000 f8af 	bl	800347c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d020      	beq.n	8003370 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d01b      	beq.n	8003370 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f06f 0208 	mvn.w	r2, #8
 8003340:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2204      	movs	r2, #4
 8003346:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	69db      	ldr	r3, [r3, #28]
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 f886 	bl	8003468 <HAL_TIM_IC_CaptureCallback>
 800335c:	e005      	b.n	800336a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f878 	bl	8003454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f000 f889 	bl	800347c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	f003 0310 	and.w	r3, r3, #16
 8003376:	2b00      	cmp	r3, #0
 8003378:	d020      	beq.n	80033bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f003 0310 	and.w	r3, r3, #16
 8003380:	2b00      	cmp	r3, #0
 8003382:	d01b      	beq.n	80033bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0210 	mvn.w	r2, #16
 800338c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2208      	movs	r2, #8
 8003392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 f860 	bl	8003468 <HAL_TIM_IC_CaptureCallback>
 80033a8:	e005      	b.n	80033b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f852 	bl	8003454 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f863 	bl	800347c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00c      	beq.n	80033e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f06f 0201 	mvn.w	r2, #1
 80033d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd ffd8 	bl	8001390 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00c      	beq.n	8003404 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d007      	beq.n	8003404 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80033fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f982 	bl	8003708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00c      	beq.n	8003428 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003414:	2b00      	cmp	r3, #0
 8003416:	d007      	beq.n	8003428 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f834 	bl	8003490 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00c      	beq.n	800344c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0220 	mvn.w	r2, #32
 8003444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f954 	bl	80036f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800344c:	bf00      	nop
 800344e:	3710      	adds	r7, #16
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}

08003454 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800345c:	bf00      	nop
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b085      	sub	sp, #20
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a46      	ldr	r2, [pc, #280]	@ (80035d0 <TIM_Base_SetConfig+0x12c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d013      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034c2:	d00f      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a43      	ldr	r2, [pc, #268]	@ (80035d4 <TIM_Base_SetConfig+0x130>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d00b      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a42      	ldr	r2, [pc, #264]	@ (80035d8 <TIM_Base_SetConfig+0x134>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d007      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a41      	ldr	r2, [pc, #260]	@ (80035dc <TIM_Base_SetConfig+0x138>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d003      	beq.n	80034e4 <TIM_Base_SetConfig+0x40>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a40      	ldr	r2, [pc, #256]	@ (80035e0 <TIM_Base_SetConfig+0x13c>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d108      	bne.n	80034f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a35      	ldr	r2, [pc, #212]	@ (80035d0 <TIM_Base_SetConfig+0x12c>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d02b      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003504:	d027      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a32      	ldr	r2, [pc, #200]	@ (80035d4 <TIM_Base_SetConfig+0x130>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d023      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a31      	ldr	r2, [pc, #196]	@ (80035d8 <TIM_Base_SetConfig+0x134>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d01f      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a30      	ldr	r2, [pc, #192]	@ (80035dc <TIM_Base_SetConfig+0x138>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d01b      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a2f      	ldr	r2, [pc, #188]	@ (80035e0 <TIM_Base_SetConfig+0x13c>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d017      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a2e      	ldr	r2, [pc, #184]	@ (80035e4 <TIM_Base_SetConfig+0x140>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d013      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a2d      	ldr	r2, [pc, #180]	@ (80035e8 <TIM_Base_SetConfig+0x144>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d00f      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a2c      	ldr	r2, [pc, #176]	@ (80035ec <TIM_Base_SetConfig+0x148>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00b      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a2b      	ldr	r2, [pc, #172]	@ (80035f0 <TIM_Base_SetConfig+0x14c>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d007      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2a      	ldr	r2, [pc, #168]	@ (80035f4 <TIM_Base_SetConfig+0x150>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d003      	beq.n	8003556 <TIM_Base_SetConfig+0xb2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a29      	ldr	r2, [pc, #164]	@ (80035f8 <TIM_Base_SetConfig+0x154>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d108      	bne.n	8003568 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800355c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a10      	ldr	r2, [pc, #64]	@ (80035d0 <TIM_Base_SetConfig+0x12c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d003      	beq.n	800359c <TIM_Base_SetConfig+0xf8>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	4a12      	ldr	r2, [pc, #72]	@ (80035e0 <TIM_Base_SetConfig+0x13c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d103      	bne.n	80035a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d105      	bne.n	80035c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f023 0201 	bic.w	r2, r3, #1
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	611a      	str	r2, [r3, #16]
  }
}
 80035c2:	bf00      	nop
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40010000 	.word	0x40010000
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40000800 	.word	0x40000800
 80035dc:	40000c00 	.word	0x40000c00
 80035e0:	40010400 	.word	0x40010400
 80035e4:	40014000 	.word	0x40014000
 80035e8:	40014400 	.word	0x40014400
 80035ec:	40014800 	.word	0x40014800
 80035f0:	40001800 	.word	0x40001800
 80035f4:	40001c00 	.word	0x40001c00
 80035f8:	40002000 	.word	0x40002000

080035fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003610:	2302      	movs	r3, #2
 8003612:	e05a      	b.n	80036ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800363a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	4313      	orrs	r3, r2
 8003644:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a21      	ldr	r2, [pc, #132]	@ (80036d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d022      	beq.n	800369e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003660:	d01d      	beq.n	800369e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1d      	ldr	r2, [pc, #116]	@ (80036dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d018      	beq.n	800369e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a1b      	ldr	r2, [pc, #108]	@ (80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a1a      	ldr	r2, [pc, #104]	@ (80036e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d00e      	beq.n	800369e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a18      	ldr	r2, [pc, #96]	@ (80036e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d009      	beq.n	800369e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a17      	ldr	r2, [pc, #92]	@ (80036ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d004      	beq.n	800369e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a15      	ldr	r2, [pc, #84]	@ (80036f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d10c      	bne.n	80036b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3714      	adds	r7, #20
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40010000 	.word	0x40010000
 80036dc:	40000400 	.word	0x40000400
 80036e0:	40000800 	.word	0x40000800
 80036e4:	40000c00 	.word	0x40000c00
 80036e8:	40010400 	.word	0x40010400
 80036ec:	40014000 	.word	0x40014000
 80036f0:	40001800 	.word	0x40001800

080036f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e042      	b.n	80037b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fe f80c 	bl	8001760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2224      	movs	r2, #36	@ 0x24
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800375e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f001 f8a3 	bl	80048ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003774:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003784:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003794:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	@ 0x28
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	4613      	mov	r3, r2
 80037ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b20      	cmp	r3, #32
 80037da:	d175      	bne.n	80038c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d002      	beq.n	80037e8 <HAL_UART_Transmit+0x2c>
 80037e2:	88fb      	ldrh	r3, [r7, #6]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e06e      	b.n	80038ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2221      	movs	r2, #33	@ 0x21
 80037f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037fa:	f7fe f8f7 	bl	80019ec <HAL_GetTick>
 80037fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	88fa      	ldrh	r2, [r7, #6]
 8003804:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	88fa      	ldrh	r2, [r7, #6]
 800380a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003814:	d108      	bne.n	8003828 <HAL_UART_Transmit+0x6c>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d104      	bne.n	8003828 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	e003      	b.n	8003830 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003830:	e02e      	b.n	8003890 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2200      	movs	r2, #0
 800383a:	2180      	movs	r1, #128	@ 0x80
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fd7c 	bl	800433a <UART_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e03a      	b.n	80038ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10b      	bne.n	8003872 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003868:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	3302      	adds	r3, #2
 800386e:	61bb      	str	r3, [r7, #24]
 8003870:	e007      	b.n	8003882 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	781a      	ldrb	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	3301      	adds	r3, #1
 8003880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003894:	b29b      	uxth	r3, r3
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1cb      	bne.n	8003832 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	2200      	movs	r2, #0
 80038a2:	2140      	movs	r1, #64	@ 0x40
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fd48 	bl	800433a <UART_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e006      	b.n	80038ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80038c4:	2300      	movs	r3, #0
 80038c6:	e000      	b.n	80038ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80038c8:	2302      	movs	r3, #2
  }
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3720      	adds	r7, #32
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
	...

080038d4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08c      	sub	sp, #48	@ 0x30
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	4613      	mov	r3, r2
 80038e0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d156      	bne.n	800399c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <HAL_UART_Transmit_DMA+0x26>
 80038f4:	88fb      	ldrh	r3, [r7, #6]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e04f      	b.n	800399e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80038fe:	68ba      	ldr	r2, [r7, #8]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	88fa      	ldrh	r2, [r7, #6]
 8003908:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	88fa      	ldrh	r2, [r7, #6]
 800390e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2200      	movs	r2, #0
 8003914:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2221      	movs	r2, #33	@ 0x21
 800391a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003922:	4a21      	ldr	r2, [pc, #132]	@ (80039a8 <HAL_UART_Transmit_DMA+0xd4>)
 8003924:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800392a:	4a20      	ldr	r2, [pc, #128]	@ (80039ac <HAL_UART_Transmit_DMA+0xd8>)
 800392c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003932:	4a1f      	ldr	r2, [pc, #124]	@ (80039b0 <HAL_UART_Transmit_DMA+0xdc>)
 8003934:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800393a:	2200      	movs	r2, #0
 800393c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800393e:	f107 0308 	add.w	r3, r7, #8
 8003942:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394a:	6819      	ldr	r1, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	3304      	adds	r3, #4
 8003952:	461a      	mov	r2, r3
 8003954:	88fb      	ldrh	r3, [r7, #6]
 8003956:	f7fe fa15 	bl	8001d84 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003962:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3314      	adds	r3, #20
 800396a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	e853 3f00 	ldrex	r3, [r3]
 8003972:	617b      	str	r3, [r7, #20]
   return(result);
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800397a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	3314      	adds	r3, #20
 8003982:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003984:	627a      	str	r2, [r7, #36]	@ 0x24
 8003986:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	6a39      	ldr	r1, [r7, #32]
 800398a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800398c:	e841 2300 	strex	r3, r2, [r1]
 8003990:	61fb      	str	r3, [r7, #28]
   return(result);
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e5      	bne.n	8003964 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	e000      	b.n	800399e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800399c:	2302      	movs	r3, #2
  }
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3730      	adds	r7, #48	@ 0x30
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	08004089 	.word	0x08004089
 80039ac:	08004123 	.word	0x08004123
 80039b0:	080042a7 	.word	0x080042a7

080039b4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	4613      	mov	r3, r2
 80039c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b20      	cmp	r3, #32
 80039cc:	d112      	bne.n	80039f4 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_UART_Receive_DMA+0x26>
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e00b      	b.n	80039f6 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	461a      	mov	r2, r3
 80039e8:	68b9      	ldr	r1, [r7, #8]
 80039ea:	68f8      	ldr	r0, [r7, #12]
 80039ec:	f000 fcfe 	bl	80043ec <UART_Start_Receive_DMA>
 80039f0:	4603      	mov	r3, r0
 80039f2:	e000      	b.n	80039f6 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80039f4:	2302      	movs	r3, #2
  }
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b090      	sub	sp, #64	@ 0x40
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a14:	2b80      	cmp	r3, #128	@ 0x80
 8003a16:	bf0c      	ite	eq
 8003a18:	2301      	moveq	r3, #1
 8003a1a:	2300      	movne	r3, #0
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b21      	cmp	r3, #33	@ 0x21
 8003a2a:	d128      	bne.n	8003a7e <HAL_UART_DMAStop+0x80>
 8003a2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d025      	beq.n	8003a7e <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3314      	adds	r3, #20
 8003a38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	623b      	str	r3, [r7, #32]
   return(result);
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3314      	adds	r3, #20
 8003a50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a52:	633a      	str	r2, [r7, #48]	@ 0x30
 8003a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e5      	bne.n	8003a32 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d004      	beq.n	8003a78 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a72:	4618      	mov	r0, r3
 8003a74:	f7fe f9de 	bl	8001e34 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 fd51 	bl	8004520 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a88:	2b40      	cmp	r3, #64	@ 0x40
 8003a8a:	bf0c      	ite	eq
 8003a8c:	2301      	moveq	r3, #1
 8003a8e:	2300      	movne	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b22      	cmp	r3, #34	@ 0x22
 8003a9e:	d128      	bne.n	8003af2 <HAL_UART_DMAStop+0xf4>
 8003aa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d025      	beq.n	8003af2 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3314      	adds	r3, #20
 8003aac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3314      	adds	r3, #20
 8003ac4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ac6:	61fa      	str	r2, [r7, #28]
 8003ac8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	69b9      	ldr	r1, [r7, #24]
 8003acc:	69fa      	ldr	r2, [r7, #28]
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	617b      	str	r3, [r7, #20]
   return(result);
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e5      	bne.n	8003aa6 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d004      	beq.n	8003aec <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fe f9a4 	bl	8001e34 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fd3f 	bl	8004570 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003af2:	2300      	movs	r3, #0
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3740      	adds	r7, #64	@ 0x40
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b0ba      	sub	sp, #232	@ 0xe8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10f      	bne.n	8003b62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <HAL_UART_IRQHandler+0x66>
 8003b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b52:	f003 0320 	and.w	r3, r3, #32
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 fde7 	bl	800472e <UART_Receive_IT>
      return;
 8003b60:	e25b      	b.n	800401a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80de 	beq.w	8003d28 <HAL_UART_IRQHandler+0x22c>
 8003b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d106      	bne.n	8003b86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b7c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 80d1 	beq.w	8003d28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00b      	beq.n	8003baa <HAL_UART_IRQHandler+0xae>
 8003b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d005      	beq.n	8003baa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba2:	f043 0201 	orr.w	r2, r3, #1
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bae:	f003 0304 	and.w	r3, r3, #4
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00b      	beq.n	8003bce <HAL_UART_IRQHandler+0xd2>
 8003bb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d005      	beq.n	8003bce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc6:	f043 0202 	orr.w	r2, r3, #2
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00b      	beq.n	8003bf2 <HAL_UART_IRQHandler+0xf6>
 8003bda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bea:	f043 0204 	orr.w	r2, r3, #4
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003bf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d011      	beq.n	8003c22 <HAL_UART_IRQHandler+0x126>
 8003bfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c02:	f003 0320 	and.w	r3, r3, #32
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d105      	bne.n	8003c16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1a:	f043 0208 	orr.w	r2, r3, #8
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	f000 81f2 	beq.w	8004010 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c30:	f003 0320 	and.w	r3, r3, #32
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_UART_IRQHandler+0x14e>
 8003c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c3c:	f003 0320 	and.w	r3, r3, #32
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fd72 	bl	800472e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c54:	2b40      	cmp	r3, #64	@ 0x40
 8003c56:	bf0c      	ite	eq
 8003c58:	2301      	moveq	r3, #1
 8003c5a:	2300      	movne	r3, #0
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c66:	f003 0308 	and.w	r3, r3, #8
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d103      	bne.n	8003c76 <HAL_UART_IRQHandler+0x17a>
 8003c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d04f      	beq.n	8003d16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fc7a 	bl	8004570 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c86:	2b40      	cmp	r3, #64	@ 0x40
 8003c88:	d141      	bne.n	8003d0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3314      	adds	r3, #20
 8003c90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003c98:	e853 3f00 	ldrex	r3, [r3]
 8003c9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ca0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ca4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ca8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	3314      	adds	r3, #20
 8003cb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003cb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003cba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003cc6:	e841 2300 	strex	r3, r2, [r1]
 8003cca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003cce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1d9      	bne.n	8003c8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d013      	beq.n	8003d06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce2:	4a7e      	ldr	r2, [pc, #504]	@ (8003edc <HAL_UART_IRQHandler+0x3e0>)
 8003ce4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe f912 	bl	8001f14 <HAL_DMA_Abort_IT>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d016      	beq.n	8003d24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d00:	4610      	mov	r0, r2
 8003d02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d04:	e00e      	b.n	8003d24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 f9a8 	bl	800405c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0c:	e00a      	b.n	8003d24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f9a4 	bl	800405c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d14:	e006      	b.n	8003d24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 f9a0 	bl	800405c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d22:	e175      	b.n	8004010 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d24:	bf00      	nop
    return;
 8003d26:	e173      	b.n	8004010 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	f040 814f 	bne.w	8003fd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d36:	f003 0310 	and.w	r3, r3, #16
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	f000 8148 	beq.w	8003fd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d44:	f003 0310 	and.w	r3, r3, #16
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8141 	beq.w	8003fd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60bb      	str	r3, [r7, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d6e:	2b40      	cmp	r3, #64	@ 0x40
 8003d70:	f040 80b6 	bne.w	8003ee0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8145 	beq.w	8004014 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d92:	429a      	cmp	r2, r3
 8003d94:	f080 813e 	bcs.w	8004014 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003d9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003daa:	f000 8088 	beq.w	8003ebe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	330c      	adds	r3, #12
 8003db4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dbc:	e853 3f00 	ldrex	r3, [r3]
 8003dc0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003dc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dcc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003dda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003de6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003dea:	e841 2300 	strex	r3, r2, [r1]
 8003dee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003df2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1d9      	bne.n	8003dae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3314      	adds	r3, #20
 8003e00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e04:	e853 3f00 	ldrex	r3, [r3]
 8003e08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e0c:	f023 0301 	bic.w	r3, r3, #1
 8003e10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3314      	adds	r3, #20
 8003e1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e1e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e22:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e2a:	e841 2300 	strex	r3, r2, [r1]
 8003e2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1e1      	bne.n	8003dfa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3314      	adds	r3, #20
 8003e3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e40:	e853 3f00 	ldrex	r3, [r3]
 8003e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e48:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e4c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3314      	adds	r3, #20
 8003e56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e60:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e62:	e841 2300 	strex	r3, r2, [r1]
 8003e66:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1e3      	bne.n	8003e36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2220      	movs	r2, #32
 8003e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	330c      	adds	r3, #12
 8003e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e86:	e853 3f00 	ldrex	r3, [r3]
 8003e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e8e:	f023 0310 	bic.w	r3, r3, #16
 8003e92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	330c      	adds	r3, #12
 8003e9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ea0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ea2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ea6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003eae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e3      	bne.n	8003e7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7fd ffbb 	bl	8001e34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f8cb 	bl	8004070 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003eda:	e09b      	b.n	8004014 <HAL_UART_IRQHandler+0x518>
 8003edc:	08004637 	.word	0x08004637
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 808e 	beq.w	8004018 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003efc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 8089 	beq.w	8004018 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	330c      	adds	r3, #12
 8003f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f10:	e853 3f00 	ldrex	r3, [r3]
 8003f14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f18:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	330c      	adds	r3, #12
 8003f26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f2a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f2c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f2e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f32:	e841 2300 	strex	r3, r2, [r1]
 8003f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1e3      	bne.n	8003f06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3314      	adds	r3, #20
 8003f44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3314      	adds	r3, #20
 8003f5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f62:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f66:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f6a:	e841 2300 	strex	r3, r2, [r1]
 8003f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1e3      	bne.n	8003f3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	330c      	adds	r3, #12
 8003f8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f023 0310 	bic.w	r3, r3, #16
 8003f9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	330c      	adds	r3, #12
 8003fa4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003fa8:	61fa      	str	r2, [r7, #28]
 8003faa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	69b9      	ldr	r1, [r7, #24]
 8003fae:	69fa      	ldr	r2, [r7, #28]
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	617b      	str	r3, [r7, #20]
   return(result);
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e3      	bne.n	8003f84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 f851 	bl	8004070 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fce:	e023      	b.n	8004018 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d009      	beq.n	8003ff0 <HAL_UART_IRQHandler+0x4f4>
 8003fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d003      	beq.n	8003ff0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 fb38 	bl	800465e <UART_Transmit_IT>
    return;
 8003fee:	e014      	b.n	800401a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ff0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00e      	beq.n	800401a <HAL_UART_IRQHandler+0x51e>
 8003ffc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004004:	2b00      	cmp	r3, #0
 8004006:	d008      	beq.n	800401a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 fb78 	bl	80046fe <UART_EndTransmit_IT>
    return;
 800400e:	e004      	b.n	800401a <HAL_UART_IRQHandler+0x51e>
    return;
 8004010:	bf00      	nop
 8004012:	e002      	b.n	800401a <HAL_UART_IRQHandler+0x51e>
      return;
 8004014:	bf00      	nop
 8004016:	e000      	b.n	800401a <HAL_UART_IRQHandler+0x51e>
      return;
 8004018:	bf00      	nop
  }
}
 800401a:	37e8      	adds	r7, #232	@ 0xe8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b090      	sub	sp, #64	@ 0x40
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004094:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d137      	bne.n	8004114 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80040a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a6:	2200      	movs	r2, #0
 80040a8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80040aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	3314      	adds	r3, #20
 80040b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b4:	e853 3f00 	ldrex	r3, [r3]
 80040b8:	623b      	str	r3, [r7, #32]
   return(result);
 80040ba:	6a3b      	ldr	r3, [r7, #32]
 80040bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	3314      	adds	r3, #20
 80040c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80040cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040d2:	e841 2300 	strex	r3, r2, [r1]
 80040d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1e5      	bne.n	80040aa <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	330c      	adds	r3, #12
 80040e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	e853 3f00 	ldrex	r3, [r3]
 80040ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80040f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	330c      	adds	r3, #12
 80040fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040fe:	61fa      	str	r2, [r7, #28]
 8004100:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004102:	69b9      	ldr	r1, [r7, #24]
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	e841 2300 	strex	r3, r2, [r1]
 800410a:	617b      	str	r3, [r7, #20]
   return(result);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1e5      	bne.n	80040de <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004112:	e002      	b.n	800411a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004114:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004116:	f7fd f94d 	bl	80013b4 <HAL_UART_TxCpltCallback>
}
 800411a:	bf00      	nop
 800411c:	3740      	adds	r7, #64	@ 0x40
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b084      	sub	sp, #16
 8004126:	af00      	add	r7, sp, #0
 8004128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f7ff ff75 	bl	8004020 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004136:	bf00      	nop
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b09c      	sub	sp, #112	@ 0x70
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004156:	2b00      	cmp	r3, #0
 8004158:	d172      	bne.n	8004240 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800415a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800415c:	2200      	movs	r2, #0
 800415e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	330c      	adds	r3, #12
 8004166:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004168:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800416a:	e853 3f00 	ldrex	r3, [r3]
 800416e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004172:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004176:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	330c      	adds	r3, #12
 800417e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004180:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004182:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004184:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004186:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004188:	e841 2300 	strex	r3, r2, [r1]
 800418c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800418e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004190:	2b00      	cmp	r3, #0
 8004192:	d1e5      	bne.n	8004160 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3314      	adds	r3, #20
 800419a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041a6:	f023 0301 	bic.w	r3, r3, #1
 80041aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80041ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3314      	adds	r3, #20
 80041b2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80041b4:	647a      	str	r2, [r7, #68]	@ 0x44
 80041b6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80041ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041bc:	e841 2300 	strex	r3, r2, [r1]
 80041c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1e5      	bne.n	8004194 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	3314      	adds	r3, #20
 80041ce:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	623b      	str	r3, [r7, #32]
   return(result);
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041de:	663b      	str	r3, [r7, #96]	@ 0x60
 80041e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3314      	adds	r3, #20
 80041e6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80041e8:	633a      	str	r2, [r7, #48]	@ 0x30
 80041ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e5      	bne.n	80041c8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041fe:	2220      	movs	r2, #32
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004208:	2b01      	cmp	r3, #1
 800420a:	d119      	bne.n	8004240 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	60fb      	str	r3, [r7, #12]
   return(result);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 0310 	bic.w	r3, r3, #16
 8004222:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004224:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800422c:	61fa      	str	r2, [r7, #28]
 800422e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004230:	69b9      	ldr	r1, [r7, #24]
 8004232:	69fa      	ldr	r2, [r7, #28]
 8004234:	e841 2300 	strex	r3, r2, [r1]
 8004238:	617b      	str	r3, [r7, #20]
   return(result);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1e5      	bne.n	800420c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004240:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004242:	2200      	movs	r2, #0
 8004244:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424a:	2b01      	cmp	r3, #1
 800424c:	d106      	bne.n	800425c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800424e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004250:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004252:	4619      	mov	r1, r3
 8004254:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004256:	f7ff ff0b 	bl	8004070 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800425a:	e002      	b.n	8004262 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800425c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800425e:	f7ff fee9 	bl	8004034 <HAL_UART_RxCpltCallback>
}
 8004262:	bf00      	nop
 8004264:	3770      	adds	r7, #112	@ 0x70
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004276:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2201      	movs	r2, #1
 800427c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004282:	2b01      	cmp	r3, #1
 8004284:	d108      	bne.n	8004298 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800428a:	085b      	lsrs	r3, r3, #1
 800428c:	b29b      	uxth	r3, r3
 800428e:	4619      	mov	r1, r3
 8004290:	68f8      	ldr	r0, [r7, #12]
 8004292:	f7ff feed 	bl	8004070 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004296:	e002      	b.n	800429e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f7ff fed5 	bl	8004048 <HAL_UART_RxHalfCpltCallback>
}
 800429e:	bf00      	nop
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042c2:	2b80      	cmp	r3, #128	@ 0x80
 80042c4:	bf0c      	ite	eq
 80042c6:	2301      	moveq	r3, #1
 80042c8:	2300      	movne	r3, #0
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b21      	cmp	r3, #33	@ 0x21
 80042d8:	d108      	bne.n	80042ec <UART_DMAError+0x46>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	2200      	movs	r2, #0
 80042e4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80042e6:	68b8      	ldr	r0, [r7, #8]
 80042e8:	f000 f91a 	bl	8004520 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f6:	2b40      	cmp	r3, #64	@ 0x40
 80042f8:	bf0c      	ite	eq
 80042fa:	2301      	moveq	r3, #1
 80042fc:	2300      	movne	r3, #0
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b22      	cmp	r3, #34	@ 0x22
 800430c:	d108      	bne.n	8004320 <UART_DMAError+0x7a>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d005      	beq.n	8004320 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2200      	movs	r2, #0
 8004318:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800431a:	68b8      	ldr	r0, [r7, #8]
 800431c:	f000 f928 	bl	8004570 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004324:	f043 0210 	orr.w	r2, r3, #16
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800432c:	68b8      	ldr	r0, [r7, #8]
 800432e:	f7ff fe95 	bl	800405c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004332:	bf00      	nop
 8004334:	3710      	adds	r7, #16
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b086      	sub	sp, #24
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	4613      	mov	r3, r2
 8004348:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800434a:	e03b      	b.n	80043c4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004352:	d037      	beq.n	80043c4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004354:	f7fd fb4a 	bl	80019ec <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	6a3a      	ldr	r2, [r7, #32]
 8004360:	429a      	cmp	r2, r3
 8004362:	d302      	bcc.n	800436a <UART_WaitOnFlagUntilTimeout+0x30>
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e03a      	b.n	80043e4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d023      	beq.n	80043c4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2b80      	cmp	r3, #128	@ 0x80
 8004380:	d020      	beq.n	80043c4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2b40      	cmp	r3, #64	@ 0x40
 8004386:	d01d      	beq.n	80043c4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b08      	cmp	r3, #8
 8004394:	d116      	bne.n	80043c4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004396:	2300      	movs	r3, #0
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	617b      	str	r3, [r7, #20]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f8df 	bl	8004570 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2208      	movs	r2, #8
 80043b6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e00f      	b.n	80043e4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4013      	ands	r3, r2
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	bf0c      	ite	eq
 80043d4:	2301      	moveq	r3, #1
 80043d6:	2300      	movne	r3, #0
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	461a      	mov	r2, r3
 80043dc:	79fb      	ldrb	r3, [r7, #7]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d0b4      	beq.n	800434c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b098      	sub	sp, #96	@ 0x60
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	4613      	mov	r3, r2
 80043f8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	88fa      	ldrh	r2, [r7, #6]
 8004404:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2222      	movs	r2, #34	@ 0x22
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004418:	4a3e      	ldr	r2, [pc, #248]	@ (8004514 <UART_Start_Receive_DMA+0x128>)
 800441a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004420:	4a3d      	ldr	r2, [pc, #244]	@ (8004518 <UART_Start_Receive_DMA+0x12c>)
 8004422:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004428:	4a3c      	ldr	r2, [pc, #240]	@ (800451c <UART_Start_Receive_DMA+0x130>)
 800442a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004430:	2200      	movs	r2, #0
 8004432:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004434:	f107 0308 	add.w	r3, r7, #8
 8004438:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	3304      	adds	r3, #4
 8004444:	4619      	mov	r1, r3
 8004446:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	88fb      	ldrh	r3, [r7, #6]
 800444c:	f7fd fc9a 	bl	8001d84 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004450:	2300      	movs	r3, #0
 8004452:	613b      	str	r3, [r7, #16]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	613b      	str	r3, [r7, #16]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	613b      	str	r3, [r7, #16]
 8004464:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d019      	beq.n	80044a2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800447e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004484:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800448e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004490:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004494:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800449c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e5      	bne.n	800446e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3314      	adds	r3, #20
 80044a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044b4:	f043 0301 	orr.w	r3, r3, #1
 80044b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3314      	adds	r3, #20
 80044c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80044c2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80044c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80044c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e5      	bne.n	80044a2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	3314      	adds	r3, #20
 80044dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044de:	69bb      	ldr	r3, [r7, #24]
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	617b      	str	r3, [r7, #20]
   return(result);
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3314      	adds	r3, #20
 80044f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80044f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80044f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6a39      	ldr	r1, [r7, #32]
 80044fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	61fb      	str	r3, [r7, #28]
   return(result);
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e5      	bne.n	80044d6 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800450a:	2300      	movs	r3, #0
}
 800450c:	4618      	mov	r0, r3
 800450e:	3760      	adds	r7, #96	@ 0x60
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}
 8004514:	0800413f 	.word	0x0800413f
 8004518:	0800426b 	.word	0x0800426b
 800451c:	080042a7 	.word	0x080042a7

08004520 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004520:	b480      	push	{r7}
 8004522:	b089      	sub	sp, #36	@ 0x24
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	330c      	adds	r3, #12
 800452e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	e853 3f00 	ldrex	r3, [r3]
 8004536:	60bb      	str	r3, [r7, #8]
   return(result);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800453e:	61fb      	str	r3, [r7, #28]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	330c      	adds	r3, #12
 8004546:	69fa      	ldr	r2, [r7, #28]
 8004548:	61ba      	str	r2, [r7, #24]
 800454a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454c:	6979      	ldr	r1, [r7, #20]
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	e841 2300 	strex	r3, r2, [r1]
 8004554:	613b      	str	r3, [r7, #16]
   return(result);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e5      	bne.n	8004528 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004564:	bf00      	nop
 8004566:	3724      	adds	r7, #36	@ 0x24
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004570:	b480      	push	{r7}
 8004572:	b095      	sub	sp, #84	@ 0x54
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	330c      	adds	r3, #12
 800457e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004582:	e853 3f00 	ldrex	r3, [r3]
 8004586:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800458e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004598:	643a      	str	r2, [r7, #64]	@ 0x40
 800459a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800459c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800459e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045a0:	e841 2300 	strex	r3, r2, [r1]
 80045a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d1e5      	bne.n	8004578 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	3314      	adds	r3, #20
 80045b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	e853 3f00 	ldrex	r3, [r3]
 80045ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3314      	adds	r3, #20
 80045ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045d4:	e841 2300 	strex	r3, r2, [r1]
 80045d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1e5      	bne.n	80045ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d119      	bne.n	800461c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	330c      	adds	r3, #12
 80045ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	e853 3f00 	ldrex	r3, [r3]
 80045f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	f023 0310 	bic.w	r3, r3, #16
 80045fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	330c      	adds	r3, #12
 8004606:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004608:	61ba      	str	r2, [r7, #24]
 800460a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	6979      	ldr	r1, [r7, #20]
 800460e:	69ba      	ldr	r2, [r7, #24]
 8004610:	e841 2300 	strex	r3, r2, [r1]
 8004614:	613b      	str	r3, [r7, #16]
   return(result);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e5      	bne.n	80045e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800462a:	bf00      	nop
 800462c:	3754      	adds	r7, #84	@ 0x54
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b084      	sub	sp, #16
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004642:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004650:	68f8      	ldr	r0, [r7, #12]
 8004652:	f7ff fd03 	bl	800405c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004656:	bf00      	nop
 8004658:	3710      	adds	r7, #16
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800465e:	b480      	push	{r7}
 8004660:	b085      	sub	sp, #20
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b21      	cmp	r3, #33	@ 0x21
 8004670:	d13e      	bne.n	80046f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800467a:	d114      	bne.n	80046a6 <UART_Transmit_IT+0x48>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d110      	bne.n	80046a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	881b      	ldrh	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004698:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a1b      	ldr	r3, [r3, #32]
 800469e:	1c9a      	adds	r2, r3, #2
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	621a      	str	r2, [r3, #32]
 80046a4:	e008      	b.n	80046b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	1c59      	adds	r1, r3, #1
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6211      	str	r1, [r2, #32]
 80046b0:	781a      	ldrb	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	4619      	mov	r1, r3
 80046c6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10f      	bne.n	80046ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046ec:	2300      	movs	r3, #0
 80046ee:	e000      	b.n	80046f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046f0:	2302      	movs	r3, #2
  }
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3714      	adds	r7, #20
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr

080046fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004714:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f7fc fe48 	bl	80013b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800472e:	b580      	push	{r7, lr}
 8004730:	b08c      	sub	sp, #48	@ 0x30
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b22      	cmp	r3, #34	@ 0x22
 8004740:	f040 80ae 	bne.w	80048a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800474c:	d117      	bne.n	800477e <UART_Receive_IT+0x50>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d113      	bne.n	800477e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800475e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	b29b      	uxth	r3, r3
 8004768:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476c:	b29a      	uxth	r2, r3
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004770:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004776:	1c9a      	adds	r2, r3, #2
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	629a      	str	r2, [r3, #40]	@ 0x28
 800477c:	e026      	b.n	80047cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004782:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004784:	2300      	movs	r3, #0
 8004786:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004790:	d007      	beq.n	80047a2 <UART_Receive_IT+0x74>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <UART_Receive_IT+0x82>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047ac:	701a      	strb	r2, [r3, #0]
 80047ae:	e008      	b.n	80047c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047bc:	b2da      	uxtb	r2, r3
 80047be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3b01      	subs	r3, #1
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4619      	mov	r1, r3
 80047da:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d15d      	bne.n	800489c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f022 0220 	bic.w	r2, r2, #32
 80047ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68da      	ldr	r2, [r3, #12]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695a      	ldr	r2, [r3, #20]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2220      	movs	r2, #32
 8004814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004822:	2b01      	cmp	r3, #1
 8004824:	d135      	bne.n	8004892 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	330c      	adds	r3, #12
 8004832:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	e853 3f00 	ldrex	r3, [r3]
 800483a:	613b      	str	r3, [r7, #16]
   return(result);
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f023 0310 	bic.w	r3, r3, #16
 8004842:	627b      	str	r3, [r7, #36]	@ 0x24
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800484c:	623a      	str	r2, [r7, #32]
 800484e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004850:	69f9      	ldr	r1, [r7, #28]
 8004852:	6a3a      	ldr	r2, [r7, #32]
 8004854:	e841 2300 	strex	r3, r2, [r1]
 8004858:	61bb      	str	r3, [r7, #24]
   return(result);
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e5      	bne.n	800482c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 0310 	and.w	r3, r3, #16
 800486a:	2b10      	cmp	r3, #16
 800486c:	d10a      	bne.n	8004884 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7ff fbf0 	bl	8004070 <HAL_UARTEx_RxEventCallback>
 8004890:	e002      	b.n	8004898 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff fbce 	bl	8004034 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	e002      	b.n	80048a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	e000      	b.n	80048a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048a0:	2302      	movs	r3, #2
  }
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3730      	adds	r7, #48	@ 0x30
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048b0:	b0c0      	sub	sp, #256	@ 0x100
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c8:	68d9      	ldr	r1, [r3, #12]
 80048ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	ea40 0301 	orr.w	r3, r0, r1
 80048d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048da:	689a      	ldr	r2, [r3, #8]
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	431a      	orrs	r2, r3
 80048e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004904:	f021 010c 	bic.w	r1, r1, #12
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004912:	430b      	orrs	r3, r1
 8004914:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004926:	6999      	ldr	r1, [r3, #24]
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	ea40 0301 	orr.w	r3, r0, r1
 8004932:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	4b8f      	ldr	r3, [pc, #572]	@ (8004b78 <UART_SetConfig+0x2cc>)
 800493c:	429a      	cmp	r2, r3
 800493e:	d005      	beq.n	800494c <UART_SetConfig+0xa0>
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	4b8d      	ldr	r3, [pc, #564]	@ (8004b7c <UART_SetConfig+0x2d0>)
 8004948:	429a      	cmp	r2, r3
 800494a:	d104      	bne.n	8004956 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800494c:	f7fe fbbe 	bl	80030cc <HAL_RCC_GetPCLK2Freq>
 8004950:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004954:	e003      	b.n	800495e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004956:	f7fe fba5 	bl	80030a4 <HAL_RCC_GetPCLK1Freq>
 800495a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800495e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004962:	69db      	ldr	r3, [r3, #28]
 8004964:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004968:	f040 810c 	bne.w	8004b84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800496c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004970:	2200      	movs	r2, #0
 8004972:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004976:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800497a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800497e:	4622      	mov	r2, r4
 8004980:	462b      	mov	r3, r5
 8004982:	1891      	adds	r1, r2, r2
 8004984:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004986:	415b      	adcs	r3, r3
 8004988:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800498a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800498e:	4621      	mov	r1, r4
 8004990:	eb12 0801 	adds.w	r8, r2, r1
 8004994:	4629      	mov	r1, r5
 8004996:	eb43 0901 	adc.w	r9, r3, r1
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049ae:	4690      	mov	r8, r2
 80049b0:	4699      	mov	r9, r3
 80049b2:	4623      	mov	r3, r4
 80049b4:	eb18 0303 	adds.w	r3, r8, r3
 80049b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80049bc:	462b      	mov	r3, r5
 80049be:	eb49 0303 	adc.w	r3, r9, r3
 80049c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80049d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049da:	460b      	mov	r3, r1
 80049dc:	18db      	adds	r3, r3, r3
 80049de:	653b      	str	r3, [r7, #80]	@ 0x50
 80049e0:	4613      	mov	r3, r2
 80049e2:	eb42 0303 	adc.w	r3, r2, r3
 80049e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80049e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80049f0:	f7fc f95a 	bl	8000ca8 <__aeabi_uldivmod>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4b61      	ldr	r3, [pc, #388]	@ (8004b80 <UART_SetConfig+0x2d4>)
 80049fa:	fba3 2302 	umull	r2, r3, r3, r2
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	011c      	lsls	r4, r3, #4
 8004a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a14:	4642      	mov	r2, r8
 8004a16:	464b      	mov	r3, r9
 8004a18:	1891      	adds	r1, r2, r2
 8004a1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a1c:	415b      	adcs	r3, r3
 8004a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a24:	4641      	mov	r1, r8
 8004a26:	eb12 0a01 	adds.w	sl, r2, r1
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a44:	4692      	mov	sl, r2
 8004a46:	469b      	mov	fp, r3
 8004a48:	4643      	mov	r3, r8
 8004a4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004a4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a52:	464b      	mov	r3, r9
 8004a54:	eb4b 0303 	adc.w	r3, fp, r3
 8004a58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a70:	460b      	mov	r3, r1
 8004a72:	18db      	adds	r3, r3, r3
 8004a74:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a76:	4613      	mov	r3, r2
 8004a78:	eb42 0303 	adc.w	r3, r2, r3
 8004a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a86:	f7fc f90f 	bl	8000ca8 <__aeabi_uldivmod>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	4b3b      	ldr	r3, [pc, #236]	@ (8004b80 <UART_SetConfig+0x2d4>)
 8004a92:	fba3 2301 	umull	r2, r3, r3, r1
 8004a96:	095b      	lsrs	r3, r3, #5
 8004a98:	2264      	movs	r2, #100	@ 0x64
 8004a9a:	fb02 f303 	mul.w	r3, r2, r3
 8004a9e:	1acb      	subs	r3, r1, r3
 8004aa0:	00db      	lsls	r3, r3, #3
 8004aa2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004aa6:	4b36      	ldr	r3, [pc, #216]	@ (8004b80 <UART_SetConfig+0x2d4>)
 8004aa8:	fba3 2302 	umull	r2, r3, r3, r2
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ab4:	441c      	add	r4, r3
 8004ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aba:	2200      	movs	r2, #0
 8004abc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ac0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ac4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ac8:	4642      	mov	r2, r8
 8004aca:	464b      	mov	r3, r9
 8004acc:	1891      	adds	r1, r2, r2
 8004ace:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ad0:	415b      	adcs	r3, r3
 8004ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ad4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ad8:	4641      	mov	r1, r8
 8004ada:	1851      	adds	r1, r2, r1
 8004adc:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ade:	4649      	mov	r1, r9
 8004ae0:	414b      	adcs	r3, r1
 8004ae2:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004af0:	4659      	mov	r1, fp
 8004af2:	00cb      	lsls	r3, r1, #3
 8004af4:	4651      	mov	r1, sl
 8004af6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004afa:	4651      	mov	r1, sl
 8004afc:	00ca      	lsls	r2, r1, #3
 8004afe:	4610      	mov	r0, r2
 8004b00:	4619      	mov	r1, r3
 8004b02:	4603      	mov	r3, r0
 8004b04:	4642      	mov	r2, r8
 8004b06:	189b      	adds	r3, r3, r2
 8004b08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b0c:	464b      	mov	r3, r9
 8004b0e:	460a      	mov	r2, r1
 8004b10:	eb42 0303 	adc.w	r3, r2, r3
 8004b14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	18db      	adds	r3, r3, r3
 8004b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b32:	4613      	mov	r3, r2
 8004b34:	eb42 0303 	adc.w	r3, r2, r3
 8004b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b42:	f7fc f8b1 	bl	8000ca8 <__aeabi_uldivmod>
 8004b46:	4602      	mov	r2, r0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b80 <UART_SetConfig+0x2d4>)
 8004b4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004b50:	095b      	lsrs	r3, r3, #5
 8004b52:	2164      	movs	r1, #100	@ 0x64
 8004b54:	fb01 f303 	mul.w	r3, r1, r3
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	3332      	adds	r3, #50	@ 0x32
 8004b5e:	4a08      	ldr	r2, [pc, #32]	@ (8004b80 <UART_SetConfig+0x2d4>)
 8004b60:	fba2 2303 	umull	r2, r3, r2, r3
 8004b64:	095b      	lsrs	r3, r3, #5
 8004b66:	f003 0207 	and.w	r2, r3, #7
 8004b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4422      	add	r2, r4
 8004b72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b74:	e106      	b.n	8004d84 <UART_SetConfig+0x4d8>
 8004b76:	bf00      	nop
 8004b78:	40011000 	.word	0x40011000
 8004b7c:	40011400 	.word	0x40011400
 8004b80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b96:	4642      	mov	r2, r8
 8004b98:	464b      	mov	r3, r9
 8004b9a:	1891      	adds	r1, r2, r2
 8004b9c:	6239      	str	r1, [r7, #32]
 8004b9e:	415b      	adcs	r3, r3
 8004ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ba2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ba6:	4641      	mov	r1, r8
 8004ba8:	1854      	adds	r4, r2, r1
 8004baa:	4649      	mov	r1, r9
 8004bac:	eb43 0501 	adc.w	r5, r3, r1
 8004bb0:	f04f 0200 	mov.w	r2, #0
 8004bb4:	f04f 0300 	mov.w	r3, #0
 8004bb8:	00eb      	lsls	r3, r5, #3
 8004bba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bbe:	00e2      	lsls	r2, r4, #3
 8004bc0:	4614      	mov	r4, r2
 8004bc2:	461d      	mov	r5, r3
 8004bc4:	4643      	mov	r3, r8
 8004bc6:	18e3      	adds	r3, r4, r3
 8004bc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bcc:	464b      	mov	r3, r9
 8004bce:	eb45 0303 	adc.w	r3, r5, r3
 8004bd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004be2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bf2:	4629      	mov	r1, r5
 8004bf4:	008b      	lsls	r3, r1, #2
 8004bf6:	4621      	mov	r1, r4
 8004bf8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bfc:	4621      	mov	r1, r4
 8004bfe:	008a      	lsls	r2, r1, #2
 8004c00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c04:	f7fc f850 	bl	8000ca8 <__aeabi_uldivmod>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	4b60      	ldr	r3, [pc, #384]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004c12:	095b      	lsrs	r3, r3, #5
 8004c14:	011c      	lsls	r4, r3, #4
 8004c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c28:	4642      	mov	r2, r8
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	1891      	adds	r1, r2, r2
 8004c2e:	61b9      	str	r1, [r7, #24]
 8004c30:	415b      	adcs	r3, r3
 8004c32:	61fb      	str	r3, [r7, #28]
 8004c34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c38:	4641      	mov	r1, r8
 8004c3a:	1851      	adds	r1, r2, r1
 8004c3c:	6139      	str	r1, [r7, #16]
 8004c3e:	4649      	mov	r1, r9
 8004c40:	414b      	adcs	r3, r1
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f04f 0300 	mov.w	r3, #0
 8004c4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c50:	4659      	mov	r1, fp
 8004c52:	00cb      	lsls	r3, r1, #3
 8004c54:	4651      	mov	r1, sl
 8004c56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c5a:	4651      	mov	r1, sl
 8004c5c:	00ca      	lsls	r2, r1, #3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	4619      	mov	r1, r3
 8004c62:	4603      	mov	r3, r0
 8004c64:	4642      	mov	r2, r8
 8004c66:	189b      	adds	r3, r3, r2
 8004c68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c6c:	464b      	mov	r3, r9
 8004c6e:	460a      	mov	r2, r1
 8004c70:	eb42 0303 	adc.w	r3, r2, r3
 8004c74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c84:	f04f 0200 	mov.w	r2, #0
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c90:	4649      	mov	r1, r9
 8004c92:	008b      	lsls	r3, r1, #2
 8004c94:	4641      	mov	r1, r8
 8004c96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c9a:	4641      	mov	r1, r8
 8004c9c:	008a      	lsls	r2, r1, #2
 8004c9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ca2:	f7fc f801 	bl	8000ca8 <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4611      	mov	r1, r2
 8004cac:	4b38      	ldr	r3, [pc, #224]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004cae:	fba3 2301 	umull	r2, r3, r3, r1
 8004cb2:	095b      	lsrs	r3, r3, #5
 8004cb4:	2264      	movs	r2, #100	@ 0x64
 8004cb6:	fb02 f303 	mul.w	r3, r2, r3
 8004cba:	1acb      	subs	r3, r1, r3
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	3332      	adds	r3, #50	@ 0x32
 8004cc0:	4a33      	ldr	r2, [pc, #204]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ccc:	441c      	add	r4, r3
 8004cce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cd6:	677a      	str	r2, [r7, #116]	@ 0x74
 8004cd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004cdc:	4642      	mov	r2, r8
 8004cde:	464b      	mov	r3, r9
 8004ce0:	1891      	adds	r1, r2, r2
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	415b      	adcs	r3, r3
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cec:	4641      	mov	r1, r8
 8004cee:	1851      	adds	r1, r2, r1
 8004cf0:	6039      	str	r1, [r7, #0]
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	414b      	adcs	r3, r1
 8004cf6:	607b      	str	r3, [r7, #4]
 8004cf8:	f04f 0200 	mov.w	r2, #0
 8004cfc:	f04f 0300 	mov.w	r3, #0
 8004d00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d04:	4659      	mov	r1, fp
 8004d06:	00cb      	lsls	r3, r1, #3
 8004d08:	4651      	mov	r1, sl
 8004d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d0e:	4651      	mov	r1, sl
 8004d10:	00ca      	lsls	r2, r1, #3
 8004d12:	4610      	mov	r0, r2
 8004d14:	4619      	mov	r1, r3
 8004d16:	4603      	mov	r3, r0
 8004d18:	4642      	mov	r2, r8
 8004d1a:	189b      	adds	r3, r3, r2
 8004d1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d1e:	464b      	mov	r3, r9
 8004d20:	460a      	mov	r2, r1
 8004d22:	eb42 0303 	adc.w	r3, r2, r3
 8004d26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d32:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d34:	f04f 0200 	mov.w	r2, #0
 8004d38:	f04f 0300 	mov.w	r3, #0
 8004d3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d40:	4649      	mov	r1, r9
 8004d42:	008b      	lsls	r3, r1, #2
 8004d44:	4641      	mov	r1, r8
 8004d46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d4a:	4641      	mov	r1, r8
 8004d4c:	008a      	lsls	r2, r1, #2
 8004d4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d52:	f7fb ffa9 	bl	8000ca8 <__aeabi_uldivmod>
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d60:	095b      	lsrs	r3, r3, #5
 8004d62:	2164      	movs	r1, #100	@ 0x64
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	3332      	adds	r3, #50	@ 0x32
 8004d6e:	4a08      	ldr	r2, [pc, #32]	@ (8004d90 <UART_SetConfig+0x4e4>)
 8004d70:	fba2 2303 	umull	r2, r3, r2, r3
 8004d74:	095b      	lsrs	r3, r3, #5
 8004d76:	f003 020f 	and.w	r2, r3, #15
 8004d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4422      	add	r2, r4
 8004d82:	609a      	str	r2, [r3, #8]
}
 8004d84:	bf00      	nop
 8004d86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d90:	51eb851f 	.word	0x51eb851f

08004d94 <test_func>:
	int age;
	float score;
} student_t;
student_t stu = { 18, 90.0 };

int test_func(int argc, char **argv) {
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
	printf("test_func called with %d args\n", argc);
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	4803      	ldr	r0, [pc, #12]	@ (8004db0 <test_func+0x1c>)
 8004da2:	f003 fc53 	bl	800864c <iprintf>
	return 0;
 8004da6:	2300      	movs	r3, #0
}
 8004da8:	4618      	mov	r0, r3
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	0800b4a0 	.word	0x0800b4a0

08004db4 <sensor_check>:
int arr[5] = { 1, 2, 3, 4, 5 };

int sensor_check(void *arg) {
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
	return (*(int*) arg > 100);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b64      	cmp	r3, #100	@ 0x64
 8004dc2:	bfcc      	ite	gt
 8004dc4:	2301      	movgt	r3, #1
 8004dc6:	2300      	movle	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <sensor_action>:
void sensor_action(void *arg) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	6078      	str	r0, [r7, #4]
	LOG_WARN("Sensor报警: %d", *(int* )arg);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	4b05      	ldr	r3, [pc, #20]	@ (8004dfc <sensor_action+0x24>)
 8004de8:	222a      	movs	r2, #42	@ 0x2a
 8004dea:	4905      	ldr	r1, [pc, #20]	@ (8004e00 <sensor_action+0x28>)
 8004dec:	2001      	movs	r0, #1
 8004dee:	f000 fb8d 	bl	800550c <log_output>
}
 8004df2:	bf00      	nop
 8004df4:	3708      	adds	r7, #8
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	0800b4c0 	.word	0x0800b4c0
 8004e00:	0800b4d4 	.word	0x0800b4d4

08004e04 <sensor_recover>:
void sensor_recover(void *arg) {
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	6078      	str	r0, [r7, #4]
	LOG_INFO("Sensor恢复: %d", *(int* )arg);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	4b05      	ldr	r3, [pc, #20]	@ (8004e28 <sensor_recover+0x24>)
 8004e14:	222d      	movs	r2, #45	@ 0x2d
 8004e16:	4905      	ldr	r1, [pc, #20]	@ (8004e2c <sensor_recover+0x28>)
 8004e18:	2000      	movs	r0, #0
 8004e1a:	f000 fb77 	bl	800550c <log_output>
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	0800b4f0 	.word	0x0800b4f0
 8004e2c:	0800b4d4 	.word	0x0800b4d4

08004e30 <key1_read>:

int sensor_val = 0;

uint8_t key1_read(void) {
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
	uint8_t status = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8004e36:	2102      	movs	r1, #2
 8004e38:	4804      	ldr	r0, [pc, #16]	@ (8004e4c <key1_read+0x1c>)
 8004e3a:	f7fd fc93 	bl	8002764 <HAL_GPIO_ReadPin>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	71fb      	strb	r3, [r7, #7]
	return status;
 8004e42:	79fb      	ldrb	r3, [r7, #7]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40020800 	.word	0x40020800

08004e50 <key1_on_click>:

void key1_on_click(key_t *key)   { /* 单击处理 */
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
	LOG_INFO("按键1单击事件触发！");
 8004e58:	4b04      	ldr	r3, [pc, #16]	@ (8004e6c <key1_on_click+0x1c>)
 8004e5a:	2238      	movs	r2, #56	@ 0x38
 8004e5c:	4904      	ldr	r1, [pc, #16]	@ (8004e70 <key1_on_click+0x20>)
 8004e5e:	2000      	movs	r0, #0
 8004e60:	f000 fb54 	bl	800550c <log_output>
}
 8004e64:	bf00      	nop
 8004e66:	3708      	adds	r7, #8
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	0800b504 	.word	0x0800b504
 8004e70:	0800b4d4 	.word	0x0800b4d4

08004e74 <key1_on_double>:

void key1_on_double(key_t *key)  { /* 双击处理 */
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
	LOG_INFO("按键1双击事件触发！");
 8004e7c:	4b04      	ldr	r3, [pc, #16]	@ (8004e90 <key1_on_double+0x1c>)
 8004e7e:	223c      	movs	r2, #60	@ 0x3c
 8004e80:	4904      	ldr	r1, [pc, #16]	@ (8004e94 <key1_on_double+0x20>)
 8004e82:	2000      	movs	r0, #0
 8004e84:	f000 fb42 	bl	800550c <log_output>
}
 8004e88:	bf00      	nop
 8004e8a:	3708      	adds	r7, #8
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}
 8004e90:	0800b524 	.word	0x0800b524
 8004e94:	0800b4d4 	.word	0x0800b4d4

08004e98 <keys_init>:
    .active_level = 0, // 低有效
    .event_handler = &key1_handlers,
};


void keys_init(void) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	af00      	add	r7, sp, #0
    key_register(&key1);
 8004e9c:	4802      	ldr	r0, [pc, #8]	@ (8004ea8 <keys_init+0x10>)
 8004e9e:	f001 fbbd 	bl	800661c <key_register>
}
 8004ea2:	bf00      	nop
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	2000004c 	.word	0x2000004c

08004eac <key_app>:

static void key_app(void) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	af00      	add	r7, sp, #0
	 key_scan_all(5);
 8004eb0:	2005      	movs	r0, #5
 8004eb2:	f001 fcfd 	bl	80068b0 <key_scan_all>

}
 8004eb6:	bf00      	nop
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <shell_uart_parser>:
/*************************************************************************************/

void shell_uart_parser(const uint8_t *data, uint16_t len) {
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	460b      	mov	r3, r1
 8004ec6:	807b      	strh	r3, [r7, #2]
	shell_exec((const char*) data);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 feff 	bl	8005ccc <shell_exec>
	uart_manager_clear(&huart1);
 8004ece:	4803      	ldr	r0, [pc, #12]	@ (8004edc <shell_uart_parser+0x20>)
 8004ed0:	f000 fc7a 	bl	80057c8 <uart_manager_clear>

}
 8004ed4:	bf00      	nop
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	200002ec 	.word	0x200002ec

08004ee0 <sf_hardware_init>:
 * @brief 初始化硬件相关资源，如串口解析器注册等。
 *
 * @return uint8_t 返回 0 表示初始化成功，其他值保留为错误码
 */

static uint8_t sf_hardware_init() {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af04      	add	r7, sp, #16
	//搁置
	HAL_TIM_Base_Start_IT(&htim6);
 8004ee6:	480f      	ldr	r0, [pc, #60]	@ (8004f24 <sf_hardware_init+0x44>)
 8004ee8:	f7fe f954 	bl	8003194 <HAL_TIM_Base_Start_IT>
	//real time task
	HAL_TIM_Base_Start_IT(&htim7);
 8004eec:	480e      	ldr	r0, [pc, #56]	@ (8004f28 <sf_hardware_init+0x48>)
 8004eee:	f7fe f951 	bl	8003194 <HAL_TIM_Base_Start_IT>
	//shell解析挂载
	uart_manager_register(&huart1, shell_uart_parser);
 8004ef2:	490e      	ldr	r1, [pc, #56]	@ (8004f2c <sf_hardware_init+0x4c>)
 8004ef4:	480e      	ldr	r0, [pc, #56]	@ (8004f30 <sf_hardware_init+0x50>)
 8004ef6:	f000 fbf9 	bl	80056ec <uart_manager_register>
	//日志系统
	log_init(&huart1);
 8004efa:	480d      	ldr	r0, [pc, #52]	@ (8004f30 <sf_hardware_init+0x50>)
 8004efc:	f000 fae2 	bl	80054c4 <log_init>
	//按键检测
	keys_init();
 8004f00:	f7ff ffca 	bl	8004e98 <keys_init>
	//错误模块
	error_register("sensor_warn", ERROR_LEVEL_WARNING, sensor_check,
 8004f04:	2303      	movs	r3, #3
 8004f06:	9302      	str	r3, [sp, #8]
 8004f08:	4b0a      	ldr	r3, [pc, #40]	@ (8004f34 <sf_hardware_init+0x54>)
 8004f0a:	9301      	str	r3, [sp, #4]
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f38 <sf_hardware_init+0x58>)
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	4b0a      	ldr	r3, [pc, #40]	@ (8004f3c <sf_hardware_init+0x5c>)
 8004f12:	4a0b      	ldr	r2, [pc, #44]	@ (8004f40 <sf_hardware_init+0x60>)
 8004f14:	2100      	movs	r1, #0
 8004f16:	480b      	ldr	r0, [pc, #44]	@ (8004f44 <sf_hardware_init+0x64>)
 8004f18:	f000 f8d2 	bl	80050c0 <error_register>
			sensor_action, sensor_recover, &sensor_val, 3);

	return 0;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	2000025c 	.word	0x2000025c
 8004f28:	200002a4 	.word	0x200002a4
 8004f2c:	08004ebd 	.word	0x08004ebd
 8004f30:	200002ec 	.word	0x200002ec
 8004f34:	200003fc 	.word	0x200003fc
 8004f38:	08004e05 	.word	0x08004e05
 8004f3c:	08004dd9 	.word	0x08004dd9
 8004f40:	08004db5 	.word	0x08004db5
 8004f44:	0800b544 	.word	0x0800b544

08004f48 <sf_software_init>:
/**
 * @brief 初始化软件相关资源，包括变量、函数注册以及任务系统启动。
 *
 * @return uint8_t 返回 0 表示初始化成功，其他值保留为错误码
 */
static uint8_t sf_software_init() {
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af02      	add	r7, sp, #8

	//shell 模块测试
	SHELL_VAR_REGISTER(counter, VAR_TYPE_INT);
 8004f4e:	2200      	movs	r2, #0
 8004f50:	492d      	ldr	r1, [pc, #180]	@ (8005008 <sf_software_init+0xc0>)
 8004f52:	482e      	ldr	r0, [pc, #184]	@ (800500c <sf_software_init+0xc4>)
 8004f54:	f000 fff6 	bl	8005f44 <shell_register_variable>
	SHELL_VAR_REGISTER(voltage, VAR_TYPE_FLOAT);
 8004f58:	2201      	movs	r2, #1
 8004f5a:	492d      	ldr	r1, [pc, #180]	@ (8005010 <sf_software_init+0xc8>)
 8004f5c:	482d      	ldr	r0, [pc, #180]	@ (8005014 <sf_software_init+0xcc>)
 8004f5e:	f000 fff1 	bl	8005f44 <shell_register_variable>
	SHELL_VAR_REGISTER(name, VAR_TYPE_STRING);
 8004f62:	2202      	movs	r2, #2
 8004f64:	492c      	ldr	r1, [pc, #176]	@ (8005018 <sf_software_init+0xd0>)
 8004f66:	482d      	ldr	r0, [pc, #180]	@ (800501c <sf_software_init+0xd4>)
 8004f68:	f000 ffec 	bl	8005f44 <shell_register_variable>
	SHELL_VAR_REGISTER(sensor_val, VAR_TYPE_INT);
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	492c      	ldr	r1, [pc, #176]	@ (8005020 <sf_software_init+0xd8>)
 8004f70:	482c      	ldr	r0, [pc, #176]	@ (8005024 <sf_software_init+0xdc>)
 8004f72:	f000 ffe7 	bl	8005f44 <shell_register_variable>
	SHELL_VAR_REGISTER(stu.age, VAR_TYPE_INT);
 8004f76:	2200      	movs	r2, #0
 8004f78:	492b      	ldr	r1, [pc, #172]	@ (8005028 <sf_software_init+0xe0>)
 8004f7a:	482c      	ldr	r0, [pc, #176]	@ (800502c <sf_software_init+0xe4>)
 8004f7c:	f000 ffe2 	bl	8005f44 <shell_register_variable>
	SHELL_VAR_REGISTER(stu.score, VAR_TYPE_FLOAT);
 8004f80:	2201      	movs	r2, #1
 8004f82:	492b      	ldr	r1, [pc, #172]	@ (8005030 <sf_software_init+0xe8>)
 8004f84:	482b      	ldr	r0, [pc, #172]	@ (8005034 <sf_software_init+0xec>)
 8004f86:	f000 ffdd 	bl	8005f44 <shell_register_variable>
	shell_register_array("arr", arr, VAR_TYPE_INT, sizeof(int), 5);
 8004f8a:	2305      	movs	r3, #5
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	2304      	movs	r3, #4
 8004f90:	2200      	movs	r2, #0
 8004f92:	4929      	ldr	r1, [pc, #164]	@ (8005038 <sf_software_init+0xf0>)
 8004f94:	4829      	ldr	r0, [pc, #164]	@ (800503c <sf_software_init+0xf4>)
 8004f96:	f001 f825 	bl	8005fe4 <shell_register_array>

	SHELL_FUNC_REGISTER(test_func);
 8004f9a:	4929      	ldr	r1, [pc, #164]	@ (8005040 <sf_software_init+0xf8>)
 8004f9c:	4829      	ldr	r0, [pc, #164]	@ (8005044 <sf_software_init+0xfc>)
 8004f9e:	f000 fe1d 	bl	8005bdc <shell_register_function>

	//调度器初始化
	task_system_init();
 8004fa2:	f000 fd07 	bl	80059b4 <task_system_init>

	//串口协议任务
	task_add(TASK_COMM_PROTOCOL, (task_func_t) uart_manager_poll,
 8004fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004faa:	9301      	str	r3, [sp, #4]
 8004fac:	2364      	movs	r3, #100	@ 0x64
 8004fae:	9300      	str	r3, [sp, #0]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	4924      	ldr	r1, [pc, #144]	@ (8005048 <sf_software_init+0x100>)
 8004fb6:	2002      	movs	r0, #2
 8004fb8:	f000 fd7a 	bl	8005ab0 <task_add>
		NULL, 0, 100,
		TASK_FOREVER);
	//按键扫描
	task_add(TASK_REALTIME, (task_func_t) key_app,
 8004fbc:	f04f 33ff 	mov.w	r3, #4294967295
 8004fc0:	9301      	str	r3, [sp, #4]
 8004fc2:	2305      	movs	r3, #5
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	2200      	movs	r2, #0
 8004fca:	4920      	ldr	r1, [pc, #128]	@ (800504c <sf_software_init+0x104>)
 8004fcc:	2000      	movs	r0, #0
 8004fce:	f000 fd6f 	bl	8005ab0 <task_add>
		NULL, 0, 5,
		TASK_FOREVER);
	//按键执行
	task_add(TASK_USER_INTERFACE, (task_func_t) key_evt_dispatch,
 8004fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd6:	9301      	str	r3, [sp, #4]
 8004fd8:	2364      	movs	r3, #100	@ 0x64
 8004fda:	9300      	str	r3, [sp, #0]
 8004fdc:	2300      	movs	r3, #0
 8004fde:	2200      	movs	r2, #0
 8004fe0:	491b      	ldr	r1, [pc, #108]	@ (8005050 <sf_software_init+0x108>)
 8004fe2:	2008      	movs	r0, #8
 8004fe4:	f000 fd64 	bl	8005ab0 <task_add>
		NULL, 0, 100,
		TASK_FOREVER);
	//错误任务
	task_add(TASK_DIAGNOSTIC, (task_func_t)error_poll,
 8004fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	2364      	movs	r3, #100	@ 0x64
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	4917      	ldr	r1, [pc, #92]	@ (8005054 <sf_software_init+0x10c>)
 8004ff8:	2009      	movs	r0, #9
 8004ffa:	f000 fd59 	bl	8005ab0 <task_add>
		NULL, 0, 100,
		TASK_FOREVER);
	return 0;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	200003f8 	.word	0x200003f8
 800500c:	0800b550 	.word	0x0800b550
 8005010:	2000000c 	.word	0x2000000c
 8005014:	0800b558 	.word	0x0800b558
 8005018:	20000010 	.word	0x20000010
 800501c:	0800b560 	.word	0x0800b560
 8005020:	200003fc 	.word	0x200003fc
 8005024:	0800b568 	.word	0x0800b568
 8005028:	20000030 	.word	0x20000030
 800502c:	0800b574 	.word	0x0800b574
 8005030:	20000034 	.word	0x20000034
 8005034:	0800b57c 	.word	0x0800b57c
 8005038:	20000038 	.word	0x20000038
 800503c:	0800b588 	.word	0x0800b588
 8005040:	08004d95 	.word	0x08004d95
 8005044:	0800b58c 	.word	0x0800b58c
 8005048:	08005909 	.word	0x08005909
 800504c:	08004ead 	.word	0x08004ead
 8005050:	08006989 	.word	0x08006989
 8005054:	08005141 	.word	0x08005141

08005058 <sf_entry>:

/**
 * @brief 系统统一初始化入口，调用硬件和软件初始化函数。
 */
void sf_entry(void) {
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
	sf_hardware_init();
 800505c:	f7ff ff40 	bl	8004ee0 <sf_hardware_init>
	sf_software_init();
 8005060:	f7ff ff72 	bl	8004f48 <sf_software_init>
}
 8005064:	bf00      	nop
 8005066:	bd80      	pop	{r7, pc}

08005068 <sf_run>:
 * @brief 按顺序执行多个任务（任务 ID 通过可变参数传入）。
 *
 * @param count 要执行的任务数量
 * @param ...   后续是 count 个 int 类型任务 ID
 */
static void sf_run(int count, ...) {
 8005068:	b40f      	push	{r0, r1, r2, r3}
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, count);
 8005070:	f107 0314 	add.w	r3, r7, #20
 8005074:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < count; i++) {
 8005076:	2300      	movs	r3, #0
 8005078:	607b      	str	r3, [r7, #4]
 800507a:	e00a      	b.n	8005092 <sf_run+0x2a>
		task_execute(va_arg(args, int));
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	1d1a      	adds	r2, r3, #4
 8005080:	603a      	str	r2, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	b2db      	uxtb	r3, r3
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fd62 	bl	8005b50 <task_execute>
	for (int i = 0; i < count; i++) {
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3301      	adds	r3, #1
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	429a      	cmp	r2, r3
 8005098:	dbf0      	blt.n	800507c <sf_run+0x14>
	}
	va_end(args);
}
 800509a:	bf00      	nop
 800509c:	bf00      	nop
 800509e:	3708      	adds	r7, #8
 80050a0:	46bd      	mov	sp, r7
 80050a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050a6:	b004      	add	sp, #16
 80050a8:	4770      	bx	lr

080050aa <sf_loop>:

/**
 * @brief 主循环中调用的用户调度入口。
 *        执行串口通信协议任务、控制任务等。
 */
void sf_loop() {
 80050aa:	b580      	push	{r7, lr}
 80050ac:	af00      	add	r7, sp, #0
	sf_run(3,
 80050ae:	2309      	movs	r3, #9
 80050b0:	2208      	movs	r2, #8
 80050b2:	2102      	movs	r1, #2
 80050b4:	2003      	movs	r0, #3
 80050b6:	f7ff ffd7 	bl	8005068 <sf_run>
		TASK_COMM_PROTOCOL,
		TASK_USER_INTERFACE,
		TASK_DIAGNOSTIC
	);

}
 80050ba:	bf00      	nop
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <error_register>:
int error_register(const char *name, error_level_t level,
                  error_check_fn check,
                  error_action_fn action,
                  error_action_fn recover,
                  void *arg, uint16_t threshold)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b087      	sub	sp, #28
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	607a      	str	r2, [r7, #4]
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	460b      	mov	r3, r1
 80050ce:	72fb      	strb	r3, [r7, #11]
    if (error_count >= MAX_ERROR_ITEMS) return -1;
 80050d0:	4b19      	ldr	r3, [pc, #100]	@ (8005138 <error_register+0x78>)
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b0f      	cmp	r3, #15
 80050d6:	d902      	bls.n	80050de <error_register+0x1e>
 80050d8:	f04f 33ff 	mov.w	r3, #4294967295
 80050dc:	e025      	b.n	800512a <error_register+0x6a>
    error_item_t *item = &error_table[error_count++];
 80050de:	4b16      	ldr	r3, [pc, #88]	@ (8005138 <error_register+0x78>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	b2d1      	uxtb	r1, r2
 80050e6:	4a14      	ldr	r2, [pc, #80]	@ (8005138 <error_register+0x78>)
 80050e8:	7011      	strb	r1, [r2, #0]
 80050ea:	015b      	lsls	r3, r3, #5
 80050ec:	4a13      	ldr	r2, [pc, #76]	@ (800513c <error_register+0x7c>)
 80050ee:	4413      	add	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]
    item->name = name;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	601a      	str	r2, [r3, #0]
    item->level = level;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	7afa      	ldrb	r2, [r7, #11]
 80050fc:	711a      	strb	r2, [r3, #4]
    item->check = check;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	609a      	str	r2, [r3, #8]
    item->action = action;
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	60da      	str	r2, [r3, #12]
    item->recover = recover;
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	6a3a      	ldr	r2, [r7, #32]
 800510e:	611a      	str	r2, [r3, #16]
    item->arg = arg;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005114:	615a      	str	r2, [r3, #20]
    item->threshold = threshold;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800511a:	831a      	strh	r2, [r3, #24]
    item->counter = 0;
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	2200      	movs	r2, #0
 8005120:	835a      	strh	r2, [r3, #26]
    item->active = 0;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2200      	movs	r2, #0
 8005126:	771a      	strb	r2, [r3, #28]
    return 0;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	371c      	adds	r7, #28
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
 8005136:	bf00      	nop
 8005138:	20000600 	.word	0x20000600
 800513c:	20000400 	.word	0x20000400

08005140 <error_poll>:

void error_poll(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < error_count; i++) {
 8005146:	2300      	movs	r3, #0
 8005148:	73fb      	strb	r3, [r7, #15]
 800514a:	e04d      	b.n	80051e8 <error_poll+0xa8>
        error_item_t *item = &error_table[i];
 800514c:	7bfb      	ldrb	r3, [r7, #15]
 800514e:	015b      	lsls	r3, r3, #5
 8005150:	4a2a      	ldr	r2, [pc, #168]	@ (80051fc <error_poll+0xbc>)
 8005152:	4413      	add	r3, r2
 8005154:	60bb      	str	r3, [r7, #8]
        int err = item->check(item->arg);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	6952      	ldr	r2, [r2, #20]
 800515e:	4610      	mov	r0, r2
 8005160:	4798      	blx	r3
 8005162:	6078      	str	r0, [r7, #4]
        if (err) {
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d00c      	beq.n	8005184 <error_poll+0x44>
            if (item->counter < item->threshold) item->counter++;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	8b5a      	ldrh	r2, [r3, #26]
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	8b1b      	ldrh	r3, [r3, #24]
 8005172:	429a      	cmp	r2, r3
 8005174:	d209      	bcs.n	800518a <error_poll+0x4a>
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	8b5b      	ldrh	r3, [r3, #26]
 800517a:	3301      	adds	r3, #1
 800517c:	b29a      	uxth	r2, r3
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	835a      	strh	r2, [r3, #26]
 8005182:	e002      	b.n	800518a <error_poll+0x4a>
        } else {
            item->counter = 0;
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2200      	movs	r2, #0
 8005188:	835a      	strh	r2, [r3, #26]
        }
        if (item->counter >= item->threshold && !item->active) {
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	8b5a      	ldrh	r2, [r3, #26]
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	8b1b      	ldrh	r3, [r3, #24]
 8005192:	429a      	cmp	r2, r3
 8005194:	d310      	bcc.n	80051b8 <error_poll+0x78>
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	7f1b      	ldrb	r3, [r3, #28]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10c      	bne.n	80051b8 <error_poll+0x78>
            item->active = 1;
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2201      	movs	r2, #1
 80051a2:	771a      	strb	r2, [r3, #28]
            if (item->action) item->action(item->arg);
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <error_poll+0x78>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	6952      	ldr	r2, [r2, #20]
 80051b4:	4610      	mov	r0, r2
 80051b6:	4798      	blx	r3
        }
        // 错误恢复
        if (item->counter == 0 && item->active) {
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	8b5b      	ldrh	r3, [r3, #26]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d110      	bne.n	80051e2 <error_poll+0xa2>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	7f1b      	ldrb	r3, [r3, #28]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d00c      	beq.n	80051e2 <error_poll+0xa2>
            item->active = 0;
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	2200      	movs	r2, #0
 80051cc:	771a      	strb	r2, [r3, #28]
            if (item->recover) item->recover(item->arg);
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d005      	beq.n	80051e2 <error_poll+0xa2>
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	6952      	ldr	r2, [r2, #20]
 80051de:	4610      	mov	r0, r2
 80051e0:	4798      	blx	r3
    for (uint8_t i = 0; i < error_count; i++) {
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	3301      	adds	r3, #1
 80051e6:	73fb      	strb	r3, [r7, #15]
 80051e8:	4b05      	ldr	r3, [pc, #20]	@ (8005200 <error_poll+0xc0>)
 80051ea:	781b      	ldrb	r3, [r3, #0]
 80051ec:	7bfa      	ldrb	r2, [r7, #15]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d3ac      	bcc.n	800514c <error_poll+0xc>
        }
    }
}
 80051f2:	bf00      	nop
 80051f4:	bf00      	nop
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	20000400 	.word	0x20000400
 8005200:	20000600 	.word	0x20000600

08005204 <error_query>:

int error_query(const char *name, error_level_t *level, uint8_t *active)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
    for (uint8_t i = 0; i < error_count; i++) {
 8005210:	2300      	movs	r3, #0
 8005212:	75fb      	strb	r3, [r7, #23]
 8005214:	e020      	b.n	8005258 <error_query+0x54>
        error_item_t *item = &error_table[i];
 8005216:	7dfb      	ldrb	r3, [r7, #23]
 8005218:	015b      	lsls	r3, r3, #5
 800521a:	4a15      	ldr	r2, [pc, #84]	@ (8005270 <error_query+0x6c>)
 800521c:	4413      	add	r3, r2
 800521e:	613b      	str	r3, [r7, #16]
        if (strcmp(item->name, name) == 0) {
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68f9      	ldr	r1, [r7, #12]
 8005226:	4618      	mov	r0, r3
 8005228:	f7fa ffd2 	bl	80001d0 <strcmp>
 800522c:	4603      	mov	r3, r0
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10f      	bne.n	8005252 <error_query+0x4e>
            if (level) *level = item->level;
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <error_query+0x3c>
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	791a      	ldrb	r2, [r3, #4]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	701a      	strb	r2, [r3, #0]
            if (active) *active = item->active;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d003      	beq.n	800524e <error_query+0x4a>
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	7f1a      	ldrb	r2, [r3, #28]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	701a      	strb	r2, [r3, #0]
            return 0;
 800524e:	2300      	movs	r3, #0
 8005250:	e009      	b.n	8005266 <error_query+0x62>
    for (uint8_t i = 0; i < error_count; i++) {
 8005252:	7dfb      	ldrb	r3, [r7, #23]
 8005254:	3301      	adds	r3, #1
 8005256:	75fb      	strb	r3, [r7, #23]
 8005258:	4b06      	ldr	r3, [pc, #24]	@ (8005274 <error_query+0x70>)
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	7dfa      	ldrb	r2, [r7, #23]
 800525e:	429a      	cmp	r2, r3
 8005260:	d3d9      	bcc.n	8005216 <error_query+0x12>
        }
    }
    return -1;
 8005262:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	20000400 	.word	0x20000400
 8005274:	20000600 	.word	0x20000600

08005278 <error_list_print>:

void error_list_print(void)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af04      	add	r7, sp, #16
	LOG_INFO("\r\n[Error List]\r\n");
 800527e:	4b1a      	ldr	r3, [pc, #104]	@ (80052e8 <error_list_print+0x70>)
 8005280:	2254      	movs	r2, #84	@ 0x54
 8005282:	491a      	ldr	r1, [pc, #104]	@ (80052ec <error_list_print+0x74>)
 8005284:	2000      	movs	r0, #0
 8005286:	f000 f941 	bl	800550c <log_output>
    for (uint8_t i = 0; i < error_count; i++) {
 800528a:	2300      	movs	r3, #0
 800528c:	71fb      	strb	r3, [r7, #7]
 800528e:	e020      	b.n	80052d2 <error_list_print+0x5a>
        error_item_t *item = &error_table[i];
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	015b      	lsls	r3, r3, #5
 8005294:	4a16      	ldr	r2, [pc, #88]	@ (80052f0 <error_list_print+0x78>)
 8005296:	4413      	add	r3, r2
 8005298:	603b      	str	r3, [r7, #0]
        LOG_ERR("%-16s | %-7s | %s\r\n",
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	7912      	ldrb	r2, [r2, #4]
 80052a2:	2a00      	cmp	r2, #0
 80052a4:	d101      	bne.n	80052aa <error_list_print+0x32>
 80052a6:	4a13      	ldr	r2, [pc, #76]	@ (80052f4 <error_list_print+0x7c>)
 80052a8:	e000      	b.n	80052ac <error_list_print+0x34>
 80052aa:	4a13      	ldr	r2, [pc, #76]	@ (80052f8 <error_list_print+0x80>)
 80052ac:	6839      	ldr	r1, [r7, #0]
 80052ae:	7f09      	ldrb	r1, [r1, #28]
 80052b0:	2900      	cmp	r1, #0
 80052b2:	d001      	beq.n	80052b8 <error_list_print+0x40>
 80052b4:	4911      	ldr	r1, [pc, #68]	@ (80052fc <error_list_print+0x84>)
 80052b6:	e000      	b.n	80052ba <error_list_print+0x42>
 80052b8:	4911      	ldr	r1, [pc, #68]	@ (8005300 <error_list_print+0x88>)
 80052ba:	9102      	str	r1, [sp, #8]
 80052bc:	9201      	str	r2, [sp, #4]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	4b10      	ldr	r3, [pc, #64]	@ (8005304 <error_list_print+0x8c>)
 80052c2:	2257      	movs	r2, #87	@ 0x57
 80052c4:	4909      	ldr	r1, [pc, #36]	@ (80052ec <error_list_print+0x74>)
 80052c6:	2002      	movs	r0, #2
 80052c8:	f000 f920 	bl	800550c <log_output>
    for (uint8_t i = 0; i < error_count; i++) {
 80052cc:	79fb      	ldrb	r3, [r7, #7]
 80052ce:	3301      	adds	r3, #1
 80052d0:	71fb      	strb	r3, [r7, #7]
 80052d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005308 <error_list_print+0x90>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	79fa      	ldrb	r2, [r7, #7]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d3d9      	bcc.n	8005290 <error_list_print+0x18>
            item->name,
            (item->level == ERROR_LEVEL_WARNING) ? "WARN" : "ERROR",
            item->active ? "ACTIVE" : "NORMAL");
    }
}
 80052dc:	bf00      	nop
 80052de:	bf00      	nop
 80052e0:	3708      	adds	r7, #8
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	0800b598 	.word	0x0800b598
 80052ec:	0800b5ac 	.word	0x0800b5ac
 80052f0:	20000400 	.word	0x20000400
 80052f4:	0800b5d4 	.word	0x0800b5d4
 80052f8:	0800b5dc 	.word	0x0800b5dc
 80052fc:	0800b5e4 	.word	0x0800b5e4
 8005300:	0800b5ec 	.word	0x0800b5ec
 8005304:	0800b5f4 	.word	0x0800b5f4
 8005308:	20000600 	.word	0x20000600

0800530c <log_buf_free>:

// 新增：记录当前发送长度，回调推进用
static uint16_t log_last_tx_len = 0;

// 剩余空间
static uint16_t log_buf_free(void) {
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
    return (log_tail >= log_head) ?
 8005310:	4b11      	ldr	r3, [pc, #68]	@ (8005358 <log_buf_free+0x4c>)
 8005312:	881b      	ldrh	r3, [r3, #0]
 8005314:	b29a      	uxth	r2, r3
 8005316:	4b11      	ldr	r3, [pc, #68]	@ (800535c <log_buf_free+0x50>)
 8005318:	881b      	ldrh	r3, [r3, #0]
 800531a:	b29b      	uxth	r3, r3
        (LOG_BUF_SIZE - (log_tail - log_head) - 1) :
 800531c:	429a      	cmp	r2, r3
 800531e:	d30b      	bcc.n	8005338 <log_buf_free+0x2c>
 8005320:	4b0e      	ldr	r3, [pc, #56]	@ (800535c <log_buf_free+0x50>)
 8005322:	881b      	ldrh	r3, [r3, #0]
 8005324:	b29a      	uxth	r2, r3
 8005326:	4b0c      	ldr	r3, [pc, #48]	@ (8005358 <log_buf_free+0x4c>)
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	b29b      	uxth	r3, r3
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	b29b      	uxth	r3, r3
 8005330:	f203 33ff 	addw	r3, r3, #1023	@ 0x3ff
 8005334:	b29b      	uxth	r3, r3
 8005336:	e009      	b.n	800534c <log_buf_free+0x40>
        (log_head - log_tail - 1);
 8005338:	4b08      	ldr	r3, [pc, #32]	@ (800535c <log_buf_free+0x50>)
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	b29a      	uxth	r2, r3
 800533e:	4b06      	ldr	r3, [pc, #24]	@ (8005358 <log_buf_free+0x4c>)
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	b29b      	uxth	r3, r3
        (LOG_BUF_SIZE - (log_tail - log_head) - 1) :
 8005348:	3b01      	subs	r3, #1
 800534a:	b29b      	uxth	r3, r3
}
 800534c:	4618      	mov	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	20000a06 	.word	0x20000a06
 800535c:	20000a04 	.word	0x20000a04

08005360 <log_buf_write>:

// 覆盖最旧数据写入
static void log_buf_write(const uint8_t *data, uint16_t n) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	807b      	strh	r3, [r7, #2]
    // 空间不够，推进head
    while (log_buf_free() < n) {
 800536c:	e00d      	b.n	800538a <log_buf_write+0x2a>
        log_head = (log_head + 1) % LOG_BUF_SIZE;
 800536e:	4b1d      	ldr	r3, [pc, #116]	@ (80053e4 <log_buf_write+0x84>)
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
 8005374:	3301      	adds	r3, #1
 8005376:	425a      	negs	r2, r3
 8005378:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800537c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8005380:	bf58      	it	pl
 8005382:	4253      	negpl	r3, r2
 8005384:	b29a      	uxth	r2, r3
 8005386:	4b17      	ldr	r3, [pc, #92]	@ (80053e4 <log_buf_write+0x84>)
 8005388:	801a      	strh	r2, [r3, #0]
    while (log_buf_free() < n) {
 800538a:	f7ff ffbf 	bl	800530c <log_buf_free>
 800538e:	4603      	mov	r3, r0
 8005390:	461a      	mov	r2, r3
 8005392:	887b      	ldrh	r3, [r7, #2]
 8005394:	4293      	cmp	r3, r2
 8005396:	d8ea      	bhi.n	800536e <log_buf_write+0xe>
    }
    for (int i = 0; i < n; i++) {
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	e019      	b.n	80053d2 <log_buf_write+0x72>
        log_buf[log_tail] = data[i];
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	4413      	add	r3, r2
 80053a4:	4a10      	ldr	r2, [pc, #64]	@ (80053e8 <log_buf_write+0x88>)
 80053a6:	8812      	ldrh	r2, [r2, #0]
 80053a8:	b292      	uxth	r2, r2
 80053aa:	7819      	ldrb	r1, [r3, #0]
 80053ac:	4b0f      	ldr	r3, [pc, #60]	@ (80053ec <log_buf_write+0x8c>)
 80053ae:	5499      	strb	r1, [r3, r2]
        log_tail = (log_tail + 1) % LOG_BUF_SIZE;
 80053b0:	4b0d      	ldr	r3, [pc, #52]	@ (80053e8 <log_buf_write+0x88>)
 80053b2:	881b      	ldrh	r3, [r3, #0]
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	3301      	adds	r3, #1
 80053b8:	425a      	negs	r2, r3
 80053ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053be:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80053c2:	bf58      	it	pl
 80053c4:	4253      	negpl	r3, r2
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	4b07      	ldr	r3, [pc, #28]	@ (80053e8 <log_buf_write+0x88>)
 80053ca:	801a      	strh	r2, [r3, #0]
    for (int i = 0; i < n; i++) {
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3301      	adds	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	887b      	ldrh	r3, [r7, #2]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	dbe1      	blt.n	800539e <log_buf_write+0x3e>
    }
}
 80053da:	bf00      	nop
 80053dc:	bf00      	nop
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	20000a04 	.word	0x20000a04
 80053e8:	20000a06 	.word	0x20000a06
 80053ec:	20000604 	.word	0x20000604

080053f0 <log_start_tx>:

// 启动DMA异步发送（每次只发一段连续空间）
static void log_start_tx(void) {
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
    if (log_dma_busy || log_head == log_tail || log_uart == NULL) return;
 80053f6:	4b1f      	ldr	r3, [pc, #124]	@ (8005474 <log_start_tx+0x84>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d135      	bne.n	800546c <log_start_tx+0x7c>
 8005400:	4b1d      	ldr	r3, [pc, #116]	@ (8005478 <log_start_tx+0x88>)
 8005402:	881b      	ldrh	r3, [r3, #0]
 8005404:	b29a      	uxth	r2, r3
 8005406:	4b1d      	ldr	r3, [pc, #116]	@ (800547c <log_start_tx+0x8c>)
 8005408:	881b      	ldrh	r3, [r3, #0]
 800540a:	b29b      	uxth	r3, r3
 800540c:	429a      	cmp	r2, r3
 800540e:	d02d      	beq.n	800546c <log_start_tx+0x7c>
 8005410:	4b1b      	ldr	r3, [pc, #108]	@ (8005480 <log_start_tx+0x90>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d029      	beq.n	800546c <log_start_tx+0x7c>
    uint16_t len;
    if (log_tail > log_head) {
 8005418:	4b18      	ldr	r3, [pc, #96]	@ (800547c <log_start_tx+0x8c>)
 800541a:	881b      	ldrh	r3, [r3, #0]
 800541c:	b29a      	uxth	r2, r3
 800541e:	4b16      	ldr	r3, [pc, #88]	@ (8005478 <log_start_tx+0x88>)
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	b29b      	uxth	r3, r3
 8005424:	429a      	cmp	r2, r3
 8005426:	d908      	bls.n	800543a <log_start_tx+0x4a>
        len = log_tail - log_head;
 8005428:	4b14      	ldr	r3, [pc, #80]	@ (800547c <log_start_tx+0x8c>)
 800542a:	881b      	ldrh	r3, [r3, #0]
 800542c:	b29a      	uxth	r2, r3
 800542e:	4b12      	ldr	r3, [pc, #72]	@ (8005478 <log_start_tx+0x88>)
 8005430:	881b      	ldrh	r3, [r3, #0]
 8005432:	b29b      	uxth	r3, r3
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	80fb      	strh	r3, [r7, #6]
 8005438:	e005      	b.n	8005446 <log_start_tx+0x56>
    } else {
        len = LOG_BUF_SIZE - log_head;
 800543a:	4b0f      	ldr	r3, [pc, #60]	@ (8005478 <log_start_tx+0x88>)
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	b29b      	uxth	r3, r3
 8005440:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8005444:	80fb      	strh	r3, [r7, #6]
    }
    log_last_tx_len = len;
 8005446:	4a0f      	ldr	r2, [pc, #60]	@ (8005484 <log_start_tx+0x94>)
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	8013      	strh	r3, [r2, #0]
    log_dma_busy = 1;
 800544c:	4b09      	ldr	r3, [pc, #36]	@ (8005474 <log_start_tx+0x84>)
 800544e:	2201      	movs	r2, #1
 8005450:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit_DMA(log_uart, &log_buf[log_head], len);
 8005452:	4b0b      	ldr	r3, [pc, #44]	@ (8005480 <log_start_tx+0x90>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a08      	ldr	r2, [pc, #32]	@ (8005478 <log_start_tx+0x88>)
 8005458:	8812      	ldrh	r2, [r2, #0]
 800545a:	b292      	uxth	r2, r2
 800545c:	4611      	mov	r1, r2
 800545e:	4a0a      	ldr	r2, [pc, #40]	@ (8005488 <log_start_tx+0x98>)
 8005460:	4411      	add	r1, r2
 8005462:	88fa      	ldrh	r2, [r7, #6]
 8005464:	4618      	mov	r0, r3
 8005466:	f7fe fa35 	bl	80038d4 <HAL_UART_Transmit_DMA>
 800546a:	e000      	b.n	800546e <log_start_tx+0x7e>
    if (log_dma_busy || log_head == log_tail || log_uart == NULL) return;
 800546c:	bf00      	nop
}
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	20000a08 	.word	0x20000a08
 8005478:	20000a04 	.word	0x20000a04
 800547c:	20000a06 	.word	0x20000a06
 8005480:	20000a0c 	.word	0x20000a0c
 8005484:	20000a12 	.word	0x20000a12
 8005488:	20000604 	.word	0x20000604

0800548c <log_uart_dma_tx_cplt_callback>:

// 串口DMA完成回调，继续下一段
void log_uart_dma_tx_cplt_callback(void) {
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
    // 推进head指针
    log_head = (log_head + log_last_tx_len) % LOG_BUF_SIZE;
 8005490:	4b09      	ldr	r3, [pc, #36]	@ (80054b8 <log_uart_dma_tx_cplt_callback+0x2c>)
 8005492:	881b      	ldrh	r3, [r3, #0]
 8005494:	b29a      	uxth	r2, r3
 8005496:	4b09      	ldr	r3, [pc, #36]	@ (80054bc <log_uart_dma_tx_cplt_callback+0x30>)
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	4413      	add	r3, r2
 800549c:	b29b      	uxth	r3, r3
 800549e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	4b04      	ldr	r3, [pc, #16]	@ (80054b8 <log_uart_dma_tx_cplt_callback+0x2c>)
 80054a6:	801a      	strh	r2, [r3, #0]
    log_dma_busy = 0;
 80054a8:	4b05      	ldr	r3, [pc, #20]	@ (80054c0 <log_uart_dma_tx_cplt_callback+0x34>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	701a      	strb	r2, [r3, #0]
    // 有数据继续发送
    log_start_tx();
 80054ae:	f7ff ff9f 	bl	80053f0 <log_start_tx>
}
 80054b2:	bf00      	nop
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000a04 	.word	0x20000a04
 80054bc:	20000a12 	.word	0x20000a12
 80054c0:	20000a08 	.word	0x20000a08

080054c4 <log_init>:

void log_init(UART_HandleTypeDef *huart) {
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
    log_uart = huart;
 80054cc:	4a0a      	ldr	r2, [pc, #40]	@ (80054f8 <log_init+0x34>)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6013      	str	r3, [r2, #0]
    log_head = log_tail = 0;
 80054d2:	2100      	movs	r1, #0
 80054d4:	4b09      	ldr	r3, [pc, #36]	@ (80054fc <log_init+0x38>)
 80054d6:	460a      	mov	r2, r1
 80054d8:	801a      	strh	r2, [r3, #0]
 80054da:	4b09      	ldr	r3, [pc, #36]	@ (8005500 <log_init+0x3c>)
 80054dc:	460a      	mov	r2, r1
 80054de:	801a      	strh	r2, [r3, #0]
    log_dma_busy = 0;
 80054e0:	4b08      	ldr	r3, [pc, #32]	@ (8005504 <log_init+0x40>)
 80054e2:	2200      	movs	r2, #0
 80054e4:	701a      	strb	r2, [r3, #0]
    log_level_limit = LOG_LEVEL_INFO;
 80054e6:	4b08      	ldr	r3, [pc, #32]	@ (8005508 <log_init+0x44>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	701a      	strb	r2, [r3, #0]
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	20000a0c 	.word	0x20000a0c
 80054fc:	20000a06 	.word	0x20000a06
 8005500:	20000a04 	.word	0x20000a04
 8005504:	20000a08 	.word	0x20000a08
 8005508:	20000a10 	.word	0x20000a10

0800550c <log_output>:

void log_set_level(log_level_t level) {
    log_level_limit = level;
}

void log_output(log_level_t level, const char *file, int line, const char *fmt, ...) {
 800550c:	b408      	push	{r3}
 800550e:	b590      	push	{r4, r7, lr}
 8005510:	b0ca      	sub	sp, #296	@ 0x128
 8005512:	af04      	add	r7, sp, #16
 8005514:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005518:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800551c:	6019      	str	r1, [r3, #0]
 800551e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005522:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8005526:	601a      	str	r2, [r3, #0]
 8005528:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800552c:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8005530:	4602      	mov	r2, r0
 8005532:	701a      	strb	r2, [r3, #0]
    if (level < log_level_limit) return;
 8005534:	4b4b      	ldr	r3, [pc, #300]	@ (8005664 <log_output+0x158>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800553c:	f2a2 1209 	subw	r2, r2, #265	@ 0x109
 8005540:	7812      	ldrb	r2, [r2, #0]
 8005542:	429a      	cmp	r2, r3
 8005544:	f0c0 8085 	bcc.w	8005652 <log_output+0x146>
    char msg[LOG_LINE_MAX];
    int n = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    n += snprintf(msg+n, sizeof(msg)-n, "%s[%s][%s:%d] ",
 800554e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005552:	f107 0214 	add.w	r2, r7, #20
 8005556:	18d0      	adds	r0, r2, r3
 8005558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800555c:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8005560:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005564:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	4a3f      	ldr	r2, [pc, #252]	@ (8005668 <log_output+0x15c>)
 800556c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005570:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005574:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00a      	beq.n	8005594 <log_output+0x88>
        log_level_color[level],
        (level==LOG_LEVEL_INFO)?"INFO":(level==LOG_LEVEL_WARN)?"WARN":"ERR",
 800557e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8005582:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d101      	bne.n	8005590 <log_output+0x84>
 800558c:	4b37      	ldr	r3, [pc, #220]	@ (800566c <log_output+0x160>)
 800558e:	e002      	b.n	8005596 <log_output+0x8a>
 8005590:	4b37      	ldr	r3, [pc, #220]	@ (8005670 <log_output+0x164>)
 8005592:	e000      	b.n	8005596 <log_output+0x8a>
    n += snprintf(msg+n, sizeof(msg)-n, "%s[%s][%s:%d] ",
 8005594:	4b37      	ldr	r3, [pc, #220]	@ (8005674 <log_output+0x168>)
 8005596:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 800559a:	f5a2 728a 	sub.w	r2, r2, #276	@ 0x114
 800559e:	6812      	ldr	r2, [r2, #0]
 80055a0:	9202      	str	r2, [sp, #8]
 80055a2:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 80055a6:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80055aa:	6812      	ldr	r2, [r2, #0]
 80055ac:	9201      	str	r2, [sp, #4]
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	4623      	mov	r3, r4
 80055b2:	4a31      	ldr	r2, [pc, #196]	@ (8005678 <log_output+0x16c>)
 80055b4:	f003 f8ba 	bl	800872c <sniprintf>
 80055b8:	4602      	mov	r2, r0
 80055ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055be:	4413      	add	r3, r2
 80055c0:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        file, line);
    va_list ap;
    va_start(ap, fmt);
 80055c4:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80055c8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80055cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055d0:	601a      	str	r2, [r3, #0]
    n += vsnprintf(msg+n, sizeof(msg)-n, fmt, ap);
 80055d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d6:	f107 0214 	add.w	r2, r7, #20
 80055da:	18d0      	adds	r0, r2, r3
 80055dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e0:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 80055e4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80055e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80055f2:	f003 f965 	bl	80088c0 <vsniprintf>
 80055f6:	4602      	mov	r2, r0
 80055f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055fc:	4413      	add	r3, r2
 80055fe:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    va_end(ap);
    n += snprintf(msg+n, sizeof(msg)-n, "%s\r\n", LOG_COLOR_RESET);
 8005602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005606:	f107 0214 	add.w	r2, r7, #20
 800560a:	18d0      	adds	r0, r2, r3
 800560c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005610:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8005614:	4b19      	ldr	r3, [pc, #100]	@ (800567c <log_output+0x170>)
 8005616:	4a1a      	ldr	r2, [pc, #104]	@ (8005680 <log_output+0x174>)
 8005618:	f003 f888 	bl	800872c <sniprintf>
 800561c:	4602      	mov	r2, r0
 800561e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005622:	4413      	add	r3, r2
 8005624:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
    if (n > sizeof(msg)) n = sizeof(msg);
 8005628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800562c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005630:	d903      	bls.n	800563a <log_output+0x12e>
 8005632:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005636:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

    log_buf_write((uint8_t *)msg, n);
 800563a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563e:	b29a      	uxth	r2, r3
 8005640:	f107 0314 	add.w	r3, r7, #20
 8005644:	4611      	mov	r1, r2
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff fe8a 	bl	8005360 <log_buf_write>
    log_start_tx();
 800564c:	f7ff fed0 	bl	80053f0 <log_start_tx>
 8005650:	e000      	b.n	8005654 <log_output+0x148>
    if (level < log_level_limit) return;
 8005652:	bf00      	nop
}
 8005654:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005658:	46bd      	mov	sp, r7
 800565a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800565e:	b001      	add	sp, #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	20000a10 	.word	0x20000a10
 8005668:	20000064 	.word	0x20000064
 800566c:	0800b620 	.word	0x0800b620
 8005670:	0800b628 	.word	0x0800b628
 8005674:	0800b62c 	.word	0x0800b62c
 8005678:	0800b634 	.word	0x0800b634
 800567c:	0800b644 	.word	0x0800b644
 8005680:	0800b64c 	.word	0x0800b64c

08005684 <log_shell_send>:

// printf风格shell输出
void log_shell_send(const char *fmt, ...) {
 8005684:	b40f      	push	{r0, r1, r2, r3}
 8005686:	b580      	push	{r7, lr}
 8005688:	b0c2      	sub	sp, #264	@ 0x108
 800568a:	af00      	add	r7, sp, #0
    char msg[LOG_LINE_MAX];
    va_list ap;
    va_start(ap, fmt);
 800568c:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8005690:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8005694:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8005698:	601a      	str	r2, [r3, #0]
    int n = vsnprintf(msg, sizeof(msg), fmt, ap);
 800569a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800569e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80056a2:	1d38      	adds	r0, r7, #4
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80056aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80056ae:	f003 f907 	bl	80088c0 <vsniprintf>
 80056b2:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
    va_end(ap);
    if (n > sizeof(msg)) n = sizeof(msg);
 80056b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056be:	d903      	bls.n	80056c8 <log_shell_send+0x44>
 80056c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80056c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

    log_buf_write((uint8_t *)msg, n);
 80056c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056cc:	b29a      	uxth	r2, r3
 80056ce:	1d3b      	adds	r3, r7, #4
 80056d0:	4611      	mov	r1, r2
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff fe44 	bl	8005360 <log_buf_write>
    log_start_tx();
 80056d8:	f7ff fe8a 	bl	80053f0 <log_start_tx>
}
 80056dc:	bf00      	nop
 80056de:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80056e2:	46bd      	mov	sp, r7
 80056e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80056e8:	b004      	add	sp, #16
 80056ea:	4770      	bx	lr

080056ec <uart_manager_register>:
#include <string.h>

static uart_channel_t uart_channels[UART_MAX_CHANNELS] = {0};

// 注册串口及其解析函数
int uart_manager_register(UART_HandleTypeDef *huart, uart_parse_func_t parser) {
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < UART_MAX_CHANNELS; ++i) {
 80056f6:	2300      	movs	r3, #0
 80056f8:	60fb      	str	r3, [r7, #12]
 80056fa:	e059      	b.n	80057b0 <uart_manager_register+0xc4>
        if (uart_channels[i].huart == NULL || uart_channels[i].huart == huart) {
 80056fc:	4a31      	ldr	r2, [pc, #196]	@ (80057c4 <uart_manager_register+0xd8>)
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8005704:	fb01 f303 	mul.w	r3, r1, r3
 8005708:	4413      	add	r3, r2
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00a      	beq.n	8005726 <uart_manager_register+0x3a>
 8005710:	4a2c      	ldr	r2, [pc, #176]	@ (80057c4 <uart_manager_register+0xd8>)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	4413      	add	r3, r2
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	429a      	cmp	r2, r3
 8005724:	d141      	bne.n	80057aa <uart_manager_register+0xbe>
            uart_channels[i].huart = huart;
 8005726:	4a27      	ldr	r2, [pc, #156]	@ (80057c4 <uart_manager_register+0xd8>)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800572e:	fb01 f303 	mul.w	r3, r1, r3
 8005732:	4413      	add	r3, r2
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	601a      	str	r2, [r3, #0]
            uart_channels[i].parser = parser;
 8005738:	4a22      	ldr	r2, [pc, #136]	@ (80057c4 <uart_manager_register+0xd8>)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8005740:	fb01 f303 	mul.w	r3, r1, r3
 8005744:	4413      	add	r3, r2
 8005746:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	601a      	str	r2, [r3, #0]
            uart_channels[i].rx_len = 0;
 800574e:	4a1d      	ldr	r2, [pc, #116]	@ (80057c4 <uart_manager_register+0xd8>)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8005756:	fb01 f303 	mul.w	r3, r1, r3
 800575a:	4413      	add	r3, r2
 800575c:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 8005760:	2200      	movs	r2, #0
 8005762:	801a      	strh	r2, [r3, #0]
            uart_channels[i].ready = 0;
 8005764:	4a17      	ldr	r2, [pc, #92]	@ (80057c4 <uart_manager_register+0xd8>)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	4413      	add	r3, r2
 8005772:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005776:	2200      	movs	r2, #0
 8005778:	701a      	strb	r2, [r3, #0]

            // 启动 DMA 接收
            HAL_UART_Receive_DMA(huart, uart_channels[i].rx_buffer, UART_RX_BUFFER_SIZE);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 8005780:	fb02 f303 	mul.w	r3, r2, r3
 8005784:	4a0f      	ldr	r2, [pc, #60]	@ (80057c4 <uart_manager_register+0xd8>)
 8005786:	4413      	add	r3, r2
 8005788:	3304      	adds	r3, #4
 800578a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800578e:	4619      	mov	r1, r3
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7fe f90f 	bl	80039b4 <HAL_UART_Receive_DMA>
            __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f042 0210 	orr.w	r2, r2, #16
 80057a4:	60da      	str	r2, [r3, #12]
            return 0;
 80057a6:	2300      	movs	r3, #0
 80057a8:	e007      	b.n	80057ba <uart_manager_register+0xce>
    for (int i = 0; i < UART_MAX_CHANNELS; ++i) {
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	3301      	adds	r3, #1
 80057ae:	60fb      	str	r3, [r7, #12]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	dda2      	ble.n	80056fc <uart_manager_register+0x10>
        }
    }
    return -1;
 80057b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	20000a14 	.word	0x20000a14

080057c8 <uart_manager_clear>:
    }
    return -1;
}


int uart_manager_clear(UART_HandleTypeDef *huart) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UART_MAX_CHANNELS; ++i) {
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	e033      	b.n	800583e <uart_manager_clear+0x76>
        if (uart_channels[i].huart == huart) {
 80057d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005850 <uart_manager_clear+0x88>)
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80057de:	fb01 f303 	mul.w	r3, r1, r3
 80057e2:	4413      	add	r3, r2
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d125      	bne.n	8005838 <uart_manager_clear+0x70>
            uart_channels[i].rx_len = 0;
 80057ec:	4a18      	ldr	r2, [pc, #96]	@ (8005850 <uart_manager_clear+0x88>)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80057f4:	fb01 f303 	mul.w	r3, r1, r3
 80057f8:	4413      	add	r3, r2
 80057fa:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80057fe:	2200      	movs	r2, #0
 8005800:	801a      	strh	r2, [r3, #0]
            uart_channels[i].ready = 0;
 8005802:	4a13      	ldr	r2, [pc, #76]	@ (8005850 <uart_manager_clear+0x88>)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800580a:	fb01 f303 	mul.w	r3, r1, r3
 800580e:	4413      	add	r3, r2
 8005810:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005814:	2200      	movs	r2, #0
 8005816:	701a      	strb	r2, [r3, #0]
            memset(uart_channels[i].rx_buffer, 0, UART_RX_BUFFER_SIZE);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 800581e:	fb02 f303 	mul.w	r3, r2, r3
 8005822:	4a0b      	ldr	r2, [pc, #44]	@ (8005850 <uart_manager_clear+0x88>)
 8005824:	4413      	add	r3, r2
 8005826:	3304      	adds	r3, #4
 8005828:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800582c:	2100      	movs	r1, #0
 800582e:	4618      	mov	r0, r3
 8005830:	f003 f8e8 	bl	8008a04 <memset>
            return 0;
 8005834:	2300      	movs	r3, #0
 8005836:	e007      	b.n	8005848 <uart_manager_clear+0x80>
    for (int i = 0; i < UART_MAX_CHANNELS; ++i) {
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	3301      	adds	r3, #1
 800583c:	60fb      	str	r3, [r7, #12]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b03      	cmp	r3, #3
 8005842:	ddc8      	ble.n	80057d6 <uart_manager_clear+0xe>
        }
    }
    return -1;  // 未找到该串口
 8005844:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005848:	4618      	mov	r0, r3
 800584a:	3710      	adds	r7, #16
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	20000a14 	.word	0x20000a14

08005854 <uart_manager_idle_callback>:

// 空闲中断触发：记录长度、设置就绪标志
void uart_manager_idle_callback(UART_HandleTypeDef *huart) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UART_MAX_CHANNELS; ++i) {
 800585c:	2300      	movs	r3, #0
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	e048      	b.n	80058f4 <uart_manager_idle_callback+0xa0>
        if (uart_channels[i].huart == huart) {
 8005862:	4a28      	ldr	r2, [pc, #160]	@ (8005904 <uart_manager_idle_callback+0xb0>)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800586a:	fb01 f303 	mul.w	r3, r1, r3
 800586e:	4413      	add	r3, r2
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	429a      	cmp	r2, r3
 8005876:	d13a      	bne.n	80058ee <uart_manager_idle_callback+0x9a>
            __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005878:	2300      	movs	r3, #0
 800587a:	60bb      	str	r3, [r7, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	60bb      	str	r3, [r7, #8]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	60bb      	str	r3, [r7, #8]
 800588c:	68bb      	ldr	r3, [r7, #8]
            HAL_UART_DMAStop(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fe f8b5 	bl	80039fe <HAL_UART_DMAStop>
            uart_channels[i].rx_len = UART_RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	b29b      	uxth	r3, r3
 800589e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80058a2:	b298      	uxth	r0, r3
 80058a4:	4a17      	ldr	r2, [pc, #92]	@ (8005904 <uart_manager_idle_callback+0xb0>)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80058ac:	fb01 f303 	mul.w	r3, r1, r3
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 7382 	add.w	r3, r3, #260	@ 0x104
 80058b6:	4602      	mov	r2, r0
 80058b8:	801a      	strh	r2, [r3, #0]
            uart_channels[i].ready = 1;
 80058ba:	4a12      	ldr	r2, [pc, #72]	@ (8005904 <uart_manager_idle_callback+0xb0>)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 80058c2:	fb01 f303 	mul.w	r3, r1, r3
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 80058cc:	2201      	movs	r2, #1
 80058ce:	701a      	strb	r2, [r3, #0]

            HAL_UART_Receive_DMA(huart, uart_channels[i].rx_buffer, UART_RX_BUFFER_SIZE);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f44f 7286 	mov.w	r2, #268	@ 0x10c
 80058d6:	fb02 f303 	mul.w	r3, r2, r3
 80058da:	4a0a      	ldr	r2, [pc, #40]	@ (8005904 <uart_manager_idle_callback+0xb0>)
 80058dc:	4413      	add	r3, r2
 80058de:	3304      	adds	r3, #4
 80058e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80058e4:	4619      	mov	r1, r3
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fe f864 	bl	80039b4 <HAL_UART_Receive_DMA>
            break;
 80058ec:	e006      	b.n	80058fc <uart_manager_idle_callback+0xa8>
    for (int i = 0; i < UART_MAX_CHANNELS; ++i) {
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	3301      	adds	r3, #1
 80058f2:	60fb      	str	r3, [r7, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	ddb3      	ble.n	8005862 <uart_manager_idle_callback+0xe>
        }
    }
}
 80058fa:	bf00      	nop
 80058fc:	bf00      	nop
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	20000a14 	.word	0x20000a14

08005908 <uart_manager_poll>:

// 主循环中轮询调用此函数
void uart_manager_poll(void) {
 8005908:	b590      	push	{r4, r7, lr}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
    for (int i = 0; i < UART_MAX_CHANNELS; ++i) {
 800590e:	2300      	movs	r3, #0
 8005910:	607b      	str	r3, [r7, #4]
 8005912:	e044      	b.n	800599e <uart_manager_poll+0x96>
        if (uart_channels[i].ready && uart_channels[i].parser) {
 8005914:	4a26      	ldr	r2, [pc, #152]	@ (80059b0 <uart_manager_poll+0xa8>)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	4413      	add	r3, r2
 8005922:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d034      	beq.n	8005998 <uart_manager_poll+0x90>
 800592e:	4a20      	ldr	r2, [pc, #128]	@ (80059b0 <uart_manager_poll+0xa8>)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8005936:	fb01 f303 	mul.w	r3, r1, r3
 800593a:	4413      	add	r3, r2
 800593c:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d028      	beq.n	8005998 <uart_manager_poll+0x90>
            uart_channels[i].parser(uart_channels[i].rx_buffer, uart_channels[i].rx_len);
 8005946:	4a1a      	ldr	r2, [pc, #104]	@ (80059b0 <uart_manager_poll+0xa8>)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800594e:	fb01 f303 	mul.w	r3, r1, r3
 8005952:	4413      	add	r3, r2
 8005954:	f503 7384 	add.w	r3, r3, #264	@ 0x108
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8005960:	fb01 f202 	mul.w	r2, r1, r2
 8005964:	4912      	ldr	r1, [pc, #72]	@ (80059b0 <uart_manager_poll+0xa8>)
 8005966:	440a      	add	r2, r1
 8005968:	1d10      	adds	r0, r2, #4
 800596a:	4911      	ldr	r1, [pc, #68]	@ (80059b0 <uart_manager_poll+0xa8>)
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	f44f 7486 	mov.w	r4, #268	@ 0x10c
 8005972:	fb04 f202 	mul.w	r2, r4, r2
 8005976:	440a      	add	r2, r1
 8005978:	f502 7282 	add.w	r2, r2, #260	@ 0x104
 800597c:	8812      	ldrh	r2, [r2, #0]
 800597e:	4611      	mov	r1, r2
 8005980:	4798      	blx	r3
            uart_channels[i].ready = 0;
 8005982:	4a0b      	ldr	r2, [pc, #44]	@ (80059b0 <uart_manager_poll+0xa8>)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 800598a:	fb01 f303 	mul.w	r3, r1, r3
 800598e:	4413      	add	r3, r2
 8005990:	f503 7383 	add.w	r3, r3, #262	@ 0x106
 8005994:	2200      	movs	r2, #0
 8005996:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < UART_MAX_CHANNELS; ++i) {
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3301      	adds	r3, #1
 800599c:	607b      	str	r3, [r7, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b03      	cmp	r3, #3
 80059a2:	ddb7      	ble.n	8005914 <uart_manager_poll+0xc>
        }
    }
}
 80059a4:	bf00      	nop
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd90      	pop	{r4, r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000a14 	.word	0x20000a14

080059b4 <task_system_init>:
#include "stddef.h"
static volatile uint32_t sys_tick = 0;
static task_list_t task_lists[MAX_TASK_LISTS];
static task_node_t task_pool[MAX_TASK_NUM];

void task_system_init(void) {
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_TASK_NUM; i++) {
 80059ba:	2300      	movs	r3, #0
 80059bc:	607b      	str	r3, [r7, #4]
 80059be:	e00f      	b.n	80059e0 <task_system_init+0x2c>
        task_pool[i].used = 0;
 80059c0:	4a14      	ldr	r2, [pc, #80]	@ (8005a14 <task_system_init+0x60>)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	015b      	lsls	r3, r3, #5
 80059c6:	4413      	add	r3, r2
 80059c8:	2200      	movs	r2, #0
 80059ca:	701a      	strb	r2, [r3, #0]
        task_pool[i].next = NULL;
 80059cc:	4a11      	ldr	r2, [pc, #68]	@ (8005a14 <task_system_init+0x60>)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	015b      	lsls	r3, r3, #5
 80059d2:	4413      	add	r3, r2
 80059d4:	331c      	adds	r3, #28
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAX_TASK_NUM; i++) {
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3301      	adds	r3, #1
 80059de:	607b      	str	r3, [r7, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b3f      	cmp	r3, #63	@ 0x3f
 80059e4:	ddec      	ble.n	80059c0 <task_system_init+0xc>
    }
    for (int i = 0; i < MAX_TASK_LISTS; i++) {
 80059e6:	2300      	movs	r3, #0
 80059e8:	603b      	str	r3, [r7, #0]
 80059ea:	e007      	b.n	80059fc <task_system_init+0x48>
        task_lists[i].head = NULL;
 80059ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005a18 <task_system_init+0x64>)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	2100      	movs	r1, #0
 80059f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < MAX_TASK_LISTS; i++) {
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	3301      	adds	r3, #1
 80059fa:	603b      	str	r3, [r7, #0]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	2b0e      	cmp	r3, #14
 8005a00:	ddf4      	ble.n	80059ec <task_system_init+0x38>
    }
    sys_tick = 0;
 8005a02:	4b06      	ldr	r3, [pc, #24]	@ (8005a1c <task_system_init+0x68>)
 8005a04:	2200      	movs	r2, #0
 8005a06:	601a      	str	r2, [r3, #0]
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	20000e84 	.word	0x20000e84
 8005a18:	20000e48 	.word	0x20000e48
 8005a1c:	20000e44 	.word	0x20000e44

08005a20 <task_system_tick_inc>:

void task_system_tick_inc(void) {
 8005a20:	b480      	push	{r7}
 8005a22:	af00      	add	r7, sp, #0
    sys_tick++;
 8005a24:	4b04      	ldr	r3, [pc, #16]	@ (8005a38 <task_system_tick_inc+0x18>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	4a03      	ldr	r2, [pc, #12]	@ (8005a38 <task_system_tick_inc+0x18>)
 8005a2c:	6013      	str	r3, [r2, #0]
}
 8005a2e:	bf00      	nop
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	20000e44 	.word	0x20000e44

08005a3c <task_system_get_tick>:

uint32_t task_system_get_tick(void) {
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
    return sys_tick;
 8005a40:	4b03      	ldr	r3, [pc, #12]	@ (8005a50 <task_system_get_tick+0x14>)
 8005a42:	681b      	ldr	r3, [r3, #0]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	20000e44 	.word	0x20000e44

08005a54 <alloc_task_node>:

static task_node_t* alloc_task_node(void) {
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAX_TASK_NUM; i++) {
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	607b      	str	r3, [r7, #4]
 8005a5e:	e01b      	b.n	8005a98 <alloc_task_node+0x44>
        if (!task_pool[i].used) {
 8005a60:	4a12      	ldr	r2, [pc, #72]	@ (8005aac <alloc_task_node+0x58>)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	015b      	lsls	r3, r3, #5
 8005a66:	4413      	add	r3, r2
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d111      	bne.n	8005a92 <alloc_task_node+0x3e>
            task_pool[i].used = 1;
 8005a6e:	4a0f      	ldr	r2, [pc, #60]	@ (8005aac <alloc_task_node+0x58>)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	015b      	lsls	r3, r3, #5
 8005a74:	4413      	add	r3, r2
 8005a76:	2201      	movs	r2, #1
 8005a78:	701a      	strb	r2, [r3, #0]
            task_pool[i].next = NULL;
 8005a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8005aac <alloc_task_node+0x58>)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	015b      	lsls	r3, r3, #5
 8005a80:	4413      	add	r3, r2
 8005a82:	331c      	adds	r3, #28
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]
            return &task_pool[i];
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	015b      	lsls	r3, r3, #5
 8005a8c:	4a07      	ldr	r2, [pc, #28]	@ (8005aac <alloc_task_node+0x58>)
 8005a8e:	4413      	add	r3, r2
 8005a90:	e006      	b.n	8005aa0 <alloc_task_node+0x4c>
    for (int i = 0; i < MAX_TASK_NUM; i++) {
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	3301      	adds	r3, #1
 8005a96:	607b      	str	r3, [r7, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2b3f      	cmp	r3, #63	@ 0x3f
 8005a9c:	dde0      	ble.n	8005a60 <alloc_task_node+0xc>
        }
    }
    return NULL;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	20000e84 	.word	0x20000e84

08005ab0 <task_add>:

int task_add(uint8_t list_id, task_func_t cb, void *arg, uint32_t delay, uint32_t period, uint32_t run_count) {
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	60b9      	str	r1, [r7, #8]
 8005ab8:	607a      	str	r2, [r7, #4]
 8005aba:	603b      	str	r3, [r7, #0]
 8005abc:	4603      	mov	r3, r0
 8005abe:	73fb      	strb	r3, [r7, #15]
    if (list_id >= MAX_TASK_LISTS || cb == NULL)
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	2b0e      	cmp	r3, #14
 8005ac4:	d802      	bhi.n	8005acc <task_add+0x1c>
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d101      	bne.n	8005ad0 <task_add+0x20>
        return 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	e02a      	b.n	8005b26 <task_add+0x76>

    task_node_t *node = alloc_task_node();
 8005ad0:	f7ff ffc0 	bl	8005a54 <alloc_task_node>
 8005ad4:	6178      	str	r0, [r7, #20]
    if (!node) return 0;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d101      	bne.n	8005ae0 <task_add+0x30>
 8005adc:	2300      	movs	r3, #0
 8005ade:	e022      	b.n	8005b26 <task_add+0x76>

    uint32_t now = task_system_get_tick();
 8005ae0:	f7ff ffac 	bl	8005a3c <task_system_get_tick>
 8005ae4:	6138      	str	r0, [r7, #16]

    node->start_tick = now;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	605a      	str	r2, [r3, #4]
    node->next_run_tick = now + delay;
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	441a      	add	r2, r3
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	609a      	str	r2, [r3, #8]
    node->period = period;
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	6a3a      	ldr	r2, [r7, #32]
 8005afa:	60da      	str	r2, [r3, #12]
    node->remaining_count = run_count;
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b00:	611a      	str	r2, [r3, #16]
    node->callback = cb;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	615a      	str	r2, [r3, #20]
    node->arg = arg;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	619a      	str	r2, [r3, #24]

    node->next = task_lists[list_id].head;
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	4a07      	ldr	r2, [pc, #28]	@ (8005b30 <task_add+0x80>)
 8005b12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	61da      	str	r2, [r3, #28]
    task_lists[list_id].head = node;
 8005b1a:	7bfb      	ldrb	r3, [r7, #15]
 8005b1c:	4904      	ldr	r1, [pc, #16]	@ (8005b30 <task_add+0x80>)
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    return 1;
 8005b24:	2301      	movs	r3, #1
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3718      	adds	r7, #24
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20000e48 	.word	0x20000e48

08005b34 <tick_elapsed>:
    }
    return 0;
}

// 溢出安全比较
static inline int32_t tick_elapsed(uint32_t now, uint32_t target) {
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
 8005b3c:	6039      	str	r1, [r7, #0]
    return (int32_t)(now - target);
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	1ad3      	subs	r3, r2, r3
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr

08005b50 <task_execute>:

void task_execute(uint8_t list_id) {
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	4603      	mov	r3, r0
 8005b58:	71fb      	strb	r3, [r7, #7]
    if (list_id >= MAX_TASK_LISTS)
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	2b0e      	cmp	r3, #14
 8005b5e:	d837      	bhi.n	8005bd0 <task_execute+0x80>
        return;

    uint32_t now = task_system_get_tick();
 8005b60:	f7ff ff6c 	bl	8005a3c <task_system_get_tick>
 8005b64:	60b8      	str	r0, [r7, #8]
    task_node_t *node = task_lists[list_id].head;
 8005b66:	79fb      	ldrb	r3, [r7, #7]
 8005b68:	4a1b      	ldr	r2, [pc, #108]	@ (8005bd8 <task_execute+0x88>)
 8005b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b6e:	60fb      	str	r3, [r7, #12]

    while (node) {
 8005b70:	e02a      	b.n	8005bc8 <task_execute+0x78>
        if (node->used && node->remaining_count != 0) {
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d023      	beq.n	8005bc2 <task_execute+0x72>
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d01f      	beq.n	8005bc2 <task_execute+0x72>
            if (tick_elapsed(now, node->next_run_tick) >= 0) {
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	4619      	mov	r1, r3
 8005b88:	68b8      	ldr	r0, [r7, #8]
 8005b8a:	f7ff ffd3 	bl	8005b34 <tick_elapsed>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	db16      	blt.n	8005bc2 <task_execute+0x72>
                node->callback(node->arg);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	695b      	ldr	r3, [r3, #20]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	6992      	ldr	r2, [r2, #24]
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	4798      	blx	r3
                if (node->remaining_count != TASK_FOREVER) {
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba8:	d004      	beq.n	8005bb4 <task_execute+0x64>
                    node->remaining_count--;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	1e5a      	subs	r2, r3, #1
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	611a      	str	r2, [r3, #16]
                }
                node->next_run_tick += node->period;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689a      	ldr	r2, [r3, #8]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	441a      	add	r2, r3
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	609a      	str	r2, [r3, #8]
            }
        }
        node = node->next;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	60fb      	str	r3, [r7, #12]
    while (node) {
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1d1      	bne.n	8005b72 <task_execute+0x22>
 8005bce:	e000      	b.n	8005bd2 <task_execute+0x82>
        return;
 8005bd0:	bf00      	nop
    }
}
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	20000e48 	.word	0x20000e48

08005bdc <shell_register_function>:
#define MAX_FUNC_COUNT 32

static func_entry_t func_table[MAX_FUNC_COUNT];
static int func_count = 0;

void shell_register_function(const char *name, shell_func_t func) {
 8005bdc:	b480      	push	{r7}
 8005bde:	b085      	sub	sp, #20
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
    if (func_count < MAX_FUNC_COUNT) {
 8005be6:	4b0c      	ldr	r3, [pc, #48]	@ (8005c18 <shell_register_function+0x3c>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b1f      	cmp	r3, #31
 8005bec:	dc0d      	bgt.n	8005c0a <shell_register_function+0x2e>
        func_table[func_count++] = (func_entry_t){name, func};
 8005bee:	4b0a      	ldr	r3, [pc, #40]	@ (8005c18 <shell_register_function+0x3c>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	1c5a      	adds	r2, r3, #1
 8005bf4:	4908      	ldr	r1, [pc, #32]	@ (8005c18 <shell_register_function+0x3c>)
 8005bf6:	600a      	str	r2, [r1, #0]
 8005bf8:	4908      	ldr	r1, [pc, #32]	@ (8005c1c <shell_register_function+0x40>)
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8005c00:	4a06      	ldr	r2, [pc, #24]	@ (8005c1c <shell_register_function+0x40>)
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	4413      	add	r3, r2
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	605a      	str	r2, [r3, #4]
    }
}
 8005c0a:	bf00      	nop
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	20001784 	.word	0x20001784
 8005c1c:	20001684 	.word	0x20001684

08005c20 <shell_run_function>:

int shell_run_function(const char *name, int argc, char **argv) {
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < func_count; i++) {
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	617b      	str	r3, [r7, #20]
 8005c30:	e017      	b.n	8005c62 <shell_run_function+0x42>
        if (strcmp(func_table[i].name, name) == 0) {
 8005c32:	4a11      	ldr	r2, [pc, #68]	@ (8005c78 <shell_run_function+0x58>)
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c3a:	68f9      	ldr	r1, [r7, #12]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7fa fac7 	bl	80001d0 <strcmp>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d109      	bne.n	8005c5c <shell_run_function+0x3c>
            return func_table[i].func(argc, argv);
 8005c48:	4a0b      	ldr	r2, [pc, #44]	@ (8005c78 <shell_run_function+0x58>)
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	00db      	lsls	r3, r3, #3
 8005c4e:	4413      	add	r3, r2
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	6879      	ldr	r1, [r7, #4]
 8005c54:	68b8      	ldr	r0, [r7, #8]
 8005c56:	4798      	blx	r3
 8005c58:	4603      	mov	r3, r0
 8005c5a:	e009      	b.n	8005c70 <shell_run_function+0x50>
    for (int i = 0; i < func_count; i++) {
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	3301      	adds	r3, #1
 8005c60:	617b      	str	r3, [r7, #20]
 8005c62:	4b06      	ldr	r3, [pc, #24]	@ (8005c7c <shell_run_function+0x5c>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	dbe2      	blt.n	8005c32 <shell_run_function+0x12>
        }
    }
    return -1;
 8005c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}
 8005c78:	20001684 	.word	0x20001684
 8005c7c:	20001784 	.word	0x20001784

08005c80 <shell_func_list>:

void shell_func_list(void) {
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
    printf("Registered functions:\n");
 8005c86:	480d      	ldr	r0, [pc, #52]	@ (8005cbc <shell_func_list+0x3c>)
 8005c88:	f002 fd48 	bl	800871c <puts>
    for (int i = 0; i < func_count; i++) {
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	607b      	str	r3, [r7, #4]
 8005c90:	e00a      	b.n	8005ca8 <shell_func_list+0x28>
        printf(" - %s\n", func_table[i].name);
 8005c92:	4a0b      	ldr	r2, [pc, #44]	@ (8005cc0 <shell_func_list+0x40>)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	4809      	ldr	r0, [pc, #36]	@ (8005cc4 <shell_func_list+0x44>)
 8005c9e:	f002 fcd5 	bl	800864c <iprintf>
    for (int i = 0; i < func_count; i++) {
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	607b      	str	r3, [r7, #4]
 8005ca8:	4b07      	ldr	r3, [pc, #28]	@ (8005cc8 <shell_func_list+0x48>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	dbef      	blt.n	8005c92 <shell_func_list+0x12>
    }
}
 8005cb2:	bf00      	nop
 8005cb4:	bf00      	nop
 8005cb6:	3708      	adds	r7, #8
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	0800b654 	.word	0x0800b654
 8005cc0:	20001684 	.word	0x20001684
 8005cc4:	0800b66c 	.word	0x0800b66c
 8005cc8:	20001784 	.word	0x20001784

08005ccc <shell_exec>:
#include "sf_log.h"
#include "sf_err.h"
#define MAX_ARGC 8
#define MAX_LINE_LEN 128

void shell_exec(const char *line) {
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b0c2      	sub	sp, #264	@ 0x108
 8005cd0:	af04      	add	r7, sp, #16
 8005cd2:	6078      	str	r0, [r7, #4]
    char buffer[MAX_LINE_LEN];
    strncpy(buffer, line, sizeof(buffer));
 8005cd4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8005cd8:	2280      	movs	r2, #128	@ 0x80
 8005cda:	6879      	ldr	r1, [r7, #4]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f002 feb8 	bl	8008a52 <strncpy>
    buffer[sizeof(buffer) - 1] = 0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	f887 30ef 	strb.w	r3, [r7, #239]	@ 0xef

    char *argv[MAX_ARGC] = {0};
 8005ce8:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005cec:	2220      	movs	r2, #32
 8005cee:	2100      	movs	r1, #0
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f002 fe87 	bl	8008a04 <memset>
    int argc = 0;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

    char *token = strtok(buffer, " ");
 8005cfc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8005d00:	497b      	ldr	r1, [pc, #492]	@ (8005ef0 <shell_exec+0x224>)
 8005d02:	4618      	mov	r0, r3
 8005d04:	f002 feb8 	bl	8008a78 <strtok>
 8005d08:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
    while (token && argc < MAX_ARGC) {
 8005d0c:	e011      	b.n	8005d32 <shell_exec+0x66>
        argv[argc++] = token;
 8005d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d12:	1c5a      	adds	r2, r3, #1
 8005d14:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	33f8      	adds	r3, #248	@ 0xf8
 8005d1c:	443b      	add	r3, r7
 8005d1e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8005d22:	f843 2ca8 	str.w	r2, [r3, #-168]
        token = strtok(NULL, " ");
 8005d26:	4972      	ldr	r1, [pc, #456]	@ (8005ef0 <shell_exec+0x224>)
 8005d28:	2000      	movs	r0, #0
 8005d2a:	f002 fea5 	bl	8008a78 <strtok>
 8005d2e:	f8c7 00f0 	str.w	r0, [r7, #240]	@ 0xf0
    while (token && argc < MAX_ARGC) {
 8005d32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d003      	beq.n	8005d42 <shell_exec+0x76>
 8005d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d3e:	2b07      	cmp	r3, #7
 8005d40:	dde5      	ble.n	8005d0e <shell_exec+0x42>
    }

    if (argc == 0) return;
 8005d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 80cd 	beq.w	8005ee6 <shell_exec+0x21a>

    if (strcmp(argv[0], "get") == 0 && argc == 2)
 8005d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d4e:	4969      	ldr	r1, [pc, #420]	@ (8005ef4 <shell_exec+0x228>)
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7fa fa3d 	bl	80001d0 <strcmp>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d11b      	bne.n	8005d94 <shell_exec+0xc8>
 8005d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d117      	bne.n	8005d94 <shell_exec+0xc8>
    {
        char output[64];
        if (shell_get_variable(argv[1], output, sizeof(output)) == 0)
 8005d64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d66:	f107 010c 	add.w	r1, r7, #12
 8005d6a:	2240      	movs	r2, #64	@ 0x40
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 f9f3 	bl	8006158 <shell_get_variable>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d107      	bne.n	8005d88 <shell_exec+0xbc>
        {
            log_shell_send("%s = %s\n", argv[1], output);
 8005d78:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d7a:	f107 020c 	add.w	r2, r7, #12
 8005d7e:	4619      	mov	r1, r3
 8005d80:	485d      	ldr	r0, [pc, #372]	@ (8005ef8 <shell_exec+0x22c>)
 8005d82:	f7ff fc7f 	bl	8005684 <log_shell_send>
    {
 8005d86:	e0af      	b.n	8005ee8 <shell_exec+0x21c>
        }
        else
        {
            log_shell_send("Variable '%s' not found\n", argv[1]);
 8005d88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	485b      	ldr	r0, [pc, #364]	@ (8005efc <shell_exec+0x230>)
 8005d8e:	f7ff fc79 	bl	8005684 <log_shell_send>
    {
 8005d92:	e0a9      	b.n	8005ee8 <shell_exec+0x21c>
        }
    }
    else if (strcmp(argv[0], "get") == 0 && argc == 3 && strcmp(argv[1], "err") == 0)
 8005d94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d96:	4957      	ldr	r1, [pc, #348]	@ (8005ef4 <shell_exec+0x228>)
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f7fa fa19 	bl	80001d0 <strcmp>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d138      	bne.n	8005e16 <shell_exec+0x14a>
 8005da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d134      	bne.n	8005e16 <shell_exec+0x14a>
 8005dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dae:	4954      	ldr	r1, [pc, #336]	@ (8005f00 <shell_exec+0x234>)
 8005db0:	4618      	mov	r0, r3
 8005db2:	f7fa fa0d 	bl	80001d0 <strcmp>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d12c      	bne.n	8005e16 <shell_exec+0x14a>
    {
        error_level_t lev;
        uint8_t act;
        if (error_query(argv[2], &lev, &act) == 0)
 8005dbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dbe:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8005dc2:	f107 014f 	add.w	r1, r7, #79	@ 0x4f
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7ff fa1c 	bl	8005204 <error_query>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d118      	bne.n	8005e04 <shell_exec+0x138>
        {
        	LOG_ERR("Error %-16s | %-7s | %s\n", argv[2],
 8005dd2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005dd4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8005dd8:	2a00      	cmp	r2, #0
 8005dda:	d101      	bne.n	8005de0 <shell_exec+0x114>
 8005ddc:	4a49      	ldr	r2, [pc, #292]	@ (8005f04 <shell_exec+0x238>)
 8005dde:	e000      	b.n	8005de2 <shell_exec+0x116>
 8005de0:	4a49      	ldr	r2, [pc, #292]	@ (8005f08 <shell_exec+0x23c>)
 8005de2:	f897 104e 	ldrb.w	r1, [r7, #78]	@ 0x4e
 8005de6:	2900      	cmp	r1, #0
 8005de8:	d001      	beq.n	8005dee <shell_exec+0x122>
 8005dea:	4948      	ldr	r1, [pc, #288]	@ (8005f0c <shell_exec+0x240>)
 8005dec:	e000      	b.n	8005df0 <shell_exec+0x124>
 8005dee:	4948      	ldr	r1, [pc, #288]	@ (8005f10 <shell_exec+0x244>)
 8005df0:	9102      	str	r1, [sp, #8]
 8005df2:	9201      	str	r2, [sp, #4]
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	4b47      	ldr	r3, [pc, #284]	@ (8005f14 <shell_exec+0x248>)
 8005df8:	2233      	movs	r2, #51	@ 0x33
 8005dfa:	4947      	ldr	r1, [pc, #284]	@ (8005f18 <shell_exec+0x24c>)
 8005dfc:	2002      	movs	r0, #2
 8005dfe:	f7ff fb85 	bl	800550c <log_output>
    {
 8005e02:	e071      	b.n	8005ee8 <shell_exec+0x21c>
                (lev == ERROR_LEVEL_WARNING) ? "WARN" : "ERROR",
                act ? "ACTIVE" : "NORMAL");
        }
        else
        {
        	LOG_ERR("Error '%s' not found\n", argv[2]);
 8005e04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	4b44      	ldr	r3, [pc, #272]	@ (8005f1c <shell_exec+0x250>)
 8005e0a:	2239      	movs	r2, #57	@ 0x39
 8005e0c:	4942      	ldr	r1, [pc, #264]	@ (8005f18 <shell_exec+0x24c>)
 8005e0e:	2002      	movs	r0, #2
 8005e10:	f7ff fb7c 	bl	800550c <log_output>
    {
 8005e14:	e068      	b.n	8005ee8 <shell_exec+0x21c>
        }
    }
    else if (strcmp(argv[0], "set") == 0 && argc == 3)
 8005e16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e18:	4941      	ldr	r1, [pc, #260]	@ (8005f20 <shell_exec+0x254>)
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7fa f9d8 	bl	80001d0 <strcmp>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d119      	bne.n	8005e5a <shell_exec+0x18e>
 8005e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e2a:	2b03      	cmp	r3, #3
 8005e2c:	d115      	bne.n	8005e5a <shell_exec+0x18e>
    {
        if (shell_set_variable(argv[1], argv[2]) == 0)
 8005e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e32:	4611      	mov	r1, r2
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fa5f 	bl	80062f8 <shell_set_variable>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d106      	bne.n	8005e4e <shell_exec+0x182>
        {
            log_shell_send("Set %s = %s\n", argv[1], argv[2]);
 8005e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e42:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005e44:	4619      	mov	r1, r3
 8005e46:	4837      	ldr	r0, [pc, #220]	@ (8005f24 <shell_exec+0x258>)
 8005e48:	f7ff fc1c 	bl	8005684 <log_shell_send>
        if (shell_set_variable(argv[1], argv[2]) == 0)
 8005e4c:	e04c      	b.n	8005ee8 <shell_exec+0x21c>
        }
        else
        {
            log_shell_send("Set failed: variable '%s' not found\n", argv[1]);
 8005e4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e50:	4619      	mov	r1, r3
 8005e52:	4835      	ldr	r0, [pc, #212]	@ (8005f28 <shell_exec+0x25c>)
 8005e54:	f7ff fc16 	bl	8005684 <log_shell_send>
        if (shell_set_variable(argv[1], argv[2]) == 0)
 8005e58:	e046      	b.n	8005ee8 <shell_exec+0x21c>
        }
    }
    else if (strcmp(argv[0], "run") == 0 && argc >= 2)
 8005e5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e5c:	4933      	ldr	r1, [pc, #204]	@ (8005f2c <shell_exec+0x260>)
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f7fa f9b6 	bl	80001d0 <strcmp>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d116      	bne.n	8005e98 <shell_exec+0x1cc>
 8005e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	dd12      	ble.n	8005e98 <shell_exec+0x1cc>
    {
        if (shell_run_function(argv[1], argc - 2, &argv[2]) != 0) {
 8005e72:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e78:	1e99      	subs	r1, r3, #2
 8005e7a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8005e7e:	3308      	adds	r3, #8
 8005e80:	461a      	mov	r2, r3
 8005e82:	f7ff fecd 	bl	8005c20 <shell_run_function>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d02d      	beq.n	8005ee8 <shell_exec+0x21c>
            log_shell_send("Function '%s' failed or not found\n", argv[1]);
 8005e8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4827      	ldr	r0, [pc, #156]	@ (8005f30 <shell_exec+0x264>)
 8005e92:	f7ff fbf7 	bl	8005684 <log_shell_send>
        if (shell_run_function(argv[1], argc - 2, &argv[2]) != 0) {
 8005e96:	e027      	b.n	8005ee8 <shell_exec+0x21c>
        }
    }
    else if (strcmp(argv[0], "varlist") == 0)
 8005e98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e9a:	4926      	ldr	r1, [pc, #152]	@ (8005f34 <shell_exec+0x268>)
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fa f997 	bl	80001d0 <strcmp>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <shell_exec+0x1e2>
    {
        shell_var_list();
 8005ea8:	f000 faf4 	bl	8006494 <shell_var_list>
 8005eac:	e01c      	b.n	8005ee8 <shell_exec+0x21c>
    }
    else if (strcmp(argv[0], "funclist") == 0)
 8005eae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005eb0:	4921      	ldr	r1, [pc, #132]	@ (8005f38 <shell_exec+0x26c>)
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f7fa f98c 	bl	80001d0 <strcmp>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d102      	bne.n	8005ec4 <shell_exec+0x1f8>
    {
        shell_func_list();
 8005ebe:	f7ff fedf 	bl	8005c80 <shell_func_list>
 8005ec2:	e011      	b.n	8005ee8 <shell_exec+0x21c>
    }
    else if (strcmp(argv[0], "errlist") == 0)
 8005ec4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ec6:	491d      	ldr	r1, [pc, #116]	@ (8005f3c <shell_exec+0x270>)
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fa f981 	bl	80001d0 <strcmp>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d102      	bne.n	8005eda <shell_exec+0x20e>
    {
        error_list_print();
 8005ed4:	f7ff f9d0 	bl	8005278 <error_list_print>
 8005ed8:	e006      	b.n	8005ee8 <shell_exec+0x21c>
    }

    else
    {
        log_shell_send("Unknown command: %s\n", argv[0]);
 8005eda:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005edc:	4619      	mov	r1, r3
 8005ede:	4818      	ldr	r0, [pc, #96]	@ (8005f40 <shell_exec+0x274>)
 8005ee0:	f7ff fbd0 	bl	8005684 <log_shell_send>
 8005ee4:	e000      	b.n	8005ee8 <shell_exec+0x21c>
    if (argc == 0) return;
 8005ee6:	bf00      	nop
    }
}
 8005ee8:	37f8      	adds	r7, #248	@ 0xf8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	0800b674 	.word	0x0800b674
 8005ef4:	0800b678 	.word	0x0800b678
 8005ef8:	0800b67c 	.word	0x0800b67c
 8005efc:	0800b688 	.word	0x0800b688
 8005f00:	0800b6a4 	.word	0x0800b6a4
 8005f04:	0800b6a8 	.word	0x0800b6a8
 8005f08:	0800b6b0 	.word	0x0800b6b0
 8005f0c:	0800b6b8 	.word	0x0800b6b8
 8005f10:	0800b6c0 	.word	0x0800b6c0
 8005f14:	0800b6c8 	.word	0x0800b6c8
 8005f18:	0800b6e4 	.word	0x0800b6e4
 8005f1c:	0800b710 	.word	0x0800b710
 8005f20:	0800b728 	.word	0x0800b728
 8005f24:	0800b72c 	.word	0x0800b72c
 8005f28:	0800b73c 	.word	0x0800b73c
 8005f2c:	0800b764 	.word	0x0800b764
 8005f30:	0800b768 	.word	0x0800b768
 8005f34:	0800b78c 	.word	0x0800b78c
 8005f38:	0800b794 	.word	0x0800b794
 8005f3c:	0800b7a0 	.word	0x0800b7a0
 8005f40:	0800b7a8 	.word	0x0800b7a8

08005f44 <shell_register_variable>:
#define MAX_VAR_COUNT 64

static var_entry_t var_table[MAX_VAR_COUNT];
static int var_count = 0;

void shell_register_variable(const char *name, void *addr, var_type_t type) {
 8005f44:	b480      	push	{r7}
 8005f46:	b08b      	sub	sp, #44	@ 0x2c
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	71fb      	strb	r3, [r7, #7]
	if (var_count < MAX_VAR_COUNT) {
 8005f52:	4b22      	ldr	r3, [pc, #136]	@ (8005fdc <shell_register_variable+0x98>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b3f      	cmp	r3, #63	@ 0x3f
 8005f58:	dc3a      	bgt.n	8005fd0 <shell_register_variable+0x8c>
		var_table[var_count++] = (var_entry_t )
 8005f5a:	4b20      	ldr	r3, [pc, #128]	@ (8005fdc <shell_register_variable+0x98>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	1c5a      	adds	r2, r3, #1
 8005f60:	491e      	ldr	r1, [pc, #120]	@ (8005fdc <shell_register_variable+0x98>)
 8005f62:	600a      	str	r2, [r1, #0]
 8005f64:	491e      	ldr	r1, [pc, #120]	@ (8005fe0 <shell_register_variable+0x9c>)
 8005f66:	461a      	mov	r2, r3
 8005f68:	0092      	lsls	r2, r2, #2
 8005f6a:	441a      	add	r2, r3
 8005f6c:	0092      	lsls	r2, r2, #2
 8005f6e:	440a      	add	r2, r1
 8005f70:	68f9      	ldr	r1, [r7, #12]
 8005f72:	6011      	str	r1, [r2, #0]
 8005f74:	491a      	ldr	r1, [pc, #104]	@ (8005fe0 <shell_register_variable+0x9c>)
 8005f76:	461a      	mov	r2, r3
 8005f78:	0092      	lsls	r2, r2, #2
 8005f7a:	441a      	add	r2, r3
 8005f7c:	0092      	lsls	r2, r2, #2
 8005f7e:	440a      	add	r2, r1
 8005f80:	3204      	adds	r2, #4
 8005f82:	68b9      	ldr	r1, [r7, #8]
 8005f84:	6011      	str	r1, [r2, #0]
 8005f86:	4916      	ldr	r1, [pc, #88]	@ (8005fe0 <shell_register_variable+0x9c>)
 8005f88:	461a      	mov	r2, r3
 8005f8a:	0092      	lsls	r2, r2, #2
 8005f8c:	441a      	add	r2, r3
 8005f8e:	0092      	lsls	r2, r2, #2
 8005f90:	440a      	add	r2, r1
 8005f92:	3208      	adds	r2, #8
 8005f94:	79f9      	ldrb	r1, [r7, #7]
 8005f96:	7011      	strb	r1, [r2, #0]
 8005f98:	4911      	ldr	r1, [pc, #68]	@ (8005fe0 <shell_register_variable+0x9c>)
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	0092      	lsls	r2, r2, #2
 8005f9e:	441a      	add	r2, r3
 8005fa0:	0092      	lsls	r2, r2, #2
 8005fa2:	440a      	add	r2, r1
 8005fa4:	3209      	adds	r2, #9
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	7011      	strb	r1, [r2, #0]
 8005faa:	490d      	ldr	r1, [pc, #52]	@ (8005fe0 <shell_register_variable+0x9c>)
 8005fac:	461a      	mov	r2, r3
 8005fae:	0092      	lsls	r2, r2, #2
 8005fb0:	441a      	add	r2, r3
 8005fb2:	0092      	lsls	r2, r2, #2
 8005fb4:	440a      	add	r2, r1
 8005fb6:	320c      	adds	r2, #12
 8005fb8:	2100      	movs	r1, #0
 8005fba:	6011      	str	r1, [r2, #0]
 8005fbc:	4908      	ldr	r1, [pc, #32]	@ (8005fe0 <shell_register_variable+0x9c>)
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	0092      	lsls	r2, r2, #2
 8005fc2:	441a      	add	r2, r3
 8005fc4:	0093      	lsls	r3, r2, #2
 8005fc6:	461a      	mov	r2, r3
 8005fc8:	188b      	adds	r3, r1, r2
 8005fca:	3310      	adds	r3, #16
 8005fcc:	2200      	movs	r2, #0
 8005fce:	601a      	str	r2, [r3, #0]
				{ name, addr, type, 0, 0, 0 };
	}
}
 8005fd0:	bf00      	nop
 8005fd2:	372c      	adds	r7, #44	@ 0x2c
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr
 8005fdc:	20001c88 	.word	0x20001c88
 8005fe0:	20001788 	.word	0x20001788

08005fe4 <shell_register_array>:

// 数组变量注册
void shell_register_array(const char *name, void *addr, var_type_t elem_type,
		int elem_size, int elem_count) {
 8005fe4:	b480      	push	{r7}
 8005fe6:	b08b      	sub	sp, #44	@ 0x2c
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	71fb      	strb	r3, [r7, #7]
	if (var_count < MAX_VAR_COUNT) {
 8005ff4:	4b22      	ldr	r3, [pc, #136]	@ (8006080 <shell_register_array+0x9c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b3f      	cmp	r3, #63	@ 0x3f
 8005ffa:	dc3a      	bgt.n	8006072 <shell_register_array+0x8e>
		var_table[var_count++] =
 8005ffc:	4b20      	ldr	r3, [pc, #128]	@ (8006080 <shell_register_array+0x9c>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	491f      	ldr	r1, [pc, #124]	@ (8006080 <shell_register_array+0x9c>)
 8006004:	600a      	str	r2, [r1, #0]
 8006006:	491f      	ldr	r1, [pc, #124]	@ (8006084 <shell_register_array+0xa0>)
 8006008:	461a      	mov	r2, r3
 800600a:	0092      	lsls	r2, r2, #2
 800600c:	441a      	add	r2, r3
 800600e:	0092      	lsls	r2, r2, #2
 8006010:	440a      	add	r2, r1
 8006012:	68f9      	ldr	r1, [r7, #12]
 8006014:	6011      	str	r1, [r2, #0]
 8006016:	491b      	ldr	r1, [pc, #108]	@ (8006084 <shell_register_array+0xa0>)
 8006018:	461a      	mov	r2, r3
 800601a:	0092      	lsls	r2, r2, #2
 800601c:	441a      	add	r2, r3
 800601e:	0092      	lsls	r2, r2, #2
 8006020:	440a      	add	r2, r1
 8006022:	3204      	adds	r2, #4
 8006024:	68b9      	ldr	r1, [r7, #8]
 8006026:	6011      	str	r1, [r2, #0]
 8006028:	4916      	ldr	r1, [pc, #88]	@ (8006084 <shell_register_array+0xa0>)
 800602a:	461a      	mov	r2, r3
 800602c:	0092      	lsls	r2, r2, #2
 800602e:	441a      	add	r2, r3
 8006030:	0092      	lsls	r2, r2, #2
 8006032:	440a      	add	r2, r1
 8006034:	3208      	adds	r2, #8
 8006036:	2104      	movs	r1, #4
 8006038:	7011      	strb	r1, [r2, #0]
 800603a:	4912      	ldr	r1, [pc, #72]	@ (8006084 <shell_register_array+0xa0>)
 800603c:	461a      	mov	r2, r3
 800603e:	0092      	lsls	r2, r2, #2
 8006040:	441a      	add	r2, r3
 8006042:	0092      	lsls	r2, r2, #2
 8006044:	440a      	add	r2, r1
 8006046:	3209      	adds	r2, #9
 8006048:	79f9      	ldrb	r1, [r7, #7]
 800604a:	7011      	strb	r1, [r2, #0]
 800604c:	490d      	ldr	r1, [pc, #52]	@ (8006084 <shell_register_array+0xa0>)
 800604e:	461a      	mov	r2, r3
 8006050:	0092      	lsls	r2, r2, #2
 8006052:	441a      	add	r2, r3
 8006054:	0092      	lsls	r2, r2, #2
 8006056:	440a      	add	r2, r1
 8006058:	320c      	adds	r2, #12
 800605a:	6839      	ldr	r1, [r7, #0]
 800605c:	6011      	str	r1, [r2, #0]
 800605e:	4909      	ldr	r1, [pc, #36]	@ (8006084 <shell_register_array+0xa0>)
 8006060:	461a      	mov	r2, r3
 8006062:	0092      	lsls	r2, r2, #2
 8006064:	441a      	add	r2, r3
 8006066:	0093      	lsls	r3, r2, #2
 8006068:	461a      	mov	r2, r3
 800606a:	188b      	adds	r3, r1, r2
 800606c:	3310      	adds	r3, #16
 800606e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006070:	601a      	str	r2, [r3, #0]
				(var_entry_t )
						{ name, addr, VAR_TYPE_ARRAY, elem_type, elem_size,
								elem_count };
	}
}
 8006072:	bf00      	nop
 8006074:	372c      	adds	r7, #44	@ 0x2c
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	20001c88 	.word	0x20001c88
 8006084:	20001788 	.word	0x20001788

08006088 <find_var>:

static var_entry_t*
find_var(const char *name) {
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < var_count; i++) {
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	e019      	b.n	80060ca <find_var+0x42>
		if (strcmp(var_table[i].name, name) == 0) {
 8006096:	4912      	ldr	r1, [pc, #72]	@ (80060e0 <find_var+0x58>)
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4613      	mov	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	009b      	lsls	r3, r3, #2
 80060a2:	440b      	add	r3, r1
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7fa f891 	bl	80001d0 <strcmp>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d107      	bne.n	80060c4 <find_var+0x3c>
			return &var_table[i];
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	4613      	mov	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	4413      	add	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4a08      	ldr	r2, [pc, #32]	@ (80060e0 <find_var+0x58>)
 80060c0:	4413      	add	r3, r2
 80060c2:	e008      	b.n	80060d6 <find_var+0x4e>
	for (int i = 0; i < var_count; i++) {
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	3301      	adds	r3, #1
 80060c8:	60fb      	str	r3, [r7, #12]
 80060ca:	4b06      	ldr	r3, [pc, #24]	@ (80060e4 <find_var+0x5c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	dbe0      	blt.n	8006096 <find_var+0xe>
		}
	}
	return NULL;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	20001788 	.word	0x20001788
 80060e4:	20001c88 	.word	0x20001c88

080060e8 <parse_array>:

static int parse_array(const char *name, char *base, int *idx) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b088      	sub	sp, #32
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
	const char *lb = strchr(name, '[');
 80060f4:	215b      	movs	r1, #91	@ 0x5b
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f002 fc8c 	bl	8008a14 <strchr>
 80060fc:	61f8      	str	r0, [r7, #28]
	const char *rb = strchr(name, ']');
 80060fe:	215d      	movs	r1, #93	@ 0x5d
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f002 fc87 	bl	8008a14 <strchr>
 8006106:	61b8      	str	r0, [r7, #24]
	if (!lb || !rb || lb > rb)
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d006      	beq.n	800611c <parse_array+0x34>
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d003      	beq.n	800611c <parse_array+0x34>
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	429a      	cmp	r2, r3
 800611a:	d901      	bls.n	8006120 <parse_array+0x38>
		return 0;
 800611c:	2300      	movs	r3, #0
 800611e:	e017      	b.n	8006150 <parse_array+0x68>
	int nlen = lb - name;
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	1ad3      	subs	r3, r2, r3
 8006126:	617b      	str	r3, [r7, #20]
	strncpy(base, name, nlen);
 8006128:	697b      	ldr	r3, [r7, #20]
 800612a:	461a      	mov	r2, r3
 800612c:	68f9      	ldr	r1, [r7, #12]
 800612e:	68b8      	ldr	r0, [r7, #8]
 8006130:	f002 fc8f 	bl	8008a52 <strncpy>
	base[nlen] = 0;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	4413      	add	r3, r2
 800613a:	2200      	movs	r2, #0
 800613c:	701a      	strb	r2, [r3, #0]
	*idx = atoi(lb + 1);
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	3301      	adds	r3, #1
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fcbd 	bl	8006ac2 <atoi>
 8006148:	4602      	mov	r2, r0
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	601a      	str	r2, [r3, #0]
	return 1;
 800614e:	2301      	movs	r3, #1
}
 8006150:	4618      	mov	r0, r3
 8006152:	3720      	adds	r7, #32
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <shell_get_variable>:

int shell_get_variable(const char *name, char *output, int max_len) {
 8006158:	b590      	push	{r4, r7, lr}
 800615a:	b093      	sub	sp, #76	@ 0x4c
 800615c:	af02      	add	r7, sp, #8
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
	char base[32];
	int idx;
	if (parse_array(name, base, &idx)) { // arr[3] 形式
 8006164:	f107 0210 	add.w	r2, r7, #16
 8006168:	f107 0314 	add.w	r3, r7, #20
 800616c:	4619      	mov	r1, r3
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f7ff ffba 	bl	80060e8 <parse_array>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d063      	beq.n	8006242 <shell_get_variable+0xea>
		var_entry_t *var = find_var(base);
 800617a:	f107 0314 	add.w	r3, r7, #20
 800617e:	4618      	mov	r0, r3
 8006180:	f7ff ff82 	bl	8006088 <find_var>
 8006184:	63b8      	str	r0, [r7, #56]	@ 0x38
		if (!var || var->type != VAR_TYPE_ARRAY)
 8006186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006188:	2b00      	cmp	r3, #0
 800618a:	d003      	beq.n	8006194 <shell_get_variable+0x3c>
 800618c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618e:	7a1b      	ldrb	r3, [r3, #8]
 8006190:	2b04      	cmp	r3, #4
 8006192:	d002      	beq.n	800619a <shell_get_variable+0x42>
			return -1;
 8006194:	f04f 33ff 	mov.w	r3, #4294967295
 8006198:	e0a0      	b.n	80062dc <shell_get_variable+0x184>
		if (idx < 0 || idx >= var->elem_count)
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	db04      	blt.n	80061aa <shell_get_variable+0x52>
 80061a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a2:	691a      	ldr	r2, [r3, #16]
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	dc02      	bgt.n	80061b0 <shell_get_variable+0x58>
			return -2;
 80061aa:	f06f 0301 	mvn.w	r3, #1
 80061ae:	e095      	b.n	80062dc <shell_get_variable+0x184>
		uint8_t *elem_addr = (uint8_t*) var->addr + idx * var->elem_size;
 80061b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061b6:	68d2      	ldr	r2, [r2, #12]
 80061b8:	6939      	ldr	r1, [r7, #16]
 80061ba:	fb01 f202 	mul.w	r2, r1, r2
 80061be:	4413      	add	r3, r2
 80061c0:	637b      	str	r3, [r7, #52]	@ 0x34
		switch (var->elem_type) {
 80061c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c4:	7a5b      	ldrb	r3, [r3, #9]
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	d836      	bhi.n	8006238 <shell_get_variable+0xe0>
 80061ca:	a201      	add	r2, pc, #4	@ (adr r2, 80061d0 <shell_get_variable+0x78>)
 80061cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d0:	080061e1 	.word	0x080061e1
 80061d4:	080061f1 	.word	0x080061f1
 80061d8:	08006211 	.word	0x08006211
 80061dc:	0800621f 	.word	0x0800621f
		case VAR_TYPE_INT:
			snprintf(output, max_len, "%d", *(int*) elem_addr);
 80061e0:	6879      	ldr	r1, [r7, #4]
 80061e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a3f      	ldr	r2, [pc, #252]	@ (80062e4 <shell_get_variable+0x18c>)
 80061e8:	68b8      	ldr	r0, [r7, #8]
 80061ea:	f002 fa9f 	bl	800872c <sniprintf>
			break;
 80061ee:	e026      	b.n	800623e <shell_get_variable+0xe6>
		case VAR_TYPE_FLOAT:
			snprintf(output, max_len, "%f", *(float*) elem_addr);
 80061f0:	687c      	ldr	r4, [r7, #4]
 80061f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4618      	mov	r0, r3
 80061f8:	f7fa f9b6 	bl	8000568 <__aeabi_f2d>
 80061fc:	4602      	mov	r2, r0
 80061fe:	460b      	mov	r3, r1
 8006200:	e9cd 2300 	strd	r2, r3, [sp]
 8006204:	4a38      	ldr	r2, [pc, #224]	@ (80062e8 <shell_get_variable+0x190>)
 8006206:	4621      	mov	r1, r4
 8006208:	68b8      	ldr	r0, [r7, #8]
 800620a:	f002 fa8f 	bl	800872c <sniprintf>
			break;
 800620e:	e016      	b.n	800623e <shell_get_variable+0xe6>
		case VAR_TYPE_STRING:
			snprintf(output, max_len, "%s", (char*) elem_addr);
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006214:	4a35      	ldr	r2, [pc, #212]	@ (80062ec <shell_get_variable+0x194>)
 8006216:	68b8      	ldr	r0, [r7, #8]
 8006218:	f002 fa88 	bl	800872c <sniprintf>
			break;
 800621c:	e00f      	b.n	800623e <shell_get_variable+0xe6>
		case VAR_TYPE_BOOL:
			snprintf(output, max_len, "%s",
 800621e:	6879      	ldr	r1, [r7, #4]
					(*(int*) elem_addr) ? "true" : "false");
 8006220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006222:	681b      	ldr	r3, [r3, #0]
			snprintf(output, max_len, "%s",
 8006224:	2b00      	cmp	r3, #0
 8006226:	d001      	beq.n	800622c <shell_get_variable+0xd4>
 8006228:	4b31      	ldr	r3, [pc, #196]	@ (80062f0 <shell_get_variable+0x198>)
 800622a:	e000      	b.n	800622e <shell_get_variable+0xd6>
 800622c:	4b31      	ldr	r3, [pc, #196]	@ (80062f4 <shell_get_variable+0x19c>)
 800622e:	4a2f      	ldr	r2, [pc, #188]	@ (80062ec <shell_get_variable+0x194>)
 8006230:	68b8      	ldr	r0, [r7, #8]
 8006232:	f002 fa7b 	bl	800872c <sniprintf>
			break;
 8006236:	e002      	b.n	800623e <shell_get_variable+0xe6>
		default:
			return -3;
 8006238:	f06f 0302 	mvn.w	r3, #2
 800623c:	e04e      	b.n	80062dc <shell_get_variable+0x184>
		}
		return 0;
 800623e:	2300      	movs	r3, #0
 8006240:	e04c      	b.n	80062dc <shell_get_variable+0x184>
	} else { // 标量
		var_entry_t *var = find_var(name);
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f7ff ff20 	bl	8006088 <find_var>
 8006248:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (!var)
 800624a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800624c:	2b00      	cmp	r3, #0
 800624e:	d102      	bne.n	8006256 <shell_get_variable+0xfe>
			return -1;
 8006250:	f04f 33ff 	mov.w	r3, #4294967295
 8006254:	e042      	b.n	80062dc <shell_get_variable+0x184>
		switch (var->type) {
 8006256:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006258:	7a1b      	ldrb	r3, [r3, #8]
 800625a:	2b03      	cmp	r3, #3
 800625c:	d83a      	bhi.n	80062d4 <shell_get_variable+0x17c>
 800625e:	a201      	add	r2, pc, #4	@ (adr r2, 8006264 <shell_get_variable+0x10c>)
 8006260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006264:	08006275 	.word	0x08006275
 8006268:	08006287 	.word	0x08006287
 800626c:	080062a9 	.word	0x080062a9
 8006270:	080062b9 	.word	0x080062b9
		case VAR_TYPE_INT:
			snprintf(output, max_len, "%d", *(int*) var->addr);
 8006274:	6879      	ldr	r1, [r7, #4]
 8006276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a19      	ldr	r2, [pc, #100]	@ (80062e4 <shell_get_variable+0x18c>)
 800627e:	68b8      	ldr	r0, [r7, #8]
 8006280:	f002 fa54 	bl	800872c <sniprintf>
			break;
 8006284:	e029      	b.n	80062da <shell_get_variable+0x182>
		case VAR_TYPE_FLOAT:
			snprintf(output, max_len, "%f", *(float*) var->addr);
 8006286:	687c      	ldr	r4, [r7, #4]
 8006288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4618      	mov	r0, r3
 8006290:	f7fa f96a 	bl	8000568 <__aeabi_f2d>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	e9cd 2300 	strd	r2, r3, [sp]
 800629c:	4a12      	ldr	r2, [pc, #72]	@ (80062e8 <shell_get_variable+0x190>)
 800629e:	4621      	mov	r1, r4
 80062a0:	68b8      	ldr	r0, [r7, #8]
 80062a2:	f002 fa43 	bl	800872c <sniprintf>
			break;
 80062a6:	e018      	b.n	80062da <shell_get_variable+0x182>
		case VAR_TYPE_STRING:
			snprintf(output, max_len, "%s", (char*) var->addr);
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	4a0f      	ldr	r2, [pc, #60]	@ (80062ec <shell_get_variable+0x194>)
 80062b0:	68b8      	ldr	r0, [r7, #8]
 80062b2:	f002 fa3b 	bl	800872c <sniprintf>
			break;
 80062b6:	e010      	b.n	80062da <shell_get_variable+0x182>
		case VAR_TYPE_BOOL:
			snprintf(output, max_len, "%s",
 80062b8:	6879      	ldr	r1, [r7, #4]
					(*(int*) var->addr) ? "true" : "false");
 80062ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
			snprintf(output, max_len, "%s",
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <shell_get_variable+0x170>
 80062c4:	4b0a      	ldr	r3, [pc, #40]	@ (80062f0 <shell_get_variable+0x198>)
 80062c6:	e000      	b.n	80062ca <shell_get_variable+0x172>
 80062c8:	4b0a      	ldr	r3, [pc, #40]	@ (80062f4 <shell_get_variable+0x19c>)
 80062ca:	4a08      	ldr	r2, [pc, #32]	@ (80062ec <shell_get_variable+0x194>)
 80062cc:	68b8      	ldr	r0, [r7, #8]
 80062ce:	f002 fa2d 	bl	800872c <sniprintf>
			break;
 80062d2:	e002      	b.n	80062da <shell_get_variable+0x182>
		default:
			return -3;
 80062d4:	f06f 0302 	mvn.w	r3, #2
 80062d8:	e000      	b.n	80062dc <shell_get_variable+0x184>
		}
		return 0;
 80062da:	2300      	movs	r3, #0
	}
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3744      	adds	r7, #68	@ 0x44
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd90      	pop	{r4, r7, pc}
 80062e4:	0800b7c0 	.word	0x0800b7c0
 80062e8:	0800b7c4 	.word	0x0800b7c4
 80062ec:	0800b7c8 	.word	0x0800b7c8
 80062f0:	0800b7cc 	.word	0x0800b7cc
 80062f4:	0800b7d4 	.word	0x0800b7d4

080062f8 <shell_set_variable>:

int shell_set_variable(const char *name, const char *value_str) {
 80062f8:	b590      	push	{r4, r7, lr}
 80062fa:	b08f      	sub	sp, #60	@ 0x3c
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
	char base[32];
	int idx;
	if (parse_array(name, base, &idx)) {
 8006302:	f107 0208 	add.w	r2, r7, #8
 8006306:	f107 030c 	add.w	r3, r7, #12
 800630a:	4619      	mov	r1, r3
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f7ff feeb 	bl	80060e8 <parse_array>
 8006312:	4603      	mov	r3, r0
 8006314:	2b00      	cmp	r3, #0
 8006316:	d06a      	beq.n	80063ee <shell_set_variable+0xf6>
		var_entry_t *var = find_var(base);
 8006318:	f107 030c 	add.w	r3, r7, #12
 800631c:	4618      	mov	r0, r3
 800631e:	f7ff feb3 	bl	8006088 <find_var>
 8006322:	6338      	str	r0, [r7, #48]	@ 0x30
		if (!var || var->type != VAR_TYPE_ARRAY)
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <shell_set_variable+0x3a>
 800632a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632c:	7a1b      	ldrb	r3, [r3, #8]
 800632e:	2b04      	cmp	r3, #4
 8006330:	d002      	beq.n	8006338 <shell_set_variable+0x40>
			return -1;
 8006332:	f04f 33ff 	mov.w	r3, #4294967295
 8006336:	e0a6      	b.n	8006486 <shell_set_variable+0x18e>
		if (idx < 0 || idx >= var->elem_count)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	2b00      	cmp	r3, #0
 800633c:	db04      	blt.n	8006348 <shell_set_variable+0x50>
 800633e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006340:	691a      	ldr	r2, [r3, #16]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	429a      	cmp	r2, r3
 8006346:	dc02      	bgt.n	800634e <shell_set_variable+0x56>
			return -2;
 8006348:	f06f 0301 	mvn.w	r3, #1
 800634c:	e09b      	b.n	8006486 <shell_set_variable+0x18e>
		uint8_t *elem_addr = (uint8_t*) var->addr + idx * var->elem_size;
 800634e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006354:	68d2      	ldr	r2, [r2, #12]
 8006356:	68b9      	ldr	r1, [r7, #8]
 8006358:	fb01 f202 	mul.w	r2, r1, r2
 800635c:	4413      	add	r3, r2
 800635e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		switch (var->elem_type) {
 8006360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006362:	7a5b      	ldrb	r3, [r3, #9]
 8006364:	2b03      	cmp	r3, #3
 8006366:	d83d      	bhi.n	80063e4 <shell_set_variable+0xec>
 8006368:	a201      	add	r2, pc, #4	@ (adr r2, 8006370 <shell_set_variable+0x78>)
 800636a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636e:	bf00      	nop
 8006370:	08006381 	.word	0x08006381
 8006374:	0800638f 	.word	0x0800638f
 8006378:	080063a9 	.word	0x080063a9
 800637c:	080063c9 	.word	0x080063c9
		case VAR_TYPE_INT:
			*(int*) elem_addr = atoi(value_str);
 8006380:	6838      	ldr	r0, [r7, #0]
 8006382:	f000 fb9e 	bl	8006ac2 <atoi>
 8006386:	4602      	mov	r2, r0
 8006388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638a:	601a      	str	r2, [r3, #0]
			break;
 800638c:	e02d      	b.n	80063ea <shell_set_variable+0xf2>
		case VAR_TYPE_FLOAT:
			*(float*) elem_addr = atof(value_str);
 800638e:	6838      	ldr	r0, [r7, #0]
 8006390:	f000 fb94 	bl	8006abc <atof>
 8006394:	ec53 2b10 	vmov	r2, r3, d0
 8006398:	4610      	mov	r0, r2
 800639a:	4619      	mov	r1, r3
 800639c:	f7fa fc34 	bl	8000c08 <__aeabi_d2f>
 80063a0:	4602      	mov	r2, r0
 80063a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063a4:	601a      	str	r2, [r3, #0]
			break;
 80063a6:	e020      	b.n	80063ea <shell_set_variable+0xf2>
		case VAR_TYPE_STRING:
			strncpy((char*) elem_addr, value_str, var->elem_size - 1);
 80063a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063aa:	68db      	ldr	r3, [r3, #12]
 80063ac:	3b01      	subs	r3, #1
 80063ae:	461a      	mov	r2, r3
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80063b4:	f002 fb4d 	bl	8008a52 <strncpy>
			((char*) elem_addr)[var->elem_size - 1] = 0;
 80063b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	3b01      	subs	r3, #1
 80063be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063c0:	4413      	add	r3, r2
 80063c2:	2200      	movs	r2, #0
 80063c4:	701a      	strb	r2, [r3, #0]
			break;
 80063c6:	e010      	b.n	80063ea <shell_set_variable+0xf2>
		case VAR_TYPE_BOOL:
			*(int*) elem_addr = (strcmp(value_str, "true") == 0);
 80063c8:	4931      	ldr	r1, [pc, #196]	@ (8006490 <shell_set_variable+0x198>)
 80063ca:	6838      	ldr	r0, [r7, #0]
 80063cc:	f7f9 ff00 	bl	80001d0 <strcmp>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	bf0c      	ite	eq
 80063d6:	2301      	moveq	r3, #1
 80063d8:	2300      	movne	r3, #0
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	461a      	mov	r2, r3
 80063de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e0:	601a      	str	r2, [r3, #0]
			break;
 80063e2:	e002      	b.n	80063ea <shell_set_variable+0xf2>
		default:
			return -3;
 80063e4:	f06f 0302 	mvn.w	r3, #2
 80063e8:	e04d      	b.n	8006486 <shell_set_variable+0x18e>
		}
		return 0;
 80063ea:	2300      	movs	r3, #0
 80063ec:	e04b      	b.n	8006486 <shell_set_variable+0x18e>
	} else {
		var_entry_t *var = find_var(name);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff fe4a 	bl	8006088 <find_var>
 80063f4:	6378      	str	r0, [r7, #52]	@ 0x34
		if (!var)
 80063f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d102      	bne.n	8006402 <shell_set_variable+0x10a>
			return -1;
 80063fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006400:	e041      	b.n	8006486 <shell_set_variable+0x18e>
		switch (var->type) {
 8006402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006404:	7a1b      	ldrb	r3, [r3, #8]
 8006406:	2b03      	cmp	r3, #3
 8006408:	d839      	bhi.n	800647e <shell_set_variable+0x186>
 800640a:	a201      	add	r2, pc, #4	@ (adr r2, 8006410 <shell_set_variable+0x118>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006421 	.word	0x08006421
 8006414:	08006431 	.word	0x08006431
 8006418:	08006449 	.word	0x08006449
 800641c:	08006463 	.word	0x08006463
		case VAR_TYPE_INT:
			*(int*) var->addr = atoi(value_str);
 8006420:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006422:	685c      	ldr	r4, [r3, #4]
 8006424:	6838      	ldr	r0, [r7, #0]
 8006426:	f000 fb4c 	bl	8006ac2 <atoi>
 800642a:	4603      	mov	r3, r0
 800642c:	6023      	str	r3, [r4, #0]
			break;
 800642e:	e029      	b.n	8006484 <shell_set_variable+0x18c>
		case VAR_TYPE_FLOAT:
			*(float*) var->addr = atof(value_str);
 8006430:	6838      	ldr	r0, [r7, #0]
 8006432:	f000 fb43 	bl	8006abc <atof>
 8006436:	ec51 0b10 	vmov	r0, r1, d0
 800643a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800643c:	685c      	ldr	r4, [r3, #4]
 800643e:	f7fa fbe3 	bl	8000c08 <__aeabi_d2f>
 8006442:	4603      	mov	r3, r0
 8006444:	6023      	str	r3, [r4, #0]
			break;
 8006446:	e01d      	b.n	8006484 <shell_set_variable+0x18c>
		case VAR_TYPE_STRING:
			strncpy((char*) var->addr, value_str, strlen(value_str) + 1);
 8006448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800644a:	685c      	ldr	r4, [r3, #4]
 800644c:	6838      	ldr	r0, [r7, #0]
 800644e:	f7f9 ff1f 	bl	8000290 <strlen>
 8006452:	4603      	mov	r3, r0
 8006454:	3301      	adds	r3, #1
 8006456:	461a      	mov	r2, r3
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	4620      	mov	r0, r4
 800645c:	f002 faf9 	bl	8008a52 <strncpy>
			break;
 8006460:	e010      	b.n	8006484 <shell_set_variable+0x18c>
		case VAR_TYPE_BOOL:
			*(int*) var->addr = (strcmp(value_str, "true") == 0);
 8006462:	490b      	ldr	r1, [pc, #44]	@ (8006490 <shell_set_variable+0x198>)
 8006464:	6838      	ldr	r0, [r7, #0]
 8006466:	f7f9 feb3 	bl	80001d0 <strcmp>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	bf0c      	ite	eq
 8006470:	2301      	moveq	r3, #1
 8006472:	2300      	movne	r3, #0
 8006474:	b2da      	uxtb	r2, r3
 8006476:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	601a      	str	r2, [r3, #0]
			break;
 800647c:	e002      	b.n	8006484 <shell_set_variable+0x18c>
		default:
			return -3;
 800647e:	f06f 0302 	mvn.w	r3, #2
 8006482:	e000      	b.n	8006486 <shell_set_variable+0x18e>
		}
		return 0;
 8006484:	2300      	movs	r3, #0
	}
}
 8006486:	4618      	mov	r0, r3
 8006488:	373c      	adds	r7, #60	@ 0x3c
 800648a:	46bd      	mov	sp, r7
 800648c:	bd90      	pop	{r4, r7, pc}
 800648e:	bf00      	nop
 8006490:	0800b7cc 	.word	0x0800b7cc

08006494 <shell_var_list>:
void shell_var_list(void) {
 8006494:	b580      	push	{r7, lr}
 8006496:	b084      	sub	sp, #16
 8006498:	af02      	add	r7, sp, #8
	LOG_INFO("Registered variables:\n");
 800649a:	4b25      	ldr	r3, [pc, #148]	@ (8006530 <shell_var_list+0x9c>)
 800649c:	22a3      	movs	r2, #163	@ 0xa3
 800649e:	4925      	ldr	r1, [pc, #148]	@ (8006534 <shell_var_list+0xa0>)
 80064a0:	2000      	movs	r0, #0
 80064a2:	f7ff f833 	bl	800550c <log_output>
	for (int i = 0; i < var_count; i++) {
 80064a6:	2300      	movs	r3, #0
 80064a8:	607b      	str	r3, [r7, #4]
 80064aa:	e036      	b.n	800651a <shell_var_list+0x86>
		if (var_table[i].type == VAR_TYPE_ARRAY)
 80064ac:	4922      	ldr	r1, [pc, #136]	@ (8006538 <shell_var_list+0xa4>)
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	4613      	mov	r3, r2
 80064b2:	009b      	lsls	r3, r3, #2
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	3308      	adds	r3, #8
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d119      	bne.n	80064f6 <shell_var_list+0x62>
			LOG_INFO(" - %s[%d]\n", var_table[i].name, var_table[i].elem_count);
 80064c2:	491d      	ldr	r1, [pc, #116]	@ (8006538 <shell_var_list+0xa4>)
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	4613      	mov	r3, r2
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	4413      	add	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	440b      	add	r3, r1
 80064d0:	6819      	ldr	r1, [r3, #0]
 80064d2:	4819      	ldr	r0, [pc, #100]	@ (8006538 <shell_var_list+0xa4>)
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	4613      	mov	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4403      	add	r3, r0
 80064e0:	3310      	adds	r3, #16
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	9301      	str	r3, [sp, #4]
 80064e6:	9100      	str	r1, [sp, #0]
 80064e8:	4b14      	ldr	r3, [pc, #80]	@ (800653c <shell_var_list+0xa8>)
 80064ea:	22a6      	movs	r2, #166	@ 0xa6
 80064ec:	4911      	ldr	r1, [pc, #68]	@ (8006534 <shell_var_list+0xa0>)
 80064ee:	2000      	movs	r0, #0
 80064f0:	f7ff f80c 	bl	800550c <log_output>
 80064f4:	e00e      	b.n	8006514 <shell_var_list+0x80>
		else
			LOG_INFO(" - %s\n", var_table[i].name);
 80064f6:	4910      	ldr	r1, [pc, #64]	@ (8006538 <shell_var_list+0xa4>)
 80064f8:	687a      	ldr	r2, [r7, #4]
 80064fa:	4613      	mov	r3, r2
 80064fc:	009b      	lsls	r3, r3, #2
 80064fe:	4413      	add	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	440b      	add	r3, r1
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	4b0d      	ldr	r3, [pc, #52]	@ (8006540 <shell_var_list+0xac>)
 800650a:	22a8      	movs	r2, #168	@ 0xa8
 800650c:	4909      	ldr	r1, [pc, #36]	@ (8006534 <shell_var_list+0xa0>)
 800650e:	2000      	movs	r0, #0
 8006510:	f7fe fffc 	bl	800550c <log_output>
	for (int i = 0; i < var_count; i++) {
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3301      	adds	r3, #1
 8006518:	607b      	str	r3, [r7, #4]
 800651a:	4b0a      	ldr	r3, [pc, #40]	@ (8006544 <shell_var_list+0xb0>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	429a      	cmp	r2, r3
 8006522:	dbc3      	blt.n	80064ac <shell_var_list+0x18>
	}
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	3708      	adds	r7, #8
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
 800652e:	bf00      	nop
 8006530:	0800b7dc 	.word	0x0800b7dc
 8006534:	0800b7f4 	.word	0x0800b7f4
 8006538:	20001788 	.word	0x20001788
 800653c:	0800b824 	.word	0x0800b824
 8006540:	0800b830 	.word	0x0800b830
 8006544:	20001c88 	.word	0x20001c88

08006548 <key_evt_push>:
// 事件队列
static key_evt_t key_evt_queue[KEY_EVT_QUEUE_SIZE];
static int evt_q_head = 0, evt_q_tail = 0;
static int queue_enable = 1;

static void key_evt_push(uint8_t id, key_event_t evt) {
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	4603      	mov	r3, r0
 8006550:	460a      	mov	r2, r1
 8006552:	71fb      	strb	r3, [r7, #7]
 8006554:	4613      	mov	r3, r2
 8006556:	71bb      	strb	r3, [r7, #6]
    if (!queue_enable) return;
 8006558:	4b15      	ldr	r3, [pc, #84]	@ (80065b0 <key_evt_push+0x68>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d020      	beq.n	80065a2 <key_evt_push+0x5a>
    int next = (evt_q_tail + 1) % KEY_EVT_QUEUE_SIZE;
 8006560:	4b14      	ldr	r3, [pc, #80]	@ (80065b4 <key_evt_push+0x6c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	3301      	adds	r3, #1
 8006566:	425a      	negs	r2, r3
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	f002 0207 	and.w	r2, r2, #7
 8006570:	bf58      	it	pl
 8006572:	4253      	negpl	r3, r2
 8006574:	60fb      	str	r3, [r7, #12]
    if (next != evt_q_head) {
 8006576:	4b10      	ldr	r3, [pc, #64]	@ (80065b8 <key_evt_push+0x70>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	429a      	cmp	r2, r3
 800657e:	d011      	beq.n	80065a4 <key_evt_push+0x5c>
        key_evt_queue[evt_q_tail].key_id = id;
 8006580:	4b0c      	ldr	r3, [pc, #48]	@ (80065b4 <key_evt_push+0x6c>)
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	490d      	ldr	r1, [pc, #52]	@ (80065bc <key_evt_push+0x74>)
 8006586:	79fa      	ldrb	r2, [r7, #7]
 8006588:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
        key_evt_queue[evt_q_tail].event  = evt;
 800658c:	4b09      	ldr	r3, [pc, #36]	@ (80065b4 <key_evt_push+0x6c>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a0a      	ldr	r2, [pc, #40]	@ (80065bc <key_evt_push+0x74>)
 8006592:	005b      	lsls	r3, r3, #1
 8006594:	4413      	add	r3, r2
 8006596:	79ba      	ldrb	r2, [r7, #6]
 8006598:	705a      	strb	r2, [r3, #1]
        evt_q_tail = next;
 800659a:	4a06      	ldr	r2, [pc, #24]	@ (80065b4 <key_evt_push+0x6c>)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6013      	str	r3, [r2, #0]
 80065a0:	e000      	b.n	80065a4 <key_evt_push+0x5c>
    if (!queue_enable) return;
 80065a2:	bf00      	nop
    }
}
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	20000070 	.word	0x20000070
 80065b4:	20001ca8 	.word	0x20001ca8
 80065b8:	20001ca4 	.word	0x20001ca4
 80065bc:	20001c94 	.word	0x20001c94

080065c0 <key_evt_pop>:
int key_evt_pop(key_evt_t *evt) {
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
    if (evt_q_head == evt_q_tail) return 0;
 80065c8:	4b11      	ldr	r3, [pc, #68]	@ (8006610 <key_evt_pop+0x50>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	4b11      	ldr	r3, [pc, #68]	@ (8006614 <key_evt_pop+0x54>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d101      	bne.n	80065d8 <key_evt_pop+0x18>
 80065d4:	2300      	movs	r3, #0
 80065d6:	e014      	b.n	8006602 <key_evt_pop+0x42>
    *evt = key_evt_queue[evt_q_head];
 80065d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006610 <key_evt_pop+0x50>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	4a0e      	ldr	r2, [pc, #56]	@ (8006618 <key_evt_pop+0x58>)
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	4413      	add	r3, r2
 80065e4:	881b      	ldrh	r3, [r3, #0]
 80065e6:	800b      	strh	r3, [r1, #0]
    evt_q_head = (evt_q_head + 1) % KEY_EVT_QUEUE_SIZE;
 80065e8:	4b09      	ldr	r3, [pc, #36]	@ (8006610 <key_evt_pop+0x50>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3301      	adds	r3, #1
 80065ee:	425a      	negs	r2, r3
 80065f0:	f003 0307 	and.w	r3, r3, #7
 80065f4:	f002 0207 	and.w	r2, r2, #7
 80065f8:	bf58      	it	pl
 80065fa:	4253      	negpl	r3, r2
 80065fc:	4a04      	ldr	r2, [pc, #16]	@ (8006610 <key_evt_pop+0x50>)
 80065fe:	6013      	str	r3, [r2, #0]
    return 1;
 8006600:	2301      	movs	r3, #1
}
 8006602:	4618      	mov	r0, r3
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	20001ca4 	.word	0x20001ca4
 8006614:	20001ca8 	.word	0x20001ca8
 8006618:	20001c94 	.word	0x20001c94

0800661c <key_register>:
void key_evt_enable(int en) { queue_enable = en; }

int key_register(key_t *key) {
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
    if (key_count >= MAX_KEY_NUM) return -1;
 8006624:	4b15      	ldr	r3, [pc, #84]	@ (800667c <key_register+0x60>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b0f      	cmp	r3, #15
 800662a:	dd02      	ble.n	8006632 <key_register+0x16>
 800662c:	f04f 33ff 	mov.w	r3, #4294967295
 8006630:	e01f      	b.n	8006672 <key_register+0x56>
    memset(&key->state, 0, sizeof(key_state_t)); // 安全
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	330b      	adds	r3, #11
 8006636:	2201      	movs	r2, #1
 8006638:	2100      	movs	r1, #0
 800663a:	4618      	mov	r0, r3
 800663c:	f002 f9e2 	bl	8008a04 <memset>
    key->deb_cnt = 0;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	731a      	strb	r2, [r3, #12]
    key->press_tick = 0;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	81da      	strh	r2, [r3, #14]
    key->last_release_tick = 0;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	821a      	strh	r2, [r3, #16]
    key->click_count = 0;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	749a      	strb	r2, [r3, #18]
    key->next = key_head;
 8006658:	4b09      	ldr	r3, [pc, #36]	@ (8006680 <key_register+0x64>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	615a      	str	r2, [r3, #20]
    key_head = key;
 8006660:	4a07      	ldr	r2, [pc, #28]	@ (8006680 <key_register+0x64>)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6013      	str	r3, [r2, #0]
    key_count++;
 8006666:	4b05      	ldr	r3, [pc, #20]	@ (800667c <key_register+0x60>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3301      	adds	r3, #1
 800666c:	4a03      	ldr	r2, [pc, #12]	@ (800667c <key_register+0x60>)
 800666e:	6013      	str	r3, [r2, #0]
    return 0;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20001c90 	.word	0x20001c90
 8006680:	20001c8c 	.word	0x20001c8c

08006684 <key_state_machine>:
#define CLICK_INTERVAL   250  // 双击最大间隔(ms)
#define LONG_PRESS_MS    1000 // 长按时长(ms)
#define REPEAT_MS        400  // 连发周期(ms)

static void key_state_machine(key_t *key, uint16_t tick_ms, uint16_t now_tick)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	460b      	mov	r3, r1
 800668e:	807b      	strh	r3, [r7, #2]
 8006690:	4613      	mov	r3, r2
 8006692:	803b      	strh	r3, [r7, #0]
    uint8_t cur_level = key->read_fn ? key->read_fn() : 1;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d004      	beq.n	80066a6 <key_state_machine+0x22>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4798      	blx	r3
 80066a2:	4603      	mov	r3, r0
 80066a4:	e000      	b.n	80066a8 <key_state_machine+0x24>
 80066a6:	2301      	movs	r3, #1
 80066a8:	73fb      	strb	r3, [r7, #15]
    uint8_t is_down = (cur_level == key->active_level);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	7a9b      	ldrb	r3, [r3, #10]
 80066ae:	7bfa      	ldrb	r2, [r7, #15]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	bf0c      	ite	eq
 80066b4:	2301      	moveq	r3, #1
 80066b6:	2300      	movne	r3, #0
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	73bb      	strb	r3, [r7, #14]

    switch (key->state) {
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	7adb      	ldrb	r3, [r3, #11]
 80066c0:	2b05      	cmp	r3, #5
 80066c2:	f200 80e1 	bhi.w	8006888 <key_state_machine+0x204>
 80066c6:	a201      	add	r2, pc, #4	@ (adr r2, 80066cc <key_state_machine+0x48>)
 80066c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066cc:	080066e5 	.word	0x080066e5
 80066d0:	080066fb 	.word	0x080066fb
 80066d4:	0800673d 	.word	0x0800673d
 80066d8:	08006785 	.word	0x08006785
 80066dc:	080067c5 	.word	0x080067c5
 80066e0:	0800680b 	.word	0x0800680b
    case KEY_STATE_IDLE:
        if (is_down) {
 80066e4:	7bbb      	ldrb	r3, [r7, #14]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 80d2 	beq.w	8006890 <key_state_machine+0x20c>
            key->state = KEY_STATE_DEBOUNCE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	72da      	strb	r2, [r3, #11]
            key->deb_cnt = 0;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	731a      	strb	r2, [r3, #12]
        }
        break;
 80066f8:	e0ca      	b.n	8006890 <key_state_machine+0x20c>
    case KEY_STATE_DEBOUNCE:
        if (is_down) {
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d019      	beq.n	8006734 <key_state_machine+0xb0>
            key->deb_cnt += tick_ms;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	7b1a      	ldrb	r2, [r3, #12]
 8006704:	887b      	ldrh	r3, [r7, #2]
 8006706:	b2db      	uxtb	r3, r3
 8006708:	4413      	add	r3, r2
 800670a:	b2da      	uxtb	r2, r3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	731a      	strb	r2, [r3, #12]
            if (key->deb_cnt >= DEBOUNCE_MS) {
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	7b1b      	ldrb	r3, [r3, #12]
 8006714:	2b13      	cmp	r3, #19
 8006716:	f240 80bd 	bls.w	8006894 <key_state_machine+0x210>
                key->state = KEY_STATE_PRESSED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2202      	movs	r2, #2
 800671e:	72da      	strb	r2, [r3, #11]
                key->press_tick = 0;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2200      	movs	r2, #0
 8006724:	81da      	strh	r2, [r3, #14]
                key_evt_push(key->id, KEY_EVENT_DOWN);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	7a1b      	ldrb	r3, [r3, #8]
 800672a:	2101      	movs	r1, #1
 800672c:	4618      	mov	r0, r3
 800672e:	f7ff ff0b 	bl	8006548 <key_evt_push>
            }
        } else {
            key->state = KEY_STATE_IDLE;
        }
        break;
 8006732:	e0af      	b.n	8006894 <key_state_machine+0x210>
            key->state = KEY_STATE_IDLE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	72da      	strb	r2, [r3, #11]
        break;
 800673a:	e0ab      	b.n	8006894 <key_state_machine+0x210>
    case KEY_STATE_PRESSED:
        if (is_down) {
 800673c:	7bbb      	ldrb	r3, [r7, #14]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d019      	beq.n	8006776 <key_state_machine+0xf2>
            key->press_tick += tick_ms;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	89da      	ldrh	r2, [r3, #14]
 8006746:	887b      	ldrh	r3, [r7, #2]
 8006748:	4413      	add	r3, r2
 800674a:	b29a      	uxth	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	81da      	strh	r2, [r3, #14]
            if (key->press_tick == LONG_PRESS_MS) {
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	89db      	ldrh	r3, [r3, #14]
 8006754:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006758:	f040 809e 	bne.w	8006898 <key_state_machine+0x214>
                key_evt_push(key->id, KEY_EVENT_LONG);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	7a1b      	ldrb	r3, [r3, #8]
 8006760:	2105      	movs	r1, #5
 8006762:	4618      	mov	r0, r3
 8006764:	f7ff fef0 	bl	8006548 <key_evt_push>
                key->state = KEY_STATE_LONG;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2203      	movs	r2, #3
 800676c:	72da      	strb	r2, [r3, #11]
                key->press_tick = 0;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	81da      	strh	r2, [r3, #14]
            }
        } else {
            key->state = KEY_STATE_WAIT_RELEASE;
            key->deb_cnt = 0;
        }
        break;
 8006774:	e090      	b.n	8006898 <key_state_machine+0x214>
            key->state = KEY_STATE_WAIT_RELEASE;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2204      	movs	r2, #4
 800677a:	72da      	strb	r2, [r3, #11]
            key->deb_cnt = 0;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	731a      	strb	r2, [r3, #12]
        break;
 8006782:	e089      	b.n	8006898 <key_state_machine+0x214>
    case KEY_STATE_LONG:
        if (is_down) {
 8006784:	7bbb      	ldrb	r3, [r7, #14]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d015      	beq.n	80067b6 <key_state_machine+0x132>
            key->press_tick += tick_ms;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	89da      	ldrh	r2, [r3, #14]
 800678e:	887b      	ldrh	r3, [r7, #2]
 8006790:	4413      	add	r3, r2
 8006792:	b29a      	uxth	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	81da      	strh	r2, [r3, #14]
            if (key->press_tick >= REPEAT_MS) {
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	89db      	ldrh	r3, [r3, #14]
 800679c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80067a0:	d37c      	bcc.n	800689c <key_state_machine+0x218>
                key->press_tick = 0;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	81da      	strh	r2, [r3, #14]
                key_evt_push(key->id, KEY_EVENT_REPEAT);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	7a1b      	ldrb	r3, [r3, #8]
 80067ac:	2106      	movs	r1, #6
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff feca 	bl	8006548 <key_evt_push>
            }
        } else {
            key->state = KEY_STATE_WAIT_RELEASE;
            key->deb_cnt = 0;
        }
        break;
 80067b4:	e072      	b.n	800689c <key_state_machine+0x218>
            key->state = KEY_STATE_WAIT_RELEASE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2204      	movs	r2, #4
 80067ba:	72da      	strb	r2, [r3, #11]
            key->deb_cnt = 0;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	731a      	strb	r2, [r3, #12]
        break;
 80067c2:	e06b      	b.n	800689c <key_state_machine+0x218>
    case KEY_STATE_WAIT_RELEASE:
        if (!is_down) {
 80067c4:	7bbb      	ldrb	r3, [r7, #14]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d118      	bne.n	80067fc <key_state_machine+0x178>
            key->deb_cnt += tick_ms;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	7b1a      	ldrb	r2, [r3, #12]
 80067ce:	887b      	ldrh	r3, [r7, #2]
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	4413      	add	r3, r2
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	731a      	strb	r2, [r3, #12]
            if (key->deb_cnt >= DEBOUNCE_MS) {
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	7b1b      	ldrb	r3, [r3, #12]
 80067de:	2b13      	cmp	r3, #19
 80067e0:	d95e      	bls.n	80068a0 <key_state_machine+0x21c>
                // 抬起确认
                key_evt_push(key->id, KEY_EVENT_UP);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	7a1b      	ldrb	r3, [r3, #8]
 80067e6:	2102      	movs	r1, #2
 80067e8:	4618      	mov	r0, r3
 80067ea:	f7ff fead 	bl	8006548 <key_evt_push>
                // 进入等待单击确认状态（而不是直接单击）
                key->state = KEY_STATE_WAIT_CLICK;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2205      	movs	r2, #5
 80067f2:	72da      	strb	r2, [r3, #11]
                key->press_tick = 0;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	81da      	strh	r2, [r3, #14]
        } else {
            // 被再次按下，回到消抖状态
            key->state = KEY_STATE_DEBOUNCE;
            key->deb_cnt = 0;
        }
        break;
 80067fa:	e051      	b.n	80068a0 <key_state_machine+0x21c>
            key->state = KEY_STATE_DEBOUNCE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	72da      	strb	r2, [r3, #11]
            key->deb_cnt = 0;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2200      	movs	r2, #0
 8006806:	731a      	strb	r2, [r3, #12]
        break;
 8006808:	e04a      	b.n	80068a0 <key_state_machine+0x21c>
    case KEY_STATE_WAIT_CLICK:
        key->press_tick += tick_ms;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	89da      	ldrh	r2, [r3, #14]
 800680e:	887b      	ldrh	r3, [r7, #2]
 8006810:	4413      	add	r3, r2
 8006812:	b29a      	uxth	r2, r3
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	81da      	strh	r2, [r3, #14]
        if (is_down) {
 8006818:	7bbb      	ldrb	r3, [r7, #14]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d006      	beq.n	800682c <key_state_machine+0x1a8>
            key->state = KEY_STATE_DEBOUNCE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	72da      	strb	r2, [r3, #11]
            key->deb_cnt = 0;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	731a      	strb	r2, [r3, #12]
 800682a:	e00c      	b.n	8006846 <key_state_machine+0x1c2>
            // 记录已按下第二次（本次不计入双击计数）
        } else if (key->press_tick >= CLICK_INTERVAL) {
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	89db      	ldrh	r3, [r3, #14]
 8006830:	2bf9      	cmp	r3, #249	@ 0xf9
 8006832:	d908      	bls.n	8006846 <key_state_machine+0x1c2>
            // 等待期间未发生第二次按下，确认单击
            key_evt_push(key->id, KEY_EVENT_CLICK);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	7a1b      	ldrb	r3, [r3, #8]
 8006838:	2103      	movs	r1, #3
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff fe84 	bl	8006548 <key_evt_push>
            key->state = KEY_STATE_IDLE;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	72da      	strb	r2, [r3, #11]
        }
        // 还要检测二次完整按下抬起
        if (is_down) {
 8006846:	7bbb      	ldrb	r3, [r7, #14]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d009      	beq.n	8006860 <key_state_machine+0x1dc>
            key->state = KEY_STATE_DEBOUNCE;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2201      	movs	r2, #1
 8006850:	72da      	strb	r2, [r3, #11]
            key->deb_cnt = 0;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2200      	movs	r2, #0
 8006856:	731a      	strb	r2, [r3, #12]
            key->click_count = 1;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2201      	movs	r2, #1
 800685c:	749a      	strb	r2, [r3, #18]
            // 第二次抬起，直接判为双击
            key_evt_push(key->id, KEY_EVENT_DOUBLE);
            key->click_count = 0;
            key->state = KEY_STATE_IDLE;
        }
        break;
 800685e:	e021      	b.n	80068a4 <key_state_machine+0x220>
        } else if (key->click_count == 1 && !is_down) {
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	7c9b      	ldrb	r3, [r3, #18]
 8006864:	2b01      	cmp	r3, #1
 8006866:	d11d      	bne.n	80068a4 <key_state_machine+0x220>
 8006868:	7bbb      	ldrb	r3, [r7, #14]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d11a      	bne.n	80068a4 <key_state_machine+0x220>
            key_evt_push(key->id, KEY_EVENT_DOUBLE);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	7a1b      	ldrb	r3, [r3, #8]
 8006872:	2104      	movs	r1, #4
 8006874:	4618      	mov	r0, r3
 8006876:	f7ff fe67 	bl	8006548 <key_evt_push>
            key->click_count = 0;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	749a      	strb	r2, [r3, #18]
            key->state = KEY_STATE_IDLE;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	72da      	strb	r2, [r3, #11]
        break;
 8006886:	e00d      	b.n	80068a4 <key_state_machine+0x220>
    default: key->state = KEY_STATE_IDLE; break;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	72da      	strb	r2, [r3, #11]
 800688e:	e00a      	b.n	80068a6 <key_state_machine+0x222>
        break;
 8006890:	bf00      	nop
 8006892:	e008      	b.n	80068a6 <key_state_machine+0x222>
        break;
 8006894:	bf00      	nop
 8006896:	e006      	b.n	80068a6 <key_state_machine+0x222>
        break;
 8006898:	bf00      	nop
 800689a:	e004      	b.n	80068a6 <key_state_machine+0x222>
        break;
 800689c:	bf00      	nop
 800689e:	e002      	b.n	80068a6 <key_state_machine+0x222>
        break;
 80068a0:	bf00      	nop
 80068a2:	e000      	b.n	80068a6 <key_state_machine+0x222>
        break;
 80068a4:	bf00      	nop
    }
}
 80068a6:	bf00      	nop
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop

080068b0 <key_scan_all>:

void key_scan_all(uint16_t tick_ms) {
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	80fb      	strh	r3, [r7, #6]
    static uint16_t sys_tick = 0;
    sys_tick += tick_ms;
 80068ba:	4b31      	ldr	r3, [pc, #196]	@ (8006980 <key_scan_all+0xd0>)
 80068bc:	881a      	ldrh	r2, [r3, #0]
 80068be:	88fb      	ldrh	r3, [r7, #6]
 80068c0:	4413      	add	r3, r2
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	4b2e      	ldr	r3, [pc, #184]	@ (8006980 <key_scan_all+0xd0>)
 80068c6:	801a      	strh	r2, [r3, #0]
    key_t *k = key_head;
 80068c8:	4b2e      	ldr	r3, [pc, #184]	@ (8006984 <key_scan_all+0xd4>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	617b      	str	r3, [r7, #20]
    while (k) {
 80068ce:	e009      	b.n	80068e4 <key_scan_all+0x34>
        key_state_machine(k, tick_ms, sys_tick);
 80068d0:	4b2b      	ldr	r3, [pc, #172]	@ (8006980 <key_scan_all+0xd0>)
 80068d2:	881a      	ldrh	r2, [r3, #0]
 80068d4:	88fb      	ldrh	r3, [r7, #6]
 80068d6:	4619      	mov	r1, r3
 80068d8:	6978      	ldr	r0, [r7, #20]
 80068da:	f7ff fed3 	bl	8006684 <key_state_machine>
        k = k->next;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	617b      	str	r3, [r7, #20]
    while (k) {
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1f2      	bne.n	80068d0 <key_scan_all+0x20>
    }
    // 组合键检测
    for (uint8_t group = 1; group < 16; group++) {
 80068ea:	2301      	movs	r3, #1
 80068ec:	74fb      	strb	r3, [r7, #19]
 80068ee:	e03f      	b.n	8006970 <key_scan_all+0xc0>
        int group_count = 0, down_count = 0;
 80068f0:	2300      	movs	r3, #0
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	2300      	movs	r3, #0
 80068f6:	60bb      	str	r3, [r7, #8]
        k = key_head;
 80068f8:	4b22      	ldr	r3, [pc, #136]	@ (8006984 <key_scan_all+0xd4>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	617b      	str	r3, [r7, #20]
        while (k) {
 80068fe:	e015      	b.n	800692c <key_scan_all+0x7c>
            if (k->group == group) {
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	7a5b      	ldrb	r3, [r3, #9]
 8006904:	7cfa      	ldrb	r2, [r7, #19]
 8006906:	429a      	cmp	r2, r3
 8006908:	d10d      	bne.n	8006926 <key_scan_all+0x76>
                group_count++;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	3301      	adds	r3, #1
 800690e:	60fb      	str	r3, [r7, #12]
                if (k->state == KEY_STATE_PRESSED || k->state == KEY_STATE_LONG)
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	7adb      	ldrb	r3, [r3, #11]
 8006914:	2b02      	cmp	r3, #2
 8006916:	d003      	beq.n	8006920 <key_scan_all+0x70>
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	7adb      	ldrb	r3, [r3, #11]
 800691c:	2b03      	cmp	r3, #3
 800691e:	d102      	bne.n	8006926 <key_scan_all+0x76>
                    down_count++;
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	3301      	adds	r3, #1
 8006924:	60bb      	str	r3, [r7, #8]
            }
            k = k->next;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	695b      	ldr	r3, [r3, #20]
 800692a:	617b      	str	r3, [r7, #20]
        while (k) {
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e6      	bne.n	8006900 <key_scan_all+0x50>
        }
        if (group_count && down_count == group_count) {
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d018      	beq.n	800696a <key_scan_all+0xba>
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	429a      	cmp	r2, r3
 800693e:	d114      	bne.n	800696a <key_scan_all+0xba>
            k = key_head;
 8006940:	4b10      	ldr	r3, [pc, #64]	@ (8006984 <key_scan_all+0xd4>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	617b      	str	r3, [r7, #20]
            while (k) {
 8006946:	e00d      	b.n	8006964 <key_scan_all+0xb4>
                if (k->group == group) {
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	7a5b      	ldrb	r3, [r3, #9]
 800694c:	7cfa      	ldrb	r2, [r7, #19]
 800694e:	429a      	cmp	r2, r3
 8006950:	d105      	bne.n	800695e <key_scan_all+0xae>
                    key_evt_push(k->id, KEY_EVENT_COMBO);
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	7a1b      	ldrb	r3, [r3, #8]
 8006956:	2107      	movs	r1, #7
 8006958:	4618      	mov	r0, r3
 800695a:	f7ff fdf5 	bl	8006548 <key_evt_push>
                }
                k = k->next;
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	617b      	str	r3, [r7, #20]
            while (k) {
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1ee      	bne.n	8006948 <key_scan_all+0x98>
    for (uint8_t group = 1; group < 16; group++) {
 800696a:	7cfb      	ldrb	r3, [r7, #19]
 800696c:	3301      	adds	r3, #1
 800696e:	74fb      	strb	r3, [r7, #19]
 8006970:	7cfb      	ldrb	r3, [r7, #19]
 8006972:	2b0f      	cmp	r3, #15
 8006974:	d9bc      	bls.n	80068f0 <key_scan_all+0x40>
            }
        }
    }
}
 8006976:	bf00      	nop
 8006978:	bf00      	nop
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	20001cac 	.word	0x20001cac
 8006984:	20001c8c 	.word	0x20001c8c

08006988 <key_evt_dispatch>:

// ========== 事件分发 ==========
void key_evt_dispatch(void)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
    key_evt_t evt;
    key_t *k;
    while (key_evt_pop(&evt)) {
 800698e:	e085      	b.n	8006a9c <key_evt_dispatch+0x114>
        for (k = key_head; k; k = k->next) {
 8006990:	4b49      	ldr	r3, [pc, #292]	@ (8006ab8 <key_evt_dispatch+0x130>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	607b      	str	r3, [r7, #4]
 8006996:	e07d      	b.n	8006a94 <key_evt_dispatch+0x10c>
            if (k->id == evt.key_id && k->event_handler) {
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	7a1a      	ldrb	r2, [r3, #8]
 800699c:	783b      	ldrb	r3, [r7, #0]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d175      	bne.n	8006a8e <key_evt_dispatch+0x106>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d071      	beq.n	8006a8e <key_evt_dispatch+0x106>
                switch (evt.event) {
 80069aa:	787b      	ldrb	r3, [r7, #1]
 80069ac:	3b01      	subs	r3, #1
 80069ae:	2b06      	cmp	r3, #6
 80069b0:	d85d      	bhi.n	8006a6e <key_evt_dispatch+0xe6>
 80069b2:	a201      	add	r2, pc, #4	@ (adr r2, 80069b8 <key_evt_dispatch+0x30>)
 80069b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b8:	080069d5 	.word	0x080069d5
 80069bc:	080069eb 	.word	0x080069eb
 80069c0:	08006a01 	.word	0x08006a01
 80069c4:	08006a17 	.word	0x08006a17
 80069c8:	08006a2d 	.word	0x08006a2d
 80069cc:	08006a43 	.word	0x08006a43
 80069d0:	08006a59 	.word	0x08006a59
                case KEY_EVENT_DOWN:    if (k->event_handler->on_down)    k->event_handler->on_down(k);    break;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d049      	beq.n	8006a72 <key_evt_dispatch+0xea>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	4798      	blx	r3
 80069e8:	e043      	b.n	8006a72 <key_evt_dispatch+0xea>
                case KEY_EVENT_UP:      if (k->event_handler->on_up)      k->event_handler->on_up(k);      break;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	685b      	ldr	r3, [r3, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d040      	beq.n	8006a76 <key_evt_dispatch+0xee>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	685b      	ldr	r3, [r3, #4]
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	4798      	blx	r3
 80069fe:	e03a      	b.n	8006a76 <key_evt_dispatch+0xee>
                case KEY_EVENT_CLICK:   if (k->event_handler->on_click)   k->event_handler->on_click(k);   break;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d037      	beq.n	8006a7a <key_evt_dispatch+0xf2>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
 8006a14:	e031      	b.n	8006a7a <key_evt_dispatch+0xf2>
                case KEY_EVENT_DOUBLE:  if (k->event_handler->on_double)  k->event_handler->on_double(k);  break;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d02e      	beq.n	8006a7e <key_evt_dispatch+0xf6>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	68db      	ldr	r3, [r3, #12]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	4798      	blx	r3
 8006a2a:	e028      	b.n	8006a7e <key_evt_dispatch+0xf6>
                case KEY_EVENT_LONG:    if (k->event_handler->on_long)    k->event_handler->on_long(k);    break;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d025      	beq.n	8006a82 <key_evt_dispatch+0xfa>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
 8006a40:	e01f      	b.n	8006a82 <key_evt_dispatch+0xfa>
                case KEY_EVENT_REPEAT:  if (k->event_handler->on_repeat)  k->event_handler->on_repeat(k);  break;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01c      	beq.n	8006a86 <key_evt_dispatch+0xfe>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	4798      	blx	r3
 8006a56:	e016      	b.n	8006a86 <key_evt_dispatch+0xfe>
                case KEY_EVENT_COMBO:   if (k->event_handler->on_combo)   k->event_handler->on_combo(k);   break;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	699b      	ldr	r3, [r3, #24]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d013      	beq.n	8006a8a <key_evt_dispatch+0x102>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	4798      	blx	r3
 8006a6c:	e00d      	b.n	8006a8a <key_evt_dispatch+0x102>
                default: break;
 8006a6e:	bf00      	nop
 8006a70:	e014      	b.n	8006a9c <key_evt_dispatch+0x114>
                case KEY_EVENT_DOWN:    if (k->event_handler->on_down)    k->event_handler->on_down(k);    break;
 8006a72:	bf00      	nop
 8006a74:	e012      	b.n	8006a9c <key_evt_dispatch+0x114>
                case KEY_EVENT_UP:      if (k->event_handler->on_up)      k->event_handler->on_up(k);      break;
 8006a76:	bf00      	nop
 8006a78:	e010      	b.n	8006a9c <key_evt_dispatch+0x114>
                case KEY_EVENT_CLICK:   if (k->event_handler->on_click)   k->event_handler->on_click(k);   break;
 8006a7a:	bf00      	nop
 8006a7c:	e00e      	b.n	8006a9c <key_evt_dispatch+0x114>
                case KEY_EVENT_DOUBLE:  if (k->event_handler->on_double)  k->event_handler->on_double(k);  break;
 8006a7e:	bf00      	nop
 8006a80:	e00c      	b.n	8006a9c <key_evt_dispatch+0x114>
                case KEY_EVENT_LONG:    if (k->event_handler->on_long)    k->event_handler->on_long(k);    break;
 8006a82:	bf00      	nop
 8006a84:	e00a      	b.n	8006a9c <key_evt_dispatch+0x114>
                case KEY_EVENT_REPEAT:  if (k->event_handler->on_repeat)  k->event_handler->on_repeat(k);  break;
 8006a86:	bf00      	nop
 8006a88:	e008      	b.n	8006a9c <key_evt_dispatch+0x114>
                case KEY_EVENT_COMBO:   if (k->event_handler->on_combo)   k->event_handler->on_combo(k);   break;
 8006a8a:	bf00      	nop
                }
                break; // id唯一，无需继续
 8006a8c:	e006      	b.n	8006a9c <key_evt_dispatch+0x114>
        for (k = key_head; k; k = k->next) {
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	607b      	str	r3, [r7, #4]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	f47f af7e 	bne.w	8006998 <key_evt_dispatch+0x10>
    while (key_evt_pop(&evt)) {
 8006a9c:	463b      	mov	r3, r7
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff fd8e 	bl	80065c0 <key_evt_pop>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f47f af72 	bne.w	8006990 <key_evt_dispatch+0x8>
            }
        }
    }
}
 8006aac:	bf00      	nop
 8006aae:	bf00      	nop
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	20001c8c 	.word	0x20001c8c

08006abc <atof>:
 8006abc:	2100      	movs	r1, #0
 8006abe:	f000 be0d 	b.w	80076dc <strtod>

08006ac2 <atoi>:
 8006ac2:	220a      	movs	r2, #10
 8006ac4:	2100      	movs	r1, #0
 8006ac6:	f000 be91 	b.w	80077ec <strtol>

08006aca <sulp>:
 8006aca:	b570      	push	{r4, r5, r6, lr}
 8006acc:	4604      	mov	r4, r0
 8006ace:	460d      	mov	r5, r1
 8006ad0:	ec45 4b10 	vmov	d0, r4, r5
 8006ad4:	4616      	mov	r6, r2
 8006ad6:	f003 feef 	bl	800a8b8 <__ulp>
 8006ada:	ec51 0b10 	vmov	r0, r1, d0
 8006ade:	b17e      	cbz	r6, 8006b00 <sulp+0x36>
 8006ae0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006ae4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	dd09      	ble.n	8006b00 <sulp+0x36>
 8006aec:	051b      	lsls	r3, r3, #20
 8006aee:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006af2:	2400      	movs	r4, #0
 8006af4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006af8:	4622      	mov	r2, r4
 8006afa:	462b      	mov	r3, r5
 8006afc:	f7f9 fd8c 	bl	8000618 <__aeabi_dmul>
 8006b00:	ec41 0b10 	vmov	d0, r0, r1
 8006b04:	bd70      	pop	{r4, r5, r6, pc}
	...

08006b08 <_strtod_l>:
 8006b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b0c:	b09f      	sub	sp, #124	@ 0x7c
 8006b0e:	460c      	mov	r4, r1
 8006b10:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006b12:	2200      	movs	r2, #0
 8006b14:	921a      	str	r2, [sp, #104]	@ 0x68
 8006b16:	9005      	str	r0, [sp, #20]
 8006b18:	f04f 0a00 	mov.w	sl, #0
 8006b1c:	f04f 0b00 	mov.w	fp, #0
 8006b20:	460a      	mov	r2, r1
 8006b22:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b24:	7811      	ldrb	r1, [r2, #0]
 8006b26:	292b      	cmp	r1, #43	@ 0x2b
 8006b28:	d04a      	beq.n	8006bc0 <_strtod_l+0xb8>
 8006b2a:	d838      	bhi.n	8006b9e <_strtod_l+0x96>
 8006b2c:	290d      	cmp	r1, #13
 8006b2e:	d832      	bhi.n	8006b96 <_strtod_l+0x8e>
 8006b30:	2908      	cmp	r1, #8
 8006b32:	d832      	bhi.n	8006b9a <_strtod_l+0x92>
 8006b34:	2900      	cmp	r1, #0
 8006b36:	d03b      	beq.n	8006bb0 <_strtod_l+0xa8>
 8006b38:	2200      	movs	r2, #0
 8006b3a:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b3c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006b3e:	782a      	ldrb	r2, [r5, #0]
 8006b40:	2a30      	cmp	r2, #48	@ 0x30
 8006b42:	f040 80b2 	bne.w	8006caa <_strtod_l+0x1a2>
 8006b46:	786a      	ldrb	r2, [r5, #1]
 8006b48:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006b4c:	2a58      	cmp	r2, #88	@ 0x58
 8006b4e:	d16e      	bne.n	8006c2e <_strtod_l+0x126>
 8006b50:	9302      	str	r3, [sp, #8]
 8006b52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b54:	9301      	str	r3, [sp, #4]
 8006b56:	ab1a      	add	r3, sp, #104	@ 0x68
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	4a8f      	ldr	r2, [pc, #572]	@ (8006d98 <_strtod_l+0x290>)
 8006b5c:	9805      	ldr	r0, [sp, #20]
 8006b5e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006b60:	a919      	add	r1, sp, #100	@ 0x64
 8006b62:	f002 ffa3 	bl	8009aac <__gethex>
 8006b66:	f010 060f 	ands.w	r6, r0, #15
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	d005      	beq.n	8006b7a <_strtod_l+0x72>
 8006b6e:	2e06      	cmp	r6, #6
 8006b70:	d128      	bne.n	8006bc4 <_strtod_l+0xbc>
 8006b72:	3501      	adds	r5, #1
 8006b74:	2300      	movs	r3, #0
 8006b76:	9519      	str	r5, [sp, #100]	@ 0x64
 8006b78:	930e      	str	r3, [sp, #56]	@ 0x38
 8006b7a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f040 858e 	bne.w	800769e <_strtod_l+0xb96>
 8006b82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b84:	b1cb      	cbz	r3, 8006bba <_strtod_l+0xb2>
 8006b86:	4652      	mov	r2, sl
 8006b88:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006b8c:	ec43 2b10 	vmov	d0, r2, r3
 8006b90:	b01f      	add	sp, #124	@ 0x7c
 8006b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b96:	2920      	cmp	r1, #32
 8006b98:	d1ce      	bne.n	8006b38 <_strtod_l+0x30>
 8006b9a:	3201      	adds	r2, #1
 8006b9c:	e7c1      	b.n	8006b22 <_strtod_l+0x1a>
 8006b9e:	292d      	cmp	r1, #45	@ 0x2d
 8006ba0:	d1ca      	bne.n	8006b38 <_strtod_l+0x30>
 8006ba2:	2101      	movs	r1, #1
 8006ba4:	910e      	str	r1, [sp, #56]	@ 0x38
 8006ba6:	1c51      	adds	r1, r2, #1
 8006ba8:	9119      	str	r1, [sp, #100]	@ 0x64
 8006baa:	7852      	ldrb	r2, [r2, #1]
 8006bac:	2a00      	cmp	r2, #0
 8006bae:	d1c5      	bne.n	8006b3c <_strtod_l+0x34>
 8006bb0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006bb2:	9419      	str	r4, [sp, #100]	@ 0x64
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f040 8570 	bne.w	800769a <_strtod_l+0xb92>
 8006bba:	4652      	mov	r2, sl
 8006bbc:	465b      	mov	r3, fp
 8006bbe:	e7e5      	b.n	8006b8c <_strtod_l+0x84>
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	e7ef      	b.n	8006ba4 <_strtod_l+0x9c>
 8006bc4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006bc6:	b13a      	cbz	r2, 8006bd8 <_strtod_l+0xd0>
 8006bc8:	2135      	movs	r1, #53	@ 0x35
 8006bca:	a81c      	add	r0, sp, #112	@ 0x70
 8006bcc:	f003 ff6e 	bl	800aaac <__copybits>
 8006bd0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006bd2:	9805      	ldr	r0, [sp, #20]
 8006bd4:	f003 fb44 	bl	800a260 <_Bfree>
 8006bd8:	3e01      	subs	r6, #1
 8006bda:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006bdc:	2e04      	cmp	r6, #4
 8006bde:	d806      	bhi.n	8006bee <_strtod_l+0xe6>
 8006be0:	e8df f006 	tbb	[pc, r6]
 8006be4:	201d0314 	.word	0x201d0314
 8006be8:	14          	.byte	0x14
 8006be9:	00          	.byte	0x00
 8006bea:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006bee:	05e1      	lsls	r1, r4, #23
 8006bf0:	bf48      	it	mi
 8006bf2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006bf6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006bfa:	0d1b      	lsrs	r3, r3, #20
 8006bfc:	051b      	lsls	r3, r3, #20
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1bb      	bne.n	8006b7a <_strtod_l+0x72>
 8006c02:	f001 ffdf 	bl	8008bc4 <__errno>
 8006c06:	2322      	movs	r3, #34	@ 0x22
 8006c08:	6003      	str	r3, [r0, #0]
 8006c0a:	e7b6      	b.n	8006b7a <_strtod_l+0x72>
 8006c0c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006c10:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006c14:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006c18:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006c1c:	e7e7      	b.n	8006bee <_strtod_l+0xe6>
 8006c1e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006da0 <_strtod_l+0x298>
 8006c22:	e7e4      	b.n	8006bee <_strtod_l+0xe6>
 8006c24:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006c28:	f04f 3aff 	mov.w	sl, #4294967295
 8006c2c:	e7df      	b.n	8006bee <_strtod_l+0xe6>
 8006c2e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c34:	785b      	ldrb	r3, [r3, #1]
 8006c36:	2b30      	cmp	r3, #48	@ 0x30
 8006c38:	d0f9      	beq.n	8006c2e <_strtod_l+0x126>
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d09d      	beq.n	8006b7a <_strtod_l+0x72>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	2700      	movs	r7, #0
 8006c42:	9308      	str	r3, [sp, #32]
 8006c44:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c46:	930c      	str	r3, [sp, #48]	@ 0x30
 8006c48:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006c4a:	46b9      	mov	r9, r7
 8006c4c:	220a      	movs	r2, #10
 8006c4e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006c50:	7805      	ldrb	r5, [r0, #0]
 8006c52:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006c56:	b2d9      	uxtb	r1, r3
 8006c58:	2909      	cmp	r1, #9
 8006c5a:	d928      	bls.n	8006cae <_strtod_l+0x1a6>
 8006c5c:	494f      	ldr	r1, [pc, #316]	@ (8006d9c <_strtod_l+0x294>)
 8006c5e:	2201      	movs	r2, #1
 8006c60:	f001 fee5 	bl	8008a2e <strncmp>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d032      	beq.n	8006cce <_strtod_l+0x1c6>
 8006c68:	2000      	movs	r0, #0
 8006c6a:	462a      	mov	r2, r5
 8006c6c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006c6e:	464d      	mov	r5, r9
 8006c70:	4603      	mov	r3, r0
 8006c72:	2a65      	cmp	r2, #101	@ 0x65
 8006c74:	d001      	beq.n	8006c7a <_strtod_l+0x172>
 8006c76:	2a45      	cmp	r2, #69	@ 0x45
 8006c78:	d114      	bne.n	8006ca4 <_strtod_l+0x19c>
 8006c7a:	b91d      	cbnz	r5, 8006c84 <_strtod_l+0x17c>
 8006c7c:	9a08      	ldr	r2, [sp, #32]
 8006c7e:	4302      	orrs	r2, r0
 8006c80:	d096      	beq.n	8006bb0 <_strtod_l+0xa8>
 8006c82:	2500      	movs	r5, #0
 8006c84:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006c86:	1c62      	adds	r2, r4, #1
 8006c88:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c8a:	7862      	ldrb	r2, [r4, #1]
 8006c8c:	2a2b      	cmp	r2, #43	@ 0x2b
 8006c8e:	d07a      	beq.n	8006d86 <_strtod_l+0x27e>
 8006c90:	2a2d      	cmp	r2, #45	@ 0x2d
 8006c92:	d07e      	beq.n	8006d92 <_strtod_l+0x28a>
 8006c94:	f04f 0c00 	mov.w	ip, #0
 8006c98:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006c9c:	2909      	cmp	r1, #9
 8006c9e:	f240 8085 	bls.w	8006dac <_strtod_l+0x2a4>
 8006ca2:	9419      	str	r4, [sp, #100]	@ 0x64
 8006ca4:	f04f 0800 	mov.w	r8, #0
 8006ca8:	e0a5      	b.n	8006df6 <_strtod_l+0x2ee>
 8006caa:	2300      	movs	r3, #0
 8006cac:	e7c8      	b.n	8006c40 <_strtod_l+0x138>
 8006cae:	f1b9 0f08 	cmp.w	r9, #8
 8006cb2:	bfd8      	it	le
 8006cb4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006cb6:	f100 0001 	add.w	r0, r0, #1
 8006cba:	bfda      	itte	le
 8006cbc:	fb02 3301 	mlale	r3, r2, r1, r3
 8006cc0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006cc2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006cc6:	f109 0901 	add.w	r9, r9, #1
 8006cca:	9019      	str	r0, [sp, #100]	@ 0x64
 8006ccc:	e7bf      	b.n	8006c4e <_strtod_l+0x146>
 8006cce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	9219      	str	r2, [sp, #100]	@ 0x64
 8006cd4:	785a      	ldrb	r2, [r3, #1]
 8006cd6:	f1b9 0f00 	cmp.w	r9, #0
 8006cda:	d03b      	beq.n	8006d54 <_strtod_l+0x24c>
 8006cdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8006cde:	464d      	mov	r5, r9
 8006ce0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006ce4:	2b09      	cmp	r3, #9
 8006ce6:	d912      	bls.n	8006d0e <_strtod_l+0x206>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e7c2      	b.n	8006c72 <_strtod_l+0x16a>
 8006cec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	9219      	str	r2, [sp, #100]	@ 0x64
 8006cf2:	785a      	ldrb	r2, [r3, #1]
 8006cf4:	3001      	adds	r0, #1
 8006cf6:	2a30      	cmp	r2, #48	@ 0x30
 8006cf8:	d0f8      	beq.n	8006cec <_strtod_l+0x1e4>
 8006cfa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006cfe:	2b08      	cmp	r3, #8
 8006d00:	f200 84d2 	bhi.w	80076a8 <_strtod_l+0xba0>
 8006d04:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d06:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d08:	2000      	movs	r0, #0
 8006d0a:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d0c:	4605      	mov	r5, r0
 8006d0e:	3a30      	subs	r2, #48	@ 0x30
 8006d10:	f100 0301 	add.w	r3, r0, #1
 8006d14:	d018      	beq.n	8006d48 <_strtod_l+0x240>
 8006d16:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d18:	4419      	add	r1, r3
 8006d1a:	910a      	str	r1, [sp, #40]	@ 0x28
 8006d1c:	462e      	mov	r6, r5
 8006d1e:	f04f 0e0a 	mov.w	lr, #10
 8006d22:	1c71      	adds	r1, r6, #1
 8006d24:	eba1 0c05 	sub.w	ip, r1, r5
 8006d28:	4563      	cmp	r3, ip
 8006d2a:	dc15      	bgt.n	8006d58 <_strtod_l+0x250>
 8006d2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006d30:	182b      	adds	r3, r5, r0
 8006d32:	2b08      	cmp	r3, #8
 8006d34:	f105 0501 	add.w	r5, r5, #1
 8006d38:	4405      	add	r5, r0
 8006d3a:	dc1a      	bgt.n	8006d72 <_strtod_l+0x26a>
 8006d3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d3e:	230a      	movs	r3, #10
 8006d40:	fb03 2301 	mla	r3, r3, r1, r2
 8006d44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006d46:	2300      	movs	r3, #0
 8006d48:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006d4a:	1c51      	adds	r1, r2, #1
 8006d4c:	9119      	str	r1, [sp, #100]	@ 0x64
 8006d4e:	7852      	ldrb	r2, [r2, #1]
 8006d50:	4618      	mov	r0, r3
 8006d52:	e7c5      	b.n	8006ce0 <_strtod_l+0x1d8>
 8006d54:	4648      	mov	r0, r9
 8006d56:	e7ce      	b.n	8006cf6 <_strtod_l+0x1ee>
 8006d58:	2e08      	cmp	r6, #8
 8006d5a:	dc05      	bgt.n	8006d68 <_strtod_l+0x260>
 8006d5c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006d5e:	fb0e f606 	mul.w	r6, lr, r6
 8006d62:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006d64:	460e      	mov	r6, r1
 8006d66:	e7dc      	b.n	8006d22 <_strtod_l+0x21a>
 8006d68:	2910      	cmp	r1, #16
 8006d6a:	bfd8      	it	le
 8006d6c:	fb0e f707 	mulle.w	r7, lr, r7
 8006d70:	e7f8      	b.n	8006d64 <_strtod_l+0x25c>
 8006d72:	2b0f      	cmp	r3, #15
 8006d74:	bfdc      	itt	le
 8006d76:	230a      	movle	r3, #10
 8006d78:	fb03 2707 	mlale	r7, r3, r7, r2
 8006d7c:	e7e3      	b.n	8006d46 <_strtod_l+0x23e>
 8006d7e:	2300      	movs	r3, #0
 8006d80:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d82:	2301      	movs	r3, #1
 8006d84:	e77a      	b.n	8006c7c <_strtod_l+0x174>
 8006d86:	f04f 0c00 	mov.w	ip, #0
 8006d8a:	1ca2      	adds	r2, r4, #2
 8006d8c:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d8e:	78a2      	ldrb	r2, [r4, #2]
 8006d90:	e782      	b.n	8006c98 <_strtod_l+0x190>
 8006d92:	f04f 0c01 	mov.w	ip, #1
 8006d96:	e7f8      	b.n	8006d8a <_strtod_l+0x282>
 8006d98:	0800bab8 	.word	0x0800bab8
 8006d9c:	0800b874 	.word	0x0800b874
 8006da0:	7ff00000 	.word	0x7ff00000
 8006da4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006da6:	1c51      	adds	r1, r2, #1
 8006da8:	9119      	str	r1, [sp, #100]	@ 0x64
 8006daa:	7852      	ldrb	r2, [r2, #1]
 8006dac:	2a30      	cmp	r2, #48	@ 0x30
 8006dae:	d0f9      	beq.n	8006da4 <_strtod_l+0x29c>
 8006db0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006db4:	2908      	cmp	r1, #8
 8006db6:	f63f af75 	bhi.w	8006ca4 <_strtod_l+0x19c>
 8006dba:	3a30      	subs	r2, #48	@ 0x30
 8006dbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8006dbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006dc0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006dc2:	f04f 080a 	mov.w	r8, #10
 8006dc6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006dc8:	1c56      	adds	r6, r2, #1
 8006dca:	9619      	str	r6, [sp, #100]	@ 0x64
 8006dcc:	7852      	ldrb	r2, [r2, #1]
 8006dce:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006dd2:	f1be 0f09 	cmp.w	lr, #9
 8006dd6:	d939      	bls.n	8006e4c <_strtod_l+0x344>
 8006dd8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006dda:	1a76      	subs	r6, r6, r1
 8006ddc:	2e08      	cmp	r6, #8
 8006dde:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006de2:	dc03      	bgt.n	8006dec <_strtod_l+0x2e4>
 8006de4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006de6:	4588      	cmp	r8, r1
 8006de8:	bfa8      	it	ge
 8006dea:	4688      	movge	r8, r1
 8006dec:	f1bc 0f00 	cmp.w	ip, #0
 8006df0:	d001      	beq.n	8006df6 <_strtod_l+0x2ee>
 8006df2:	f1c8 0800 	rsb	r8, r8, #0
 8006df6:	2d00      	cmp	r5, #0
 8006df8:	d14e      	bne.n	8006e98 <_strtod_l+0x390>
 8006dfa:	9908      	ldr	r1, [sp, #32]
 8006dfc:	4308      	orrs	r0, r1
 8006dfe:	f47f aebc 	bne.w	8006b7a <_strtod_l+0x72>
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f47f aed4 	bne.w	8006bb0 <_strtod_l+0xa8>
 8006e08:	2a69      	cmp	r2, #105	@ 0x69
 8006e0a:	d028      	beq.n	8006e5e <_strtod_l+0x356>
 8006e0c:	dc25      	bgt.n	8006e5a <_strtod_l+0x352>
 8006e0e:	2a49      	cmp	r2, #73	@ 0x49
 8006e10:	d025      	beq.n	8006e5e <_strtod_l+0x356>
 8006e12:	2a4e      	cmp	r2, #78	@ 0x4e
 8006e14:	f47f aecc 	bne.w	8006bb0 <_strtod_l+0xa8>
 8006e18:	499a      	ldr	r1, [pc, #616]	@ (8007084 <_strtod_l+0x57c>)
 8006e1a:	a819      	add	r0, sp, #100	@ 0x64
 8006e1c:	f003 f868 	bl	8009ef0 <__match>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	f43f aec5 	beq.w	8006bb0 <_strtod_l+0xa8>
 8006e26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	2b28      	cmp	r3, #40	@ 0x28
 8006e2c:	d12e      	bne.n	8006e8c <_strtod_l+0x384>
 8006e2e:	4996      	ldr	r1, [pc, #600]	@ (8007088 <_strtod_l+0x580>)
 8006e30:	aa1c      	add	r2, sp, #112	@ 0x70
 8006e32:	a819      	add	r0, sp, #100	@ 0x64
 8006e34:	f003 f870 	bl	8009f18 <__hexnan>
 8006e38:	2805      	cmp	r0, #5
 8006e3a:	d127      	bne.n	8006e8c <_strtod_l+0x384>
 8006e3c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006e3e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006e42:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006e46:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006e4a:	e696      	b.n	8006b7a <_strtod_l+0x72>
 8006e4c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e4e:	fb08 2101 	mla	r1, r8, r1, r2
 8006e52:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006e56:	9209      	str	r2, [sp, #36]	@ 0x24
 8006e58:	e7b5      	b.n	8006dc6 <_strtod_l+0x2be>
 8006e5a:	2a6e      	cmp	r2, #110	@ 0x6e
 8006e5c:	e7da      	b.n	8006e14 <_strtod_l+0x30c>
 8006e5e:	498b      	ldr	r1, [pc, #556]	@ (800708c <_strtod_l+0x584>)
 8006e60:	a819      	add	r0, sp, #100	@ 0x64
 8006e62:	f003 f845 	bl	8009ef0 <__match>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	f43f aea2 	beq.w	8006bb0 <_strtod_l+0xa8>
 8006e6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e6e:	4988      	ldr	r1, [pc, #544]	@ (8007090 <_strtod_l+0x588>)
 8006e70:	3b01      	subs	r3, #1
 8006e72:	a819      	add	r0, sp, #100	@ 0x64
 8006e74:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e76:	f003 f83b 	bl	8009ef0 <__match>
 8006e7a:	b910      	cbnz	r0, 8006e82 <_strtod_l+0x37a>
 8006e7c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e7e:	3301      	adds	r3, #1
 8006e80:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e82:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80070a0 <_strtod_l+0x598>
 8006e86:	f04f 0a00 	mov.w	sl, #0
 8006e8a:	e676      	b.n	8006b7a <_strtod_l+0x72>
 8006e8c:	4881      	ldr	r0, [pc, #516]	@ (8007094 <_strtod_l+0x58c>)
 8006e8e:	f001 fed7 	bl	8008c40 <nan>
 8006e92:	ec5b ab10 	vmov	sl, fp, d0
 8006e96:	e670      	b.n	8006b7a <_strtod_l+0x72>
 8006e98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e9a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006e9c:	eba8 0303 	sub.w	r3, r8, r3
 8006ea0:	f1b9 0f00 	cmp.w	r9, #0
 8006ea4:	bf08      	it	eq
 8006ea6:	46a9      	moveq	r9, r5
 8006ea8:	2d10      	cmp	r5, #16
 8006eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eac:	462c      	mov	r4, r5
 8006eae:	bfa8      	it	ge
 8006eb0:	2410      	movge	r4, #16
 8006eb2:	f7f9 fb37 	bl	8000524 <__aeabi_ui2d>
 8006eb6:	2d09      	cmp	r5, #9
 8006eb8:	4682      	mov	sl, r0
 8006eba:	468b      	mov	fp, r1
 8006ebc:	dc13      	bgt.n	8006ee6 <_strtod_l+0x3de>
 8006ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	f43f ae5a 	beq.w	8006b7a <_strtod_l+0x72>
 8006ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ec8:	dd78      	ble.n	8006fbc <_strtod_l+0x4b4>
 8006eca:	2b16      	cmp	r3, #22
 8006ecc:	dc5f      	bgt.n	8006f8e <_strtod_l+0x486>
 8006ece:	4972      	ldr	r1, [pc, #456]	@ (8007098 <_strtod_l+0x590>)
 8006ed0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ed8:	4652      	mov	r2, sl
 8006eda:	465b      	mov	r3, fp
 8006edc:	f7f9 fb9c 	bl	8000618 <__aeabi_dmul>
 8006ee0:	4682      	mov	sl, r0
 8006ee2:	468b      	mov	fp, r1
 8006ee4:	e649      	b.n	8006b7a <_strtod_l+0x72>
 8006ee6:	4b6c      	ldr	r3, [pc, #432]	@ (8007098 <_strtod_l+0x590>)
 8006ee8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006eec:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006ef0:	f7f9 fb92 	bl	8000618 <__aeabi_dmul>
 8006ef4:	4682      	mov	sl, r0
 8006ef6:	4638      	mov	r0, r7
 8006ef8:	468b      	mov	fp, r1
 8006efa:	f7f9 fb13 	bl	8000524 <__aeabi_ui2d>
 8006efe:	4602      	mov	r2, r0
 8006f00:	460b      	mov	r3, r1
 8006f02:	4650      	mov	r0, sl
 8006f04:	4659      	mov	r1, fp
 8006f06:	f7f9 f9d1 	bl	80002ac <__adddf3>
 8006f0a:	2d0f      	cmp	r5, #15
 8006f0c:	4682      	mov	sl, r0
 8006f0e:	468b      	mov	fp, r1
 8006f10:	ddd5      	ble.n	8006ebe <_strtod_l+0x3b6>
 8006f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f14:	1b2c      	subs	r4, r5, r4
 8006f16:	441c      	add	r4, r3
 8006f18:	2c00      	cmp	r4, #0
 8006f1a:	f340 8093 	ble.w	8007044 <_strtod_l+0x53c>
 8006f1e:	f014 030f 	ands.w	r3, r4, #15
 8006f22:	d00a      	beq.n	8006f3a <_strtod_l+0x432>
 8006f24:	495c      	ldr	r1, [pc, #368]	@ (8007098 <_strtod_l+0x590>)
 8006f26:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f2a:	4652      	mov	r2, sl
 8006f2c:	465b      	mov	r3, fp
 8006f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f32:	f7f9 fb71 	bl	8000618 <__aeabi_dmul>
 8006f36:	4682      	mov	sl, r0
 8006f38:	468b      	mov	fp, r1
 8006f3a:	f034 040f 	bics.w	r4, r4, #15
 8006f3e:	d073      	beq.n	8007028 <_strtod_l+0x520>
 8006f40:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006f44:	dd49      	ble.n	8006fda <_strtod_l+0x4d2>
 8006f46:	2400      	movs	r4, #0
 8006f48:	46a0      	mov	r8, r4
 8006f4a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006f4c:	46a1      	mov	r9, r4
 8006f4e:	9a05      	ldr	r2, [sp, #20]
 8006f50:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80070a0 <_strtod_l+0x598>
 8006f54:	2322      	movs	r3, #34	@ 0x22
 8006f56:	6013      	str	r3, [r2, #0]
 8006f58:	f04f 0a00 	mov.w	sl, #0
 8006f5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	f43f ae0b 	beq.w	8006b7a <_strtod_l+0x72>
 8006f64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f66:	9805      	ldr	r0, [sp, #20]
 8006f68:	f003 f97a 	bl	800a260 <_Bfree>
 8006f6c:	9805      	ldr	r0, [sp, #20]
 8006f6e:	4649      	mov	r1, r9
 8006f70:	f003 f976 	bl	800a260 <_Bfree>
 8006f74:	9805      	ldr	r0, [sp, #20]
 8006f76:	4641      	mov	r1, r8
 8006f78:	f003 f972 	bl	800a260 <_Bfree>
 8006f7c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f7e:	9805      	ldr	r0, [sp, #20]
 8006f80:	f003 f96e 	bl	800a260 <_Bfree>
 8006f84:	9805      	ldr	r0, [sp, #20]
 8006f86:	4621      	mov	r1, r4
 8006f88:	f003 f96a 	bl	800a260 <_Bfree>
 8006f8c:	e5f5      	b.n	8006b7a <_strtod_l+0x72>
 8006f8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f90:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006f94:	4293      	cmp	r3, r2
 8006f96:	dbbc      	blt.n	8006f12 <_strtod_l+0x40a>
 8006f98:	4c3f      	ldr	r4, [pc, #252]	@ (8007098 <_strtod_l+0x590>)
 8006f9a:	f1c5 050f 	rsb	r5, r5, #15
 8006f9e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006fa2:	4652      	mov	r2, sl
 8006fa4:	465b      	mov	r3, fp
 8006fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006faa:	f7f9 fb35 	bl	8000618 <__aeabi_dmul>
 8006fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb0:	1b5d      	subs	r5, r3, r5
 8006fb2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006fb6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006fba:	e78f      	b.n	8006edc <_strtod_l+0x3d4>
 8006fbc:	3316      	adds	r3, #22
 8006fbe:	dba8      	blt.n	8006f12 <_strtod_l+0x40a>
 8006fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fc2:	eba3 0808 	sub.w	r8, r3, r8
 8006fc6:	4b34      	ldr	r3, [pc, #208]	@ (8007098 <_strtod_l+0x590>)
 8006fc8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006fcc:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006fd0:	4650      	mov	r0, sl
 8006fd2:	4659      	mov	r1, fp
 8006fd4:	f7f9 fc4a 	bl	800086c <__aeabi_ddiv>
 8006fd8:	e782      	b.n	8006ee0 <_strtod_l+0x3d8>
 8006fda:	2300      	movs	r3, #0
 8006fdc:	4f2f      	ldr	r7, [pc, #188]	@ (800709c <_strtod_l+0x594>)
 8006fde:	1124      	asrs	r4, r4, #4
 8006fe0:	4650      	mov	r0, sl
 8006fe2:	4659      	mov	r1, fp
 8006fe4:	461e      	mov	r6, r3
 8006fe6:	2c01      	cmp	r4, #1
 8006fe8:	dc21      	bgt.n	800702e <_strtod_l+0x526>
 8006fea:	b10b      	cbz	r3, 8006ff0 <_strtod_l+0x4e8>
 8006fec:	4682      	mov	sl, r0
 8006fee:	468b      	mov	fp, r1
 8006ff0:	492a      	ldr	r1, [pc, #168]	@ (800709c <_strtod_l+0x594>)
 8006ff2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006ff6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006ffa:	4652      	mov	r2, sl
 8006ffc:	465b      	mov	r3, fp
 8006ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007002:	f7f9 fb09 	bl	8000618 <__aeabi_dmul>
 8007006:	4b26      	ldr	r3, [pc, #152]	@ (80070a0 <_strtod_l+0x598>)
 8007008:	460a      	mov	r2, r1
 800700a:	400b      	ands	r3, r1
 800700c:	4925      	ldr	r1, [pc, #148]	@ (80070a4 <_strtod_l+0x59c>)
 800700e:	428b      	cmp	r3, r1
 8007010:	4682      	mov	sl, r0
 8007012:	d898      	bhi.n	8006f46 <_strtod_l+0x43e>
 8007014:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007018:	428b      	cmp	r3, r1
 800701a:	bf86      	itte	hi
 800701c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80070a8 <_strtod_l+0x5a0>
 8007020:	f04f 3aff 	movhi.w	sl, #4294967295
 8007024:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007028:	2300      	movs	r3, #0
 800702a:	9308      	str	r3, [sp, #32]
 800702c:	e076      	b.n	800711c <_strtod_l+0x614>
 800702e:	07e2      	lsls	r2, r4, #31
 8007030:	d504      	bpl.n	800703c <_strtod_l+0x534>
 8007032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007036:	f7f9 faef 	bl	8000618 <__aeabi_dmul>
 800703a:	2301      	movs	r3, #1
 800703c:	3601      	adds	r6, #1
 800703e:	1064      	asrs	r4, r4, #1
 8007040:	3708      	adds	r7, #8
 8007042:	e7d0      	b.n	8006fe6 <_strtod_l+0x4de>
 8007044:	d0f0      	beq.n	8007028 <_strtod_l+0x520>
 8007046:	4264      	negs	r4, r4
 8007048:	f014 020f 	ands.w	r2, r4, #15
 800704c:	d00a      	beq.n	8007064 <_strtod_l+0x55c>
 800704e:	4b12      	ldr	r3, [pc, #72]	@ (8007098 <_strtod_l+0x590>)
 8007050:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007054:	4650      	mov	r0, sl
 8007056:	4659      	mov	r1, fp
 8007058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705c:	f7f9 fc06 	bl	800086c <__aeabi_ddiv>
 8007060:	4682      	mov	sl, r0
 8007062:	468b      	mov	fp, r1
 8007064:	1124      	asrs	r4, r4, #4
 8007066:	d0df      	beq.n	8007028 <_strtod_l+0x520>
 8007068:	2c1f      	cmp	r4, #31
 800706a:	dd1f      	ble.n	80070ac <_strtod_l+0x5a4>
 800706c:	2400      	movs	r4, #0
 800706e:	46a0      	mov	r8, r4
 8007070:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007072:	46a1      	mov	r9, r4
 8007074:	9a05      	ldr	r2, [sp, #20]
 8007076:	2322      	movs	r3, #34	@ 0x22
 8007078:	f04f 0a00 	mov.w	sl, #0
 800707c:	f04f 0b00 	mov.w	fp, #0
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	e76b      	b.n	8006f5c <_strtod_l+0x454>
 8007084:	0800b883 	.word	0x0800b883
 8007088:	0800baa4 	.word	0x0800baa4
 800708c:	0800b87b 	.word	0x0800b87b
 8007090:	0800b967 	.word	0x0800b967
 8007094:	0800b963 	.word	0x0800b963
 8007098:	0800bc30 	.word	0x0800bc30
 800709c:	0800bc08 	.word	0x0800bc08
 80070a0:	7ff00000 	.word	0x7ff00000
 80070a4:	7ca00000 	.word	0x7ca00000
 80070a8:	7fefffff 	.word	0x7fefffff
 80070ac:	f014 0310 	ands.w	r3, r4, #16
 80070b0:	bf18      	it	ne
 80070b2:	236a      	movne	r3, #106	@ 0x6a
 80070b4:	4ea9      	ldr	r6, [pc, #676]	@ (800735c <_strtod_l+0x854>)
 80070b6:	9308      	str	r3, [sp, #32]
 80070b8:	4650      	mov	r0, sl
 80070ba:	4659      	mov	r1, fp
 80070bc:	2300      	movs	r3, #0
 80070be:	07e7      	lsls	r7, r4, #31
 80070c0:	d504      	bpl.n	80070cc <_strtod_l+0x5c4>
 80070c2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80070c6:	f7f9 faa7 	bl	8000618 <__aeabi_dmul>
 80070ca:	2301      	movs	r3, #1
 80070cc:	1064      	asrs	r4, r4, #1
 80070ce:	f106 0608 	add.w	r6, r6, #8
 80070d2:	d1f4      	bne.n	80070be <_strtod_l+0x5b6>
 80070d4:	b10b      	cbz	r3, 80070da <_strtod_l+0x5d2>
 80070d6:	4682      	mov	sl, r0
 80070d8:	468b      	mov	fp, r1
 80070da:	9b08      	ldr	r3, [sp, #32]
 80070dc:	b1b3      	cbz	r3, 800710c <_strtod_l+0x604>
 80070de:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80070e2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	4659      	mov	r1, fp
 80070ea:	dd0f      	ble.n	800710c <_strtod_l+0x604>
 80070ec:	2b1f      	cmp	r3, #31
 80070ee:	dd56      	ble.n	800719e <_strtod_l+0x696>
 80070f0:	2b34      	cmp	r3, #52	@ 0x34
 80070f2:	bfde      	ittt	le
 80070f4:	f04f 33ff 	movle.w	r3, #4294967295
 80070f8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80070fc:	4093      	lslle	r3, r2
 80070fe:	f04f 0a00 	mov.w	sl, #0
 8007102:	bfcc      	ite	gt
 8007104:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007108:	ea03 0b01 	andle.w	fp, r3, r1
 800710c:	2200      	movs	r2, #0
 800710e:	2300      	movs	r3, #0
 8007110:	4650      	mov	r0, sl
 8007112:	4659      	mov	r1, fp
 8007114:	f7f9 fce8 	bl	8000ae8 <__aeabi_dcmpeq>
 8007118:	2800      	cmp	r0, #0
 800711a:	d1a7      	bne.n	800706c <_strtod_l+0x564>
 800711c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007122:	9805      	ldr	r0, [sp, #20]
 8007124:	462b      	mov	r3, r5
 8007126:	464a      	mov	r2, r9
 8007128:	f003 f902 	bl	800a330 <__s2b>
 800712c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800712e:	2800      	cmp	r0, #0
 8007130:	f43f af09 	beq.w	8006f46 <_strtod_l+0x43e>
 8007134:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007136:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007138:	2a00      	cmp	r2, #0
 800713a:	eba3 0308 	sub.w	r3, r3, r8
 800713e:	bfa8      	it	ge
 8007140:	2300      	movge	r3, #0
 8007142:	9312      	str	r3, [sp, #72]	@ 0x48
 8007144:	2400      	movs	r4, #0
 8007146:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800714a:	9316      	str	r3, [sp, #88]	@ 0x58
 800714c:	46a0      	mov	r8, r4
 800714e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007150:	9805      	ldr	r0, [sp, #20]
 8007152:	6859      	ldr	r1, [r3, #4]
 8007154:	f003 f844 	bl	800a1e0 <_Balloc>
 8007158:	4681      	mov	r9, r0
 800715a:	2800      	cmp	r0, #0
 800715c:	f43f aef7 	beq.w	8006f4e <_strtod_l+0x446>
 8007160:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007162:	691a      	ldr	r2, [r3, #16]
 8007164:	3202      	adds	r2, #2
 8007166:	f103 010c 	add.w	r1, r3, #12
 800716a:	0092      	lsls	r2, r2, #2
 800716c:	300c      	adds	r0, #12
 800716e:	f001 fd56 	bl	8008c1e <memcpy>
 8007172:	ec4b ab10 	vmov	d0, sl, fp
 8007176:	9805      	ldr	r0, [sp, #20]
 8007178:	aa1c      	add	r2, sp, #112	@ 0x70
 800717a:	a91b      	add	r1, sp, #108	@ 0x6c
 800717c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007180:	f003 fc0a 	bl	800a998 <__d2b>
 8007184:	901a      	str	r0, [sp, #104]	@ 0x68
 8007186:	2800      	cmp	r0, #0
 8007188:	f43f aee1 	beq.w	8006f4e <_strtod_l+0x446>
 800718c:	9805      	ldr	r0, [sp, #20]
 800718e:	2101      	movs	r1, #1
 8007190:	f003 f964 	bl	800a45c <__i2b>
 8007194:	4680      	mov	r8, r0
 8007196:	b948      	cbnz	r0, 80071ac <_strtod_l+0x6a4>
 8007198:	f04f 0800 	mov.w	r8, #0
 800719c:	e6d7      	b.n	8006f4e <_strtod_l+0x446>
 800719e:	f04f 32ff 	mov.w	r2, #4294967295
 80071a2:	fa02 f303 	lsl.w	r3, r2, r3
 80071a6:	ea03 0a0a 	and.w	sl, r3, sl
 80071aa:	e7af      	b.n	800710c <_strtod_l+0x604>
 80071ac:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80071ae:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80071b0:	2d00      	cmp	r5, #0
 80071b2:	bfab      	itete	ge
 80071b4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80071b6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80071b8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80071ba:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80071bc:	bfac      	ite	ge
 80071be:	18ef      	addge	r7, r5, r3
 80071c0:	1b5e      	sublt	r6, r3, r5
 80071c2:	9b08      	ldr	r3, [sp, #32]
 80071c4:	1aed      	subs	r5, r5, r3
 80071c6:	4415      	add	r5, r2
 80071c8:	4b65      	ldr	r3, [pc, #404]	@ (8007360 <_strtod_l+0x858>)
 80071ca:	3d01      	subs	r5, #1
 80071cc:	429d      	cmp	r5, r3
 80071ce:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80071d2:	da50      	bge.n	8007276 <_strtod_l+0x76e>
 80071d4:	1b5b      	subs	r3, r3, r5
 80071d6:	2b1f      	cmp	r3, #31
 80071d8:	eba2 0203 	sub.w	r2, r2, r3
 80071dc:	f04f 0101 	mov.w	r1, #1
 80071e0:	dc3d      	bgt.n	800725e <_strtod_l+0x756>
 80071e2:	fa01 f303 	lsl.w	r3, r1, r3
 80071e6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80071e8:	2300      	movs	r3, #0
 80071ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80071ec:	18bd      	adds	r5, r7, r2
 80071ee:	9b08      	ldr	r3, [sp, #32]
 80071f0:	42af      	cmp	r7, r5
 80071f2:	4416      	add	r6, r2
 80071f4:	441e      	add	r6, r3
 80071f6:	463b      	mov	r3, r7
 80071f8:	bfa8      	it	ge
 80071fa:	462b      	movge	r3, r5
 80071fc:	42b3      	cmp	r3, r6
 80071fe:	bfa8      	it	ge
 8007200:	4633      	movge	r3, r6
 8007202:	2b00      	cmp	r3, #0
 8007204:	bfc2      	ittt	gt
 8007206:	1aed      	subgt	r5, r5, r3
 8007208:	1af6      	subgt	r6, r6, r3
 800720a:	1aff      	subgt	r7, r7, r3
 800720c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800720e:	2b00      	cmp	r3, #0
 8007210:	dd16      	ble.n	8007240 <_strtod_l+0x738>
 8007212:	4641      	mov	r1, r8
 8007214:	9805      	ldr	r0, [sp, #20]
 8007216:	461a      	mov	r2, r3
 8007218:	f003 f9d8 	bl	800a5cc <__pow5mult>
 800721c:	4680      	mov	r8, r0
 800721e:	2800      	cmp	r0, #0
 8007220:	d0ba      	beq.n	8007198 <_strtod_l+0x690>
 8007222:	4601      	mov	r1, r0
 8007224:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007226:	9805      	ldr	r0, [sp, #20]
 8007228:	f003 f92e 	bl	800a488 <__multiply>
 800722c:	900a      	str	r0, [sp, #40]	@ 0x28
 800722e:	2800      	cmp	r0, #0
 8007230:	f43f ae8d 	beq.w	8006f4e <_strtod_l+0x446>
 8007234:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007236:	9805      	ldr	r0, [sp, #20]
 8007238:	f003 f812 	bl	800a260 <_Bfree>
 800723c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800723e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007240:	2d00      	cmp	r5, #0
 8007242:	dc1d      	bgt.n	8007280 <_strtod_l+0x778>
 8007244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007246:	2b00      	cmp	r3, #0
 8007248:	dd23      	ble.n	8007292 <_strtod_l+0x78a>
 800724a:	4649      	mov	r1, r9
 800724c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800724e:	9805      	ldr	r0, [sp, #20]
 8007250:	f003 f9bc 	bl	800a5cc <__pow5mult>
 8007254:	4681      	mov	r9, r0
 8007256:	b9e0      	cbnz	r0, 8007292 <_strtod_l+0x78a>
 8007258:	f04f 0900 	mov.w	r9, #0
 800725c:	e677      	b.n	8006f4e <_strtod_l+0x446>
 800725e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007262:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007266:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800726a:	35e2      	adds	r5, #226	@ 0xe2
 800726c:	fa01 f305 	lsl.w	r3, r1, r5
 8007270:	9310      	str	r3, [sp, #64]	@ 0x40
 8007272:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007274:	e7ba      	b.n	80071ec <_strtod_l+0x6e4>
 8007276:	2300      	movs	r3, #0
 8007278:	9310      	str	r3, [sp, #64]	@ 0x40
 800727a:	2301      	movs	r3, #1
 800727c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800727e:	e7b5      	b.n	80071ec <_strtod_l+0x6e4>
 8007280:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007282:	9805      	ldr	r0, [sp, #20]
 8007284:	462a      	mov	r2, r5
 8007286:	f003 f9fb 	bl	800a680 <__lshift>
 800728a:	901a      	str	r0, [sp, #104]	@ 0x68
 800728c:	2800      	cmp	r0, #0
 800728e:	d1d9      	bne.n	8007244 <_strtod_l+0x73c>
 8007290:	e65d      	b.n	8006f4e <_strtod_l+0x446>
 8007292:	2e00      	cmp	r6, #0
 8007294:	dd07      	ble.n	80072a6 <_strtod_l+0x79e>
 8007296:	4649      	mov	r1, r9
 8007298:	9805      	ldr	r0, [sp, #20]
 800729a:	4632      	mov	r2, r6
 800729c:	f003 f9f0 	bl	800a680 <__lshift>
 80072a0:	4681      	mov	r9, r0
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d0d8      	beq.n	8007258 <_strtod_l+0x750>
 80072a6:	2f00      	cmp	r7, #0
 80072a8:	dd08      	ble.n	80072bc <_strtod_l+0x7b4>
 80072aa:	4641      	mov	r1, r8
 80072ac:	9805      	ldr	r0, [sp, #20]
 80072ae:	463a      	mov	r2, r7
 80072b0:	f003 f9e6 	bl	800a680 <__lshift>
 80072b4:	4680      	mov	r8, r0
 80072b6:	2800      	cmp	r0, #0
 80072b8:	f43f ae49 	beq.w	8006f4e <_strtod_l+0x446>
 80072bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072be:	9805      	ldr	r0, [sp, #20]
 80072c0:	464a      	mov	r2, r9
 80072c2:	f003 fa65 	bl	800a790 <__mdiff>
 80072c6:	4604      	mov	r4, r0
 80072c8:	2800      	cmp	r0, #0
 80072ca:	f43f ae40 	beq.w	8006f4e <_strtod_l+0x446>
 80072ce:	68c3      	ldr	r3, [r0, #12]
 80072d0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80072d2:	2300      	movs	r3, #0
 80072d4:	60c3      	str	r3, [r0, #12]
 80072d6:	4641      	mov	r1, r8
 80072d8:	f003 fa3e 	bl	800a758 <__mcmp>
 80072dc:	2800      	cmp	r0, #0
 80072de:	da45      	bge.n	800736c <_strtod_l+0x864>
 80072e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80072e2:	ea53 030a 	orrs.w	r3, r3, sl
 80072e6:	d16b      	bne.n	80073c0 <_strtod_l+0x8b8>
 80072e8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d167      	bne.n	80073c0 <_strtod_l+0x8b8>
 80072f0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80072f4:	0d1b      	lsrs	r3, r3, #20
 80072f6:	051b      	lsls	r3, r3, #20
 80072f8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80072fc:	d960      	bls.n	80073c0 <_strtod_l+0x8b8>
 80072fe:	6963      	ldr	r3, [r4, #20]
 8007300:	b913      	cbnz	r3, 8007308 <_strtod_l+0x800>
 8007302:	6923      	ldr	r3, [r4, #16]
 8007304:	2b01      	cmp	r3, #1
 8007306:	dd5b      	ble.n	80073c0 <_strtod_l+0x8b8>
 8007308:	4621      	mov	r1, r4
 800730a:	2201      	movs	r2, #1
 800730c:	9805      	ldr	r0, [sp, #20]
 800730e:	f003 f9b7 	bl	800a680 <__lshift>
 8007312:	4641      	mov	r1, r8
 8007314:	4604      	mov	r4, r0
 8007316:	f003 fa1f 	bl	800a758 <__mcmp>
 800731a:	2800      	cmp	r0, #0
 800731c:	dd50      	ble.n	80073c0 <_strtod_l+0x8b8>
 800731e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007322:	9a08      	ldr	r2, [sp, #32]
 8007324:	0d1b      	lsrs	r3, r3, #20
 8007326:	051b      	lsls	r3, r3, #20
 8007328:	2a00      	cmp	r2, #0
 800732a:	d06a      	beq.n	8007402 <_strtod_l+0x8fa>
 800732c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007330:	d867      	bhi.n	8007402 <_strtod_l+0x8fa>
 8007332:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007336:	f67f ae9d 	bls.w	8007074 <_strtod_l+0x56c>
 800733a:	4b0a      	ldr	r3, [pc, #40]	@ (8007364 <_strtod_l+0x85c>)
 800733c:	4650      	mov	r0, sl
 800733e:	4659      	mov	r1, fp
 8007340:	2200      	movs	r2, #0
 8007342:	f7f9 f969 	bl	8000618 <__aeabi_dmul>
 8007346:	4b08      	ldr	r3, [pc, #32]	@ (8007368 <_strtod_l+0x860>)
 8007348:	400b      	ands	r3, r1
 800734a:	4682      	mov	sl, r0
 800734c:	468b      	mov	fp, r1
 800734e:	2b00      	cmp	r3, #0
 8007350:	f47f ae08 	bne.w	8006f64 <_strtod_l+0x45c>
 8007354:	9a05      	ldr	r2, [sp, #20]
 8007356:	2322      	movs	r3, #34	@ 0x22
 8007358:	6013      	str	r3, [r2, #0]
 800735a:	e603      	b.n	8006f64 <_strtod_l+0x45c>
 800735c:	0800bad0 	.word	0x0800bad0
 8007360:	fffffc02 	.word	0xfffffc02
 8007364:	39500000 	.word	0x39500000
 8007368:	7ff00000 	.word	0x7ff00000
 800736c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007370:	d165      	bne.n	800743e <_strtod_l+0x936>
 8007372:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007374:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007378:	b35a      	cbz	r2, 80073d2 <_strtod_l+0x8ca>
 800737a:	4a9f      	ldr	r2, [pc, #636]	@ (80075f8 <_strtod_l+0xaf0>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d12b      	bne.n	80073d8 <_strtod_l+0x8d0>
 8007380:	9b08      	ldr	r3, [sp, #32]
 8007382:	4651      	mov	r1, sl
 8007384:	b303      	cbz	r3, 80073c8 <_strtod_l+0x8c0>
 8007386:	4b9d      	ldr	r3, [pc, #628]	@ (80075fc <_strtod_l+0xaf4>)
 8007388:	465a      	mov	r2, fp
 800738a:	4013      	ands	r3, r2
 800738c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007390:	f04f 32ff 	mov.w	r2, #4294967295
 8007394:	d81b      	bhi.n	80073ce <_strtod_l+0x8c6>
 8007396:	0d1b      	lsrs	r3, r3, #20
 8007398:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800739c:	fa02 f303 	lsl.w	r3, r2, r3
 80073a0:	4299      	cmp	r1, r3
 80073a2:	d119      	bne.n	80073d8 <_strtod_l+0x8d0>
 80073a4:	4b96      	ldr	r3, [pc, #600]	@ (8007600 <_strtod_l+0xaf8>)
 80073a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d102      	bne.n	80073b2 <_strtod_l+0x8aa>
 80073ac:	3101      	adds	r1, #1
 80073ae:	f43f adce 	beq.w	8006f4e <_strtod_l+0x446>
 80073b2:	4b92      	ldr	r3, [pc, #584]	@ (80075fc <_strtod_l+0xaf4>)
 80073b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073b6:	401a      	ands	r2, r3
 80073b8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80073bc:	f04f 0a00 	mov.w	sl, #0
 80073c0:	9b08      	ldr	r3, [sp, #32]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1b9      	bne.n	800733a <_strtod_l+0x832>
 80073c6:	e5cd      	b.n	8006f64 <_strtod_l+0x45c>
 80073c8:	f04f 33ff 	mov.w	r3, #4294967295
 80073cc:	e7e8      	b.n	80073a0 <_strtod_l+0x898>
 80073ce:	4613      	mov	r3, r2
 80073d0:	e7e6      	b.n	80073a0 <_strtod_l+0x898>
 80073d2:	ea53 030a 	orrs.w	r3, r3, sl
 80073d6:	d0a2      	beq.n	800731e <_strtod_l+0x816>
 80073d8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80073da:	b1db      	cbz	r3, 8007414 <_strtod_l+0x90c>
 80073dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80073de:	4213      	tst	r3, r2
 80073e0:	d0ee      	beq.n	80073c0 <_strtod_l+0x8b8>
 80073e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80073e4:	9a08      	ldr	r2, [sp, #32]
 80073e6:	4650      	mov	r0, sl
 80073e8:	4659      	mov	r1, fp
 80073ea:	b1bb      	cbz	r3, 800741c <_strtod_l+0x914>
 80073ec:	f7ff fb6d 	bl	8006aca <sulp>
 80073f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073f4:	ec53 2b10 	vmov	r2, r3, d0
 80073f8:	f7f8 ff58 	bl	80002ac <__adddf3>
 80073fc:	4682      	mov	sl, r0
 80073fe:	468b      	mov	fp, r1
 8007400:	e7de      	b.n	80073c0 <_strtod_l+0x8b8>
 8007402:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007406:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800740a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800740e:	f04f 3aff 	mov.w	sl, #4294967295
 8007412:	e7d5      	b.n	80073c0 <_strtod_l+0x8b8>
 8007414:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007416:	ea13 0f0a 	tst.w	r3, sl
 800741a:	e7e1      	b.n	80073e0 <_strtod_l+0x8d8>
 800741c:	f7ff fb55 	bl	8006aca <sulp>
 8007420:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007424:	ec53 2b10 	vmov	r2, r3, d0
 8007428:	f7f8 ff3e 	bl	80002a8 <__aeabi_dsub>
 800742c:	2200      	movs	r2, #0
 800742e:	2300      	movs	r3, #0
 8007430:	4682      	mov	sl, r0
 8007432:	468b      	mov	fp, r1
 8007434:	f7f9 fb58 	bl	8000ae8 <__aeabi_dcmpeq>
 8007438:	2800      	cmp	r0, #0
 800743a:	d0c1      	beq.n	80073c0 <_strtod_l+0x8b8>
 800743c:	e61a      	b.n	8007074 <_strtod_l+0x56c>
 800743e:	4641      	mov	r1, r8
 8007440:	4620      	mov	r0, r4
 8007442:	f003 fb01 	bl	800aa48 <__ratio>
 8007446:	ec57 6b10 	vmov	r6, r7, d0
 800744a:	2200      	movs	r2, #0
 800744c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007450:	4630      	mov	r0, r6
 8007452:	4639      	mov	r1, r7
 8007454:	f7f9 fb5c 	bl	8000b10 <__aeabi_dcmple>
 8007458:	2800      	cmp	r0, #0
 800745a:	d06f      	beq.n	800753c <_strtod_l+0xa34>
 800745c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800745e:	2b00      	cmp	r3, #0
 8007460:	d17a      	bne.n	8007558 <_strtod_l+0xa50>
 8007462:	f1ba 0f00 	cmp.w	sl, #0
 8007466:	d158      	bne.n	800751a <_strtod_l+0xa12>
 8007468:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800746a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800746e:	2b00      	cmp	r3, #0
 8007470:	d15a      	bne.n	8007528 <_strtod_l+0xa20>
 8007472:	4b64      	ldr	r3, [pc, #400]	@ (8007604 <_strtod_l+0xafc>)
 8007474:	2200      	movs	r2, #0
 8007476:	4630      	mov	r0, r6
 8007478:	4639      	mov	r1, r7
 800747a:	f7f9 fb3f 	bl	8000afc <__aeabi_dcmplt>
 800747e:	2800      	cmp	r0, #0
 8007480:	d159      	bne.n	8007536 <_strtod_l+0xa2e>
 8007482:	4630      	mov	r0, r6
 8007484:	4639      	mov	r1, r7
 8007486:	4b60      	ldr	r3, [pc, #384]	@ (8007608 <_strtod_l+0xb00>)
 8007488:	2200      	movs	r2, #0
 800748a:	f7f9 f8c5 	bl	8000618 <__aeabi_dmul>
 800748e:	4606      	mov	r6, r0
 8007490:	460f      	mov	r7, r1
 8007492:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007496:	9606      	str	r6, [sp, #24]
 8007498:	9307      	str	r3, [sp, #28]
 800749a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800749e:	4d57      	ldr	r5, [pc, #348]	@ (80075fc <_strtod_l+0xaf4>)
 80074a0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80074a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074a6:	401d      	ands	r5, r3
 80074a8:	4b58      	ldr	r3, [pc, #352]	@ (800760c <_strtod_l+0xb04>)
 80074aa:	429d      	cmp	r5, r3
 80074ac:	f040 80b2 	bne.w	8007614 <_strtod_l+0xb0c>
 80074b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074b2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80074b6:	ec4b ab10 	vmov	d0, sl, fp
 80074ba:	f003 f9fd 	bl	800a8b8 <__ulp>
 80074be:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074c2:	ec51 0b10 	vmov	r0, r1, d0
 80074c6:	f7f9 f8a7 	bl	8000618 <__aeabi_dmul>
 80074ca:	4652      	mov	r2, sl
 80074cc:	465b      	mov	r3, fp
 80074ce:	f7f8 feed 	bl	80002ac <__adddf3>
 80074d2:	460b      	mov	r3, r1
 80074d4:	4949      	ldr	r1, [pc, #292]	@ (80075fc <_strtod_l+0xaf4>)
 80074d6:	4a4e      	ldr	r2, [pc, #312]	@ (8007610 <_strtod_l+0xb08>)
 80074d8:	4019      	ands	r1, r3
 80074da:	4291      	cmp	r1, r2
 80074dc:	4682      	mov	sl, r0
 80074de:	d942      	bls.n	8007566 <_strtod_l+0xa5e>
 80074e0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80074e2:	4b47      	ldr	r3, [pc, #284]	@ (8007600 <_strtod_l+0xaf8>)
 80074e4:	429a      	cmp	r2, r3
 80074e6:	d103      	bne.n	80074f0 <_strtod_l+0x9e8>
 80074e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074ea:	3301      	adds	r3, #1
 80074ec:	f43f ad2f 	beq.w	8006f4e <_strtod_l+0x446>
 80074f0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007600 <_strtod_l+0xaf8>
 80074f4:	f04f 3aff 	mov.w	sl, #4294967295
 80074f8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074fa:	9805      	ldr	r0, [sp, #20]
 80074fc:	f002 feb0 	bl	800a260 <_Bfree>
 8007500:	9805      	ldr	r0, [sp, #20]
 8007502:	4649      	mov	r1, r9
 8007504:	f002 feac 	bl	800a260 <_Bfree>
 8007508:	9805      	ldr	r0, [sp, #20]
 800750a:	4641      	mov	r1, r8
 800750c:	f002 fea8 	bl	800a260 <_Bfree>
 8007510:	9805      	ldr	r0, [sp, #20]
 8007512:	4621      	mov	r1, r4
 8007514:	f002 fea4 	bl	800a260 <_Bfree>
 8007518:	e619      	b.n	800714e <_strtod_l+0x646>
 800751a:	f1ba 0f01 	cmp.w	sl, #1
 800751e:	d103      	bne.n	8007528 <_strtod_l+0xa20>
 8007520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007522:	2b00      	cmp	r3, #0
 8007524:	f43f ada6 	beq.w	8007074 <_strtod_l+0x56c>
 8007528:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80075d8 <_strtod_l+0xad0>
 800752c:	4f35      	ldr	r7, [pc, #212]	@ (8007604 <_strtod_l+0xafc>)
 800752e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007532:	2600      	movs	r6, #0
 8007534:	e7b1      	b.n	800749a <_strtod_l+0x992>
 8007536:	4f34      	ldr	r7, [pc, #208]	@ (8007608 <_strtod_l+0xb00>)
 8007538:	2600      	movs	r6, #0
 800753a:	e7aa      	b.n	8007492 <_strtod_l+0x98a>
 800753c:	4b32      	ldr	r3, [pc, #200]	@ (8007608 <_strtod_l+0xb00>)
 800753e:	4630      	mov	r0, r6
 8007540:	4639      	mov	r1, r7
 8007542:	2200      	movs	r2, #0
 8007544:	f7f9 f868 	bl	8000618 <__aeabi_dmul>
 8007548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800754a:	4606      	mov	r6, r0
 800754c:	460f      	mov	r7, r1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d09f      	beq.n	8007492 <_strtod_l+0x98a>
 8007552:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007556:	e7a0      	b.n	800749a <_strtod_l+0x992>
 8007558:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80075e0 <_strtod_l+0xad8>
 800755c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007560:	ec57 6b17 	vmov	r6, r7, d7
 8007564:	e799      	b.n	800749a <_strtod_l+0x992>
 8007566:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800756a:	9b08      	ldr	r3, [sp, #32]
 800756c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1c1      	bne.n	80074f8 <_strtod_l+0x9f0>
 8007574:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007578:	0d1b      	lsrs	r3, r3, #20
 800757a:	051b      	lsls	r3, r3, #20
 800757c:	429d      	cmp	r5, r3
 800757e:	d1bb      	bne.n	80074f8 <_strtod_l+0x9f0>
 8007580:	4630      	mov	r0, r6
 8007582:	4639      	mov	r1, r7
 8007584:	f7f9 fba8 	bl	8000cd8 <__aeabi_d2lz>
 8007588:	f7f9 f818 	bl	80005bc <__aeabi_l2d>
 800758c:	4602      	mov	r2, r0
 800758e:	460b      	mov	r3, r1
 8007590:	4630      	mov	r0, r6
 8007592:	4639      	mov	r1, r7
 8007594:	f7f8 fe88 	bl	80002a8 <__aeabi_dsub>
 8007598:	460b      	mov	r3, r1
 800759a:	4602      	mov	r2, r0
 800759c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80075a0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80075a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075a6:	ea46 060a 	orr.w	r6, r6, sl
 80075aa:	431e      	orrs	r6, r3
 80075ac:	d06f      	beq.n	800768e <_strtod_l+0xb86>
 80075ae:	a30e      	add	r3, pc, #56	@ (adr r3, 80075e8 <_strtod_l+0xae0>)
 80075b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b4:	f7f9 faa2 	bl	8000afc <__aeabi_dcmplt>
 80075b8:	2800      	cmp	r0, #0
 80075ba:	f47f acd3 	bne.w	8006f64 <_strtod_l+0x45c>
 80075be:	a30c      	add	r3, pc, #48	@ (adr r3, 80075f0 <_strtod_l+0xae8>)
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075c8:	f7f9 fab6 	bl	8000b38 <__aeabi_dcmpgt>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	d093      	beq.n	80074f8 <_strtod_l+0x9f0>
 80075d0:	e4c8      	b.n	8006f64 <_strtod_l+0x45c>
 80075d2:	bf00      	nop
 80075d4:	f3af 8000 	nop.w
 80075d8:	00000000 	.word	0x00000000
 80075dc:	bff00000 	.word	0xbff00000
 80075e0:	00000000 	.word	0x00000000
 80075e4:	3ff00000 	.word	0x3ff00000
 80075e8:	94a03595 	.word	0x94a03595
 80075ec:	3fdfffff 	.word	0x3fdfffff
 80075f0:	35afe535 	.word	0x35afe535
 80075f4:	3fe00000 	.word	0x3fe00000
 80075f8:	000fffff 	.word	0x000fffff
 80075fc:	7ff00000 	.word	0x7ff00000
 8007600:	7fefffff 	.word	0x7fefffff
 8007604:	3ff00000 	.word	0x3ff00000
 8007608:	3fe00000 	.word	0x3fe00000
 800760c:	7fe00000 	.word	0x7fe00000
 8007610:	7c9fffff 	.word	0x7c9fffff
 8007614:	9b08      	ldr	r3, [sp, #32]
 8007616:	b323      	cbz	r3, 8007662 <_strtod_l+0xb5a>
 8007618:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800761c:	d821      	bhi.n	8007662 <_strtod_l+0xb5a>
 800761e:	a328      	add	r3, pc, #160	@ (adr r3, 80076c0 <_strtod_l+0xbb8>)
 8007620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007624:	4630      	mov	r0, r6
 8007626:	4639      	mov	r1, r7
 8007628:	f7f9 fa72 	bl	8000b10 <__aeabi_dcmple>
 800762c:	b1a0      	cbz	r0, 8007658 <_strtod_l+0xb50>
 800762e:	4639      	mov	r1, r7
 8007630:	4630      	mov	r0, r6
 8007632:	f7f9 fac9 	bl	8000bc8 <__aeabi_d2uiz>
 8007636:	2801      	cmp	r0, #1
 8007638:	bf38      	it	cc
 800763a:	2001      	movcc	r0, #1
 800763c:	f7f8 ff72 	bl	8000524 <__aeabi_ui2d>
 8007640:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007642:	4606      	mov	r6, r0
 8007644:	460f      	mov	r7, r1
 8007646:	b9fb      	cbnz	r3, 8007688 <_strtod_l+0xb80>
 8007648:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800764c:	9014      	str	r0, [sp, #80]	@ 0x50
 800764e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007650:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007654:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007658:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800765a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800765e:	1b5b      	subs	r3, r3, r5
 8007660:	9311      	str	r3, [sp, #68]	@ 0x44
 8007662:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007666:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800766a:	f003 f925 	bl	800a8b8 <__ulp>
 800766e:	4650      	mov	r0, sl
 8007670:	ec53 2b10 	vmov	r2, r3, d0
 8007674:	4659      	mov	r1, fp
 8007676:	f7f8 ffcf 	bl	8000618 <__aeabi_dmul>
 800767a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800767e:	f7f8 fe15 	bl	80002ac <__adddf3>
 8007682:	4682      	mov	sl, r0
 8007684:	468b      	mov	fp, r1
 8007686:	e770      	b.n	800756a <_strtod_l+0xa62>
 8007688:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800768c:	e7e0      	b.n	8007650 <_strtod_l+0xb48>
 800768e:	a30e      	add	r3, pc, #56	@ (adr r3, 80076c8 <_strtod_l+0xbc0>)
 8007690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007694:	f7f9 fa32 	bl	8000afc <__aeabi_dcmplt>
 8007698:	e798      	b.n	80075cc <_strtod_l+0xac4>
 800769a:	2300      	movs	r3, #0
 800769c:	930e      	str	r3, [sp, #56]	@ 0x38
 800769e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80076a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076a2:	6013      	str	r3, [r2, #0]
 80076a4:	f7ff ba6d 	b.w	8006b82 <_strtod_l+0x7a>
 80076a8:	2a65      	cmp	r2, #101	@ 0x65
 80076aa:	f43f ab68 	beq.w	8006d7e <_strtod_l+0x276>
 80076ae:	2a45      	cmp	r2, #69	@ 0x45
 80076b0:	f43f ab65 	beq.w	8006d7e <_strtod_l+0x276>
 80076b4:	2301      	movs	r3, #1
 80076b6:	f7ff bba0 	b.w	8006dfa <_strtod_l+0x2f2>
 80076ba:	bf00      	nop
 80076bc:	f3af 8000 	nop.w
 80076c0:	ffc00000 	.word	0xffc00000
 80076c4:	41dfffff 	.word	0x41dfffff
 80076c8:	94a03595 	.word	0x94a03595
 80076cc:	3fcfffff 	.word	0x3fcfffff

080076d0 <_strtod_r>:
 80076d0:	4b01      	ldr	r3, [pc, #4]	@ (80076d8 <_strtod_r+0x8>)
 80076d2:	f7ff ba19 	b.w	8006b08 <_strtod_l>
 80076d6:	bf00      	nop
 80076d8:	20000080 	.word	0x20000080

080076dc <strtod>:
 80076dc:	460a      	mov	r2, r1
 80076de:	4601      	mov	r1, r0
 80076e0:	4802      	ldr	r0, [pc, #8]	@ (80076ec <strtod+0x10>)
 80076e2:	4b03      	ldr	r3, [pc, #12]	@ (80076f0 <strtod+0x14>)
 80076e4:	6800      	ldr	r0, [r0, #0]
 80076e6:	f7ff ba0f 	b.w	8006b08 <_strtod_l>
 80076ea:	bf00      	nop
 80076ec:	200001ec 	.word	0x200001ec
 80076f0:	20000080 	.word	0x20000080

080076f4 <_strtol_l.isra.0>:
 80076f4:	2b24      	cmp	r3, #36	@ 0x24
 80076f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076fa:	4686      	mov	lr, r0
 80076fc:	4690      	mov	r8, r2
 80076fe:	d801      	bhi.n	8007704 <_strtol_l.isra.0+0x10>
 8007700:	2b01      	cmp	r3, #1
 8007702:	d106      	bne.n	8007712 <_strtol_l.isra.0+0x1e>
 8007704:	f001 fa5e 	bl	8008bc4 <__errno>
 8007708:	2316      	movs	r3, #22
 800770a:	6003      	str	r3, [r0, #0]
 800770c:	2000      	movs	r0, #0
 800770e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007712:	4834      	ldr	r0, [pc, #208]	@ (80077e4 <_strtol_l.isra.0+0xf0>)
 8007714:	460d      	mov	r5, r1
 8007716:	462a      	mov	r2, r5
 8007718:	f815 4b01 	ldrb.w	r4, [r5], #1
 800771c:	5d06      	ldrb	r6, [r0, r4]
 800771e:	f016 0608 	ands.w	r6, r6, #8
 8007722:	d1f8      	bne.n	8007716 <_strtol_l.isra.0+0x22>
 8007724:	2c2d      	cmp	r4, #45	@ 0x2d
 8007726:	d110      	bne.n	800774a <_strtol_l.isra.0+0x56>
 8007728:	782c      	ldrb	r4, [r5, #0]
 800772a:	2601      	movs	r6, #1
 800772c:	1c95      	adds	r5, r2, #2
 800772e:	f033 0210 	bics.w	r2, r3, #16
 8007732:	d115      	bne.n	8007760 <_strtol_l.isra.0+0x6c>
 8007734:	2c30      	cmp	r4, #48	@ 0x30
 8007736:	d10d      	bne.n	8007754 <_strtol_l.isra.0+0x60>
 8007738:	782a      	ldrb	r2, [r5, #0]
 800773a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800773e:	2a58      	cmp	r2, #88	@ 0x58
 8007740:	d108      	bne.n	8007754 <_strtol_l.isra.0+0x60>
 8007742:	786c      	ldrb	r4, [r5, #1]
 8007744:	3502      	adds	r5, #2
 8007746:	2310      	movs	r3, #16
 8007748:	e00a      	b.n	8007760 <_strtol_l.isra.0+0x6c>
 800774a:	2c2b      	cmp	r4, #43	@ 0x2b
 800774c:	bf04      	itt	eq
 800774e:	782c      	ldrbeq	r4, [r5, #0]
 8007750:	1c95      	addeq	r5, r2, #2
 8007752:	e7ec      	b.n	800772e <_strtol_l.isra.0+0x3a>
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1f6      	bne.n	8007746 <_strtol_l.isra.0+0x52>
 8007758:	2c30      	cmp	r4, #48	@ 0x30
 800775a:	bf14      	ite	ne
 800775c:	230a      	movne	r3, #10
 800775e:	2308      	moveq	r3, #8
 8007760:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007764:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007768:	2200      	movs	r2, #0
 800776a:	fbbc f9f3 	udiv	r9, ip, r3
 800776e:	4610      	mov	r0, r2
 8007770:	fb03 ca19 	mls	sl, r3, r9, ip
 8007774:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007778:	2f09      	cmp	r7, #9
 800777a:	d80f      	bhi.n	800779c <_strtol_l.isra.0+0xa8>
 800777c:	463c      	mov	r4, r7
 800777e:	42a3      	cmp	r3, r4
 8007780:	dd1b      	ble.n	80077ba <_strtol_l.isra.0+0xc6>
 8007782:	1c57      	adds	r7, r2, #1
 8007784:	d007      	beq.n	8007796 <_strtol_l.isra.0+0xa2>
 8007786:	4581      	cmp	r9, r0
 8007788:	d314      	bcc.n	80077b4 <_strtol_l.isra.0+0xc0>
 800778a:	d101      	bne.n	8007790 <_strtol_l.isra.0+0x9c>
 800778c:	45a2      	cmp	sl, r4
 800778e:	db11      	blt.n	80077b4 <_strtol_l.isra.0+0xc0>
 8007790:	fb00 4003 	mla	r0, r0, r3, r4
 8007794:	2201      	movs	r2, #1
 8007796:	f815 4b01 	ldrb.w	r4, [r5], #1
 800779a:	e7eb      	b.n	8007774 <_strtol_l.isra.0+0x80>
 800779c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80077a0:	2f19      	cmp	r7, #25
 80077a2:	d801      	bhi.n	80077a8 <_strtol_l.isra.0+0xb4>
 80077a4:	3c37      	subs	r4, #55	@ 0x37
 80077a6:	e7ea      	b.n	800777e <_strtol_l.isra.0+0x8a>
 80077a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80077ac:	2f19      	cmp	r7, #25
 80077ae:	d804      	bhi.n	80077ba <_strtol_l.isra.0+0xc6>
 80077b0:	3c57      	subs	r4, #87	@ 0x57
 80077b2:	e7e4      	b.n	800777e <_strtol_l.isra.0+0x8a>
 80077b4:	f04f 32ff 	mov.w	r2, #4294967295
 80077b8:	e7ed      	b.n	8007796 <_strtol_l.isra.0+0xa2>
 80077ba:	1c53      	adds	r3, r2, #1
 80077bc:	d108      	bne.n	80077d0 <_strtol_l.isra.0+0xdc>
 80077be:	2322      	movs	r3, #34	@ 0x22
 80077c0:	f8ce 3000 	str.w	r3, [lr]
 80077c4:	4660      	mov	r0, ip
 80077c6:	f1b8 0f00 	cmp.w	r8, #0
 80077ca:	d0a0      	beq.n	800770e <_strtol_l.isra.0+0x1a>
 80077cc:	1e69      	subs	r1, r5, #1
 80077ce:	e006      	b.n	80077de <_strtol_l.isra.0+0xea>
 80077d0:	b106      	cbz	r6, 80077d4 <_strtol_l.isra.0+0xe0>
 80077d2:	4240      	negs	r0, r0
 80077d4:	f1b8 0f00 	cmp.w	r8, #0
 80077d8:	d099      	beq.n	800770e <_strtol_l.isra.0+0x1a>
 80077da:	2a00      	cmp	r2, #0
 80077dc:	d1f6      	bne.n	80077cc <_strtol_l.isra.0+0xd8>
 80077de:	f8c8 1000 	str.w	r1, [r8]
 80077e2:	e794      	b.n	800770e <_strtol_l.isra.0+0x1a>
 80077e4:	0800baf9 	.word	0x0800baf9

080077e8 <_strtol_r>:
 80077e8:	f7ff bf84 	b.w	80076f4 <_strtol_l.isra.0>

080077ec <strtol>:
 80077ec:	4613      	mov	r3, r2
 80077ee:	460a      	mov	r2, r1
 80077f0:	4601      	mov	r1, r0
 80077f2:	4802      	ldr	r0, [pc, #8]	@ (80077fc <strtol+0x10>)
 80077f4:	6800      	ldr	r0, [r0, #0]
 80077f6:	f7ff bf7d 	b.w	80076f4 <_strtol_l.isra.0>
 80077fa:	bf00      	nop
 80077fc:	200001ec 	.word	0x200001ec

08007800 <__cvt>:
 8007800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007804:	ec57 6b10 	vmov	r6, r7, d0
 8007808:	2f00      	cmp	r7, #0
 800780a:	460c      	mov	r4, r1
 800780c:	4619      	mov	r1, r3
 800780e:	463b      	mov	r3, r7
 8007810:	bfbb      	ittet	lt
 8007812:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007816:	461f      	movlt	r7, r3
 8007818:	2300      	movge	r3, #0
 800781a:	232d      	movlt	r3, #45	@ 0x2d
 800781c:	700b      	strb	r3, [r1, #0]
 800781e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007820:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007824:	4691      	mov	r9, r2
 8007826:	f023 0820 	bic.w	r8, r3, #32
 800782a:	bfbc      	itt	lt
 800782c:	4632      	movlt	r2, r6
 800782e:	4616      	movlt	r6, r2
 8007830:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007834:	d005      	beq.n	8007842 <__cvt+0x42>
 8007836:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800783a:	d100      	bne.n	800783e <__cvt+0x3e>
 800783c:	3401      	adds	r4, #1
 800783e:	2102      	movs	r1, #2
 8007840:	e000      	b.n	8007844 <__cvt+0x44>
 8007842:	2103      	movs	r1, #3
 8007844:	ab03      	add	r3, sp, #12
 8007846:	9301      	str	r3, [sp, #4]
 8007848:	ab02      	add	r3, sp, #8
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	ec47 6b10 	vmov	d0, r6, r7
 8007850:	4653      	mov	r3, sl
 8007852:	4622      	mov	r2, r4
 8007854:	f001 faa8 	bl	8008da8 <_dtoa_r>
 8007858:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800785c:	4605      	mov	r5, r0
 800785e:	d119      	bne.n	8007894 <__cvt+0x94>
 8007860:	f019 0f01 	tst.w	r9, #1
 8007864:	d00e      	beq.n	8007884 <__cvt+0x84>
 8007866:	eb00 0904 	add.w	r9, r0, r4
 800786a:	2200      	movs	r2, #0
 800786c:	2300      	movs	r3, #0
 800786e:	4630      	mov	r0, r6
 8007870:	4639      	mov	r1, r7
 8007872:	f7f9 f939 	bl	8000ae8 <__aeabi_dcmpeq>
 8007876:	b108      	cbz	r0, 800787c <__cvt+0x7c>
 8007878:	f8cd 900c 	str.w	r9, [sp, #12]
 800787c:	2230      	movs	r2, #48	@ 0x30
 800787e:	9b03      	ldr	r3, [sp, #12]
 8007880:	454b      	cmp	r3, r9
 8007882:	d31e      	bcc.n	80078c2 <__cvt+0xc2>
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007888:	1b5b      	subs	r3, r3, r5
 800788a:	4628      	mov	r0, r5
 800788c:	6013      	str	r3, [r2, #0]
 800788e:	b004      	add	sp, #16
 8007890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007894:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007898:	eb00 0904 	add.w	r9, r0, r4
 800789c:	d1e5      	bne.n	800786a <__cvt+0x6a>
 800789e:	7803      	ldrb	r3, [r0, #0]
 80078a0:	2b30      	cmp	r3, #48	@ 0x30
 80078a2:	d10a      	bne.n	80078ba <__cvt+0xba>
 80078a4:	2200      	movs	r2, #0
 80078a6:	2300      	movs	r3, #0
 80078a8:	4630      	mov	r0, r6
 80078aa:	4639      	mov	r1, r7
 80078ac:	f7f9 f91c 	bl	8000ae8 <__aeabi_dcmpeq>
 80078b0:	b918      	cbnz	r0, 80078ba <__cvt+0xba>
 80078b2:	f1c4 0401 	rsb	r4, r4, #1
 80078b6:	f8ca 4000 	str.w	r4, [sl]
 80078ba:	f8da 3000 	ldr.w	r3, [sl]
 80078be:	4499      	add	r9, r3
 80078c0:	e7d3      	b.n	800786a <__cvt+0x6a>
 80078c2:	1c59      	adds	r1, r3, #1
 80078c4:	9103      	str	r1, [sp, #12]
 80078c6:	701a      	strb	r2, [r3, #0]
 80078c8:	e7d9      	b.n	800787e <__cvt+0x7e>

080078ca <__exponent>:
 80078ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078cc:	2900      	cmp	r1, #0
 80078ce:	bfba      	itte	lt
 80078d0:	4249      	neglt	r1, r1
 80078d2:	232d      	movlt	r3, #45	@ 0x2d
 80078d4:	232b      	movge	r3, #43	@ 0x2b
 80078d6:	2909      	cmp	r1, #9
 80078d8:	7002      	strb	r2, [r0, #0]
 80078da:	7043      	strb	r3, [r0, #1]
 80078dc:	dd29      	ble.n	8007932 <__exponent+0x68>
 80078de:	f10d 0307 	add.w	r3, sp, #7
 80078e2:	461d      	mov	r5, r3
 80078e4:	270a      	movs	r7, #10
 80078e6:	461a      	mov	r2, r3
 80078e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80078ec:	fb07 1416 	mls	r4, r7, r6, r1
 80078f0:	3430      	adds	r4, #48	@ 0x30
 80078f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 80078f6:	460c      	mov	r4, r1
 80078f8:	2c63      	cmp	r4, #99	@ 0x63
 80078fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80078fe:	4631      	mov	r1, r6
 8007900:	dcf1      	bgt.n	80078e6 <__exponent+0x1c>
 8007902:	3130      	adds	r1, #48	@ 0x30
 8007904:	1e94      	subs	r4, r2, #2
 8007906:	f803 1c01 	strb.w	r1, [r3, #-1]
 800790a:	1c41      	adds	r1, r0, #1
 800790c:	4623      	mov	r3, r4
 800790e:	42ab      	cmp	r3, r5
 8007910:	d30a      	bcc.n	8007928 <__exponent+0x5e>
 8007912:	f10d 0309 	add.w	r3, sp, #9
 8007916:	1a9b      	subs	r3, r3, r2
 8007918:	42ac      	cmp	r4, r5
 800791a:	bf88      	it	hi
 800791c:	2300      	movhi	r3, #0
 800791e:	3302      	adds	r3, #2
 8007920:	4403      	add	r3, r0
 8007922:	1a18      	subs	r0, r3, r0
 8007924:	b003      	add	sp, #12
 8007926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007928:	f813 6b01 	ldrb.w	r6, [r3], #1
 800792c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007930:	e7ed      	b.n	800790e <__exponent+0x44>
 8007932:	2330      	movs	r3, #48	@ 0x30
 8007934:	3130      	adds	r1, #48	@ 0x30
 8007936:	7083      	strb	r3, [r0, #2]
 8007938:	70c1      	strb	r1, [r0, #3]
 800793a:	1d03      	adds	r3, r0, #4
 800793c:	e7f1      	b.n	8007922 <__exponent+0x58>
	...

08007940 <_printf_float>:
 8007940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007944:	b08d      	sub	sp, #52	@ 0x34
 8007946:	460c      	mov	r4, r1
 8007948:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800794c:	4616      	mov	r6, r2
 800794e:	461f      	mov	r7, r3
 8007950:	4605      	mov	r5, r0
 8007952:	f001 f8ed 	bl	8008b30 <_localeconv_r>
 8007956:	6803      	ldr	r3, [r0, #0]
 8007958:	9304      	str	r3, [sp, #16]
 800795a:	4618      	mov	r0, r3
 800795c:	f7f8 fc98 	bl	8000290 <strlen>
 8007960:	2300      	movs	r3, #0
 8007962:	930a      	str	r3, [sp, #40]	@ 0x28
 8007964:	f8d8 3000 	ldr.w	r3, [r8]
 8007968:	9005      	str	r0, [sp, #20]
 800796a:	3307      	adds	r3, #7
 800796c:	f023 0307 	bic.w	r3, r3, #7
 8007970:	f103 0208 	add.w	r2, r3, #8
 8007974:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007978:	f8d4 b000 	ldr.w	fp, [r4]
 800797c:	f8c8 2000 	str.w	r2, [r8]
 8007980:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007984:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007988:	9307      	str	r3, [sp, #28]
 800798a:	f8cd 8018 	str.w	r8, [sp, #24]
 800798e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007992:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007996:	4b9c      	ldr	r3, [pc, #624]	@ (8007c08 <_printf_float+0x2c8>)
 8007998:	f04f 32ff 	mov.w	r2, #4294967295
 800799c:	f7f9 f8d6 	bl	8000b4c <__aeabi_dcmpun>
 80079a0:	bb70      	cbnz	r0, 8007a00 <_printf_float+0xc0>
 80079a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079a6:	4b98      	ldr	r3, [pc, #608]	@ (8007c08 <_printf_float+0x2c8>)
 80079a8:	f04f 32ff 	mov.w	r2, #4294967295
 80079ac:	f7f9 f8b0 	bl	8000b10 <__aeabi_dcmple>
 80079b0:	bb30      	cbnz	r0, 8007a00 <_printf_float+0xc0>
 80079b2:	2200      	movs	r2, #0
 80079b4:	2300      	movs	r3, #0
 80079b6:	4640      	mov	r0, r8
 80079b8:	4649      	mov	r1, r9
 80079ba:	f7f9 f89f 	bl	8000afc <__aeabi_dcmplt>
 80079be:	b110      	cbz	r0, 80079c6 <_printf_float+0x86>
 80079c0:	232d      	movs	r3, #45	@ 0x2d
 80079c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079c6:	4a91      	ldr	r2, [pc, #580]	@ (8007c0c <_printf_float+0x2cc>)
 80079c8:	4b91      	ldr	r3, [pc, #580]	@ (8007c10 <_printf_float+0x2d0>)
 80079ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80079ce:	bf8c      	ite	hi
 80079d0:	4690      	movhi	r8, r2
 80079d2:	4698      	movls	r8, r3
 80079d4:	2303      	movs	r3, #3
 80079d6:	6123      	str	r3, [r4, #16]
 80079d8:	f02b 0304 	bic.w	r3, fp, #4
 80079dc:	6023      	str	r3, [r4, #0]
 80079de:	f04f 0900 	mov.w	r9, #0
 80079e2:	9700      	str	r7, [sp, #0]
 80079e4:	4633      	mov	r3, r6
 80079e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80079e8:	4621      	mov	r1, r4
 80079ea:	4628      	mov	r0, r5
 80079ec:	f000 f9d2 	bl	8007d94 <_printf_common>
 80079f0:	3001      	adds	r0, #1
 80079f2:	f040 808d 	bne.w	8007b10 <_printf_float+0x1d0>
 80079f6:	f04f 30ff 	mov.w	r0, #4294967295
 80079fa:	b00d      	add	sp, #52	@ 0x34
 80079fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a00:	4642      	mov	r2, r8
 8007a02:	464b      	mov	r3, r9
 8007a04:	4640      	mov	r0, r8
 8007a06:	4649      	mov	r1, r9
 8007a08:	f7f9 f8a0 	bl	8000b4c <__aeabi_dcmpun>
 8007a0c:	b140      	cbz	r0, 8007a20 <_printf_float+0xe0>
 8007a0e:	464b      	mov	r3, r9
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	bfbc      	itt	lt
 8007a14:	232d      	movlt	r3, #45	@ 0x2d
 8007a16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007a1a:	4a7e      	ldr	r2, [pc, #504]	@ (8007c14 <_printf_float+0x2d4>)
 8007a1c:	4b7e      	ldr	r3, [pc, #504]	@ (8007c18 <_printf_float+0x2d8>)
 8007a1e:	e7d4      	b.n	80079ca <_printf_float+0x8a>
 8007a20:	6863      	ldr	r3, [r4, #4]
 8007a22:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007a26:	9206      	str	r2, [sp, #24]
 8007a28:	1c5a      	adds	r2, r3, #1
 8007a2a:	d13b      	bne.n	8007aa4 <_printf_float+0x164>
 8007a2c:	2306      	movs	r3, #6
 8007a2e:	6063      	str	r3, [r4, #4]
 8007a30:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007a34:	2300      	movs	r3, #0
 8007a36:	6022      	str	r2, [r4, #0]
 8007a38:	9303      	str	r3, [sp, #12]
 8007a3a:	ab0a      	add	r3, sp, #40	@ 0x28
 8007a3c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007a40:	ab09      	add	r3, sp, #36	@ 0x24
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	6861      	ldr	r1, [r4, #4]
 8007a46:	ec49 8b10 	vmov	d0, r8, r9
 8007a4a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007a4e:	4628      	mov	r0, r5
 8007a50:	f7ff fed6 	bl	8007800 <__cvt>
 8007a54:	9b06      	ldr	r3, [sp, #24]
 8007a56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a58:	2b47      	cmp	r3, #71	@ 0x47
 8007a5a:	4680      	mov	r8, r0
 8007a5c:	d129      	bne.n	8007ab2 <_printf_float+0x172>
 8007a5e:	1cc8      	adds	r0, r1, #3
 8007a60:	db02      	blt.n	8007a68 <_printf_float+0x128>
 8007a62:	6863      	ldr	r3, [r4, #4]
 8007a64:	4299      	cmp	r1, r3
 8007a66:	dd41      	ble.n	8007aec <_printf_float+0x1ac>
 8007a68:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a6c:	fa5f fa8a 	uxtb.w	sl, sl
 8007a70:	3901      	subs	r1, #1
 8007a72:	4652      	mov	r2, sl
 8007a74:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a78:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a7a:	f7ff ff26 	bl	80078ca <__exponent>
 8007a7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a80:	1813      	adds	r3, r2, r0
 8007a82:	2a01      	cmp	r2, #1
 8007a84:	4681      	mov	r9, r0
 8007a86:	6123      	str	r3, [r4, #16]
 8007a88:	dc02      	bgt.n	8007a90 <_printf_float+0x150>
 8007a8a:	6822      	ldr	r2, [r4, #0]
 8007a8c:	07d2      	lsls	r2, r2, #31
 8007a8e:	d501      	bpl.n	8007a94 <_printf_float+0x154>
 8007a90:	3301      	adds	r3, #1
 8007a92:	6123      	str	r3, [r4, #16]
 8007a94:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d0a2      	beq.n	80079e2 <_printf_float+0xa2>
 8007a9c:	232d      	movs	r3, #45	@ 0x2d
 8007a9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aa2:	e79e      	b.n	80079e2 <_printf_float+0xa2>
 8007aa4:	9a06      	ldr	r2, [sp, #24]
 8007aa6:	2a47      	cmp	r2, #71	@ 0x47
 8007aa8:	d1c2      	bne.n	8007a30 <_printf_float+0xf0>
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1c0      	bne.n	8007a30 <_printf_float+0xf0>
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e7bd      	b.n	8007a2e <_printf_float+0xee>
 8007ab2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ab6:	d9db      	bls.n	8007a70 <_printf_float+0x130>
 8007ab8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007abc:	d118      	bne.n	8007af0 <_printf_float+0x1b0>
 8007abe:	2900      	cmp	r1, #0
 8007ac0:	6863      	ldr	r3, [r4, #4]
 8007ac2:	dd0b      	ble.n	8007adc <_printf_float+0x19c>
 8007ac4:	6121      	str	r1, [r4, #16]
 8007ac6:	b913      	cbnz	r3, 8007ace <_printf_float+0x18e>
 8007ac8:	6822      	ldr	r2, [r4, #0]
 8007aca:	07d0      	lsls	r0, r2, #31
 8007acc:	d502      	bpl.n	8007ad4 <_printf_float+0x194>
 8007ace:	3301      	adds	r3, #1
 8007ad0:	440b      	add	r3, r1
 8007ad2:	6123      	str	r3, [r4, #16]
 8007ad4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007ad6:	f04f 0900 	mov.w	r9, #0
 8007ada:	e7db      	b.n	8007a94 <_printf_float+0x154>
 8007adc:	b913      	cbnz	r3, 8007ae4 <_printf_float+0x1a4>
 8007ade:	6822      	ldr	r2, [r4, #0]
 8007ae0:	07d2      	lsls	r2, r2, #31
 8007ae2:	d501      	bpl.n	8007ae8 <_printf_float+0x1a8>
 8007ae4:	3302      	adds	r3, #2
 8007ae6:	e7f4      	b.n	8007ad2 <_printf_float+0x192>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	e7f2      	b.n	8007ad2 <_printf_float+0x192>
 8007aec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007af0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007af2:	4299      	cmp	r1, r3
 8007af4:	db05      	blt.n	8007b02 <_printf_float+0x1c2>
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	6121      	str	r1, [r4, #16]
 8007afa:	07d8      	lsls	r0, r3, #31
 8007afc:	d5ea      	bpl.n	8007ad4 <_printf_float+0x194>
 8007afe:	1c4b      	adds	r3, r1, #1
 8007b00:	e7e7      	b.n	8007ad2 <_printf_float+0x192>
 8007b02:	2900      	cmp	r1, #0
 8007b04:	bfd4      	ite	le
 8007b06:	f1c1 0202 	rsble	r2, r1, #2
 8007b0a:	2201      	movgt	r2, #1
 8007b0c:	4413      	add	r3, r2
 8007b0e:	e7e0      	b.n	8007ad2 <_printf_float+0x192>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	055a      	lsls	r2, r3, #21
 8007b14:	d407      	bmi.n	8007b26 <_printf_float+0x1e6>
 8007b16:	6923      	ldr	r3, [r4, #16]
 8007b18:	4642      	mov	r2, r8
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	47b8      	blx	r7
 8007b20:	3001      	adds	r0, #1
 8007b22:	d12b      	bne.n	8007b7c <_printf_float+0x23c>
 8007b24:	e767      	b.n	80079f6 <_printf_float+0xb6>
 8007b26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b2a:	f240 80dd 	bls.w	8007ce8 <_printf_float+0x3a8>
 8007b2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b32:	2200      	movs	r2, #0
 8007b34:	2300      	movs	r3, #0
 8007b36:	f7f8 ffd7 	bl	8000ae8 <__aeabi_dcmpeq>
 8007b3a:	2800      	cmp	r0, #0
 8007b3c:	d033      	beq.n	8007ba6 <_printf_float+0x266>
 8007b3e:	4a37      	ldr	r2, [pc, #220]	@ (8007c1c <_printf_float+0x2dc>)
 8007b40:	2301      	movs	r3, #1
 8007b42:	4631      	mov	r1, r6
 8007b44:	4628      	mov	r0, r5
 8007b46:	47b8      	blx	r7
 8007b48:	3001      	adds	r0, #1
 8007b4a:	f43f af54 	beq.w	80079f6 <_printf_float+0xb6>
 8007b4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007b52:	4543      	cmp	r3, r8
 8007b54:	db02      	blt.n	8007b5c <_printf_float+0x21c>
 8007b56:	6823      	ldr	r3, [r4, #0]
 8007b58:	07d8      	lsls	r0, r3, #31
 8007b5a:	d50f      	bpl.n	8007b7c <_printf_float+0x23c>
 8007b5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b60:	4631      	mov	r1, r6
 8007b62:	4628      	mov	r0, r5
 8007b64:	47b8      	blx	r7
 8007b66:	3001      	adds	r0, #1
 8007b68:	f43f af45 	beq.w	80079f6 <_printf_float+0xb6>
 8007b6c:	f04f 0900 	mov.w	r9, #0
 8007b70:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b74:	f104 0a1a 	add.w	sl, r4, #26
 8007b78:	45c8      	cmp	r8, r9
 8007b7a:	dc09      	bgt.n	8007b90 <_printf_float+0x250>
 8007b7c:	6823      	ldr	r3, [r4, #0]
 8007b7e:	079b      	lsls	r3, r3, #30
 8007b80:	f100 8103 	bmi.w	8007d8a <_printf_float+0x44a>
 8007b84:	68e0      	ldr	r0, [r4, #12]
 8007b86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b88:	4298      	cmp	r0, r3
 8007b8a:	bfb8      	it	lt
 8007b8c:	4618      	movlt	r0, r3
 8007b8e:	e734      	b.n	80079fa <_printf_float+0xba>
 8007b90:	2301      	movs	r3, #1
 8007b92:	4652      	mov	r2, sl
 8007b94:	4631      	mov	r1, r6
 8007b96:	4628      	mov	r0, r5
 8007b98:	47b8      	blx	r7
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	f43f af2b 	beq.w	80079f6 <_printf_float+0xb6>
 8007ba0:	f109 0901 	add.w	r9, r9, #1
 8007ba4:	e7e8      	b.n	8007b78 <_printf_float+0x238>
 8007ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	dc39      	bgt.n	8007c20 <_printf_float+0x2e0>
 8007bac:	4a1b      	ldr	r2, [pc, #108]	@ (8007c1c <_printf_float+0x2dc>)
 8007bae:	2301      	movs	r3, #1
 8007bb0:	4631      	mov	r1, r6
 8007bb2:	4628      	mov	r0, r5
 8007bb4:	47b8      	blx	r7
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	f43f af1d 	beq.w	80079f6 <_printf_float+0xb6>
 8007bbc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007bc0:	ea59 0303 	orrs.w	r3, r9, r3
 8007bc4:	d102      	bne.n	8007bcc <_printf_float+0x28c>
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	07d9      	lsls	r1, r3, #31
 8007bca:	d5d7      	bpl.n	8007b7c <_printf_float+0x23c>
 8007bcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bd0:	4631      	mov	r1, r6
 8007bd2:	4628      	mov	r0, r5
 8007bd4:	47b8      	blx	r7
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	f43f af0d 	beq.w	80079f6 <_printf_float+0xb6>
 8007bdc:	f04f 0a00 	mov.w	sl, #0
 8007be0:	f104 0b1a 	add.w	fp, r4, #26
 8007be4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007be6:	425b      	negs	r3, r3
 8007be8:	4553      	cmp	r3, sl
 8007bea:	dc01      	bgt.n	8007bf0 <_printf_float+0x2b0>
 8007bec:	464b      	mov	r3, r9
 8007bee:	e793      	b.n	8007b18 <_printf_float+0x1d8>
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	465a      	mov	r2, fp
 8007bf4:	4631      	mov	r1, r6
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	47b8      	blx	r7
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	f43f aefb 	beq.w	80079f6 <_printf_float+0xb6>
 8007c00:	f10a 0a01 	add.w	sl, sl, #1
 8007c04:	e7ee      	b.n	8007be4 <_printf_float+0x2a4>
 8007c06:	bf00      	nop
 8007c08:	7fefffff 	.word	0x7fefffff
 8007c0c:	0800b87a 	.word	0x0800b87a
 8007c10:	0800b876 	.word	0x0800b876
 8007c14:	0800b882 	.word	0x0800b882
 8007c18:	0800b87e 	.word	0x0800b87e
 8007c1c:	0800b886 	.word	0x0800b886
 8007c20:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c22:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c26:	4553      	cmp	r3, sl
 8007c28:	bfa8      	it	ge
 8007c2a:	4653      	movge	r3, sl
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	4699      	mov	r9, r3
 8007c30:	dc36      	bgt.n	8007ca0 <_printf_float+0x360>
 8007c32:	f04f 0b00 	mov.w	fp, #0
 8007c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c3a:	f104 021a 	add.w	r2, r4, #26
 8007c3e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c40:	9306      	str	r3, [sp, #24]
 8007c42:	eba3 0309 	sub.w	r3, r3, r9
 8007c46:	455b      	cmp	r3, fp
 8007c48:	dc31      	bgt.n	8007cae <_printf_float+0x36e>
 8007c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c4c:	459a      	cmp	sl, r3
 8007c4e:	dc3a      	bgt.n	8007cc6 <_printf_float+0x386>
 8007c50:	6823      	ldr	r3, [r4, #0]
 8007c52:	07da      	lsls	r2, r3, #31
 8007c54:	d437      	bmi.n	8007cc6 <_printf_float+0x386>
 8007c56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c58:	ebaa 0903 	sub.w	r9, sl, r3
 8007c5c:	9b06      	ldr	r3, [sp, #24]
 8007c5e:	ebaa 0303 	sub.w	r3, sl, r3
 8007c62:	4599      	cmp	r9, r3
 8007c64:	bfa8      	it	ge
 8007c66:	4699      	movge	r9, r3
 8007c68:	f1b9 0f00 	cmp.w	r9, #0
 8007c6c:	dc33      	bgt.n	8007cd6 <_printf_float+0x396>
 8007c6e:	f04f 0800 	mov.w	r8, #0
 8007c72:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c76:	f104 0b1a 	add.w	fp, r4, #26
 8007c7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c7c:	ebaa 0303 	sub.w	r3, sl, r3
 8007c80:	eba3 0309 	sub.w	r3, r3, r9
 8007c84:	4543      	cmp	r3, r8
 8007c86:	f77f af79 	ble.w	8007b7c <_printf_float+0x23c>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	465a      	mov	r2, fp
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b8      	blx	r7
 8007c94:	3001      	adds	r0, #1
 8007c96:	f43f aeae 	beq.w	80079f6 <_printf_float+0xb6>
 8007c9a:	f108 0801 	add.w	r8, r8, #1
 8007c9e:	e7ec      	b.n	8007c7a <_printf_float+0x33a>
 8007ca0:	4642      	mov	r2, r8
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	47b8      	blx	r7
 8007ca8:	3001      	adds	r0, #1
 8007caa:	d1c2      	bne.n	8007c32 <_printf_float+0x2f2>
 8007cac:	e6a3      	b.n	80079f6 <_printf_float+0xb6>
 8007cae:	2301      	movs	r3, #1
 8007cb0:	4631      	mov	r1, r6
 8007cb2:	4628      	mov	r0, r5
 8007cb4:	9206      	str	r2, [sp, #24]
 8007cb6:	47b8      	blx	r7
 8007cb8:	3001      	adds	r0, #1
 8007cba:	f43f ae9c 	beq.w	80079f6 <_printf_float+0xb6>
 8007cbe:	9a06      	ldr	r2, [sp, #24]
 8007cc0:	f10b 0b01 	add.w	fp, fp, #1
 8007cc4:	e7bb      	b.n	8007c3e <_printf_float+0x2fe>
 8007cc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cca:	4631      	mov	r1, r6
 8007ccc:	4628      	mov	r0, r5
 8007cce:	47b8      	blx	r7
 8007cd0:	3001      	adds	r0, #1
 8007cd2:	d1c0      	bne.n	8007c56 <_printf_float+0x316>
 8007cd4:	e68f      	b.n	80079f6 <_printf_float+0xb6>
 8007cd6:	9a06      	ldr	r2, [sp, #24]
 8007cd8:	464b      	mov	r3, r9
 8007cda:	4442      	add	r2, r8
 8007cdc:	4631      	mov	r1, r6
 8007cde:	4628      	mov	r0, r5
 8007ce0:	47b8      	blx	r7
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	d1c3      	bne.n	8007c6e <_printf_float+0x32e>
 8007ce6:	e686      	b.n	80079f6 <_printf_float+0xb6>
 8007ce8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007cec:	f1ba 0f01 	cmp.w	sl, #1
 8007cf0:	dc01      	bgt.n	8007cf6 <_printf_float+0x3b6>
 8007cf2:	07db      	lsls	r3, r3, #31
 8007cf4:	d536      	bpl.n	8007d64 <_printf_float+0x424>
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	4642      	mov	r2, r8
 8007cfa:	4631      	mov	r1, r6
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	47b8      	blx	r7
 8007d00:	3001      	adds	r0, #1
 8007d02:	f43f ae78 	beq.w	80079f6 <_printf_float+0xb6>
 8007d06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	47b8      	blx	r7
 8007d10:	3001      	adds	r0, #1
 8007d12:	f43f ae70 	beq.w	80079f6 <_printf_float+0xb6>
 8007d16:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d22:	f7f8 fee1 	bl	8000ae8 <__aeabi_dcmpeq>
 8007d26:	b9c0      	cbnz	r0, 8007d5a <_printf_float+0x41a>
 8007d28:	4653      	mov	r3, sl
 8007d2a:	f108 0201 	add.w	r2, r8, #1
 8007d2e:	4631      	mov	r1, r6
 8007d30:	4628      	mov	r0, r5
 8007d32:	47b8      	blx	r7
 8007d34:	3001      	adds	r0, #1
 8007d36:	d10c      	bne.n	8007d52 <_printf_float+0x412>
 8007d38:	e65d      	b.n	80079f6 <_printf_float+0xb6>
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	465a      	mov	r2, fp
 8007d3e:	4631      	mov	r1, r6
 8007d40:	4628      	mov	r0, r5
 8007d42:	47b8      	blx	r7
 8007d44:	3001      	adds	r0, #1
 8007d46:	f43f ae56 	beq.w	80079f6 <_printf_float+0xb6>
 8007d4a:	f108 0801 	add.w	r8, r8, #1
 8007d4e:	45d0      	cmp	r8, sl
 8007d50:	dbf3      	blt.n	8007d3a <_printf_float+0x3fa>
 8007d52:	464b      	mov	r3, r9
 8007d54:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d58:	e6df      	b.n	8007b1a <_printf_float+0x1da>
 8007d5a:	f04f 0800 	mov.w	r8, #0
 8007d5e:	f104 0b1a 	add.w	fp, r4, #26
 8007d62:	e7f4      	b.n	8007d4e <_printf_float+0x40e>
 8007d64:	2301      	movs	r3, #1
 8007d66:	4642      	mov	r2, r8
 8007d68:	e7e1      	b.n	8007d2e <_printf_float+0x3ee>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	464a      	mov	r2, r9
 8007d6e:	4631      	mov	r1, r6
 8007d70:	4628      	mov	r0, r5
 8007d72:	47b8      	blx	r7
 8007d74:	3001      	adds	r0, #1
 8007d76:	f43f ae3e 	beq.w	80079f6 <_printf_float+0xb6>
 8007d7a:	f108 0801 	add.w	r8, r8, #1
 8007d7e:	68e3      	ldr	r3, [r4, #12]
 8007d80:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d82:	1a5b      	subs	r3, r3, r1
 8007d84:	4543      	cmp	r3, r8
 8007d86:	dcf0      	bgt.n	8007d6a <_printf_float+0x42a>
 8007d88:	e6fc      	b.n	8007b84 <_printf_float+0x244>
 8007d8a:	f04f 0800 	mov.w	r8, #0
 8007d8e:	f104 0919 	add.w	r9, r4, #25
 8007d92:	e7f4      	b.n	8007d7e <_printf_float+0x43e>

08007d94 <_printf_common>:
 8007d94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d98:	4616      	mov	r6, r2
 8007d9a:	4698      	mov	r8, r3
 8007d9c:	688a      	ldr	r2, [r1, #8]
 8007d9e:	690b      	ldr	r3, [r1, #16]
 8007da0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007da4:	4293      	cmp	r3, r2
 8007da6:	bfb8      	it	lt
 8007da8:	4613      	movlt	r3, r2
 8007daa:	6033      	str	r3, [r6, #0]
 8007dac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007db0:	4607      	mov	r7, r0
 8007db2:	460c      	mov	r4, r1
 8007db4:	b10a      	cbz	r2, 8007dba <_printf_common+0x26>
 8007db6:	3301      	adds	r3, #1
 8007db8:	6033      	str	r3, [r6, #0]
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	0699      	lsls	r1, r3, #26
 8007dbe:	bf42      	ittt	mi
 8007dc0:	6833      	ldrmi	r3, [r6, #0]
 8007dc2:	3302      	addmi	r3, #2
 8007dc4:	6033      	strmi	r3, [r6, #0]
 8007dc6:	6825      	ldr	r5, [r4, #0]
 8007dc8:	f015 0506 	ands.w	r5, r5, #6
 8007dcc:	d106      	bne.n	8007ddc <_printf_common+0x48>
 8007dce:	f104 0a19 	add.w	sl, r4, #25
 8007dd2:	68e3      	ldr	r3, [r4, #12]
 8007dd4:	6832      	ldr	r2, [r6, #0]
 8007dd6:	1a9b      	subs	r3, r3, r2
 8007dd8:	42ab      	cmp	r3, r5
 8007dda:	dc26      	bgt.n	8007e2a <_printf_common+0x96>
 8007ddc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007de0:	6822      	ldr	r2, [r4, #0]
 8007de2:	3b00      	subs	r3, #0
 8007de4:	bf18      	it	ne
 8007de6:	2301      	movne	r3, #1
 8007de8:	0692      	lsls	r2, r2, #26
 8007dea:	d42b      	bmi.n	8007e44 <_printf_common+0xb0>
 8007dec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007df0:	4641      	mov	r1, r8
 8007df2:	4638      	mov	r0, r7
 8007df4:	47c8      	blx	r9
 8007df6:	3001      	adds	r0, #1
 8007df8:	d01e      	beq.n	8007e38 <_printf_common+0xa4>
 8007dfa:	6823      	ldr	r3, [r4, #0]
 8007dfc:	6922      	ldr	r2, [r4, #16]
 8007dfe:	f003 0306 	and.w	r3, r3, #6
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	bf02      	ittt	eq
 8007e06:	68e5      	ldreq	r5, [r4, #12]
 8007e08:	6833      	ldreq	r3, [r6, #0]
 8007e0a:	1aed      	subeq	r5, r5, r3
 8007e0c:	68a3      	ldr	r3, [r4, #8]
 8007e0e:	bf0c      	ite	eq
 8007e10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e14:	2500      	movne	r5, #0
 8007e16:	4293      	cmp	r3, r2
 8007e18:	bfc4      	itt	gt
 8007e1a:	1a9b      	subgt	r3, r3, r2
 8007e1c:	18ed      	addgt	r5, r5, r3
 8007e1e:	2600      	movs	r6, #0
 8007e20:	341a      	adds	r4, #26
 8007e22:	42b5      	cmp	r5, r6
 8007e24:	d11a      	bne.n	8007e5c <_printf_common+0xc8>
 8007e26:	2000      	movs	r0, #0
 8007e28:	e008      	b.n	8007e3c <_printf_common+0xa8>
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	4652      	mov	r2, sl
 8007e2e:	4641      	mov	r1, r8
 8007e30:	4638      	mov	r0, r7
 8007e32:	47c8      	blx	r9
 8007e34:	3001      	adds	r0, #1
 8007e36:	d103      	bne.n	8007e40 <_printf_common+0xac>
 8007e38:	f04f 30ff 	mov.w	r0, #4294967295
 8007e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e40:	3501      	adds	r5, #1
 8007e42:	e7c6      	b.n	8007dd2 <_printf_common+0x3e>
 8007e44:	18e1      	adds	r1, r4, r3
 8007e46:	1c5a      	adds	r2, r3, #1
 8007e48:	2030      	movs	r0, #48	@ 0x30
 8007e4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e4e:	4422      	add	r2, r4
 8007e50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e58:	3302      	adds	r3, #2
 8007e5a:	e7c7      	b.n	8007dec <_printf_common+0x58>
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	4622      	mov	r2, r4
 8007e60:	4641      	mov	r1, r8
 8007e62:	4638      	mov	r0, r7
 8007e64:	47c8      	blx	r9
 8007e66:	3001      	adds	r0, #1
 8007e68:	d0e6      	beq.n	8007e38 <_printf_common+0xa4>
 8007e6a:	3601      	adds	r6, #1
 8007e6c:	e7d9      	b.n	8007e22 <_printf_common+0x8e>
	...

08007e70 <_printf_i>:
 8007e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e74:	7e0f      	ldrb	r7, [r1, #24]
 8007e76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e78:	2f78      	cmp	r7, #120	@ 0x78
 8007e7a:	4691      	mov	r9, r2
 8007e7c:	4680      	mov	r8, r0
 8007e7e:	460c      	mov	r4, r1
 8007e80:	469a      	mov	sl, r3
 8007e82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e86:	d807      	bhi.n	8007e98 <_printf_i+0x28>
 8007e88:	2f62      	cmp	r7, #98	@ 0x62
 8007e8a:	d80a      	bhi.n	8007ea2 <_printf_i+0x32>
 8007e8c:	2f00      	cmp	r7, #0
 8007e8e:	f000 80d1 	beq.w	8008034 <_printf_i+0x1c4>
 8007e92:	2f58      	cmp	r7, #88	@ 0x58
 8007e94:	f000 80b8 	beq.w	8008008 <_printf_i+0x198>
 8007e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ea0:	e03a      	b.n	8007f18 <_printf_i+0xa8>
 8007ea2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007ea6:	2b15      	cmp	r3, #21
 8007ea8:	d8f6      	bhi.n	8007e98 <_printf_i+0x28>
 8007eaa:	a101      	add	r1, pc, #4	@ (adr r1, 8007eb0 <_printf_i+0x40>)
 8007eac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007eb0:	08007f09 	.word	0x08007f09
 8007eb4:	08007f1d 	.word	0x08007f1d
 8007eb8:	08007e99 	.word	0x08007e99
 8007ebc:	08007e99 	.word	0x08007e99
 8007ec0:	08007e99 	.word	0x08007e99
 8007ec4:	08007e99 	.word	0x08007e99
 8007ec8:	08007f1d 	.word	0x08007f1d
 8007ecc:	08007e99 	.word	0x08007e99
 8007ed0:	08007e99 	.word	0x08007e99
 8007ed4:	08007e99 	.word	0x08007e99
 8007ed8:	08007e99 	.word	0x08007e99
 8007edc:	0800801b 	.word	0x0800801b
 8007ee0:	08007f47 	.word	0x08007f47
 8007ee4:	08007fd5 	.word	0x08007fd5
 8007ee8:	08007e99 	.word	0x08007e99
 8007eec:	08007e99 	.word	0x08007e99
 8007ef0:	0800803d 	.word	0x0800803d
 8007ef4:	08007e99 	.word	0x08007e99
 8007ef8:	08007f47 	.word	0x08007f47
 8007efc:	08007e99 	.word	0x08007e99
 8007f00:	08007e99 	.word	0x08007e99
 8007f04:	08007fdd 	.word	0x08007fdd
 8007f08:	6833      	ldr	r3, [r6, #0]
 8007f0a:	1d1a      	adds	r2, r3, #4
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6032      	str	r2, [r6, #0]
 8007f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e09c      	b.n	8008056 <_printf_i+0x1e6>
 8007f1c:	6833      	ldr	r3, [r6, #0]
 8007f1e:	6820      	ldr	r0, [r4, #0]
 8007f20:	1d19      	adds	r1, r3, #4
 8007f22:	6031      	str	r1, [r6, #0]
 8007f24:	0606      	lsls	r6, r0, #24
 8007f26:	d501      	bpl.n	8007f2c <_printf_i+0xbc>
 8007f28:	681d      	ldr	r5, [r3, #0]
 8007f2a:	e003      	b.n	8007f34 <_printf_i+0xc4>
 8007f2c:	0645      	lsls	r5, r0, #25
 8007f2e:	d5fb      	bpl.n	8007f28 <_printf_i+0xb8>
 8007f30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f34:	2d00      	cmp	r5, #0
 8007f36:	da03      	bge.n	8007f40 <_printf_i+0xd0>
 8007f38:	232d      	movs	r3, #45	@ 0x2d
 8007f3a:	426d      	negs	r5, r5
 8007f3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f40:	4858      	ldr	r0, [pc, #352]	@ (80080a4 <_printf_i+0x234>)
 8007f42:	230a      	movs	r3, #10
 8007f44:	e011      	b.n	8007f6a <_printf_i+0xfa>
 8007f46:	6821      	ldr	r1, [r4, #0]
 8007f48:	6833      	ldr	r3, [r6, #0]
 8007f4a:	0608      	lsls	r0, r1, #24
 8007f4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f50:	d402      	bmi.n	8007f58 <_printf_i+0xe8>
 8007f52:	0649      	lsls	r1, r1, #25
 8007f54:	bf48      	it	mi
 8007f56:	b2ad      	uxthmi	r5, r5
 8007f58:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f5a:	4852      	ldr	r0, [pc, #328]	@ (80080a4 <_printf_i+0x234>)
 8007f5c:	6033      	str	r3, [r6, #0]
 8007f5e:	bf14      	ite	ne
 8007f60:	230a      	movne	r3, #10
 8007f62:	2308      	moveq	r3, #8
 8007f64:	2100      	movs	r1, #0
 8007f66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f6a:	6866      	ldr	r6, [r4, #4]
 8007f6c:	60a6      	str	r6, [r4, #8]
 8007f6e:	2e00      	cmp	r6, #0
 8007f70:	db05      	blt.n	8007f7e <_printf_i+0x10e>
 8007f72:	6821      	ldr	r1, [r4, #0]
 8007f74:	432e      	orrs	r6, r5
 8007f76:	f021 0104 	bic.w	r1, r1, #4
 8007f7a:	6021      	str	r1, [r4, #0]
 8007f7c:	d04b      	beq.n	8008016 <_printf_i+0x1a6>
 8007f7e:	4616      	mov	r6, r2
 8007f80:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f84:	fb03 5711 	mls	r7, r3, r1, r5
 8007f88:	5dc7      	ldrb	r7, [r0, r7]
 8007f8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f8e:	462f      	mov	r7, r5
 8007f90:	42bb      	cmp	r3, r7
 8007f92:	460d      	mov	r5, r1
 8007f94:	d9f4      	bls.n	8007f80 <_printf_i+0x110>
 8007f96:	2b08      	cmp	r3, #8
 8007f98:	d10b      	bne.n	8007fb2 <_printf_i+0x142>
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	07df      	lsls	r7, r3, #31
 8007f9e:	d508      	bpl.n	8007fb2 <_printf_i+0x142>
 8007fa0:	6923      	ldr	r3, [r4, #16]
 8007fa2:	6861      	ldr	r1, [r4, #4]
 8007fa4:	4299      	cmp	r1, r3
 8007fa6:	bfde      	ittt	le
 8007fa8:	2330      	movle	r3, #48	@ 0x30
 8007faa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007fb2:	1b92      	subs	r2, r2, r6
 8007fb4:	6122      	str	r2, [r4, #16]
 8007fb6:	f8cd a000 	str.w	sl, [sp]
 8007fba:	464b      	mov	r3, r9
 8007fbc:	aa03      	add	r2, sp, #12
 8007fbe:	4621      	mov	r1, r4
 8007fc0:	4640      	mov	r0, r8
 8007fc2:	f7ff fee7 	bl	8007d94 <_printf_common>
 8007fc6:	3001      	adds	r0, #1
 8007fc8:	d14a      	bne.n	8008060 <_printf_i+0x1f0>
 8007fca:	f04f 30ff 	mov.w	r0, #4294967295
 8007fce:	b004      	add	sp, #16
 8007fd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fd4:	6823      	ldr	r3, [r4, #0]
 8007fd6:	f043 0320 	orr.w	r3, r3, #32
 8007fda:	6023      	str	r3, [r4, #0]
 8007fdc:	4832      	ldr	r0, [pc, #200]	@ (80080a8 <_printf_i+0x238>)
 8007fde:	2778      	movs	r7, #120	@ 0x78
 8007fe0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fe4:	6823      	ldr	r3, [r4, #0]
 8007fe6:	6831      	ldr	r1, [r6, #0]
 8007fe8:	061f      	lsls	r7, r3, #24
 8007fea:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fee:	d402      	bmi.n	8007ff6 <_printf_i+0x186>
 8007ff0:	065f      	lsls	r7, r3, #25
 8007ff2:	bf48      	it	mi
 8007ff4:	b2ad      	uxthmi	r5, r5
 8007ff6:	6031      	str	r1, [r6, #0]
 8007ff8:	07d9      	lsls	r1, r3, #31
 8007ffa:	bf44      	itt	mi
 8007ffc:	f043 0320 	orrmi.w	r3, r3, #32
 8008000:	6023      	strmi	r3, [r4, #0]
 8008002:	b11d      	cbz	r5, 800800c <_printf_i+0x19c>
 8008004:	2310      	movs	r3, #16
 8008006:	e7ad      	b.n	8007f64 <_printf_i+0xf4>
 8008008:	4826      	ldr	r0, [pc, #152]	@ (80080a4 <_printf_i+0x234>)
 800800a:	e7e9      	b.n	8007fe0 <_printf_i+0x170>
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	f023 0320 	bic.w	r3, r3, #32
 8008012:	6023      	str	r3, [r4, #0]
 8008014:	e7f6      	b.n	8008004 <_printf_i+0x194>
 8008016:	4616      	mov	r6, r2
 8008018:	e7bd      	b.n	8007f96 <_printf_i+0x126>
 800801a:	6833      	ldr	r3, [r6, #0]
 800801c:	6825      	ldr	r5, [r4, #0]
 800801e:	6961      	ldr	r1, [r4, #20]
 8008020:	1d18      	adds	r0, r3, #4
 8008022:	6030      	str	r0, [r6, #0]
 8008024:	062e      	lsls	r6, r5, #24
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	d501      	bpl.n	800802e <_printf_i+0x1be>
 800802a:	6019      	str	r1, [r3, #0]
 800802c:	e002      	b.n	8008034 <_printf_i+0x1c4>
 800802e:	0668      	lsls	r0, r5, #25
 8008030:	d5fb      	bpl.n	800802a <_printf_i+0x1ba>
 8008032:	8019      	strh	r1, [r3, #0]
 8008034:	2300      	movs	r3, #0
 8008036:	6123      	str	r3, [r4, #16]
 8008038:	4616      	mov	r6, r2
 800803a:	e7bc      	b.n	8007fb6 <_printf_i+0x146>
 800803c:	6833      	ldr	r3, [r6, #0]
 800803e:	1d1a      	adds	r2, r3, #4
 8008040:	6032      	str	r2, [r6, #0]
 8008042:	681e      	ldr	r6, [r3, #0]
 8008044:	6862      	ldr	r2, [r4, #4]
 8008046:	2100      	movs	r1, #0
 8008048:	4630      	mov	r0, r6
 800804a:	f7f8 f8d1 	bl	80001f0 <memchr>
 800804e:	b108      	cbz	r0, 8008054 <_printf_i+0x1e4>
 8008050:	1b80      	subs	r0, r0, r6
 8008052:	6060      	str	r0, [r4, #4]
 8008054:	6863      	ldr	r3, [r4, #4]
 8008056:	6123      	str	r3, [r4, #16]
 8008058:	2300      	movs	r3, #0
 800805a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800805e:	e7aa      	b.n	8007fb6 <_printf_i+0x146>
 8008060:	6923      	ldr	r3, [r4, #16]
 8008062:	4632      	mov	r2, r6
 8008064:	4649      	mov	r1, r9
 8008066:	4640      	mov	r0, r8
 8008068:	47d0      	blx	sl
 800806a:	3001      	adds	r0, #1
 800806c:	d0ad      	beq.n	8007fca <_printf_i+0x15a>
 800806e:	6823      	ldr	r3, [r4, #0]
 8008070:	079b      	lsls	r3, r3, #30
 8008072:	d413      	bmi.n	800809c <_printf_i+0x22c>
 8008074:	68e0      	ldr	r0, [r4, #12]
 8008076:	9b03      	ldr	r3, [sp, #12]
 8008078:	4298      	cmp	r0, r3
 800807a:	bfb8      	it	lt
 800807c:	4618      	movlt	r0, r3
 800807e:	e7a6      	b.n	8007fce <_printf_i+0x15e>
 8008080:	2301      	movs	r3, #1
 8008082:	4632      	mov	r2, r6
 8008084:	4649      	mov	r1, r9
 8008086:	4640      	mov	r0, r8
 8008088:	47d0      	blx	sl
 800808a:	3001      	adds	r0, #1
 800808c:	d09d      	beq.n	8007fca <_printf_i+0x15a>
 800808e:	3501      	adds	r5, #1
 8008090:	68e3      	ldr	r3, [r4, #12]
 8008092:	9903      	ldr	r1, [sp, #12]
 8008094:	1a5b      	subs	r3, r3, r1
 8008096:	42ab      	cmp	r3, r5
 8008098:	dcf2      	bgt.n	8008080 <_printf_i+0x210>
 800809a:	e7eb      	b.n	8008074 <_printf_i+0x204>
 800809c:	2500      	movs	r5, #0
 800809e:	f104 0619 	add.w	r6, r4, #25
 80080a2:	e7f5      	b.n	8008090 <_printf_i+0x220>
 80080a4:	0800b888 	.word	0x0800b888
 80080a8:	0800b899 	.word	0x0800b899

080080ac <_scanf_float>:
 80080ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b0:	b087      	sub	sp, #28
 80080b2:	4691      	mov	r9, r2
 80080b4:	9303      	str	r3, [sp, #12]
 80080b6:	688b      	ldr	r3, [r1, #8]
 80080b8:	1e5a      	subs	r2, r3, #1
 80080ba:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80080be:	bf81      	itttt	hi
 80080c0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80080c4:	eb03 0b05 	addhi.w	fp, r3, r5
 80080c8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80080cc:	608b      	strhi	r3, [r1, #8]
 80080ce:	680b      	ldr	r3, [r1, #0]
 80080d0:	460a      	mov	r2, r1
 80080d2:	f04f 0500 	mov.w	r5, #0
 80080d6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80080da:	f842 3b1c 	str.w	r3, [r2], #28
 80080de:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80080e2:	4680      	mov	r8, r0
 80080e4:	460c      	mov	r4, r1
 80080e6:	bf98      	it	ls
 80080e8:	f04f 0b00 	movls.w	fp, #0
 80080ec:	9201      	str	r2, [sp, #4]
 80080ee:	4616      	mov	r6, r2
 80080f0:	46aa      	mov	sl, r5
 80080f2:	462f      	mov	r7, r5
 80080f4:	9502      	str	r5, [sp, #8]
 80080f6:	68a2      	ldr	r2, [r4, #8]
 80080f8:	b15a      	cbz	r2, 8008112 <_scanf_float+0x66>
 80080fa:	f8d9 3000 	ldr.w	r3, [r9]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	2b4e      	cmp	r3, #78	@ 0x4e
 8008102:	d863      	bhi.n	80081cc <_scanf_float+0x120>
 8008104:	2b40      	cmp	r3, #64	@ 0x40
 8008106:	d83b      	bhi.n	8008180 <_scanf_float+0xd4>
 8008108:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800810c:	b2c8      	uxtb	r0, r1
 800810e:	280e      	cmp	r0, #14
 8008110:	d939      	bls.n	8008186 <_scanf_float+0xda>
 8008112:	b11f      	cbz	r7, 800811c <_scanf_float+0x70>
 8008114:	6823      	ldr	r3, [r4, #0]
 8008116:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800811a:	6023      	str	r3, [r4, #0]
 800811c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008120:	f1ba 0f01 	cmp.w	sl, #1
 8008124:	f200 8114 	bhi.w	8008350 <_scanf_float+0x2a4>
 8008128:	9b01      	ldr	r3, [sp, #4]
 800812a:	429e      	cmp	r6, r3
 800812c:	f200 8105 	bhi.w	800833a <_scanf_float+0x28e>
 8008130:	2001      	movs	r0, #1
 8008132:	b007      	add	sp, #28
 8008134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008138:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800813c:	2a0d      	cmp	r2, #13
 800813e:	d8e8      	bhi.n	8008112 <_scanf_float+0x66>
 8008140:	a101      	add	r1, pc, #4	@ (adr r1, 8008148 <_scanf_float+0x9c>)
 8008142:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008146:	bf00      	nop
 8008148:	08008291 	.word	0x08008291
 800814c:	08008113 	.word	0x08008113
 8008150:	08008113 	.word	0x08008113
 8008154:	08008113 	.word	0x08008113
 8008158:	080082ed 	.word	0x080082ed
 800815c:	080082c7 	.word	0x080082c7
 8008160:	08008113 	.word	0x08008113
 8008164:	08008113 	.word	0x08008113
 8008168:	0800829f 	.word	0x0800829f
 800816c:	08008113 	.word	0x08008113
 8008170:	08008113 	.word	0x08008113
 8008174:	08008113 	.word	0x08008113
 8008178:	08008113 	.word	0x08008113
 800817c:	0800825b 	.word	0x0800825b
 8008180:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008184:	e7da      	b.n	800813c <_scanf_float+0x90>
 8008186:	290e      	cmp	r1, #14
 8008188:	d8c3      	bhi.n	8008112 <_scanf_float+0x66>
 800818a:	a001      	add	r0, pc, #4	@ (adr r0, 8008190 <_scanf_float+0xe4>)
 800818c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008190:	0800824b 	.word	0x0800824b
 8008194:	08008113 	.word	0x08008113
 8008198:	0800824b 	.word	0x0800824b
 800819c:	080082db 	.word	0x080082db
 80081a0:	08008113 	.word	0x08008113
 80081a4:	080081ed 	.word	0x080081ed
 80081a8:	08008231 	.word	0x08008231
 80081ac:	08008231 	.word	0x08008231
 80081b0:	08008231 	.word	0x08008231
 80081b4:	08008231 	.word	0x08008231
 80081b8:	08008231 	.word	0x08008231
 80081bc:	08008231 	.word	0x08008231
 80081c0:	08008231 	.word	0x08008231
 80081c4:	08008231 	.word	0x08008231
 80081c8:	08008231 	.word	0x08008231
 80081cc:	2b6e      	cmp	r3, #110	@ 0x6e
 80081ce:	d809      	bhi.n	80081e4 <_scanf_float+0x138>
 80081d0:	2b60      	cmp	r3, #96	@ 0x60
 80081d2:	d8b1      	bhi.n	8008138 <_scanf_float+0x8c>
 80081d4:	2b54      	cmp	r3, #84	@ 0x54
 80081d6:	d07b      	beq.n	80082d0 <_scanf_float+0x224>
 80081d8:	2b59      	cmp	r3, #89	@ 0x59
 80081da:	d19a      	bne.n	8008112 <_scanf_float+0x66>
 80081dc:	2d07      	cmp	r5, #7
 80081de:	d198      	bne.n	8008112 <_scanf_float+0x66>
 80081e0:	2508      	movs	r5, #8
 80081e2:	e02f      	b.n	8008244 <_scanf_float+0x198>
 80081e4:	2b74      	cmp	r3, #116	@ 0x74
 80081e6:	d073      	beq.n	80082d0 <_scanf_float+0x224>
 80081e8:	2b79      	cmp	r3, #121	@ 0x79
 80081ea:	e7f6      	b.n	80081da <_scanf_float+0x12e>
 80081ec:	6821      	ldr	r1, [r4, #0]
 80081ee:	05c8      	lsls	r0, r1, #23
 80081f0:	d51e      	bpl.n	8008230 <_scanf_float+0x184>
 80081f2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80081f6:	6021      	str	r1, [r4, #0]
 80081f8:	3701      	adds	r7, #1
 80081fa:	f1bb 0f00 	cmp.w	fp, #0
 80081fe:	d003      	beq.n	8008208 <_scanf_float+0x15c>
 8008200:	3201      	adds	r2, #1
 8008202:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008206:	60a2      	str	r2, [r4, #8]
 8008208:	68a3      	ldr	r3, [r4, #8]
 800820a:	3b01      	subs	r3, #1
 800820c:	60a3      	str	r3, [r4, #8]
 800820e:	6923      	ldr	r3, [r4, #16]
 8008210:	3301      	adds	r3, #1
 8008212:	6123      	str	r3, [r4, #16]
 8008214:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008218:	3b01      	subs	r3, #1
 800821a:	2b00      	cmp	r3, #0
 800821c:	f8c9 3004 	str.w	r3, [r9, #4]
 8008220:	f340 8082 	ble.w	8008328 <_scanf_float+0x27c>
 8008224:	f8d9 3000 	ldr.w	r3, [r9]
 8008228:	3301      	adds	r3, #1
 800822a:	f8c9 3000 	str.w	r3, [r9]
 800822e:	e762      	b.n	80080f6 <_scanf_float+0x4a>
 8008230:	eb1a 0105 	adds.w	r1, sl, r5
 8008234:	f47f af6d 	bne.w	8008112 <_scanf_float+0x66>
 8008238:	6822      	ldr	r2, [r4, #0]
 800823a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800823e:	6022      	str	r2, [r4, #0]
 8008240:	460d      	mov	r5, r1
 8008242:	468a      	mov	sl, r1
 8008244:	f806 3b01 	strb.w	r3, [r6], #1
 8008248:	e7de      	b.n	8008208 <_scanf_float+0x15c>
 800824a:	6822      	ldr	r2, [r4, #0]
 800824c:	0610      	lsls	r0, r2, #24
 800824e:	f57f af60 	bpl.w	8008112 <_scanf_float+0x66>
 8008252:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008256:	6022      	str	r2, [r4, #0]
 8008258:	e7f4      	b.n	8008244 <_scanf_float+0x198>
 800825a:	f1ba 0f00 	cmp.w	sl, #0
 800825e:	d10c      	bne.n	800827a <_scanf_float+0x1ce>
 8008260:	b977      	cbnz	r7, 8008280 <_scanf_float+0x1d4>
 8008262:	6822      	ldr	r2, [r4, #0]
 8008264:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008268:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800826c:	d108      	bne.n	8008280 <_scanf_float+0x1d4>
 800826e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008272:	6022      	str	r2, [r4, #0]
 8008274:	f04f 0a01 	mov.w	sl, #1
 8008278:	e7e4      	b.n	8008244 <_scanf_float+0x198>
 800827a:	f1ba 0f02 	cmp.w	sl, #2
 800827e:	d050      	beq.n	8008322 <_scanf_float+0x276>
 8008280:	2d01      	cmp	r5, #1
 8008282:	d002      	beq.n	800828a <_scanf_float+0x1de>
 8008284:	2d04      	cmp	r5, #4
 8008286:	f47f af44 	bne.w	8008112 <_scanf_float+0x66>
 800828a:	3501      	adds	r5, #1
 800828c:	b2ed      	uxtb	r5, r5
 800828e:	e7d9      	b.n	8008244 <_scanf_float+0x198>
 8008290:	f1ba 0f01 	cmp.w	sl, #1
 8008294:	f47f af3d 	bne.w	8008112 <_scanf_float+0x66>
 8008298:	f04f 0a02 	mov.w	sl, #2
 800829c:	e7d2      	b.n	8008244 <_scanf_float+0x198>
 800829e:	b975      	cbnz	r5, 80082be <_scanf_float+0x212>
 80082a0:	2f00      	cmp	r7, #0
 80082a2:	f47f af37 	bne.w	8008114 <_scanf_float+0x68>
 80082a6:	6822      	ldr	r2, [r4, #0]
 80082a8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80082ac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80082b0:	f040 8103 	bne.w	80084ba <_scanf_float+0x40e>
 80082b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80082b8:	6022      	str	r2, [r4, #0]
 80082ba:	2501      	movs	r5, #1
 80082bc:	e7c2      	b.n	8008244 <_scanf_float+0x198>
 80082be:	2d03      	cmp	r5, #3
 80082c0:	d0e3      	beq.n	800828a <_scanf_float+0x1de>
 80082c2:	2d05      	cmp	r5, #5
 80082c4:	e7df      	b.n	8008286 <_scanf_float+0x1da>
 80082c6:	2d02      	cmp	r5, #2
 80082c8:	f47f af23 	bne.w	8008112 <_scanf_float+0x66>
 80082cc:	2503      	movs	r5, #3
 80082ce:	e7b9      	b.n	8008244 <_scanf_float+0x198>
 80082d0:	2d06      	cmp	r5, #6
 80082d2:	f47f af1e 	bne.w	8008112 <_scanf_float+0x66>
 80082d6:	2507      	movs	r5, #7
 80082d8:	e7b4      	b.n	8008244 <_scanf_float+0x198>
 80082da:	6822      	ldr	r2, [r4, #0]
 80082dc:	0591      	lsls	r1, r2, #22
 80082de:	f57f af18 	bpl.w	8008112 <_scanf_float+0x66>
 80082e2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80082e6:	6022      	str	r2, [r4, #0]
 80082e8:	9702      	str	r7, [sp, #8]
 80082ea:	e7ab      	b.n	8008244 <_scanf_float+0x198>
 80082ec:	6822      	ldr	r2, [r4, #0]
 80082ee:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80082f2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80082f6:	d005      	beq.n	8008304 <_scanf_float+0x258>
 80082f8:	0550      	lsls	r0, r2, #21
 80082fa:	f57f af0a 	bpl.w	8008112 <_scanf_float+0x66>
 80082fe:	2f00      	cmp	r7, #0
 8008300:	f000 80db 	beq.w	80084ba <_scanf_float+0x40e>
 8008304:	0591      	lsls	r1, r2, #22
 8008306:	bf58      	it	pl
 8008308:	9902      	ldrpl	r1, [sp, #8]
 800830a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800830e:	bf58      	it	pl
 8008310:	1a79      	subpl	r1, r7, r1
 8008312:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008316:	bf58      	it	pl
 8008318:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800831c:	6022      	str	r2, [r4, #0]
 800831e:	2700      	movs	r7, #0
 8008320:	e790      	b.n	8008244 <_scanf_float+0x198>
 8008322:	f04f 0a03 	mov.w	sl, #3
 8008326:	e78d      	b.n	8008244 <_scanf_float+0x198>
 8008328:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800832c:	4649      	mov	r1, r9
 800832e:	4640      	mov	r0, r8
 8008330:	4798      	blx	r3
 8008332:	2800      	cmp	r0, #0
 8008334:	f43f aedf 	beq.w	80080f6 <_scanf_float+0x4a>
 8008338:	e6eb      	b.n	8008112 <_scanf_float+0x66>
 800833a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800833e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008342:	464a      	mov	r2, r9
 8008344:	4640      	mov	r0, r8
 8008346:	4798      	blx	r3
 8008348:	6923      	ldr	r3, [r4, #16]
 800834a:	3b01      	subs	r3, #1
 800834c:	6123      	str	r3, [r4, #16]
 800834e:	e6eb      	b.n	8008128 <_scanf_float+0x7c>
 8008350:	1e6b      	subs	r3, r5, #1
 8008352:	2b06      	cmp	r3, #6
 8008354:	d824      	bhi.n	80083a0 <_scanf_float+0x2f4>
 8008356:	2d02      	cmp	r5, #2
 8008358:	d836      	bhi.n	80083c8 <_scanf_float+0x31c>
 800835a:	9b01      	ldr	r3, [sp, #4]
 800835c:	429e      	cmp	r6, r3
 800835e:	f67f aee7 	bls.w	8008130 <_scanf_float+0x84>
 8008362:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008366:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800836a:	464a      	mov	r2, r9
 800836c:	4640      	mov	r0, r8
 800836e:	4798      	blx	r3
 8008370:	6923      	ldr	r3, [r4, #16]
 8008372:	3b01      	subs	r3, #1
 8008374:	6123      	str	r3, [r4, #16]
 8008376:	e7f0      	b.n	800835a <_scanf_float+0x2ae>
 8008378:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800837c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008380:	464a      	mov	r2, r9
 8008382:	4640      	mov	r0, r8
 8008384:	4798      	blx	r3
 8008386:	6923      	ldr	r3, [r4, #16]
 8008388:	3b01      	subs	r3, #1
 800838a:	6123      	str	r3, [r4, #16]
 800838c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008390:	fa5f fa8a 	uxtb.w	sl, sl
 8008394:	f1ba 0f02 	cmp.w	sl, #2
 8008398:	d1ee      	bne.n	8008378 <_scanf_float+0x2cc>
 800839a:	3d03      	subs	r5, #3
 800839c:	b2ed      	uxtb	r5, r5
 800839e:	1b76      	subs	r6, r6, r5
 80083a0:	6823      	ldr	r3, [r4, #0]
 80083a2:	05da      	lsls	r2, r3, #23
 80083a4:	d530      	bpl.n	8008408 <_scanf_float+0x35c>
 80083a6:	055b      	lsls	r3, r3, #21
 80083a8:	d511      	bpl.n	80083ce <_scanf_float+0x322>
 80083aa:	9b01      	ldr	r3, [sp, #4]
 80083ac:	429e      	cmp	r6, r3
 80083ae:	f67f aebf 	bls.w	8008130 <_scanf_float+0x84>
 80083b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083ba:	464a      	mov	r2, r9
 80083bc:	4640      	mov	r0, r8
 80083be:	4798      	blx	r3
 80083c0:	6923      	ldr	r3, [r4, #16]
 80083c2:	3b01      	subs	r3, #1
 80083c4:	6123      	str	r3, [r4, #16]
 80083c6:	e7f0      	b.n	80083aa <_scanf_float+0x2fe>
 80083c8:	46aa      	mov	sl, r5
 80083ca:	46b3      	mov	fp, r6
 80083cc:	e7de      	b.n	800838c <_scanf_float+0x2e0>
 80083ce:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80083d2:	6923      	ldr	r3, [r4, #16]
 80083d4:	2965      	cmp	r1, #101	@ 0x65
 80083d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80083da:	f106 35ff 	add.w	r5, r6, #4294967295
 80083de:	6123      	str	r3, [r4, #16]
 80083e0:	d00c      	beq.n	80083fc <_scanf_float+0x350>
 80083e2:	2945      	cmp	r1, #69	@ 0x45
 80083e4:	d00a      	beq.n	80083fc <_scanf_float+0x350>
 80083e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083ea:	464a      	mov	r2, r9
 80083ec:	4640      	mov	r0, r8
 80083ee:	4798      	blx	r3
 80083f0:	6923      	ldr	r3, [r4, #16]
 80083f2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80083f6:	3b01      	subs	r3, #1
 80083f8:	1eb5      	subs	r5, r6, #2
 80083fa:	6123      	str	r3, [r4, #16]
 80083fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008400:	464a      	mov	r2, r9
 8008402:	4640      	mov	r0, r8
 8008404:	4798      	blx	r3
 8008406:	462e      	mov	r6, r5
 8008408:	6822      	ldr	r2, [r4, #0]
 800840a:	f012 0210 	ands.w	r2, r2, #16
 800840e:	d001      	beq.n	8008414 <_scanf_float+0x368>
 8008410:	2000      	movs	r0, #0
 8008412:	e68e      	b.n	8008132 <_scanf_float+0x86>
 8008414:	7032      	strb	r2, [r6, #0]
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800841c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008420:	d125      	bne.n	800846e <_scanf_float+0x3c2>
 8008422:	9b02      	ldr	r3, [sp, #8]
 8008424:	429f      	cmp	r7, r3
 8008426:	d00a      	beq.n	800843e <_scanf_float+0x392>
 8008428:	1bda      	subs	r2, r3, r7
 800842a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800842e:	429e      	cmp	r6, r3
 8008430:	bf28      	it	cs
 8008432:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008436:	4922      	ldr	r1, [pc, #136]	@ (80084c0 <_scanf_float+0x414>)
 8008438:	4630      	mov	r0, r6
 800843a:	f000 f9ad 	bl	8008798 <siprintf>
 800843e:	9901      	ldr	r1, [sp, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	4640      	mov	r0, r8
 8008444:	f7ff f944 	bl	80076d0 <_strtod_r>
 8008448:	9b03      	ldr	r3, [sp, #12]
 800844a:	6821      	ldr	r1, [r4, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f011 0f02 	tst.w	r1, #2
 8008452:	ec57 6b10 	vmov	r6, r7, d0
 8008456:	f103 0204 	add.w	r2, r3, #4
 800845a:	d015      	beq.n	8008488 <_scanf_float+0x3dc>
 800845c:	9903      	ldr	r1, [sp, #12]
 800845e:	600a      	str	r2, [r1, #0]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	e9c3 6700 	strd	r6, r7, [r3]
 8008466:	68e3      	ldr	r3, [r4, #12]
 8008468:	3301      	adds	r3, #1
 800846a:	60e3      	str	r3, [r4, #12]
 800846c:	e7d0      	b.n	8008410 <_scanf_float+0x364>
 800846e:	9b04      	ldr	r3, [sp, #16]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d0e4      	beq.n	800843e <_scanf_float+0x392>
 8008474:	9905      	ldr	r1, [sp, #20]
 8008476:	230a      	movs	r3, #10
 8008478:	3101      	adds	r1, #1
 800847a:	4640      	mov	r0, r8
 800847c:	f7ff f9b4 	bl	80077e8 <_strtol_r>
 8008480:	9b04      	ldr	r3, [sp, #16]
 8008482:	9e05      	ldr	r6, [sp, #20]
 8008484:	1ac2      	subs	r2, r0, r3
 8008486:	e7d0      	b.n	800842a <_scanf_float+0x37e>
 8008488:	f011 0f04 	tst.w	r1, #4
 800848c:	9903      	ldr	r1, [sp, #12]
 800848e:	600a      	str	r2, [r1, #0]
 8008490:	d1e6      	bne.n	8008460 <_scanf_float+0x3b4>
 8008492:	681d      	ldr	r5, [r3, #0]
 8008494:	4632      	mov	r2, r6
 8008496:	463b      	mov	r3, r7
 8008498:	4630      	mov	r0, r6
 800849a:	4639      	mov	r1, r7
 800849c:	f7f8 fb56 	bl	8000b4c <__aeabi_dcmpun>
 80084a0:	b128      	cbz	r0, 80084ae <_scanf_float+0x402>
 80084a2:	4808      	ldr	r0, [pc, #32]	@ (80084c4 <_scanf_float+0x418>)
 80084a4:	f000 fbd4 	bl	8008c50 <nanf>
 80084a8:	ed85 0a00 	vstr	s0, [r5]
 80084ac:	e7db      	b.n	8008466 <_scanf_float+0x3ba>
 80084ae:	4630      	mov	r0, r6
 80084b0:	4639      	mov	r1, r7
 80084b2:	f7f8 fba9 	bl	8000c08 <__aeabi_d2f>
 80084b6:	6028      	str	r0, [r5, #0]
 80084b8:	e7d5      	b.n	8008466 <_scanf_float+0x3ba>
 80084ba:	2700      	movs	r7, #0
 80084bc:	e62e      	b.n	800811c <_scanf_float+0x70>
 80084be:	bf00      	nop
 80084c0:	0800b8aa 	.word	0x0800b8aa
 80084c4:	0800b963 	.word	0x0800b963

080084c8 <std>:
 80084c8:	2300      	movs	r3, #0
 80084ca:	b510      	push	{r4, lr}
 80084cc:	4604      	mov	r4, r0
 80084ce:	e9c0 3300 	strd	r3, r3, [r0]
 80084d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084d6:	6083      	str	r3, [r0, #8]
 80084d8:	8181      	strh	r1, [r0, #12]
 80084da:	6643      	str	r3, [r0, #100]	@ 0x64
 80084dc:	81c2      	strh	r2, [r0, #14]
 80084de:	6183      	str	r3, [r0, #24]
 80084e0:	4619      	mov	r1, r3
 80084e2:	2208      	movs	r2, #8
 80084e4:	305c      	adds	r0, #92	@ 0x5c
 80084e6:	f000 fa8d 	bl	8008a04 <memset>
 80084ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008520 <std+0x58>)
 80084ec:	6263      	str	r3, [r4, #36]	@ 0x24
 80084ee:	4b0d      	ldr	r3, [pc, #52]	@ (8008524 <std+0x5c>)
 80084f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008528 <std+0x60>)
 80084f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084f6:	4b0d      	ldr	r3, [pc, #52]	@ (800852c <std+0x64>)
 80084f8:	6323      	str	r3, [r4, #48]	@ 0x30
 80084fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008530 <std+0x68>)
 80084fc:	6224      	str	r4, [r4, #32]
 80084fe:	429c      	cmp	r4, r3
 8008500:	d006      	beq.n	8008510 <std+0x48>
 8008502:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008506:	4294      	cmp	r4, r2
 8008508:	d002      	beq.n	8008510 <std+0x48>
 800850a:	33d0      	adds	r3, #208	@ 0xd0
 800850c:	429c      	cmp	r4, r3
 800850e:	d105      	bne.n	800851c <std+0x54>
 8008510:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008518:	f000 bb7e 	b.w	8008c18 <__retarget_lock_init_recursive>
 800851c:	bd10      	pop	{r4, pc}
 800851e:	bf00      	nop
 8008520:	080087dd 	.word	0x080087dd
 8008524:	080087ff 	.word	0x080087ff
 8008528:	08008837 	.word	0x08008837
 800852c:	0800885b 	.word	0x0800885b
 8008530:	20001cb0 	.word	0x20001cb0

08008534 <stdio_exit_handler>:
 8008534:	4a02      	ldr	r2, [pc, #8]	@ (8008540 <stdio_exit_handler+0xc>)
 8008536:	4903      	ldr	r1, [pc, #12]	@ (8008544 <stdio_exit_handler+0x10>)
 8008538:	4803      	ldr	r0, [pc, #12]	@ (8008548 <stdio_exit_handler+0x14>)
 800853a:	f000 b869 	b.w	8008610 <_fwalk_sglue>
 800853e:	bf00      	nop
 8008540:	20000074 	.word	0x20000074
 8008544:	0800b189 	.word	0x0800b189
 8008548:	200001f0 	.word	0x200001f0

0800854c <cleanup_stdio>:
 800854c:	6841      	ldr	r1, [r0, #4]
 800854e:	4b0c      	ldr	r3, [pc, #48]	@ (8008580 <cleanup_stdio+0x34>)
 8008550:	4299      	cmp	r1, r3
 8008552:	b510      	push	{r4, lr}
 8008554:	4604      	mov	r4, r0
 8008556:	d001      	beq.n	800855c <cleanup_stdio+0x10>
 8008558:	f002 fe16 	bl	800b188 <_fflush_r>
 800855c:	68a1      	ldr	r1, [r4, #8]
 800855e:	4b09      	ldr	r3, [pc, #36]	@ (8008584 <cleanup_stdio+0x38>)
 8008560:	4299      	cmp	r1, r3
 8008562:	d002      	beq.n	800856a <cleanup_stdio+0x1e>
 8008564:	4620      	mov	r0, r4
 8008566:	f002 fe0f 	bl	800b188 <_fflush_r>
 800856a:	68e1      	ldr	r1, [r4, #12]
 800856c:	4b06      	ldr	r3, [pc, #24]	@ (8008588 <cleanup_stdio+0x3c>)
 800856e:	4299      	cmp	r1, r3
 8008570:	d004      	beq.n	800857c <cleanup_stdio+0x30>
 8008572:	4620      	mov	r0, r4
 8008574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008578:	f002 be06 	b.w	800b188 <_fflush_r>
 800857c:	bd10      	pop	{r4, pc}
 800857e:	bf00      	nop
 8008580:	20001cb0 	.word	0x20001cb0
 8008584:	20001d18 	.word	0x20001d18
 8008588:	20001d80 	.word	0x20001d80

0800858c <global_stdio_init.part.0>:
 800858c:	b510      	push	{r4, lr}
 800858e:	4b0b      	ldr	r3, [pc, #44]	@ (80085bc <global_stdio_init.part.0+0x30>)
 8008590:	4c0b      	ldr	r4, [pc, #44]	@ (80085c0 <global_stdio_init.part.0+0x34>)
 8008592:	4a0c      	ldr	r2, [pc, #48]	@ (80085c4 <global_stdio_init.part.0+0x38>)
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	4620      	mov	r0, r4
 8008598:	2200      	movs	r2, #0
 800859a:	2104      	movs	r1, #4
 800859c:	f7ff ff94 	bl	80084c8 <std>
 80085a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085a4:	2201      	movs	r2, #1
 80085a6:	2109      	movs	r1, #9
 80085a8:	f7ff ff8e 	bl	80084c8 <std>
 80085ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085b0:	2202      	movs	r2, #2
 80085b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085b6:	2112      	movs	r1, #18
 80085b8:	f7ff bf86 	b.w	80084c8 <std>
 80085bc:	20001de8 	.word	0x20001de8
 80085c0:	20001cb0 	.word	0x20001cb0
 80085c4:	08008535 	.word	0x08008535

080085c8 <__sfp_lock_acquire>:
 80085c8:	4801      	ldr	r0, [pc, #4]	@ (80085d0 <__sfp_lock_acquire+0x8>)
 80085ca:	f000 bb26 	b.w	8008c1a <__retarget_lock_acquire_recursive>
 80085ce:	bf00      	nop
 80085d0:	20001df1 	.word	0x20001df1

080085d4 <__sfp_lock_release>:
 80085d4:	4801      	ldr	r0, [pc, #4]	@ (80085dc <__sfp_lock_release+0x8>)
 80085d6:	f000 bb21 	b.w	8008c1c <__retarget_lock_release_recursive>
 80085da:	bf00      	nop
 80085dc:	20001df1 	.word	0x20001df1

080085e0 <__sinit>:
 80085e0:	b510      	push	{r4, lr}
 80085e2:	4604      	mov	r4, r0
 80085e4:	f7ff fff0 	bl	80085c8 <__sfp_lock_acquire>
 80085e8:	6a23      	ldr	r3, [r4, #32]
 80085ea:	b11b      	cbz	r3, 80085f4 <__sinit+0x14>
 80085ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085f0:	f7ff bff0 	b.w	80085d4 <__sfp_lock_release>
 80085f4:	4b04      	ldr	r3, [pc, #16]	@ (8008608 <__sinit+0x28>)
 80085f6:	6223      	str	r3, [r4, #32]
 80085f8:	4b04      	ldr	r3, [pc, #16]	@ (800860c <__sinit+0x2c>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1f5      	bne.n	80085ec <__sinit+0xc>
 8008600:	f7ff ffc4 	bl	800858c <global_stdio_init.part.0>
 8008604:	e7f2      	b.n	80085ec <__sinit+0xc>
 8008606:	bf00      	nop
 8008608:	0800854d 	.word	0x0800854d
 800860c:	20001de8 	.word	0x20001de8

08008610 <_fwalk_sglue>:
 8008610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008614:	4607      	mov	r7, r0
 8008616:	4688      	mov	r8, r1
 8008618:	4614      	mov	r4, r2
 800861a:	2600      	movs	r6, #0
 800861c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008620:	f1b9 0901 	subs.w	r9, r9, #1
 8008624:	d505      	bpl.n	8008632 <_fwalk_sglue+0x22>
 8008626:	6824      	ldr	r4, [r4, #0]
 8008628:	2c00      	cmp	r4, #0
 800862a:	d1f7      	bne.n	800861c <_fwalk_sglue+0xc>
 800862c:	4630      	mov	r0, r6
 800862e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008632:	89ab      	ldrh	r3, [r5, #12]
 8008634:	2b01      	cmp	r3, #1
 8008636:	d907      	bls.n	8008648 <_fwalk_sglue+0x38>
 8008638:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800863c:	3301      	adds	r3, #1
 800863e:	d003      	beq.n	8008648 <_fwalk_sglue+0x38>
 8008640:	4629      	mov	r1, r5
 8008642:	4638      	mov	r0, r7
 8008644:	47c0      	blx	r8
 8008646:	4306      	orrs	r6, r0
 8008648:	3568      	adds	r5, #104	@ 0x68
 800864a:	e7e9      	b.n	8008620 <_fwalk_sglue+0x10>

0800864c <iprintf>:
 800864c:	b40f      	push	{r0, r1, r2, r3}
 800864e:	b507      	push	{r0, r1, r2, lr}
 8008650:	4906      	ldr	r1, [pc, #24]	@ (800866c <iprintf+0x20>)
 8008652:	ab04      	add	r3, sp, #16
 8008654:	6808      	ldr	r0, [r1, #0]
 8008656:	f853 2b04 	ldr.w	r2, [r3], #4
 800865a:	6881      	ldr	r1, [r0, #8]
 800865c:	9301      	str	r3, [sp, #4]
 800865e:	f002 fbf7 	bl	800ae50 <_vfiprintf_r>
 8008662:	b003      	add	sp, #12
 8008664:	f85d eb04 	ldr.w	lr, [sp], #4
 8008668:	b004      	add	sp, #16
 800866a:	4770      	bx	lr
 800866c:	200001ec 	.word	0x200001ec

08008670 <_puts_r>:
 8008670:	6a03      	ldr	r3, [r0, #32]
 8008672:	b570      	push	{r4, r5, r6, lr}
 8008674:	6884      	ldr	r4, [r0, #8]
 8008676:	4605      	mov	r5, r0
 8008678:	460e      	mov	r6, r1
 800867a:	b90b      	cbnz	r3, 8008680 <_puts_r+0x10>
 800867c:	f7ff ffb0 	bl	80085e0 <__sinit>
 8008680:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008682:	07db      	lsls	r3, r3, #31
 8008684:	d405      	bmi.n	8008692 <_puts_r+0x22>
 8008686:	89a3      	ldrh	r3, [r4, #12]
 8008688:	0598      	lsls	r0, r3, #22
 800868a:	d402      	bmi.n	8008692 <_puts_r+0x22>
 800868c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800868e:	f000 fac4 	bl	8008c1a <__retarget_lock_acquire_recursive>
 8008692:	89a3      	ldrh	r3, [r4, #12]
 8008694:	0719      	lsls	r1, r3, #28
 8008696:	d502      	bpl.n	800869e <_puts_r+0x2e>
 8008698:	6923      	ldr	r3, [r4, #16]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d135      	bne.n	800870a <_puts_r+0x9a>
 800869e:	4621      	mov	r1, r4
 80086a0:	4628      	mov	r0, r5
 80086a2:	f000 f959 	bl	8008958 <__swsetup_r>
 80086a6:	b380      	cbz	r0, 800870a <_puts_r+0x9a>
 80086a8:	f04f 35ff 	mov.w	r5, #4294967295
 80086ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80086ae:	07da      	lsls	r2, r3, #31
 80086b0:	d405      	bmi.n	80086be <_puts_r+0x4e>
 80086b2:	89a3      	ldrh	r3, [r4, #12]
 80086b4:	059b      	lsls	r3, r3, #22
 80086b6:	d402      	bmi.n	80086be <_puts_r+0x4e>
 80086b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80086ba:	f000 faaf 	bl	8008c1c <__retarget_lock_release_recursive>
 80086be:	4628      	mov	r0, r5
 80086c0:	bd70      	pop	{r4, r5, r6, pc}
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	da04      	bge.n	80086d0 <_puts_r+0x60>
 80086c6:	69a2      	ldr	r2, [r4, #24]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	dc17      	bgt.n	80086fc <_puts_r+0x8c>
 80086cc:	290a      	cmp	r1, #10
 80086ce:	d015      	beq.n	80086fc <_puts_r+0x8c>
 80086d0:	6823      	ldr	r3, [r4, #0]
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	6022      	str	r2, [r4, #0]
 80086d6:	7019      	strb	r1, [r3, #0]
 80086d8:	68a3      	ldr	r3, [r4, #8]
 80086da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80086de:	3b01      	subs	r3, #1
 80086e0:	60a3      	str	r3, [r4, #8]
 80086e2:	2900      	cmp	r1, #0
 80086e4:	d1ed      	bne.n	80086c2 <_puts_r+0x52>
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	da11      	bge.n	800870e <_puts_r+0x9e>
 80086ea:	4622      	mov	r2, r4
 80086ec:	210a      	movs	r1, #10
 80086ee:	4628      	mov	r0, r5
 80086f0:	f000 f8f4 	bl	80088dc <__swbuf_r>
 80086f4:	3001      	adds	r0, #1
 80086f6:	d0d7      	beq.n	80086a8 <_puts_r+0x38>
 80086f8:	250a      	movs	r5, #10
 80086fa:	e7d7      	b.n	80086ac <_puts_r+0x3c>
 80086fc:	4622      	mov	r2, r4
 80086fe:	4628      	mov	r0, r5
 8008700:	f000 f8ec 	bl	80088dc <__swbuf_r>
 8008704:	3001      	adds	r0, #1
 8008706:	d1e7      	bne.n	80086d8 <_puts_r+0x68>
 8008708:	e7ce      	b.n	80086a8 <_puts_r+0x38>
 800870a:	3e01      	subs	r6, #1
 800870c:	e7e4      	b.n	80086d8 <_puts_r+0x68>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	1c5a      	adds	r2, r3, #1
 8008712:	6022      	str	r2, [r4, #0]
 8008714:	220a      	movs	r2, #10
 8008716:	701a      	strb	r2, [r3, #0]
 8008718:	e7ee      	b.n	80086f8 <_puts_r+0x88>
	...

0800871c <puts>:
 800871c:	4b02      	ldr	r3, [pc, #8]	@ (8008728 <puts+0xc>)
 800871e:	4601      	mov	r1, r0
 8008720:	6818      	ldr	r0, [r3, #0]
 8008722:	f7ff bfa5 	b.w	8008670 <_puts_r>
 8008726:	bf00      	nop
 8008728:	200001ec 	.word	0x200001ec

0800872c <sniprintf>:
 800872c:	b40c      	push	{r2, r3}
 800872e:	b530      	push	{r4, r5, lr}
 8008730:	4b18      	ldr	r3, [pc, #96]	@ (8008794 <sniprintf+0x68>)
 8008732:	1e0c      	subs	r4, r1, #0
 8008734:	681d      	ldr	r5, [r3, #0]
 8008736:	b09d      	sub	sp, #116	@ 0x74
 8008738:	da08      	bge.n	800874c <sniprintf+0x20>
 800873a:	238b      	movs	r3, #139	@ 0x8b
 800873c:	602b      	str	r3, [r5, #0]
 800873e:	f04f 30ff 	mov.w	r0, #4294967295
 8008742:	b01d      	add	sp, #116	@ 0x74
 8008744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008748:	b002      	add	sp, #8
 800874a:	4770      	bx	lr
 800874c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008750:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	931b      	str	r3, [sp, #108]	@ 0x6c
 800875a:	bf14      	ite	ne
 800875c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008760:	4623      	moveq	r3, r4
 8008762:	9304      	str	r3, [sp, #16]
 8008764:	9307      	str	r3, [sp, #28]
 8008766:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800876a:	9002      	str	r0, [sp, #8]
 800876c:	9006      	str	r0, [sp, #24]
 800876e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008772:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008774:	ab21      	add	r3, sp, #132	@ 0x84
 8008776:	a902      	add	r1, sp, #8
 8008778:	4628      	mov	r0, r5
 800877a:	9301      	str	r3, [sp, #4]
 800877c:	f002 fa42 	bl	800ac04 <_svfiprintf_r>
 8008780:	1c43      	adds	r3, r0, #1
 8008782:	bfbc      	itt	lt
 8008784:	238b      	movlt	r3, #139	@ 0x8b
 8008786:	602b      	strlt	r3, [r5, #0]
 8008788:	2c00      	cmp	r4, #0
 800878a:	d0da      	beq.n	8008742 <sniprintf+0x16>
 800878c:	9b02      	ldr	r3, [sp, #8]
 800878e:	2200      	movs	r2, #0
 8008790:	701a      	strb	r2, [r3, #0]
 8008792:	e7d6      	b.n	8008742 <sniprintf+0x16>
 8008794:	200001ec 	.word	0x200001ec

08008798 <siprintf>:
 8008798:	b40e      	push	{r1, r2, r3}
 800879a:	b510      	push	{r4, lr}
 800879c:	b09d      	sub	sp, #116	@ 0x74
 800879e:	ab1f      	add	r3, sp, #124	@ 0x7c
 80087a0:	9002      	str	r0, [sp, #8]
 80087a2:	9006      	str	r0, [sp, #24]
 80087a4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80087a8:	480a      	ldr	r0, [pc, #40]	@ (80087d4 <siprintf+0x3c>)
 80087aa:	9107      	str	r1, [sp, #28]
 80087ac:	9104      	str	r1, [sp, #16]
 80087ae:	490a      	ldr	r1, [pc, #40]	@ (80087d8 <siprintf+0x40>)
 80087b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80087b4:	9105      	str	r1, [sp, #20]
 80087b6:	2400      	movs	r4, #0
 80087b8:	a902      	add	r1, sp, #8
 80087ba:	6800      	ldr	r0, [r0, #0]
 80087bc:	9301      	str	r3, [sp, #4]
 80087be:	941b      	str	r4, [sp, #108]	@ 0x6c
 80087c0:	f002 fa20 	bl	800ac04 <_svfiprintf_r>
 80087c4:	9b02      	ldr	r3, [sp, #8]
 80087c6:	701c      	strb	r4, [r3, #0]
 80087c8:	b01d      	add	sp, #116	@ 0x74
 80087ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087ce:	b003      	add	sp, #12
 80087d0:	4770      	bx	lr
 80087d2:	bf00      	nop
 80087d4:	200001ec 	.word	0x200001ec
 80087d8:	ffff0208 	.word	0xffff0208

080087dc <__sread>:
 80087dc:	b510      	push	{r4, lr}
 80087de:	460c      	mov	r4, r1
 80087e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e4:	f000 f9ca 	bl	8008b7c <_read_r>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	bfab      	itete	ge
 80087ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80087ee:	89a3      	ldrhlt	r3, [r4, #12]
 80087f0:	181b      	addge	r3, r3, r0
 80087f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80087f6:	bfac      	ite	ge
 80087f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80087fa:	81a3      	strhlt	r3, [r4, #12]
 80087fc:	bd10      	pop	{r4, pc}

080087fe <__swrite>:
 80087fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008802:	461f      	mov	r7, r3
 8008804:	898b      	ldrh	r3, [r1, #12]
 8008806:	05db      	lsls	r3, r3, #23
 8008808:	4605      	mov	r5, r0
 800880a:	460c      	mov	r4, r1
 800880c:	4616      	mov	r6, r2
 800880e:	d505      	bpl.n	800881c <__swrite+0x1e>
 8008810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008814:	2302      	movs	r3, #2
 8008816:	2200      	movs	r2, #0
 8008818:	f000 f99e 	bl	8008b58 <_lseek_r>
 800881c:	89a3      	ldrh	r3, [r4, #12]
 800881e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008822:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008826:	81a3      	strh	r3, [r4, #12]
 8008828:	4632      	mov	r2, r6
 800882a:	463b      	mov	r3, r7
 800882c:	4628      	mov	r0, r5
 800882e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008832:	f000 b9b5 	b.w	8008ba0 <_write_r>

08008836 <__sseek>:
 8008836:	b510      	push	{r4, lr}
 8008838:	460c      	mov	r4, r1
 800883a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800883e:	f000 f98b 	bl	8008b58 <_lseek_r>
 8008842:	1c43      	adds	r3, r0, #1
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	bf15      	itete	ne
 8008848:	6560      	strne	r0, [r4, #84]	@ 0x54
 800884a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800884e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008852:	81a3      	strheq	r3, [r4, #12]
 8008854:	bf18      	it	ne
 8008856:	81a3      	strhne	r3, [r4, #12]
 8008858:	bd10      	pop	{r4, pc}

0800885a <__sclose>:
 800885a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800885e:	f000 b96b 	b.w	8008b38 <_close_r>

08008862 <_vsniprintf_r>:
 8008862:	b530      	push	{r4, r5, lr}
 8008864:	4614      	mov	r4, r2
 8008866:	2c00      	cmp	r4, #0
 8008868:	b09b      	sub	sp, #108	@ 0x6c
 800886a:	4605      	mov	r5, r0
 800886c:	461a      	mov	r2, r3
 800886e:	da05      	bge.n	800887c <_vsniprintf_r+0x1a>
 8008870:	238b      	movs	r3, #139	@ 0x8b
 8008872:	6003      	str	r3, [r0, #0]
 8008874:	f04f 30ff 	mov.w	r0, #4294967295
 8008878:	b01b      	add	sp, #108	@ 0x6c
 800887a:	bd30      	pop	{r4, r5, pc}
 800887c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008880:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008884:	f04f 0300 	mov.w	r3, #0
 8008888:	9319      	str	r3, [sp, #100]	@ 0x64
 800888a:	bf14      	ite	ne
 800888c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008890:	4623      	moveq	r3, r4
 8008892:	9302      	str	r3, [sp, #8]
 8008894:	9305      	str	r3, [sp, #20]
 8008896:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800889a:	9100      	str	r1, [sp, #0]
 800889c:	9104      	str	r1, [sp, #16]
 800889e:	f8ad 300e 	strh.w	r3, [sp, #14]
 80088a2:	4669      	mov	r1, sp
 80088a4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80088a6:	f002 f9ad 	bl	800ac04 <_svfiprintf_r>
 80088aa:	1c43      	adds	r3, r0, #1
 80088ac:	bfbc      	itt	lt
 80088ae:	238b      	movlt	r3, #139	@ 0x8b
 80088b0:	602b      	strlt	r3, [r5, #0]
 80088b2:	2c00      	cmp	r4, #0
 80088b4:	d0e0      	beq.n	8008878 <_vsniprintf_r+0x16>
 80088b6:	9b00      	ldr	r3, [sp, #0]
 80088b8:	2200      	movs	r2, #0
 80088ba:	701a      	strb	r2, [r3, #0]
 80088bc:	e7dc      	b.n	8008878 <_vsniprintf_r+0x16>
	...

080088c0 <vsniprintf>:
 80088c0:	b507      	push	{r0, r1, r2, lr}
 80088c2:	9300      	str	r3, [sp, #0]
 80088c4:	4613      	mov	r3, r2
 80088c6:	460a      	mov	r2, r1
 80088c8:	4601      	mov	r1, r0
 80088ca:	4803      	ldr	r0, [pc, #12]	@ (80088d8 <vsniprintf+0x18>)
 80088cc:	6800      	ldr	r0, [r0, #0]
 80088ce:	f7ff ffc8 	bl	8008862 <_vsniprintf_r>
 80088d2:	b003      	add	sp, #12
 80088d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80088d8:	200001ec 	.word	0x200001ec

080088dc <__swbuf_r>:
 80088dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088de:	460e      	mov	r6, r1
 80088e0:	4614      	mov	r4, r2
 80088e2:	4605      	mov	r5, r0
 80088e4:	b118      	cbz	r0, 80088ee <__swbuf_r+0x12>
 80088e6:	6a03      	ldr	r3, [r0, #32]
 80088e8:	b90b      	cbnz	r3, 80088ee <__swbuf_r+0x12>
 80088ea:	f7ff fe79 	bl	80085e0 <__sinit>
 80088ee:	69a3      	ldr	r3, [r4, #24]
 80088f0:	60a3      	str	r3, [r4, #8]
 80088f2:	89a3      	ldrh	r3, [r4, #12]
 80088f4:	071a      	lsls	r2, r3, #28
 80088f6:	d501      	bpl.n	80088fc <__swbuf_r+0x20>
 80088f8:	6923      	ldr	r3, [r4, #16]
 80088fa:	b943      	cbnz	r3, 800890e <__swbuf_r+0x32>
 80088fc:	4621      	mov	r1, r4
 80088fe:	4628      	mov	r0, r5
 8008900:	f000 f82a 	bl	8008958 <__swsetup_r>
 8008904:	b118      	cbz	r0, 800890e <__swbuf_r+0x32>
 8008906:	f04f 37ff 	mov.w	r7, #4294967295
 800890a:	4638      	mov	r0, r7
 800890c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	6922      	ldr	r2, [r4, #16]
 8008912:	1a98      	subs	r0, r3, r2
 8008914:	6963      	ldr	r3, [r4, #20]
 8008916:	b2f6      	uxtb	r6, r6
 8008918:	4283      	cmp	r3, r0
 800891a:	4637      	mov	r7, r6
 800891c:	dc05      	bgt.n	800892a <__swbuf_r+0x4e>
 800891e:	4621      	mov	r1, r4
 8008920:	4628      	mov	r0, r5
 8008922:	f002 fc31 	bl	800b188 <_fflush_r>
 8008926:	2800      	cmp	r0, #0
 8008928:	d1ed      	bne.n	8008906 <__swbuf_r+0x2a>
 800892a:	68a3      	ldr	r3, [r4, #8]
 800892c:	3b01      	subs	r3, #1
 800892e:	60a3      	str	r3, [r4, #8]
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	1c5a      	adds	r2, r3, #1
 8008934:	6022      	str	r2, [r4, #0]
 8008936:	701e      	strb	r6, [r3, #0]
 8008938:	6962      	ldr	r2, [r4, #20]
 800893a:	1c43      	adds	r3, r0, #1
 800893c:	429a      	cmp	r2, r3
 800893e:	d004      	beq.n	800894a <__swbuf_r+0x6e>
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	07db      	lsls	r3, r3, #31
 8008944:	d5e1      	bpl.n	800890a <__swbuf_r+0x2e>
 8008946:	2e0a      	cmp	r6, #10
 8008948:	d1df      	bne.n	800890a <__swbuf_r+0x2e>
 800894a:	4621      	mov	r1, r4
 800894c:	4628      	mov	r0, r5
 800894e:	f002 fc1b 	bl	800b188 <_fflush_r>
 8008952:	2800      	cmp	r0, #0
 8008954:	d0d9      	beq.n	800890a <__swbuf_r+0x2e>
 8008956:	e7d6      	b.n	8008906 <__swbuf_r+0x2a>

08008958 <__swsetup_r>:
 8008958:	b538      	push	{r3, r4, r5, lr}
 800895a:	4b29      	ldr	r3, [pc, #164]	@ (8008a00 <__swsetup_r+0xa8>)
 800895c:	4605      	mov	r5, r0
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	460c      	mov	r4, r1
 8008962:	b118      	cbz	r0, 800896c <__swsetup_r+0x14>
 8008964:	6a03      	ldr	r3, [r0, #32]
 8008966:	b90b      	cbnz	r3, 800896c <__swsetup_r+0x14>
 8008968:	f7ff fe3a 	bl	80085e0 <__sinit>
 800896c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008970:	0719      	lsls	r1, r3, #28
 8008972:	d422      	bmi.n	80089ba <__swsetup_r+0x62>
 8008974:	06da      	lsls	r2, r3, #27
 8008976:	d407      	bmi.n	8008988 <__swsetup_r+0x30>
 8008978:	2209      	movs	r2, #9
 800897a:	602a      	str	r2, [r5, #0]
 800897c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008980:	81a3      	strh	r3, [r4, #12]
 8008982:	f04f 30ff 	mov.w	r0, #4294967295
 8008986:	e033      	b.n	80089f0 <__swsetup_r+0x98>
 8008988:	0758      	lsls	r0, r3, #29
 800898a:	d512      	bpl.n	80089b2 <__swsetup_r+0x5a>
 800898c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800898e:	b141      	cbz	r1, 80089a2 <__swsetup_r+0x4a>
 8008990:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008994:	4299      	cmp	r1, r3
 8008996:	d002      	beq.n	800899e <__swsetup_r+0x46>
 8008998:	4628      	mov	r0, r5
 800899a:	f000 ffd5 	bl	8009948 <_free_r>
 800899e:	2300      	movs	r3, #0
 80089a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80089a2:	89a3      	ldrh	r3, [r4, #12]
 80089a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80089a8:	81a3      	strh	r3, [r4, #12]
 80089aa:	2300      	movs	r3, #0
 80089ac:	6063      	str	r3, [r4, #4]
 80089ae:	6923      	ldr	r3, [r4, #16]
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	f043 0308 	orr.w	r3, r3, #8
 80089b8:	81a3      	strh	r3, [r4, #12]
 80089ba:	6923      	ldr	r3, [r4, #16]
 80089bc:	b94b      	cbnz	r3, 80089d2 <__swsetup_r+0x7a>
 80089be:	89a3      	ldrh	r3, [r4, #12]
 80089c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80089c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089c8:	d003      	beq.n	80089d2 <__swsetup_r+0x7a>
 80089ca:	4621      	mov	r1, r4
 80089cc:	4628      	mov	r0, r5
 80089ce:	f002 fc3b 	bl	800b248 <__smakebuf_r>
 80089d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d6:	f013 0201 	ands.w	r2, r3, #1
 80089da:	d00a      	beq.n	80089f2 <__swsetup_r+0x9a>
 80089dc:	2200      	movs	r2, #0
 80089de:	60a2      	str	r2, [r4, #8]
 80089e0:	6962      	ldr	r2, [r4, #20]
 80089e2:	4252      	negs	r2, r2
 80089e4:	61a2      	str	r2, [r4, #24]
 80089e6:	6922      	ldr	r2, [r4, #16]
 80089e8:	b942      	cbnz	r2, 80089fc <__swsetup_r+0xa4>
 80089ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80089ee:	d1c5      	bne.n	800897c <__swsetup_r+0x24>
 80089f0:	bd38      	pop	{r3, r4, r5, pc}
 80089f2:	0799      	lsls	r1, r3, #30
 80089f4:	bf58      	it	pl
 80089f6:	6962      	ldrpl	r2, [r4, #20]
 80089f8:	60a2      	str	r2, [r4, #8]
 80089fa:	e7f4      	b.n	80089e6 <__swsetup_r+0x8e>
 80089fc:	2000      	movs	r0, #0
 80089fe:	e7f7      	b.n	80089f0 <__swsetup_r+0x98>
 8008a00:	200001ec 	.word	0x200001ec

08008a04 <memset>:
 8008a04:	4402      	add	r2, r0
 8008a06:	4603      	mov	r3, r0
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d100      	bne.n	8008a0e <memset+0xa>
 8008a0c:	4770      	bx	lr
 8008a0e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a12:	e7f9      	b.n	8008a08 <memset+0x4>

08008a14 <strchr>:
 8008a14:	b2c9      	uxtb	r1, r1
 8008a16:	4603      	mov	r3, r0
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a1e:	b112      	cbz	r2, 8008a26 <strchr+0x12>
 8008a20:	428a      	cmp	r2, r1
 8008a22:	d1f9      	bne.n	8008a18 <strchr+0x4>
 8008a24:	4770      	bx	lr
 8008a26:	2900      	cmp	r1, #0
 8008a28:	bf18      	it	ne
 8008a2a:	2000      	movne	r0, #0
 8008a2c:	4770      	bx	lr

08008a2e <strncmp>:
 8008a2e:	b510      	push	{r4, lr}
 8008a30:	b16a      	cbz	r2, 8008a4e <strncmp+0x20>
 8008a32:	3901      	subs	r1, #1
 8008a34:	1884      	adds	r4, r0, r2
 8008a36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a3a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d103      	bne.n	8008a4a <strncmp+0x1c>
 8008a42:	42a0      	cmp	r0, r4
 8008a44:	d001      	beq.n	8008a4a <strncmp+0x1c>
 8008a46:	2a00      	cmp	r2, #0
 8008a48:	d1f5      	bne.n	8008a36 <strncmp+0x8>
 8008a4a:	1ad0      	subs	r0, r2, r3
 8008a4c:	bd10      	pop	{r4, pc}
 8008a4e:	4610      	mov	r0, r2
 8008a50:	e7fc      	b.n	8008a4c <strncmp+0x1e>

08008a52 <strncpy>:
 8008a52:	b510      	push	{r4, lr}
 8008a54:	3901      	subs	r1, #1
 8008a56:	4603      	mov	r3, r0
 8008a58:	b132      	cbz	r2, 8008a68 <strncpy+0x16>
 8008a5a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008a5e:	f803 4b01 	strb.w	r4, [r3], #1
 8008a62:	3a01      	subs	r2, #1
 8008a64:	2c00      	cmp	r4, #0
 8008a66:	d1f7      	bne.n	8008a58 <strncpy+0x6>
 8008a68:	441a      	add	r2, r3
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d100      	bne.n	8008a72 <strncpy+0x20>
 8008a70:	bd10      	pop	{r4, pc}
 8008a72:	f803 1b01 	strb.w	r1, [r3], #1
 8008a76:	e7f9      	b.n	8008a6c <strncpy+0x1a>

08008a78 <strtok>:
 8008a78:	4b16      	ldr	r3, [pc, #88]	@ (8008ad4 <strtok+0x5c>)
 8008a7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a7e:	681f      	ldr	r7, [r3, #0]
 8008a80:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008a82:	4605      	mov	r5, r0
 8008a84:	460e      	mov	r6, r1
 8008a86:	b9ec      	cbnz	r4, 8008ac4 <strtok+0x4c>
 8008a88:	2050      	movs	r0, #80	@ 0x50
 8008a8a:	f001 fae1 	bl	800a050 <malloc>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	6478      	str	r0, [r7, #68]	@ 0x44
 8008a92:	b920      	cbnz	r0, 8008a9e <strtok+0x26>
 8008a94:	4b10      	ldr	r3, [pc, #64]	@ (8008ad8 <strtok+0x60>)
 8008a96:	4811      	ldr	r0, [pc, #68]	@ (8008adc <strtok+0x64>)
 8008a98:	215b      	movs	r1, #91	@ 0x5b
 8008a9a:	f000 f8df 	bl	8008c5c <__assert_func>
 8008a9e:	e9c0 4400 	strd	r4, r4, [r0]
 8008aa2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008aa6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008aaa:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008aae:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008ab2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008ab6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008aba:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008abe:	6184      	str	r4, [r0, #24]
 8008ac0:	7704      	strb	r4, [r0, #28]
 8008ac2:	6244      	str	r4, [r0, #36]	@ 0x24
 8008ac4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ac6:	4631      	mov	r1, r6
 8008ac8:	4628      	mov	r0, r5
 8008aca:	2301      	movs	r3, #1
 8008acc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad0:	f000 b806 	b.w	8008ae0 <__strtok_r>
 8008ad4:	200001ec 	.word	0x200001ec
 8008ad8:	0800b8af 	.word	0x0800b8af
 8008adc:	0800b8c6 	.word	0x0800b8c6

08008ae0 <__strtok_r>:
 8008ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008ae2:	4604      	mov	r4, r0
 8008ae4:	b908      	cbnz	r0, 8008aea <__strtok_r+0xa>
 8008ae6:	6814      	ldr	r4, [r2, #0]
 8008ae8:	b144      	cbz	r4, 8008afc <__strtok_r+0x1c>
 8008aea:	4620      	mov	r0, r4
 8008aec:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008af0:	460f      	mov	r7, r1
 8008af2:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008af6:	b91e      	cbnz	r6, 8008b00 <__strtok_r+0x20>
 8008af8:	b965      	cbnz	r5, 8008b14 <__strtok_r+0x34>
 8008afa:	6015      	str	r5, [r2, #0]
 8008afc:	2000      	movs	r0, #0
 8008afe:	e005      	b.n	8008b0c <__strtok_r+0x2c>
 8008b00:	42b5      	cmp	r5, r6
 8008b02:	d1f6      	bne.n	8008af2 <__strtok_r+0x12>
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d1f0      	bne.n	8008aea <__strtok_r+0xa>
 8008b08:	6014      	str	r4, [r2, #0]
 8008b0a:	7003      	strb	r3, [r0, #0]
 8008b0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b0e:	461c      	mov	r4, r3
 8008b10:	e00c      	b.n	8008b2c <__strtok_r+0x4c>
 8008b12:	b91d      	cbnz	r5, 8008b1c <__strtok_r+0x3c>
 8008b14:	4627      	mov	r7, r4
 8008b16:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b1a:	460e      	mov	r6, r1
 8008b1c:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008b20:	42ab      	cmp	r3, r5
 8008b22:	d1f6      	bne.n	8008b12 <__strtok_r+0x32>
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d0f2      	beq.n	8008b0e <__strtok_r+0x2e>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	703b      	strb	r3, [r7, #0]
 8008b2c:	6014      	str	r4, [r2, #0]
 8008b2e:	e7ed      	b.n	8008b0c <__strtok_r+0x2c>

08008b30 <_localeconv_r>:
 8008b30:	4800      	ldr	r0, [pc, #0]	@ (8008b34 <_localeconv_r+0x4>)
 8008b32:	4770      	bx	lr
 8008b34:	20000170 	.word	0x20000170

08008b38 <_close_r>:
 8008b38:	b538      	push	{r3, r4, r5, lr}
 8008b3a:	4d06      	ldr	r5, [pc, #24]	@ (8008b54 <_close_r+0x1c>)
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	4604      	mov	r4, r0
 8008b40:	4608      	mov	r0, r1
 8008b42:	602b      	str	r3, [r5, #0]
 8008b44:	f7f8 fcb4 	bl	80014b0 <_close>
 8008b48:	1c43      	adds	r3, r0, #1
 8008b4a:	d102      	bne.n	8008b52 <_close_r+0x1a>
 8008b4c:	682b      	ldr	r3, [r5, #0]
 8008b4e:	b103      	cbz	r3, 8008b52 <_close_r+0x1a>
 8008b50:	6023      	str	r3, [r4, #0]
 8008b52:	bd38      	pop	{r3, r4, r5, pc}
 8008b54:	20001dec 	.word	0x20001dec

08008b58 <_lseek_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4d07      	ldr	r5, [pc, #28]	@ (8008b78 <_lseek_r+0x20>)
 8008b5c:	4604      	mov	r4, r0
 8008b5e:	4608      	mov	r0, r1
 8008b60:	4611      	mov	r1, r2
 8008b62:	2200      	movs	r2, #0
 8008b64:	602a      	str	r2, [r5, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	f7f8 fcc9 	bl	80014fe <_lseek>
 8008b6c:	1c43      	adds	r3, r0, #1
 8008b6e:	d102      	bne.n	8008b76 <_lseek_r+0x1e>
 8008b70:	682b      	ldr	r3, [r5, #0]
 8008b72:	b103      	cbz	r3, 8008b76 <_lseek_r+0x1e>
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	bd38      	pop	{r3, r4, r5, pc}
 8008b78:	20001dec 	.word	0x20001dec

08008b7c <_read_r>:
 8008b7c:	b538      	push	{r3, r4, r5, lr}
 8008b7e:	4d07      	ldr	r5, [pc, #28]	@ (8008b9c <_read_r+0x20>)
 8008b80:	4604      	mov	r4, r0
 8008b82:	4608      	mov	r0, r1
 8008b84:	4611      	mov	r1, r2
 8008b86:	2200      	movs	r2, #0
 8008b88:	602a      	str	r2, [r5, #0]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	f7f8 fc57 	bl	800143e <_read>
 8008b90:	1c43      	adds	r3, r0, #1
 8008b92:	d102      	bne.n	8008b9a <_read_r+0x1e>
 8008b94:	682b      	ldr	r3, [r5, #0]
 8008b96:	b103      	cbz	r3, 8008b9a <_read_r+0x1e>
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	bd38      	pop	{r3, r4, r5, pc}
 8008b9c:	20001dec 	.word	0x20001dec

08008ba0 <_write_r>:
 8008ba0:	b538      	push	{r3, r4, r5, lr}
 8008ba2:	4d07      	ldr	r5, [pc, #28]	@ (8008bc0 <_write_r+0x20>)
 8008ba4:	4604      	mov	r4, r0
 8008ba6:	4608      	mov	r0, r1
 8008ba8:	4611      	mov	r1, r2
 8008baa:	2200      	movs	r2, #0
 8008bac:	602a      	str	r2, [r5, #0]
 8008bae:	461a      	mov	r2, r3
 8008bb0:	f7f8 fc62 	bl	8001478 <_write>
 8008bb4:	1c43      	adds	r3, r0, #1
 8008bb6:	d102      	bne.n	8008bbe <_write_r+0x1e>
 8008bb8:	682b      	ldr	r3, [r5, #0]
 8008bba:	b103      	cbz	r3, 8008bbe <_write_r+0x1e>
 8008bbc:	6023      	str	r3, [r4, #0]
 8008bbe:	bd38      	pop	{r3, r4, r5, pc}
 8008bc0:	20001dec 	.word	0x20001dec

08008bc4 <__errno>:
 8008bc4:	4b01      	ldr	r3, [pc, #4]	@ (8008bcc <__errno+0x8>)
 8008bc6:	6818      	ldr	r0, [r3, #0]
 8008bc8:	4770      	bx	lr
 8008bca:	bf00      	nop
 8008bcc:	200001ec 	.word	0x200001ec

08008bd0 <__libc_init_array>:
 8008bd0:	b570      	push	{r4, r5, r6, lr}
 8008bd2:	4d0d      	ldr	r5, [pc, #52]	@ (8008c08 <__libc_init_array+0x38>)
 8008bd4:	4c0d      	ldr	r4, [pc, #52]	@ (8008c0c <__libc_init_array+0x3c>)
 8008bd6:	1b64      	subs	r4, r4, r5
 8008bd8:	10a4      	asrs	r4, r4, #2
 8008bda:	2600      	movs	r6, #0
 8008bdc:	42a6      	cmp	r6, r4
 8008bde:	d109      	bne.n	8008bf4 <__libc_init_array+0x24>
 8008be0:	4d0b      	ldr	r5, [pc, #44]	@ (8008c10 <__libc_init_array+0x40>)
 8008be2:	4c0c      	ldr	r4, [pc, #48]	@ (8008c14 <__libc_init_array+0x44>)
 8008be4:	f002 fc4e 	bl	800b484 <_init>
 8008be8:	1b64      	subs	r4, r4, r5
 8008bea:	10a4      	asrs	r4, r4, #2
 8008bec:	2600      	movs	r6, #0
 8008bee:	42a6      	cmp	r6, r4
 8008bf0:	d105      	bne.n	8008bfe <__libc_init_array+0x2e>
 8008bf2:	bd70      	pop	{r4, r5, r6, pc}
 8008bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bf8:	4798      	blx	r3
 8008bfa:	3601      	adds	r6, #1
 8008bfc:	e7ee      	b.n	8008bdc <__libc_init_array+0xc>
 8008bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c02:	4798      	blx	r3
 8008c04:	3601      	adds	r6, #1
 8008c06:	e7f2      	b.n	8008bee <__libc_init_array+0x1e>
 8008c08:	0800bd00 	.word	0x0800bd00
 8008c0c:	0800bd00 	.word	0x0800bd00
 8008c10:	0800bd00 	.word	0x0800bd00
 8008c14:	0800bd04 	.word	0x0800bd04

08008c18 <__retarget_lock_init_recursive>:
 8008c18:	4770      	bx	lr

08008c1a <__retarget_lock_acquire_recursive>:
 8008c1a:	4770      	bx	lr

08008c1c <__retarget_lock_release_recursive>:
 8008c1c:	4770      	bx	lr

08008c1e <memcpy>:
 8008c1e:	440a      	add	r2, r1
 8008c20:	4291      	cmp	r1, r2
 8008c22:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c26:	d100      	bne.n	8008c2a <memcpy+0xc>
 8008c28:	4770      	bx	lr
 8008c2a:	b510      	push	{r4, lr}
 8008c2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c30:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c34:	4291      	cmp	r1, r2
 8008c36:	d1f9      	bne.n	8008c2c <memcpy+0xe>
 8008c38:	bd10      	pop	{r4, pc}
 8008c3a:	0000      	movs	r0, r0
 8008c3c:	0000      	movs	r0, r0
	...

08008c40 <nan>:
 8008c40:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008c48 <nan+0x8>
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	00000000 	.word	0x00000000
 8008c4c:	7ff80000 	.word	0x7ff80000

08008c50 <nanf>:
 8008c50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008c58 <nanf+0x8>
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	7fc00000 	.word	0x7fc00000

08008c5c <__assert_func>:
 8008c5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c5e:	4614      	mov	r4, r2
 8008c60:	461a      	mov	r2, r3
 8008c62:	4b09      	ldr	r3, [pc, #36]	@ (8008c88 <__assert_func+0x2c>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4605      	mov	r5, r0
 8008c68:	68d8      	ldr	r0, [r3, #12]
 8008c6a:	b14c      	cbz	r4, 8008c80 <__assert_func+0x24>
 8008c6c:	4b07      	ldr	r3, [pc, #28]	@ (8008c8c <__assert_func+0x30>)
 8008c6e:	9100      	str	r1, [sp, #0]
 8008c70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008c74:	4906      	ldr	r1, [pc, #24]	@ (8008c90 <__assert_func+0x34>)
 8008c76:	462b      	mov	r3, r5
 8008c78:	f002 faae 	bl	800b1d8 <fiprintf>
 8008c7c:	f002 fb6c 	bl	800b358 <abort>
 8008c80:	4b04      	ldr	r3, [pc, #16]	@ (8008c94 <__assert_func+0x38>)
 8008c82:	461c      	mov	r4, r3
 8008c84:	e7f3      	b.n	8008c6e <__assert_func+0x12>
 8008c86:	bf00      	nop
 8008c88:	200001ec 	.word	0x200001ec
 8008c8c:	0800b928 	.word	0x0800b928
 8008c90:	0800b935 	.word	0x0800b935
 8008c94:	0800b963 	.word	0x0800b963

08008c98 <quorem>:
 8008c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c9c:	6903      	ldr	r3, [r0, #16]
 8008c9e:	690c      	ldr	r4, [r1, #16]
 8008ca0:	42a3      	cmp	r3, r4
 8008ca2:	4607      	mov	r7, r0
 8008ca4:	db7e      	blt.n	8008da4 <quorem+0x10c>
 8008ca6:	3c01      	subs	r4, #1
 8008ca8:	f101 0814 	add.w	r8, r1, #20
 8008cac:	00a3      	lsls	r3, r4, #2
 8008cae:	f100 0514 	add.w	r5, r0, #20
 8008cb2:	9300      	str	r3, [sp, #0]
 8008cb4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cb8:	9301      	str	r3, [sp, #4]
 8008cba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cbe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cca:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cce:	d32e      	bcc.n	8008d2e <quorem+0x96>
 8008cd0:	f04f 0a00 	mov.w	sl, #0
 8008cd4:	46c4      	mov	ip, r8
 8008cd6:	46ae      	mov	lr, r5
 8008cd8:	46d3      	mov	fp, sl
 8008cda:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008cde:	b298      	uxth	r0, r3
 8008ce0:	fb06 a000 	mla	r0, r6, r0, sl
 8008ce4:	0c02      	lsrs	r2, r0, #16
 8008ce6:	0c1b      	lsrs	r3, r3, #16
 8008ce8:	fb06 2303 	mla	r3, r6, r3, r2
 8008cec:	f8de 2000 	ldr.w	r2, [lr]
 8008cf0:	b280      	uxth	r0, r0
 8008cf2:	b292      	uxth	r2, r2
 8008cf4:	1a12      	subs	r2, r2, r0
 8008cf6:	445a      	add	r2, fp
 8008cf8:	f8de 0000 	ldr.w	r0, [lr]
 8008cfc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008d06:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008d0a:	b292      	uxth	r2, r2
 8008d0c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008d10:	45e1      	cmp	r9, ip
 8008d12:	f84e 2b04 	str.w	r2, [lr], #4
 8008d16:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008d1a:	d2de      	bcs.n	8008cda <quorem+0x42>
 8008d1c:	9b00      	ldr	r3, [sp, #0]
 8008d1e:	58eb      	ldr	r3, [r5, r3]
 8008d20:	b92b      	cbnz	r3, 8008d2e <quorem+0x96>
 8008d22:	9b01      	ldr	r3, [sp, #4]
 8008d24:	3b04      	subs	r3, #4
 8008d26:	429d      	cmp	r5, r3
 8008d28:	461a      	mov	r2, r3
 8008d2a:	d32f      	bcc.n	8008d8c <quorem+0xf4>
 8008d2c:	613c      	str	r4, [r7, #16]
 8008d2e:	4638      	mov	r0, r7
 8008d30:	f001 fd12 	bl	800a758 <__mcmp>
 8008d34:	2800      	cmp	r0, #0
 8008d36:	db25      	blt.n	8008d84 <quorem+0xec>
 8008d38:	4629      	mov	r1, r5
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d40:	f8d1 c000 	ldr.w	ip, [r1]
 8008d44:	fa1f fe82 	uxth.w	lr, r2
 8008d48:	fa1f f38c 	uxth.w	r3, ip
 8008d4c:	eba3 030e 	sub.w	r3, r3, lr
 8008d50:	4403      	add	r3, r0
 8008d52:	0c12      	lsrs	r2, r2, #16
 8008d54:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008d58:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d62:	45c1      	cmp	r9, r8
 8008d64:	f841 3b04 	str.w	r3, [r1], #4
 8008d68:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d6c:	d2e6      	bcs.n	8008d3c <quorem+0xa4>
 8008d6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d76:	b922      	cbnz	r2, 8008d82 <quorem+0xea>
 8008d78:	3b04      	subs	r3, #4
 8008d7a:	429d      	cmp	r5, r3
 8008d7c:	461a      	mov	r2, r3
 8008d7e:	d30b      	bcc.n	8008d98 <quorem+0x100>
 8008d80:	613c      	str	r4, [r7, #16]
 8008d82:	3601      	adds	r6, #1
 8008d84:	4630      	mov	r0, r6
 8008d86:	b003      	add	sp, #12
 8008d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8c:	6812      	ldr	r2, [r2, #0]
 8008d8e:	3b04      	subs	r3, #4
 8008d90:	2a00      	cmp	r2, #0
 8008d92:	d1cb      	bne.n	8008d2c <quorem+0x94>
 8008d94:	3c01      	subs	r4, #1
 8008d96:	e7c6      	b.n	8008d26 <quorem+0x8e>
 8008d98:	6812      	ldr	r2, [r2, #0]
 8008d9a:	3b04      	subs	r3, #4
 8008d9c:	2a00      	cmp	r2, #0
 8008d9e:	d1ef      	bne.n	8008d80 <quorem+0xe8>
 8008da0:	3c01      	subs	r4, #1
 8008da2:	e7ea      	b.n	8008d7a <quorem+0xe2>
 8008da4:	2000      	movs	r0, #0
 8008da6:	e7ee      	b.n	8008d86 <quorem+0xee>

08008da8 <_dtoa_r>:
 8008da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dac:	69c7      	ldr	r7, [r0, #28]
 8008dae:	b097      	sub	sp, #92	@ 0x5c
 8008db0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008db4:	ec55 4b10 	vmov	r4, r5, d0
 8008db8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008dba:	9107      	str	r1, [sp, #28]
 8008dbc:	4681      	mov	r9, r0
 8008dbe:	920c      	str	r2, [sp, #48]	@ 0x30
 8008dc0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008dc2:	b97f      	cbnz	r7, 8008de4 <_dtoa_r+0x3c>
 8008dc4:	2010      	movs	r0, #16
 8008dc6:	f001 f943 	bl	800a050 <malloc>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	f8c9 001c 	str.w	r0, [r9, #28]
 8008dd0:	b920      	cbnz	r0, 8008ddc <_dtoa_r+0x34>
 8008dd2:	4ba9      	ldr	r3, [pc, #676]	@ (8009078 <_dtoa_r+0x2d0>)
 8008dd4:	21ef      	movs	r1, #239	@ 0xef
 8008dd6:	48a9      	ldr	r0, [pc, #676]	@ (800907c <_dtoa_r+0x2d4>)
 8008dd8:	f7ff ff40 	bl	8008c5c <__assert_func>
 8008ddc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008de0:	6007      	str	r7, [r0, #0]
 8008de2:	60c7      	str	r7, [r0, #12]
 8008de4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008de8:	6819      	ldr	r1, [r3, #0]
 8008dea:	b159      	cbz	r1, 8008e04 <_dtoa_r+0x5c>
 8008dec:	685a      	ldr	r2, [r3, #4]
 8008dee:	604a      	str	r2, [r1, #4]
 8008df0:	2301      	movs	r3, #1
 8008df2:	4093      	lsls	r3, r2
 8008df4:	608b      	str	r3, [r1, #8]
 8008df6:	4648      	mov	r0, r9
 8008df8:	f001 fa32 	bl	800a260 <_Bfree>
 8008dfc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008e00:	2200      	movs	r2, #0
 8008e02:	601a      	str	r2, [r3, #0]
 8008e04:	1e2b      	subs	r3, r5, #0
 8008e06:	bfb9      	ittee	lt
 8008e08:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008e0c:	9305      	strlt	r3, [sp, #20]
 8008e0e:	2300      	movge	r3, #0
 8008e10:	6033      	strge	r3, [r6, #0]
 8008e12:	9f05      	ldr	r7, [sp, #20]
 8008e14:	4b9a      	ldr	r3, [pc, #616]	@ (8009080 <_dtoa_r+0x2d8>)
 8008e16:	bfbc      	itt	lt
 8008e18:	2201      	movlt	r2, #1
 8008e1a:	6032      	strlt	r2, [r6, #0]
 8008e1c:	43bb      	bics	r3, r7
 8008e1e:	d112      	bne.n	8008e46 <_dtoa_r+0x9e>
 8008e20:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e22:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008e26:	6013      	str	r3, [r2, #0]
 8008e28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e2c:	4323      	orrs	r3, r4
 8008e2e:	f000 855a 	beq.w	80098e6 <_dtoa_r+0xb3e>
 8008e32:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e34:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009094 <_dtoa_r+0x2ec>
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 855c 	beq.w	80098f6 <_dtoa_r+0xb4e>
 8008e3e:	f10a 0303 	add.w	r3, sl, #3
 8008e42:	f000 bd56 	b.w	80098f2 <_dtoa_r+0xb4a>
 8008e46:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	ec51 0b17 	vmov	r0, r1, d7
 8008e50:	2300      	movs	r3, #0
 8008e52:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008e56:	f7f7 fe47 	bl	8000ae8 <__aeabi_dcmpeq>
 8008e5a:	4680      	mov	r8, r0
 8008e5c:	b158      	cbz	r0, 8008e76 <_dtoa_r+0xce>
 8008e5e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008e60:	2301      	movs	r3, #1
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008e66:	b113      	cbz	r3, 8008e6e <_dtoa_r+0xc6>
 8008e68:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008e6a:	4b86      	ldr	r3, [pc, #536]	@ (8009084 <_dtoa_r+0x2dc>)
 8008e6c:	6013      	str	r3, [r2, #0]
 8008e6e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009098 <_dtoa_r+0x2f0>
 8008e72:	f000 bd40 	b.w	80098f6 <_dtoa_r+0xb4e>
 8008e76:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008e7a:	aa14      	add	r2, sp, #80	@ 0x50
 8008e7c:	a915      	add	r1, sp, #84	@ 0x54
 8008e7e:	4648      	mov	r0, r9
 8008e80:	f001 fd8a 	bl	800a998 <__d2b>
 8008e84:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008e88:	9002      	str	r0, [sp, #8]
 8008e8a:	2e00      	cmp	r6, #0
 8008e8c:	d078      	beq.n	8008f80 <_dtoa_r+0x1d8>
 8008e8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e90:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008e94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e98:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008e9c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ea0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008ea4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	2200      	movs	r2, #0
 8008eac:	4b76      	ldr	r3, [pc, #472]	@ (8009088 <_dtoa_r+0x2e0>)
 8008eae:	f7f7 f9fb 	bl	80002a8 <__aeabi_dsub>
 8008eb2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009060 <_dtoa_r+0x2b8>)
 8008eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb8:	f7f7 fbae 	bl	8000618 <__aeabi_dmul>
 8008ebc:	a36a      	add	r3, pc, #424	@ (adr r3, 8009068 <_dtoa_r+0x2c0>)
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	f7f7 f9f3 	bl	80002ac <__adddf3>
 8008ec6:	4604      	mov	r4, r0
 8008ec8:	4630      	mov	r0, r6
 8008eca:	460d      	mov	r5, r1
 8008ecc:	f7f7 fb3a 	bl	8000544 <__aeabi_i2d>
 8008ed0:	a367      	add	r3, pc, #412	@ (adr r3, 8009070 <_dtoa_r+0x2c8>)
 8008ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed6:	f7f7 fb9f 	bl	8000618 <__aeabi_dmul>
 8008eda:	4602      	mov	r2, r0
 8008edc:	460b      	mov	r3, r1
 8008ede:	4620      	mov	r0, r4
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	f7f7 f9e3 	bl	80002ac <__adddf3>
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	460d      	mov	r5, r1
 8008eea:	f7f7 fe45 	bl	8000b78 <__aeabi_d2iz>
 8008eee:	2200      	movs	r2, #0
 8008ef0:	4607      	mov	r7, r0
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	4620      	mov	r0, r4
 8008ef6:	4629      	mov	r1, r5
 8008ef8:	f7f7 fe00 	bl	8000afc <__aeabi_dcmplt>
 8008efc:	b140      	cbz	r0, 8008f10 <_dtoa_r+0x168>
 8008efe:	4638      	mov	r0, r7
 8008f00:	f7f7 fb20 	bl	8000544 <__aeabi_i2d>
 8008f04:	4622      	mov	r2, r4
 8008f06:	462b      	mov	r3, r5
 8008f08:	f7f7 fdee 	bl	8000ae8 <__aeabi_dcmpeq>
 8008f0c:	b900      	cbnz	r0, 8008f10 <_dtoa_r+0x168>
 8008f0e:	3f01      	subs	r7, #1
 8008f10:	2f16      	cmp	r7, #22
 8008f12:	d852      	bhi.n	8008fba <_dtoa_r+0x212>
 8008f14:	4b5d      	ldr	r3, [pc, #372]	@ (800908c <_dtoa_r+0x2e4>)
 8008f16:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f1e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008f22:	f7f7 fdeb 	bl	8000afc <__aeabi_dcmplt>
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d049      	beq.n	8008fbe <_dtoa_r+0x216>
 8008f2a:	3f01      	subs	r7, #1
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008f30:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008f32:	1b9b      	subs	r3, r3, r6
 8008f34:	1e5a      	subs	r2, r3, #1
 8008f36:	bf45      	ittet	mi
 8008f38:	f1c3 0301 	rsbmi	r3, r3, #1
 8008f3c:	9300      	strmi	r3, [sp, #0]
 8008f3e:	2300      	movpl	r3, #0
 8008f40:	2300      	movmi	r3, #0
 8008f42:	9206      	str	r2, [sp, #24]
 8008f44:	bf54      	ite	pl
 8008f46:	9300      	strpl	r3, [sp, #0]
 8008f48:	9306      	strmi	r3, [sp, #24]
 8008f4a:	2f00      	cmp	r7, #0
 8008f4c:	db39      	blt.n	8008fc2 <_dtoa_r+0x21a>
 8008f4e:	9b06      	ldr	r3, [sp, #24]
 8008f50:	970d      	str	r7, [sp, #52]	@ 0x34
 8008f52:	443b      	add	r3, r7
 8008f54:	9306      	str	r3, [sp, #24]
 8008f56:	2300      	movs	r3, #0
 8008f58:	9308      	str	r3, [sp, #32]
 8008f5a:	9b07      	ldr	r3, [sp, #28]
 8008f5c:	2b09      	cmp	r3, #9
 8008f5e:	d863      	bhi.n	8009028 <_dtoa_r+0x280>
 8008f60:	2b05      	cmp	r3, #5
 8008f62:	bfc4      	itt	gt
 8008f64:	3b04      	subgt	r3, #4
 8008f66:	9307      	strgt	r3, [sp, #28]
 8008f68:	9b07      	ldr	r3, [sp, #28]
 8008f6a:	f1a3 0302 	sub.w	r3, r3, #2
 8008f6e:	bfcc      	ite	gt
 8008f70:	2400      	movgt	r4, #0
 8008f72:	2401      	movle	r4, #1
 8008f74:	2b03      	cmp	r3, #3
 8008f76:	d863      	bhi.n	8009040 <_dtoa_r+0x298>
 8008f78:	e8df f003 	tbb	[pc, r3]
 8008f7c:	2b375452 	.word	0x2b375452
 8008f80:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008f84:	441e      	add	r6, r3
 8008f86:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008f8a:	2b20      	cmp	r3, #32
 8008f8c:	bfc1      	itttt	gt
 8008f8e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008f92:	409f      	lslgt	r7, r3
 8008f94:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008f98:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008f9c:	bfd6      	itet	le
 8008f9e:	f1c3 0320 	rsble	r3, r3, #32
 8008fa2:	ea47 0003 	orrgt.w	r0, r7, r3
 8008fa6:	fa04 f003 	lslle.w	r0, r4, r3
 8008faa:	f7f7 fabb 	bl	8000524 <__aeabi_ui2d>
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008fb4:	3e01      	subs	r6, #1
 8008fb6:	9212      	str	r2, [sp, #72]	@ 0x48
 8008fb8:	e776      	b.n	8008ea8 <_dtoa_r+0x100>
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e7b7      	b.n	8008f2e <_dtoa_r+0x186>
 8008fbe:	9010      	str	r0, [sp, #64]	@ 0x40
 8008fc0:	e7b6      	b.n	8008f30 <_dtoa_r+0x188>
 8008fc2:	9b00      	ldr	r3, [sp, #0]
 8008fc4:	1bdb      	subs	r3, r3, r7
 8008fc6:	9300      	str	r3, [sp, #0]
 8008fc8:	427b      	negs	r3, r7
 8008fca:	9308      	str	r3, [sp, #32]
 8008fcc:	2300      	movs	r3, #0
 8008fce:	930d      	str	r3, [sp, #52]	@ 0x34
 8008fd0:	e7c3      	b.n	8008f5a <_dtoa_r+0x1b2>
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fd6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008fd8:	eb07 0b03 	add.w	fp, r7, r3
 8008fdc:	f10b 0301 	add.w	r3, fp, #1
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	9303      	str	r3, [sp, #12]
 8008fe4:	bfb8      	it	lt
 8008fe6:	2301      	movlt	r3, #1
 8008fe8:	e006      	b.n	8008ff8 <_dtoa_r+0x250>
 8008fea:	2301      	movs	r3, #1
 8008fec:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	dd28      	ble.n	8009046 <_dtoa_r+0x29e>
 8008ff4:	469b      	mov	fp, r3
 8008ff6:	9303      	str	r3, [sp, #12]
 8008ff8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	2204      	movs	r2, #4
 8009000:	f102 0514 	add.w	r5, r2, #20
 8009004:	429d      	cmp	r5, r3
 8009006:	d926      	bls.n	8009056 <_dtoa_r+0x2ae>
 8009008:	6041      	str	r1, [r0, #4]
 800900a:	4648      	mov	r0, r9
 800900c:	f001 f8e8 	bl	800a1e0 <_Balloc>
 8009010:	4682      	mov	sl, r0
 8009012:	2800      	cmp	r0, #0
 8009014:	d142      	bne.n	800909c <_dtoa_r+0x2f4>
 8009016:	4b1e      	ldr	r3, [pc, #120]	@ (8009090 <_dtoa_r+0x2e8>)
 8009018:	4602      	mov	r2, r0
 800901a:	f240 11af 	movw	r1, #431	@ 0x1af
 800901e:	e6da      	b.n	8008dd6 <_dtoa_r+0x2e>
 8009020:	2300      	movs	r3, #0
 8009022:	e7e3      	b.n	8008fec <_dtoa_r+0x244>
 8009024:	2300      	movs	r3, #0
 8009026:	e7d5      	b.n	8008fd4 <_dtoa_r+0x22c>
 8009028:	2401      	movs	r4, #1
 800902a:	2300      	movs	r3, #0
 800902c:	9307      	str	r3, [sp, #28]
 800902e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009030:	f04f 3bff 	mov.w	fp, #4294967295
 8009034:	2200      	movs	r2, #0
 8009036:	f8cd b00c 	str.w	fp, [sp, #12]
 800903a:	2312      	movs	r3, #18
 800903c:	920c      	str	r2, [sp, #48]	@ 0x30
 800903e:	e7db      	b.n	8008ff8 <_dtoa_r+0x250>
 8009040:	2301      	movs	r3, #1
 8009042:	9309      	str	r3, [sp, #36]	@ 0x24
 8009044:	e7f4      	b.n	8009030 <_dtoa_r+0x288>
 8009046:	f04f 0b01 	mov.w	fp, #1
 800904a:	f8cd b00c 	str.w	fp, [sp, #12]
 800904e:	465b      	mov	r3, fp
 8009050:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009054:	e7d0      	b.n	8008ff8 <_dtoa_r+0x250>
 8009056:	3101      	adds	r1, #1
 8009058:	0052      	lsls	r2, r2, #1
 800905a:	e7d1      	b.n	8009000 <_dtoa_r+0x258>
 800905c:	f3af 8000 	nop.w
 8009060:	636f4361 	.word	0x636f4361
 8009064:	3fd287a7 	.word	0x3fd287a7
 8009068:	8b60c8b3 	.word	0x8b60c8b3
 800906c:	3fc68a28 	.word	0x3fc68a28
 8009070:	509f79fb 	.word	0x509f79fb
 8009074:	3fd34413 	.word	0x3fd34413
 8009078:	0800b8af 	.word	0x0800b8af
 800907c:	0800b971 	.word	0x0800b971
 8009080:	7ff00000 	.word	0x7ff00000
 8009084:	0800b887 	.word	0x0800b887
 8009088:	3ff80000 	.word	0x3ff80000
 800908c:	0800bc30 	.word	0x0800bc30
 8009090:	0800b9c9 	.word	0x0800b9c9
 8009094:	0800b96d 	.word	0x0800b96d
 8009098:	0800b886 	.word	0x0800b886
 800909c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80090a0:	6018      	str	r0, [r3, #0]
 80090a2:	9b03      	ldr	r3, [sp, #12]
 80090a4:	2b0e      	cmp	r3, #14
 80090a6:	f200 80a1 	bhi.w	80091ec <_dtoa_r+0x444>
 80090aa:	2c00      	cmp	r4, #0
 80090ac:	f000 809e 	beq.w	80091ec <_dtoa_r+0x444>
 80090b0:	2f00      	cmp	r7, #0
 80090b2:	dd33      	ble.n	800911c <_dtoa_r+0x374>
 80090b4:	4b9c      	ldr	r3, [pc, #624]	@ (8009328 <_dtoa_r+0x580>)
 80090b6:	f007 020f 	and.w	r2, r7, #15
 80090ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090be:	ed93 7b00 	vldr	d7, [r3]
 80090c2:	05f8      	lsls	r0, r7, #23
 80090c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80090c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80090cc:	d516      	bpl.n	80090fc <_dtoa_r+0x354>
 80090ce:	4b97      	ldr	r3, [pc, #604]	@ (800932c <_dtoa_r+0x584>)
 80090d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80090d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80090d8:	f7f7 fbc8 	bl	800086c <__aeabi_ddiv>
 80090dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090e0:	f004 040f 	and.w	r4, r4, #15
 80090e4:	2603      	movs	r6, #3
 80090e6:	4d91      	ldr	r5, [pc, #580]	@ (800932c <_dtoa_r+0x584>)
 80090e8:	b954      	cbnz	r4, 8009100 <_dtoa_r+0x358>
 80090ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80090ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80090f2:	f7f7 fbbb 	bl	800086c <__aeabi_ddiv>
 80090f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090fa:	e028      	b.n	800914e <_dtoa_r+0x3a6>
 80090fc:	2602      	movs	r6, #2
 80090fe:	e7f2      	b.n	80090e6 <_dtoa_r+0x33e>
 8009100:	07e1      	lsls	r1, r4, #31
 8009102:	d508      	bpl.n	8009116 <_dtoa_r+0x36e>
 8009104:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009108:	e9d5 2300 	ldrd	r2, r3, [r5]
 800910c:	f7f7 fa84 	bl	8000618 <__aeabi_dmul>
 8009110:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009114:	3601      	adds	r6, #1
 8009116:	1064      	asrs	r4, r4, #1
 8009118:	3508      	adds	r5, #8
 800911a:	e7e5      	b.n	80090e8 <_dtoa_r+0x340>
 800911c:	f000 80af 	beq.w	800927e <_dtoa_r+0x4d6>
 8009120:	427c      	negs	r4, r7
 8009122:	4b81      	ldr	r3, [pc, #516]	@ (8009328 <_dtoa_r+0x580>)
 8009124:	4d81      	ldr	r5, [pc, #516]	@ (800932c <_dtoa_r+0x584>)
 8009126:	f004 020f 	and.w	r2, r4, #15
 800912a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800912e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009132:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009136:	f7f7 fa6f 	bl	8000618 <__aeabi_dmul>
 800913a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800913e:	1124      	asrs	r4, r4, #4
 8009140:	2300      	movs	r3, #0
 8009142:	2602      	movs	r6, #2
 8009144:	2c00      	cmp	r4, #0
 8009146:	f040 808f 	bne.w	8009268 <_dtoa_r+0x4c0>
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1d3      	bne.n	80090f6 <_dtoa_r+0x34e>
 800914e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009150:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	f000 8094 	beq.w	8009282 <_dtoa_r+0x4da>
 800915a:	4b75      	ldr	r3, [pc, #468]	@ (8009330 <_dtoa_r+0x588>)
 800915c:	2200      	movs	r2, #0
 800915e:	4620      	mov	r0, r4
 8009160:	4629      	mov	r1, r5
 8009162:	f7f7 fccb 	bl	8000afc <__aeabi_dcmplt>
 8009166:	2800      	cmp	r0, #0
 8009168:	f000 808b 	beq.w	8009282 <_dtoa_r+0x4da>
 800916c:	9b03      	ldr	r3, [sp, #12]
 800916e:	2b00      	cmp	r3, #0
 8009170:	f000 8087 	beq.w	8009282 <_dtoa_r+0x4da>
 8009174:	f1bb 0f00 	cmp.w	fp, #0
 8009178:	dd34      	ble.n	80091e4 <_dtoa_r+0x43c>
 800917a:	4620      	mov	r0, r4
 800917c:	4b6d      	ldr	r3, [pc, #436]	@ (8009334 <_dtoa_r+0x58c>)
 800917e:	2200      	movs	r2, #0
 8009180:	4629      	mov	r1, r5
 8009182:	f7f7 fa49 	bl	8000618 <__aeabi_dmul>
 8009186:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800918a:	f107 38ff 	add.w	r8, r7, #4294967295
 800918e:	3601      	adds	r6, #1
 8009190:	465c      	mov	r4, fp
 8009192:	4630      	mov	r0, r6
 8009194:	f7f7 f9d6 	bl	8000544 <__aeabi_i2d>
 8009198:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800919c:	f7f7 fa3c 	bl	8000618 <__aeabi_dmul>
 80091a0:	4b65      	ldr	r3, [pc, #404]	@ (8009338 <_dtoa_r+0x590>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	f7f7 f882 	bl	80002ac <__adddf3>
 80091a8:	4605      	mov	r5, r0
 80091aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80091ae:	2c00      	cmp	r4, #0
 80091b0:	d16a      	bne.n	8009288 <_dtoa_r+0x4e0>
 80091b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091b6:	4b61      	ldr	r3, [pc, #388]	@ (800933c <_dtoa_r+0x594>)
 80091b8:	2200      	movs	r2, #0
 80091ba:	f7f7 f875 	bl	80002a8 <__aeabi_dsub>
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80091c6:	462a      	mov	r2, r5
 80091c8:	4633      	mov	r3, r6
 80091ca:	f7f7 fcb5 	bl	8000b38 <__aeabi_dcmpgt>
 80091ce:	2800      	cmp	r0, #0
 80091d0:	f040 8298 	bne.w	8009704 <_dtoa_r+0x95c>
 80091d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091d8:	462a      	mov	r2, r5
 80091da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80091de:	f7f7 fc8d 	bl	8000afc <__aeabi_dcmplt>
 80091e2:	bb38      	cbnz	r0, 8009234 <_dtoa_r+0x48c>
 80091e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80091e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80091ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	f2c0 8157 	blt.w	80094a2 <_dtoa_r+0x6fa>
 80091f4:	2f0e      	cmp	r7, #14
 80091f6:	f300 8154 	bgt.w	80094a2 <_dtoa_r+0x6fa>
 80091fa:	4b4b      	ldr	r3, [pc, #300]	@ (8009328 <_dtoa_r+0x580>)
 80091fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009200:	ed93 7b00 	vldr	d7, [r3]
 8009204:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009206:	2b00      	cmp	r3, #0
 8009208:	ed8d 7b00 	vstr	d7, [sp]
 800920c:	f280 80e5 	bge.w	80093da <_dtoa_r+0x632>
 8009210:	9b03      	ldr	r3, [sp, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	f300 80e1 	bgt.w	80093da <_dtoa_r+0x632>
 8009218:	d10c      	bne.n	8009234 <_dtoa_r+0x48c>
 800921a:	4b48      	ldr	r3, [pc, #288]	@ (800933c <_dtoa_r+0x594>)
 800921c:	2200      	movs	r2, #0
 800921e:	ec51 0b17 	vmov	r0, r1, d7
 8009222:	f7f7 f9f9 	bl	8000618 <__aeabi_dmul>
 8009226:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800922a:	f7f7 fc7b 	bl	8000b24 <__aeabi_dcmpge>
 800922e:	2800      	cmp	r0, #0
 8009230:	f000 8266 	beq.w	8009700 <_dtoa_r+0x958>
 8009234:	2400      	movs	r4, #0
 8009236:	4625      	mov	r5, r4
 8009238:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800923a:	4656      	mov	r6, sl
 800923c:	ea6f 0803 	mvn.w	r8, r3
 8009240:	2700      	movs	r7, #0
 8009242:	4621      	mov	r1, r4
 8009244:	4648      	mov	r0, r9
 8009246:	f001 f80b 	bl	800a260 <_Bfree>
 800924a:	2d00      	cmp	r5, #0
 800924c:	f000 80bd 	beq.w	80093ca <_dtoa_r+0x622>
 8009250:	b12f      	cbz	r7, 800925e <_dtoa_r+0x4b6>
 8009252:	42af      	cmp	r7, r5
 8009254:	d003      	beq.n	800925e <_dtoa_r+0x4b6>
 8009256:	4639      	mov	r1, r7
 8009258:	4648      	mov	r0, r9
 800925a:	f001 f801 	bl	800a260 <_Bfree>
 800925e:	4629      	mov	r1, r5
 8009260:	4648      	mov	r0, r9
 8009262:	f000 fffd 	bl	800a260 <_Bfree>
 8009266:	e0b0      	b.n	80093ca <_dtoa_r+0x622>
 8009268:	07e2      	lsls	r2, r4, #31
 800926a:	d505      	bpl.n	8009278 <_dtoa_r+0x4d0>
 800926c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009270:	f7f7 f9d2 	bl	8000618 <__aeabi_dmul>
 8009274:	3601      	adds	r6, #1
 8009276:	2301      	movs	r3, #1
 8009278:	1064      	asrs	r4, r4, #1
 800927a:	3508      	adds	r5, #8
 800927c:	e762      	b.n	8009144 <_dtoa_r+0x39c>
 800927e:	2602      	movs	r6, #2
 8009280:	e765      	b.n	800914e <_dtoa_r+0x3a6>
 8009282:	9c03      	ldr	r4, [sp, #12]
 8009284:	46b8      	mov	r8, r7
 8009286:	e784      	b.n	8009192 <_dtoa_r+0x3ea>
 8009288:	4b27      	ldr	r3, [pc, #156]	@ (8009328 <_dtoa_r+0x580>)
 800928a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800928c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009290:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009294:	4454      	add	r4, sl
 8009296:	2900      	cmp	r1, #0
 8009298:	d054      	beq.n	8009344 <_dtoa_r+0x59c>
 800929a:	4929      	ldr	r1, [pc, #164]	@ (8009340 <_dtoa_r+0x598>)
 800929c:	2000      	movs	r0, #0
 800929e:	f7f7 fae5 	bl	800086c <__aeabi_ddiv>
 80092a2:	4633      	mov	r3, r6
 80092a4:	462a      	mov	r2, r5
 80092a6:	f7f6 ffff 	bl	80002a8 <__aeabi_dsub>
 80092aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80092ae:	4656      	mov	r6, sl
 80092b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092b4:	f7f7 fc60 	bl	8000b78 <__aeabi_d2iz>
 80092b8:	4605      	mov	r5, r0
 80092ba:	f7f7 f943 	bl	8000544 <__aeabi_i2d>
 80092be:	4602      	mov	r2, r0
 80092c0:	460b      	mov	r3, r1
 80092c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092c6:	f7f6 ffef 	bl	80002a8 <__aeabi_dsub>
 80092ca:	3530      	adds	r5, #48	@ 0x30
 80092cc:	4602      	mov	r2, r0
 80092ce:	460b      	mov	r3, r1
 80092d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80092d4:	f806 5b01 	strb.w	r5, [r6], #1
 80092d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80092dc:	f7f7 fc0e 	bl	8000afc <__aeabi_dcmplt>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d172      	bne.n	80093ca <_dtoa_r+0x622>
 80092e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092e8:	4911      	ldr	r1, [pc, #68]	@ (8009330 <_dtoa_r+0x588>)
 80092ea:	2000      	movs	r0, #0
 80092ec:	f7f6 ffdc 	bl	80002a8 <__aeabi_dsub>
 80092f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80092f4:	f7f7 fc02 	bl	8000afc <__aeabi_dcmplt>
 80092f8:	2800      	cmp	r0, #0
 80092fa:	f040 80b4 	bne.w	8009466 <_dtoa_r+0x6be>
 80092fe:	42a6      	cmp	r6, r4
 8009300:	f43f af70 	beq.w	80091e4 <_dtoa_r+0x43c>
 8009304:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009308:	4b0a      	ldr	r3, [pc, #40]	@ (8009334 <_dtoa_r+0x58c>)
 800930a:	2200      	movs	r2, #0
 800930c:	f7f7 f984 	bl	8000618 <__aeabi_dmul>
 8009310:	4b08      	ldr	r3, [pc, #32]	@ (8009334 <_dtoa_r+0x58c>)
 8009312:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009316:	2200      	movs	r2, #0
 8009318:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800931c:	f7f7 f97c 	bl	8000618 <__aeabi_dmul>
 8009320:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009324:	e7c4      	b.n	80092b0 <_dtoa_r+0x508>
 8009326:	bf00      	nop
 8009328:	0800bc30 	.word	0x0800bc30
 800932c:	0800bc08 	.word	0x0800bc08
 8009330:	3ff00000 	.word	0x3ff00000
 8009334:	40240000 	.word	0x40240000
 8009338:	401c0000 	.word	0x401c0000
 800933c:	40140000 	.word	0x40140000
 8009340:	3fe00000 	.word	0x3fe00000
 8009344:	4631      	mov	r1, r6
 8009346:	4628      	mov	r0, r5
 8009348:	f7f7 f966 	bl	8000618 <__aeabi_dmul>
 800934c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009350:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009352:	4656      	mov	r6, sl
 8009354:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009358:	f7f7 fc0e 	bl	8000b78 <__aeabi_d2iz>
 800935c:	4605      	mov	r5, r0
 800935e:	f7f7 f8f1 	bl	8000544 <__aeabi_i2d>
 8009362:	4602      	mov	r2, r0
 8009364:	460b      	mov	r3, r1
 8009366:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800936a:	f7f6 ff9d 	bl	80002a8 <__aeabi_dsub>
 800936e:	3530      	adds	r5, #48	@ 0x30
 8009370:	f806 5b01 	strb.w	r5, [r6], #1
 8009374:	4602      	mov	r2, r0
 8009376:	460b      	mov	r3, r1
 8009378:	42a6      	cmp	r6, r4
 800937a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800937e:	f04f 0200 	mov.w	r2, #0
 8009382:	d124      	bne.n	80093ce <_dtoa_r+0x626>
 8009384:	4baf      	ldr	r3, [pc, #700]	@ (8009644 <_dtoa_r+0x89c>)
 8009386:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800938a:	f7f6 ff8f 	bl	80002ac <__adddf3>
 800938e:	4602      	mov	r2, r0
 8009390:	460b      	mov	r3, r1
 8009392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009396:	f7f7 fbcf 	bl	8000b38 <__aeabi_dcmpgt>
 800939a:	2800      	cmp	r0, #0
 800939c:	d163      	bne.n	8009466 <_dtoa_r+0x6be>
 800939e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80093a2:	49a8      	ldr	r1, [pc, #672]	@ (8009644 <_dtoa_r+0x89c>)
 80093a4:	2000      	movs	r0, #0
 80093a6:	f7f6 ff7f 	bl	80002a8 <__aeabi_dsub>
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093b2:	f7f7 fba3 	bl	8000afc <__aeabi_dcmplt>
 80093b6:	2800      	cmp	r0, #0
 80093b8:	f43f af14 	beq.w	80091e4 <_dtoa_r+0x43c>
 80093bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80093be:	1e73      	subs	r3, r6, #1
 80093c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80093c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80093c6:	2b30      	cmp	r3, #48	@ 0x30
 80093c8:	d0f8      	beq.n	80093bc <_dtoa_r+0x614>
 80093ca:	4647      	mov	r7, r8
 80093cc:	e03b      	b.n	8009446 <_dtoa_r+0x69e>
 80093ce:	4b9e      	ldr	r3, [pc, #632]	@ (8009648 <_dtoa_r+0x8a0>)
 80093d0:	f7f7 f922 	bl	8000618 <__aeabi_dmul>
 80093d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093d8:	e7bc      	b.n	8009354 <_dtoa_r+0x5ac>
 80093da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80093de:	4656      	mov	r6, sl
 80093e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093e4:	4620      	mov	r0, r4
 80093e6:	4629      	mov	r1, r5
 80093e8:	f7f7 fa40 	bl	800086c <__aeabi_ddiv>
 80093ec:	f7f7 fbc4 	bl	8000b78 <__aeabi_d2iz>
 80093f0:	4680      	mov	r8, r0
 80093f2:	f7f7 f8a7 	bl	8000544 <__aeabi_i2d>
 80093f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093fa:	f7f7 f90d 	bl	8000618 <__aeabi_dmul>
 80093fe:	4602      	mov	r2, r0
 8009400:	460b      	mov	r3, r1
 8009402:	4620      	mov	r0, r4
 8009404:	4629      	mov	r1, r5
 8009406:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800940a:	f7f6 ff4d 	bl	80002a8 <__aeabi_dsub>
 800940e:	f806 4b01 	strb.w	r4, [r6], #1
 8009412:	9d03      	ldr	r5, [sp, #12]
 8009414:	eba6 040a 	sub.w	r4, r6, sl
 8009418:	42a5      	cmp	r5, r4
 800941a:	4602      	mov	r2, r0
 800941c:	460b      	mov	r3, r1
 800941e:	d133      	bne.n	8009488 <_dtoa_r+0x6e0>
 8009420:	f7f6 ff44 	bl	80002ac <__adddf3>
 8009424:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009428:	4604      	mov	r4, r0
 800942a:	460d      	mov	r5, r1
 800942c:	f7f7 fb84 	bl	8000b38 <__aeabi_dcmpgt>
 8009430:	b9c0      	cbnz	r0, 8009464 <_dtoa_r+0x6bc>
 8009432:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009436:	4620      	mov	r0, r4
 8009438:	4629      	mov	r1, r5
 800943a:	f7f7 fb55 	bl	8000ae8 <__aeabi_dcmpeq>
 800943e:	b110      	cbz	r0, 8009446 <_dtoa_r+0x69e>
 8009440:	f018 0f01 	tst.w	r8, #1
 8009444:	d10e      	bne.n	8009464 <_dtoa_r+0x6bc>
 8009446:	9902      	ldr	r1, [sp, #8]
 8009448:	4648      	mov	r0, r9
 800944a:	f000 ff09 	bl	800a260 <_Bfree>
 800944e:	2300      	movs	r3, #0
 8009450:	7033      	strb	r3, [r6, #0]
 8009452:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009454:	3701      	adds	r7, #1
 8009456:	601f      	str	r7, [r3, #0]
 8009458:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800945a:	2b00      	cmp	r3, #0
 800945c:	f000 824b 	beq.w	80098f6 <_dtoa_r+0xb4e>
 8009460:	601e      	str	r6, [r3, #0]
 8009462:	e248      	b.n	80098f6 <_dtoa_r+0xb4e>
 8009464:	46b8      	mov	r8, r7
 8009466:	4633      	mov	r3, r6
 8009468:	461e      	mov	r6, r3
 800946a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800946e:	2a39      	cmp	r2, #57	@ 0x39
 8009470:	d106      	bne.n	8009480 <_dtoa_r+0x6d8>
 8009472:	459a      	cmp	sl, r3
 8009474:	d1f8      	bne.n	8009468 <_dtoa_r+0x6c0>
 8009476:	2230      	movs	r2, #48	@ 0x30
 8009478:	f108 0801 	add.w	r8, r8, #1
 800947c:	f88a 2000 	strb.w	r2, [sl]
 8009480:	781a      	ldrb	r2, [r3, #0]
 8009482:	3201      	adds	r2, #1
 8009484:	701a      	strb	r2, [r3, #0]
 8009486:	e7a0      	b.n	80093ca <_dtoa_r+0x622>
 8009488:	4b6f      	ldr	r3, [pc, #444]	@ (8009648 <_dtoa_r+0x8a0>)
 800948a:	2200      	movs	r2, #0
 800948c:	f7f7 f8c4 	bl	8000618 <__aeabi_dmul>
 8009490:	2200      	movs	r2, #0
 8009492:	2300      	movs	r3, #0
 8009494:	4604      	mov	r4, r0
 8009496:	460d      	mov	r5, r1
 8009498:	f7f7 fb26 	bl	8000ae8 <__aeabi_dcmpeq>
 800949c:	2800      	cmp	r0, #0
 800949e:	d09f      	beq.n	80093e0 <_dtoa_r+0x638>
 80094a0:	e7d1      	b.n	8009446 <_dtoa_r+0x69e>
 80094a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094a4:	2a00      	cmp	r2, #0
 80094a6:	f000 80ea 	beq.w	800967e <_dtoa_r+0x8d6>
 80094aa:	9a07      	ldr	r2, [sp, #28]
 80094ac:	2a01      	cmp	r2, #1
 80094ae:	f300 80cd 	bgt.w	800964c <_dtoa_r+0x8a4>
 80094b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80094b4:	2a00      	cmp	r2, #0
 80094b6:	f000 80c1 	beq.w	800963c <_dtoa_r+0x894>
 80094ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80094be:	9c08      	ldr	r4, [sp, #32]
 80094c0:	9e00      	ldr	r6, [sp, #0]
 80094c2:	9a00      	ldr	r2, [sp, #0]
 80094c4:	441a      	add	r2, r3
 80094c6:	9200      	str	r2, [sp, #0]
 80094c8:	9a06      	ldr	r2, [sp, #24]
 80094ca:	2101      	movs	r1, #1
 80094cc:	441a      	add	r2, r3
 80094ce:	4648      	mov	r0, r9
 80094d0:	9206      	str	r2, [sp, #24]
 80094d2:	f000 ffc3 	bl	800a45c <__i2b>
 80094d6:	4605      	mov	r5, r0
 80094d8:	b166      	cbz	r6, 80094f4 <_dtoa_r+0x74c>
 80094da:	9b06      	ldr	r3, [sp, #24]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	dd09      	ble.n	80094f4 <_dtoa_r+0x74c>
 80094e0:	42b3      	cmp	r3, r6
 80094e2:	9a00      	ldr	r2, [sp, #0]
 80094e4:	bfa8      	it	ge
 80094e6:	4633      	movge	r3, r6
 80094e8:	1ad2      	subs	r2, r2, r3
 80094ea:	9200      	str	r2, [sp, #0]
 80094ec:	9a06      	ldr	r2, [sp, #24]
 80094ee:	1af6      	subs	r6, r6, r3
 80094f0:	1ad3      	subs	r3, r2, r3
 80094f2:	9306      	str	r3, [sp, #24]
 80094f4:	9b08      	ldr	r3, [sp, #32]
 80094f6:	b30b      	cbz	r3, 800953c <_dtoa_r+0x794>
 80094f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	f000 80c6 	beq.w	800968c <_dtoa_r+0x8e4>
 8009500:	2c00      	cmp	r4, #0
 8009502:	f000 80c0 	beq.w	8009686 <_dtoa_r+0x8de>
 8009506:	4629      	mov	r1, r5
 8009508:	4622      	mov	r2, r4
 800950a:	4648      	mov	r0, r9
 800950c:	f001 f85e 	bl	800a5cc <__pow5mult>
 8009510:	9a02      	ldr	r2, [sp, #8]
 8009512:	4601      	mov	r1, r0
 8009514:	4605      	mov	r5, r0
 8009516:	4648      	mov	r0, r9
 8009518:	f000 ffb6 	bl	800a488 <__multiply>
 800951c:	9902      	ldr	r1, [sp, #8]
 800951e:	4680      	mov	r8, r0
 8009520:	4648      	mov	r0, r9
 8009522:	f000 fe9d 	bl	800a260 <_Bfree>
 8009526:	9b08      	ldr	r3, [sp, #32]
 8009528:	1b1b      	subs	r3, r3, r4
 800952a:	9308      	str	r3, [sp, #32]
 800952c:	f000 80b1 	beq.w	8009692 <_dtoa_r+0x8ea>
 8009530:	9a08      	ldr	r2, [sp, #32]
 8009532:	4641      	mov	r1, r8
 8009534:	4648      	mov	r0, r9
 8009536:	f001 f849 	bl	800a5cc <__pow5mult>
 800953a:	9002      	str	r0, [sp, #8]
 800953c:	2101      	movs	r1, #1
 800953e:	4648      	mov	r0, r9
 8009540:	f000 ff8c 	bl	800a45c <__i2b>
 8009544:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009546:	4604      	mov	r4, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 81d8 	beq.w	80098fe <_dtoa_r+0xb56>
 800954e:	461a      	mov	r2, r3
 8009550:	4601      	mov	r1, r0
 8009552:	4648      	mov	r0, r9
 8009554:	f001 f83a 	bl	800a5cc <__pow5mult>
 8009558:	9b07      	ldr	r3, [sp, #28]
 800955a:	2b01      	cmp	r3, #1
 800955c:	4604      	mov	r4, r0
 800955e:	f300 809f 	bgt.w	80096a0 <_dtoa_r+0x8f8>
 8009562:	9b04      	ldr	r3, [sp, #16]
 8009564:	2b00      	cmp	r3, #0
 8009566:	f040 8097 	bne.w	8009698 <_dtoa_r+0x8f0>
 800956a:	9b05      	ldr	r3, [sp, #20]
 800956c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009570:	2b00      	cmp	r3, #0
 8009572:	f040 8093 	bne.w	800969c <_dtoa_r+0x8f4>
 8009576:	9b05      	ldr	r3, [sp, #20]
 8009578:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800957c:	0d1b      	lsrs	r3, r3, #20
 800957e:	051b      	lsls	r3, r3, #20
 8009580:	b133      	cbz	r3, 8009590 <_dtoa_r+0x7e8>
 8009582:	9b00      	ldr	r3, [sp, #0]
 8009584:	3301      	adds	r3, #1
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	9b06      	ldr	r3, [sp, #24]
 800958a:	3301      	adds	r3, #1
 800958c:	9306      	str	r3, [sp, #24]
 800958e:	2301      	movs	r3, #1
 8009590:	9308      	str	r3, [sp, #32]
 8009592:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009594:	2b00      	cmp	r3, #0
 8009596:	f000 81b8 	beq.w	800990a <_dtoa_r+0xb62>
 800959a:	6923      	ldr	r3, [r4, #16]
 800959c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095a0:	6918      	ldr	r0, [r3, #16]
 80095a2:	f000 ff0f 	bl	800a3c4 <__hi0bits>
 80095a6:	f1c0 0020 	rsb	r0, r0, #32
 80095aa:	9b06      	ldr	r3, [sp, #24]
 80095ac:	4418      	add	r0, r3
 80095ae:	f010 001f 	ands.w	r0, r0, #31
 80095b2:	f000 8082 	beq.w	80096ba <_dtoa_r+0x912>
 80095b6:	f1c0 0320 	rsb	r3, r0, #32
 80095ba:	2b04      	cmp	r3, #4
 80095bc:	dd73      	ble.n	80096a6 <_dtoa_r+0x8fe>
 80095be:	9b00      	ldr	r3, [sp, #0]
 80095c0:	f1c0 001c 	rsb	r0, r0, #28
 80095c4:	4403      	add	r3, r0
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	9b06      	ldr	r3, [sp, #24]
 80095ca:	4403      	add	r3, r0
 80095cc:	4406      	add	r6, r0
 80095ce:	9306      	str	r3, [sp, #24]
 80095d0:	9b00      	ldr	r3, [sp, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	dd05      	ble.n	80095e2 <_dtoa_r+0x83a>
 80095d6:	9902      	ldr	r1, [sp, #8]
 80095d8:	461a      	mov	r2, r3
 80095da:	4648      	mov	r0, r9
 80095dc:	f001 f850 	bl	800a680 <__lshift>
 80095e0:	9002      	str	r0, [sp, #8]
 80095e2:	9b06      	ldr	r3, [sp, #24]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	dd05      	ble.n	80095f4 <_dtoa_r+0x84c>
 80095e8:	4621      	mov	r1, r4
 80095ea:	461a      	mov	r2, r3
 80095ec:	4648      	mov	r0, r9
 80095ee:	f001 f847 	bl	800a680 <__lshift>
 80095f2:	4604      	mov	r4, r0
 80095f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d061      	beq.n	80096be <_dtoa_r+0x916>
 80095fa:	9802      	ldr	r0, [sp, #8]
 80095fc:	4621      	mov	r1, r4
 80095fe:	f001 f8ab 	bl	800a758 <__mcmp>
 8009602:	2800      	cmp	r0, #0
 8009604:	da5b      	bge.n	80096be <_dtoa_r+0x916>
 8009606:	2300      	movs	r3, #0
 8009608:	9902      	ldr	r1, [sp, #8]
 800960a:	220a      	movs	r2, #10
 800960c:	4648      	mov	r0, r9
 800960e:	f000 fe49 	bl	800a2a4 <__multadd>
 8009612:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009614:	9002      	str	r0, [sp, #8]
 8009616:	f107 38ff 	add.w	r8, r7, #4294967295
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 8177 	beq.w	800990e <_dtoa_r+0xb66>
 8009620:	4629      	mov	r1, r5
 8009622:	2300      	movs	r3, #0
 8009624:	220a      	movs	r2, #10
 8009626:	4648      	mov	r0, r9
 8009628:	f000 fe3c 	bl	800a2a4 <__multadd>
 800962c:	f1bb 0f00 	cmp.w	fp, #0
 8009630:	4605      	mov	r5, r0
 8009632:	dc6f      	bgt.n	8009714 <_dtoa_r+0x96c>
 8009634:	9b07      	ldr	r3, [sp, #28]
 8009636:	2b02      	cmp	r3, #2
 8009638:	dc49      	bgt.n	80096ce <_dtoa_r+0x926>
 800963a:	e06b      	b.n	8009714 <_dtoa_r+0x96c>
 800963c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800963e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009642:	e73c      	b.n	80094be <_dtoa_r+0x716>
 8009644:	3fe00000 	.word	0x3fe00000
 8009648:	40240000 	.word	0x40240000
 800964c:	9b03      	ldr	r3, [sp, #12]
 800964e:	1e5c      	subs	r4, r3, #1
 8009650:	9b08      	ldr	r3, [sp, #32]
 8009652:	42a3      	cmp	r3, r4
 8009654:	db09      	blt.n	800966a <_dtoa_r+0x8c2>
 8009656:	1b1c      	subs	r4, r3, r4
 8009658:	9b03      	ldr	r3, [sp, #12]
 800965a:	2b00      	cmp	r3, #0
 800965c:	f6bf af30 	bge.w	80094c0 <_dtoa_r+0x718>
 8009660:	9b00      	ldr	r3, [sp, #0]
 8009662:	9a03      	ldr	r2, [sp, #12]
 8009664:	1a9e      	subs	r6, r3, r2
 8009666:	2300      	movs	r3, #0
 8009668:	e72b      	b.n	80094c2 <_dtoa_r+0x71a>
 800966a:	9b08      	ldr	r3, [sp, #32]
 800966c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800966e:	9408      	str	r4, [sp, #32]
 8009670:	1ae3      	subs	r3, r4, r3
 8009672:	441a      	add	r2, r3
 8009674:	9e00      	ldr	r6, [sp, #0]
 8009676:	9b03      	ldr	r3, [sp, #12]
 8009678:	920d      	str	r2, [sp, #52]	@ 0x34
 800967a:	2400      	movs	r4, #0
 800967c:	e721      	b.n	80094c2 <_dtoa_r+0x71a>
 800967e:	9c08      	ldr	r4, [sp, #32]
 8009680:	9e00      	ldr	r6, [sp, #0]
 8009682:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009684:	e728      	b.n	80094d8 <_dtoa_r+0x730>
 8009686:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800968a:	e751      	b.n	8009530 <_dtoa_r+0x788>
 800968c:	9a08      	ldr	r2, [sp, #32]
 800968e:	9902      	ldr	r1, [sp, #8]
 8009690:	e750      	b.n	8009534 <_dtoa_r+0x78c>
 8009692:	f8cd 8008 	str.w	r8, [sp, #8]
 8009696:	e751      	b.n	800953c <_dtoa_r+0x794>
 8009698:	2300      	movs	r3, #0
 800969a:	e779      	b.n	8009590 <_dtoa_r+0x7e8>
 800969c:	9b04      	ldr	r3, [sp, #16]
 800969e:	e777      	b.n	8009590 <_dtoa_r+0x7e8>
 80096a0:	2300      	movs	r3, #0
 80096a2:	9308      	str	r3, [sp, #32]
 80096a4:	e779      	b.n	800959a <_dtoa_r+0x7f2>
 80096a6:	d093      	beq.n	80095d0 <_dtoa_r+0x828>
 80096a8:	9a00      	ldr	r2, [sp, #0]
 80096aa:	331c      	adds	r3, #28
 80096ac:	441a      	add	r2, r3
 80096ae:	9200      	str	r2, [sp, #0]
 80096b0:	9a06      	ldr	r2, [sp, #24]
 80096b2:	441a      	add	r2, r3
 80096b4:	441e      	add	r6, r3
 80096b6:	9206      	str	r2, [sp, #24]
 80096b8:	e78a      	b.n	80095d0 <_dtoa_r+0x828>
 80096ba:	4603      	mov	r3, r0
 80096bc:	e7f4      	b.n	80096a8 <_dtoa_r+0x900>
 80096be:	9b03      	ldr	r3, [sp, #12]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	46b8      	mov	r8, r7
 80096c4:	dc20      	bgt.n	8009708 <_dtoa_r+0x960>
 80096c6:	469b      	mov	fp, r3
 80096c8:	9b07      	ldr	r3, [sp, #28]
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	dd1e      	ble.n	800970c <_dtoa_r+0x964>
 80096ce:	f1bb 0f00 	cmp.w	fp, #0
 80096d2:	f47f adb1 	bne.w	8009238 <_dtoa_r+0x490>
 80096d6:	4621      	mov	r1, r4
 80096d8:	465b      	mov	r3, fp
 80096da:	2205      	movs	r2, #5
 80096dc:	4648      	mov	r0, r9
 80096de:	f000 fde1 	bl	800a2a4 <__multadd>
 80096e2:	4601      	mov	r1, r0
 80096e4:	4604      	mov	r4, r0
 80096e6:	9802      	ldr	r0, [sp, #8]
 80096e8:	f001 f836 	bl	800a758 <__mcmp>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	f77f ada3 	ble.w	8009238 <_dtoa_r+0x490>
 80096f2:	4656      	mov	r6, sl
 80096f4:	2331      	movs	r3, #49	@ 0x31
 80096f6:	f806 3b01 	strb.w	r3, [r6], #1
 80096fa:	f108 0801 	add.w	r8, r8, #1
 80096fe:	e59f      	b.n	8009240 <_dtoa_r+0x498>
 8009700:	9c03      	ldr	r4, [sp, #12]
 8009702:	46b8      	mov	r8, r7
 8009704:	4625      	mov	r5, r4
 8009706:	e7f4      	b.n	80096f2 <_dtoa_r+0x94a>
 8009708:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800970c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800970e:	2b00      	cmp	r3, #0
 8009710:	f000 8101 	beq.w	8009916 <_dtoa_r+0xb6e>
 8009714:	2e00      	cmp	r6, #0
 8009716:	dd05      	ble.n	8009724 <_dtoa_r+0x97c>
 8009718:	4629      	mov	r1, r5
 800971a:	4632      	mov	r2, r6
 800971c:	4648      	mov	r0, r9
 800971e:	f000 ffaf 	bl	800a680 <__lshift>
 8009722:	4605      	mov	r5, r0
 8009724:	9b08      	ldr	r3, [sp, #32]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d05c      	beq.n	80097e4 <_dtoa_r+0xa3c>
 800972a:	6869      	ldr	r1, [r5, #4]
 800972c:	4648      	mov	r0, r9
 800972e:	f000 fd57 	bl	800a1e0 <_Balloc>
 8009732:	4606      	mov	r6, r0
 8009734:	b928      	cbnz	r0, 8009742 <_dtoa_r+0x99a>
 8009736:	4b82      	ldr	r3, [pc, #520]	@ (8009940 <_dtoa_r+0xb98>)
 8009738:	4602      	mov	r2, r0
 800973a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800973e:	f7ff bb4a 	b.w	8008dd6 <_dtoa_r+0x2e>
 8009742:	692a      	ldr	r2, [r5, #16]
 8009744:	3202      	adds	r2, #2
 8009746:	0092      	lsls	r2, r2, #2
 8009748:	f105 010c 	add.w	r1, r5, #12
 800974c:	300c      	adds	r0, #12
 800974e:	f7ff fa66 	bl	8008c1e <memcpy>
 8009752:	2201      	movs	r2, #1
 8009754:	4631      	mov	r1, r6
 8009756:	4648      	mov	r0, r9
 8009758:	f000 ff92 	bl	800a680 <__lshift>
 800975c:	f10a 0301 	add.w	r3, sl, #1
 8009760:	9300      	str	r3, [sp, #0]
 8009762:	eb0a 030b 	add.w	r3, sl, fp
 8009766:	9308      	str	r3, [sp, #32]
 8009768:	9b04      	ldr	r3, [sp, #16]
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	462f      	mov	r7, r5
 8009770:	9306      	str	r3, [sp, #24]
 8009772:	4605      	mov	r5, r0
 8009774:	9b00      	ldr	r3, [sp, #0]
 8009776:	9802      	ldr	r0, [sp, #8]
 8009778:	4621      	mov	r1, r4
 800977a:	f103 3bff 	add.w	fp, r3, #4294967295
 800977e:	f7ff fa8b 	bl	8008c98 <quorem>
 8009782:	4603      	mov	r3, r0
 8009784:	3330      	adds	r3, #48	@ 0x30
 8009786:	9003      	str	r0, [sp, #12]
 8009788:	4639      	mov	r1, r7
 800978a:	9802      	ldr	r0, [sp, #8]
 800978c:	9309      	str	r3, [sp, #36]	@ 0x24
 800978e:	f000 ffe3 	bl	800a758 <__mcmp>
 8009792:	462a      	mov	r2, r5
 8009794:	9004      	str	r0, [sp, #16]
 8009796:	4621      	mov	r1, r4
 8009798:	4648      	mov	r0, r9
 800979a:	f000 fff9 	bl	800a790 <__mdiff>
 800979e:	68c2      	ldr	r2, [r0, #12]
 80097a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097a2:	4606      	mov	r6, r0
 80097a4:	bb02      	cbnz	r2, 80097e8 <_dtoa_r+0xa40>
 80097a6:	4601      	mov	r1, r0
 80097a8:	9802      	ldr	r0, [sp, #8]
 80097aa:	f000 ffd5 	bl	800a758 <__mcmp>
 80097ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097b0:	4602      	mov	r2, r0
 80097b2:	4631      	mov	r1, r6
 80097b4:	4648      	mov	r0, r9
 80097b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80097b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80097ba:	f000 fd51 	bl	800a260 <_Bfree>
 80097be:	9b07      	ldr	r3, [sp, #28]
 80097c0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80097c2:	9e00      	ldr	r6, [sp, #0]
 80097c4:	ea42 0103 	orr.w	r1, r2, r3
 80097c8:	9b06      	ldr	r3, [sp, #24]
 80097ca:	4319      	orrs	r1, r3
 80097cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ce:	d10d      	bne.n	80097ec <_dtoa_r+0xa44>
 80097d0:	2b39      	cmp	r3, #57	@ 0x39
 80097d2:	d027      	beq.n	8009824 <_dtoa_r+0xa7c>
 80097d4:	9a04      	ldr	r2, [sp, #16]
 80097d6:	2a00      	cmp	r2, #0
 80097d8:	dd01      	ble.n	80097de <_dtoa_r+0xa36>
 80097da:	9b03      	ldr	r3, [sp, #12]
 80097dc:	3331      	adds	r3, #49	@ 0x31
 80097de:	f88b 3000 	strb.w	r3, [fp]
 80097e2:	e52e      	b.n	8009242 <_dtoa_r+0x49a>
 80097e4:	4628      	mov	r0, r5
 80097e6:	e7b9      	b.n	800975c <_dtoa_r+0x9b4>
 80097e8:	2201      	movs	r2, #1
 80097ea:	e7e2      	b.n	80097b2 <_dtoa_r+0xa0a>
 80097ec:	9904      	ldr	r1, [sp, #16]
 80097ee:	2900      	cmp	r1, #0
 80097f0:	db04      	blt.n	80097fc <_dtoa_r+0xa54>
 80097f2:	9807      	ldr	r0, [sp, #28]
 80097f4:	4301      	orrs	r1, r0
 80097f6:	9806      	ldr	r0, [sp, #24]
 80097f8:	4301      	orrs	r1, r0
 80097fa:	d120      	bne.n	800983e <_dtoa_r+0xa96>
 80097fc:	2a00      	cmp	r2, #0
 80097fe:	ddee      	ble.n	80097de <_dtoa_r+0xa36>
 8009800:	9902      	ldr	r1, [sp, #8]
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	2201      	movs	r2, #1
 8009806:	4648      	mov	r0, r9
 8009808:	f000 ff3a 	bl	800a680 <__lshift>
 800980c:	4621      	mov	r1, r4
 800980e:	9002      	str	r0, [sp, #8]
 8009810:	f000 ffa2 	bl	800a758 <__mcmp>
 8009814:	2800      	cmp	r0, #0
 8009816:	9b00      	ldr	r3, [sp, #0]
 8009818:	dc02      	bgt.n	8009820 <_dtoa_r+0xa78>
 800981a:	d1e0      	bne.n	80097de <_dtoa_r+0xa36>
 800981c:	07da      	lsls	r2, r3, #31
 800981e:	d5de      	bpl.n	80097de <_dtoa_r+0xa36>
 8009820:	2b39      	cmp	r3, #57	@ 0x39
 8009822:	d1da      	bne.n	80097da <_dtoa_r+0xa32>
 8009824:	2339      	movs	r3, #57	@ 0x39
 8009826:	f88b 3000 	strb.w	r3, [fp]
 800982a:	4633      	mov	r3, r6
 800982c:	461e      	mov	r6, r3
 800982e:	3b01      	subs	r3, #1
 8009830:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009834:	2a39      	cmp	r2, #57	@ 0x39
 8009836:	d04e      	beq.n	80098d6 <_dtoa_r+0xb2e>
 8009838:	3201      	adds	r2, #1
 800983a:	701a      	strb	r2, [r3, #0]
 800983c:	e501      	b.n	8009242 <_dtoa_r+0x49a>
 800983e:	2a00      	cmp	r2, #0
 8009840:	dd03      	ble.n	800984a <_dtoa_r+0xaa2>
 8009842:	2b39      	cmp	r3, #57	@ 0x39
 8009844:	d0ee      	beq.n	8009824 <_dtoa_r+0xa7c>
 8009846:	3301      	adds	r3, #1
 8009848:	e7c9      	b.n	80097de <_dtoa_r+0xa36>
 800984a:	9a00      	ldr	r2, [sp, #0]
 800984c:	9908      	ldr	r1, [sp, #32]
 800984e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009852:	428a      	cmp	r2, r1
 8009854:	d028      	beq.n	80098a8 <_dtoa_r+0xb00>
 8009856:	9902      	ldr	r1, [sp, #8]
 8009858:	2300      	movs	r3, #0
 800985a:	220a      	movs	r2, #10
 800985c:	4648      	mov	r0, r9
 800985e:	f000 fd21 	bl	800a2a4 <__multadd>
 8009862:	42af      	cmp	r7, r5
 8009864:	9002      	str	r0, [sp, #8]
 8009866:	f04f 0300 	mov.w	r3, #0
 800986a:	f04f 020a 	mov.w	r2, #10
 800986e:	4639      	mov	r1, r7
 8009870:	4648      	mov	r0, r9
 8009872:	d107      	bne.n	8009884 <_dtoa_r+0xadc>
 8009874:	f000 fd16 	bl	800a2a4 <__multadd>
 8009878:	4607      	mov	r7, r0
 800987a:	4605      	mov	r5, r0
 800987c:	9b00      	ldr	r3, [sp, #0]
 800987e:	3301      	adds	r3, #1
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	e777      	b.n	8009774 <_dtoa_r+0x9cc>
 8009884:	f000 fd0e 	bl	800a2a4 <__multadd>
 8009888:	4629      	mov	r1, r5
 800988a:	4607      	mov	r7, r0
 800988c:	2300      	movs	r3, #0
 800988e:	220a      	movs	r2, #10
 8009890:	4648      	mov	r0, r9
 8009892:	f000 fd07 	bl	800a2a4 <__multadd>
 8009896:	4605      	mov	r5, r0
 8009898:	e7f0      	b.n	800987c <_dtoa_r+0xad4>
 800989a:	f1bb 0f00 	cmp.w	fp, #0
 800989e:	bfcc      	ite	gt
 80098a0:	465e      	movgt	r6, fp
 80098a2:	2601      	movle	r6, #1
 80098a4:	4456      	add	r6, sl
 80098a6:	2700      	movs	r7, #0
 80098a8:	9902      	ldr	r1, [sp, #8]
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	2201      	movs	r2, #1
 80098ae:	4648      	mov	r0, r9
 80098b0:	f000 fee6 	bl	800a680 <__lshift>
 80098b4:	4621      	mov	r1, r4
 80098b6:	9002      	str	r0, [sp, #8]
 80098b8:	f000 ff4e 	bl	800a758 <__mcmp>
 80098bc:	2800      	cmp	r0, #0
 80098be:	dcb4      	bgt.n	800982a <_dtoa_r+0xa82>
 80098c0:	d102      	bne.n	80098c8 <_dtoa_r+0xb20>
 80098c2:	9b00      	ldr	r3, [sp, #0]
 80098c4:	07db      	lsls	r3, r3, #31
 80098c6:	d4b0      	bmi.n	800982a <_dtoa_r+0xa82>
 80098c8:	4633      	mov	r3, r6
 80098ca:	461e      	mov	r6, r3
 80098cc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098d0:	2a30      	cmp	r2, #48	@ 0x30
 80098d2:	d0fa      	beq.n	80098ca <_dtoa_r+0xb22>
 80098d4:	e4b5      	b.n	8009242 <_dtoa_r+0x49a>
 80098d6:	459a      	cmp	sl, r3
 80098d8:	d1a8      	bne.n	800982c <_dtoa_r+0xa84>
 80098da:	2331      	movs	r3, #49	@ 0x31
 80098dc:	f108 0801 	add.w	r8, r8, #1
 80098e0:	f88a 3000 	strb.w	r3, [sl]
 80098e4:	e4ad      	b.n	8009242 <_dtoa_r+0x49a>
 80098e6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098e8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009944 <_dtoa_r+0xb9c>
 80098ec:	b11b      	cbz	r3, 80098f6 <_dtoa_r+0xb4e>
 80098ee:	f10a 0308 	add.w	r3, sl, #8
 80098f2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80098f4:	6013      	str	r3, [r2, #0]
 80098f6:	4650      	mov	r0, sl
 80098f8:	b017      	add	sp, #92	@ 0x5c
 80098fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fe:	9b07      	ldr	r3, [sp, #28]
 8009900:	2b01      	cmp	r3, #1
 8009902:	f77f ae2e 	ble.w	8009562 <_dtoa_r+0x7ba>
 8009906:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009908:	9308      	str	r3, [sp, #32]
 800990a:	2001      	movs	r0, #1
 800990c:	e64d      	b.n	80095aa <_dtoa_r+0x802>
 800990e:	f1bb 0f00 	cmp.w	fp, #0
 8009912:	f77f aed9 	ble.w	80096c8 <_dtoa_r+0x920>
 8009916:	4656      	mov	r6, sl
 8009918:	9802      	ldr	r0, [sp, #8]
 800991a:	4621      	mov	r1, r4
 800991c:	f7ff f9bc 	bl	8008c98 <quorem>
 8009920:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009924:	f806 3b01 	strb.w	r3, [r6], #1
 8009928:	eba6 020a 	sub.w	r2, r6, sl
 800992c:	4593      	cmp	fp, r2
 800992e:	ddb4      	ble.n	800989a <_dtoa_r+0xaf2>
 8009930:	9902      	ldr	r1, [sp, #8]
 8009932:	2300      	movs	r3, #0
 8009934:	220a      	movs	r2, #10
 8009936:	4648      	mov	r0, r9
 8009938:	f000 fcb4 	bl	800a2a4 <__multadd>
 800993c:	9002      	str	r0, [sp, #8]
 800993e:	e7eb      	b.n	8009918 <_dtoa_r+0xb70>
 8009940:	0800b9c9 	.word	0x0800b9c9
 8009944:	0800b964 	.word	0x0800b964

08009948 <_free_r>:
 8009948:	b538      	push	{r3, r4, r5, lr}
 800994a:	4605      	mov	r5, r0
 800994c:	2900      	cmp	r1, #0
 800994e:	d041      	beq.n	80099d4 <_free_r+0x8c>
 8009950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009954:	1f0c      	subs	r4, r1, #4
 8009956:	2b00      	cmp	r3, #0
 8009958:	bfb8      	it	lt
 800995a:	18e4      	addlt	r4, r4, r3
 800995c:	f000 fc34 	bl	800a1c8 <__malloc_lock>
 8009960:	4a1d      	ldr	r2, [pc, #116]	@ (80099d8 <_free_r+0x90>)
 8009962:	6813      	ldr	r3, [r2, #0]
 8009964:	b933      	cbnz	r3, 8009974 <_free_r+0x2c>
 8009966:	6063      	str	r3, [r4, #4]
 8009968:	6014      	str	r4, [r2, #0]
 800996a:	4628      	mov	r0, r5
 800996c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009970:	f000 bc30 	b.w	800a1d4 <__malloc_unlock>
 8009974:	42a3      	cmp	r3, r4
 8009976:	d908      	bls.n	800998a <_free_r+0x42>
 8009978:	6820      	ldr	r0, [r4, #0]
 800997a:	1821      	adds	r1, r4, r0
 800997c:	428b      	cmp	r3, r1
 800997e:	bf01      	itttt	eq
 8009980:	6819      	ldreq	r1, [r3, #0]
 8009982:	685b      	ldreq	r3, [r3, #4]
 8009984:	1809      	addeq	r1, r1, r0
 8009986:	6021      	streq	r1, [r4, #0]
 8009988:	e7ed      	b.n	8009966 <_free_r+0x1e>
 800998a:	461a      	mov	r2, r3
 800998c:	685b      	ldr	r3, [r3, #4]
 800998e:	b10b      	cbz	r3, 8009994 <_free_r+0x4c>
 8009990:	42a3      	cmp	r3, r4
 8009992:	d9fa      	bls.n	800998a <_free_r+0x42>
 8009994:	6811      	ldr	r1, [r2, #0]
 8009996:	1850      	adds	r0, r2, r1
 8009998:	42a0      	cmp	r0, r4
 800999a:	d10b      	bne.n	80099b4 <_free_r+0x6c>
 800999c:	6820      	ldr	r0, [r4, #0]
 800999e:	4401      	add	r1, r0
 80099a0:	1850      	adds	r0, r2, r1
 80099a2:	4283      	cmp	r3, r0
 80099a4:	6011      	str	r1, [r2, #0]
 80099a6:	d1e0      	bne.n	800996a <_free_r+0x22>
 80099a8:	6818      	ldr	r0, [r3, #0]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	6053      	str	r3, [r2, #4]
 80099ae:	4408      	add	r0, r1
 80099b0:	6010      	str	r0, [r2, #0]
 80099b2:	e7da      	b.n	800996a <_free_r+0x22>
 80099b4:	d902      	bls.n	80099bc <_free_r+0x74>
 80099b6:	230c      	movs	r3, #12
 80099b8:	602b      	str	r3, [r5, #0]
 80099ba:	e7d6      	b.n	800996a <_free_r+0x22>
 80099bc:	6820      	ldr	r0, [r4, #0]
 80099be:	1821      	adds	r1, r4, r0
 80099c0:	428b      	cmp	r3, r1
 80099c2:	bf04      	itt	eq
 80099c4:	6819      	ldreq	r1, [r3, #0]
 80099c6:	685b      	ldreq	r3, [r3, #4]
 80099c8:	6063      	str	r3, [r4, #4]
 80099ca:	bf04      	itt	eq
 80099cc:	1809      	addeq	r1, r1, r0
 80099ce:	6021      	streq	r1, [r4, #0]
 80099d0:	6054      	str	r4, [r2, #4]
 80099d2:	e7ca      	b.n	800996a <_free_r+0x22>
 80099d4:	bd38      	pop	{r3, r4, r5, pc}
 80099d6:	bf00      	nop
 80099d8:	20001df8 	.word	0x20001df8

080099dc <rshift>:
 80099dc:	6903      	ldr	r3, [r0, #16]
 80099de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80099e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80099ea:	f100 0414 	add.w	r4, r0, #20
 80099ee:	dd45      	ble.n	8009a7c <rshift+0xa0>
 80099f0:	f011 011f 	ands.w	r1, r1, #31
 80099f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80099f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80099fc:	d10c      	bne.n	8009a18 <rshift+0x3c>
 80099fe:	f100 0710 	add.w	r7, r0, #16
 8009a02:	4629      	mov	r1, r5
 8009a04:	42b1      	cmp	r1, r6
 8009a06:	d334      	bcc.n	8009a72 <rshift+0x96>
 8009a08:	1a9b      	subs	r3, r3, r2
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	1eea      	subs	r2, r5, #3
 8009a0e:	4296      	cmp	r6, r2
 8009a10:	bf38      	it	cc
 8009a12:	2300      	movcc	r3, #0
 8009a14:	4423      	add	r3, r4
 8009a16:	e015      	b.n	8009a44 <rshift+0x68>
 8009a18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a1c:	f1c1 0820 	rsb	r8, r1, #32
 8009a20:	40cf      	lsrs	r7, r1
 8009a22:	f105 0e04 	add.w	lr, r5, #4
 8009a26:	46a1      	mov	r9, r4
 8009a28:	4576      	cmp	r6, lr
 8009a2a:	46f4      	mov	ip, lr
 8009a2c:	d815      	bhi.n	8009a5a <rshift+0x7e>
 8009a2e:	1a9a      	subs	r2, r3, r2
 8009a30:	0092      	lsls	r2, r2, #2
 8009a32:	3a04      	subs	r2, #4
 8009a34:	3501      	adds	r5, #1
 8009a36:	42ae      	cmp	r6, r5
 8009a38:	bf38      	it	cc
 8009a3a:	2200      	movcc	r2, #0
 8009a3c:	18a3      	adds	r3, r4, r2
 8009a3e:	50a7      	str	r7, [r4, r2]
 8009a40:	b107      	cbz	r7, 8009a44 <rshift+0x68>
 8009a42:	3304      	adds	r3, #4
 8009a44:	1b1a      	subs	r2, r3, r4
 8009a46:	42a3      	cmp	r3, r4
 8009a48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a4c:	bf08      	it	eq
 8009a4e:	2300      	moveq	r3, #0
 8009a50:	6102      	str	r2, [r0, #16]
 8009a52:	bf08      	it	eq
 8009a54:	6143      	streq	r3, [r0, #20]
 8009a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a5a:	f8dc c000 	ldr.w	ip, [ip]
 8009a5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a62:	ea4c 0707 	orr.w	r7, ip, r7
 8009a66:	f849 7b04 	str.w	r7, [r9], #4
 8009a6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a6e:	40cf      	lsrs	r7, r1
 8009a70:	e7da      	b.n	8009a28 <rshift+0x4c>
 8009a72:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a76:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a7a:	e7c3      	b.n	8009a04 <rshift+0x28>
 8009a7c:	4623      	mov	r3, r4
 8009a7e:	e7e1      	b.n	8009a44 <rshift+0x68>

08009a80 <__hexdig_fun>:
 8009a80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009a84:	2b09      	cmp	r3, #9
 8009a86:	d802      	bhi.n	8009a8e <__hexdig_fun+0xe>
 8009a88:	3820      	subs	r0, #32
 8009a8a:	b2c0      	uxtb	r0, r0
 8009a8c:	4770      	bx	lr
 8009a8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009a92:	2b05      	cmp	r3, #5
 8009a94:	d801      	bhi.n	8009a9a <__hexdig_fun+0x1a>
 8009a96:	3847      	subs	r0, #71	@ 0x47
 8009a98:	e7f7      	b.n	8009a8a <__hexdig_fun+0xa>
 8009a9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009a9e:	2b05      	cmp	r3, #5
 8009aa0:	d801      	bhi.n	8009aa6 <__hexdig_fun+0x26>
 8009aa2:	3827      	subs	r0, #39	@ 0x27
 8009aa4:	e7f1      	b.n	8009a8a <__hexdig_fun+0xa>
 8009aa6:	2000      	movs	r0, #0
 8009aa8:	4770      	bx	lr
	...

08009aac <__gethex>:
 8009aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab0:	b085      	sub	sp, #20
 8009ab2:	468a      	mov	sl, r1
 8009ab4:	9302      	str	r3, [sp, #8]
 8009ab6:	680b      	ldr	r3, [r1, #0]
 8009ab8:	9001      	str	r0, [sp, #4]
 8009aba:	4690      	mov	r8, r2
 8009abc:	1c9c      	adds	r4, r3, #2
 8009abe:	46a1      	mov	r9, r4
 8009ac0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009ac4:	2830      	cmp	r0, #48	@ 0x30
 8009ac6:	d0fa      	beq.n	8009abe <__gethex+0x12>
 8009ac8:	eba9 0303 	sub.w	r3, r9, r3
 8009acc:	f1a3 0b02 	sub.w	fp, r3, #2
 8009ad0:	f7ff ffd6 	bl	8009a80 <__hexdig_fun>
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d168      	bne.n	8009bac <__gethex+0x100>
 8009ada:	49a0      	ldr	r1, [pc, #640]	@ (8009d5c <__gethex+0x2b0>)
 8009adc:	2201      	movs	r2, #1
 8009ade:	4648      	mov	r0, r9
 8009ae0:	f7fe ffa5 	bl	8008a2e <strncmp>
 8009ae4:	4607      	mov	r7, r0
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	d167      	bne.n	8009bba <__gethex+0x10e>
 8009aea:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009aee:	4626      	mov	r6, r4
 8009af0:	f7ff ffc6 	bl	8009a80 <__hexdig_fun>
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d062      	beq.n	8009bbe <__gethex+0x112>
 8009af8:	4623      	mov	r3, r4
 8009afa:	7818      	ldrb	r0, [r3, #0]
 8009afc:	2830      	cmp	r0, #48	@ 0x30
 8009afe:	4699      	mov	r9, r3
 8009b00:	f103 0301 	add.w	r3, r3, #1
 8009b04:	d0f9      	beq.n	8009afa <__gethex+0x4e>
 8009b06:	f7ff ffbb 	bl	8009a80 <__hexdig_fun>
 8009b0a:	fab0 f580 	clz	r5, r0
 8009b0e:	096d      	lsrs	r5, r5, #5
 8009b10:	f04f 0b01 	mov.w	fp, #1
 8009b14:	464a      	mov	r2, r9
 8009b16:	4616      	mov	r6, r2
 8009b18:	3201      	adds	r2, #1
 8009b1a:	7830      	ldrb	r0, [r6, #0]
 8009b1c:	f7ff ffb0 	bl	8009a80 <__hexdig_fun>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	d1f8      	bne.n	8009b16 <__gethex+0x6a>
 8009b24:	498d      	ldr	r1, [pc, #564]	@ (8009d5c <__gethex+0x2b0>)
 8009b26:	2201      	movs	r2, #1
 8009b28:	4630      	mov	r0, r6
 8009b2a:	f7fe ff80 	bl	8008a2e <strncmp>
 8009b2e:	2800      	cmp	r0, #0
 8009b30:	d13f      	bne.n	8009bb2 <__gethex+0x106>
 8009b32:	b944      	cbnz	r4, 8009b46 <__gethex+0x9a>
 8009b34:	1c74      	adds	r4, r6, #1
 8009b36:	4622      	mov	r2, r4
 8009b38:	4616      	mov	r6, r2
 8009b3a:	3201      	adds	r2, #1
 8009b3c:	7830      	ldrb	r0, [r6, #0]
 8009b3e:	f7ff ff9f 	bl	8009a80 <__hexdig_fun>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	d1f8      	bne.n	8009b38 <__gethex+0x8c>
 8009b46:	1ba4      	subs	r4, r4, r6
 8009b48:	00a7      	lsls	r7, r4, #2
 8009b4a:	7833      	ldrb	r3, [r6, #0]
 8009b4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009b50:	2b50      	cmp	r3, #80	@ 0x50
 8009b52:	d13e      	bne.n	8009bd2 <__gethex+0x126>
 8009b54:	7873      	ldrb	r3, [r6, #1]
 8009b56:	2b2b      	cmp	r3, #43	@ 0x2b
 8009b58:	d033      	beq.n	8009bc2 <__gethex+0x116>
 8009b5a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009b5c:	d034      	beq.n	8009bc8 <__gethex+0x11c>
 8009b5e:	1c71      	adds	r1, r6, #1
 8009b60:	2400      	movs	r4, #0
 8009b62:	7808      	ldrb	r0, [r1, #0]
 8009b64:	f7ff ff8c 	bl	8009a80 <__hexdig_fun>
 8009b68:	1e43      	subs	r3, r0, #1
 8009b6a:	b2db      	uxtb	r3, r3
 8009b6c:	2b18      	cmp	r3, #24
 8009b6e:	d830      	bhi.n	8009bd2 <__gethex+0x126>
 8009b70:	f1a0 0210 	sub.w	r2, r0, #16
 8009b74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b78:	f7ff ff82 	bl	8009a80 <__hexdig_fun>
 8009b7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009b80:	fa5f fc8c 	uxtb.w	ip, ip
 8009b84:	f1bc 0f18 	cmp.w	ip, #24
 8009b88:	f04f 030a 	mov.w	r3, #10
 8009b8c:	d91e      	bls.n	8009bcc <__gethex+0x120>
 8009b8e:	b104      	cbz	r4, 8009b92 <__gethex+0xe6>
 8009b90:	4252      	negs	r2, r2
 8009b92:	4417      	add	r7, r2
 8009b94:	f8ca 1000 	str.w	r1, [sl]
 8009b98:	b1ed      	cbz	r5, 8009bd6 <__gethex+0x12a>
 8009b9a:	f1bb 0f00 	cmp.w	fp, #0
 8009b9e:	bf0c      	ite	eq
 8009ba0:	2506      	moveq	r5, #6
 8009ba2:	2500      	movne	r5, #0
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	b005      	add	sp, #20
 8009ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bac:	2500      	movs	r5, #0
 8009bae:	462c      	mov	r4, r5
 8009bb0:	e7b0      	b.n	8009b14 <__gethex+0x68>
 8009bb2:	2c00      	cmp	r4, #0
 8009bb4:	d1c7      	bne.n	8009b46 <__gethex+0x9a>
 8009bb6:	4627      	mov	r7, r4
 8009bb8:	e7c7      	b.n	8009b4a <__gethex+0x9e>
 8009bba:	464e      	mov	r6, r9
 8009bbc:	462f      	mov	r7, r5
 8009bbe:	2501      	movs	r5, #1
 8009bc0:	e7c3      	b.n	8009b4a <__gethex+0x9e>
 8009bc2:	2400      	movs	r4, #0
 8009bc4:	1cb1      	adds	r1, r6, #2
 8009bc6:	e7cc      	b.n	8009b62 <__gethex+0xb6>
 8009bc8:	2401      	movs	r4, #1
 8009bca:	e7fb      	b.n	8009bc4 <__gethex+0x118>
 8009bcc:	fb03 0002 	mla	r0, r3, r2, r0
 8009bd0:	e7ce      	b.n	8009b70 <__gethex+0xc4>
 8009bd2:	4631      	mov	r1, r6
 8009bd4:	e7de      	b.n	8009b94 <__gethex+0xe8>
 8009bd6:	eba6 0309 	sub.w	r3, r6, r9
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	4629      	mov	r1, r5
 8009bde:	2b07      	cmp	r3, #7
 8009be0:	dc0a      	bgt.n	8009bf8 <__gethex+0x14c>
 8009be2:	9801      	ldr	r0, [sp, #4]
 8009be4:	f000 fafc 	bl	800a1e0 <_Balloc>
 8009be8:	4604      	mov	r4, r0
 8009bea:	b940      	cbnz	r0, 8009bfe <__gethex+0x152>
 8009bec:	4b5c      	ldr	r3, [pc, #368]	@ (8009d60 <__gethex+0x2b4>)
 8009bee:	4602      	mov	r2, r0
 8009bf0:	21e4      	movs	r1, #228	@ 0xe4
 8009bf2:	485c      	ldr	r0, [pc, #368]	@ (8009d64 <__gethex+0x2b8>)
 8009bf4:	f7ff f832 	bl	8008c5c <__assert_func>
 8009bf8:	3101      	adds	r1, #1
 8009bfa:	105b      	asrs	r3, r3, #1
 8009bfc:	e7ef      	b.n	8009bde <__gethex+0x132>
 8009bfe:	f100 0a14 	add.w	sl, r0, #20
 8009c02:	2300      	movs	r3, #0
 8009c04:	4655      	mov	r5, sl
 8009c06:	469b      	mov	fp, r3
 8009c08:	45b1      	cmp	r9, r6
 8009c0a:	d337      	bcc.n	8009c7c <__gethex+0x1d0>
 8009c0c:	f845 bb04 	str.w	fp, [r5], #4
 8009c10:	eba5 050a 	sub.w	r5, r5, sl
 8009c14:	10ad      	asrs	r5, r5, #2
 8009c16:	6125      	str	r5, [r4, #16]
 8009c18:	4658      	mov	r0, fp
 8009c1a:	f000 fbd3 	bl	800a3c4 <__hi0bits>
 8009c1e:	016d      	lsls	r5, r5, #5
 8009c20:	f8d8 6000 	ldr.w	r6, [r8]
 8009c24:	1a2d      	subs	r5, r5, r0
 8009c26:	42b5      	cmp	r5, r6
 8009c28:	dd54      	ble.n	8009cd4 <__gethex+0x228>
 8009c2a:	1bad      	subs	r5, r5, r6
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f000 ff5f 	bl	800aaf2 <__any_on>
 8009c34:	4681      	mov	r9, r0
 8009c36:	b178      	cbz	r0, 8009c58 <__gethex+0x1ac>
 8009c38:	1e6b      	subs	r3, r5, #1
 8009c3a:	1159      	asrs	r1, r3, #5
 8009c3c:	f003 021f 	and.w	r2, r3, #31
 8009c40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009c44:	f04f 0901 	mov.w	r9, #1
 8009c48:	fa09 f202 	lsl.w	r2, r9, r2
 8009c4c:	420a      	tst	r2, r1
 8009c4e:	d003      	beq.n	8009c58 <__gethex+0x1ac>
 8009c50:	454b      	cmp	r3, r9
 8009c52:	dc36      	bgt.n	8009cc2 <__gethex+0x216>
 8009c54:	f04f 0902 	mov.w	r9, #2
 8009c58:	4629      	mov	r1, r5
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	f7ff febe 	bl	80099dc <rshift>
 8009c60:	442f      	add	r7, r5
 8009c62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c66:	42bb      	cmp	r3, r7
 8009c68:	da42      	bge.n	8009cf0 <__gethex+0x244>
 8009c6a:	9801      	ldr	r0, [sp, #4]
 8009c6c:	4621      	mov	r1, r4
 8009c6e:	f000 faf7 	bl	800a260 <_Bfree>
 8009c72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c74:	2300      	movs	r3, #0
 8009c76:	6013      	str	r3, [r2, #0]
 8009c78:	25a3      	movs	r5, #163	@ 0xa3
 8009c7a:	e793      	b.n	8009ba4 <__gethex+0xf8>
 8009c7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009c80:	2a2e      	cmp	r2, #46	@ 0x2e
 8009c82:	d012      	beq.n	8009caa <__gethex+0x1fe>
 8009c84:	2b20      	cmp	r3, #32
 8009c86:	d104      	bne.n	8009c92 <__gethex+0x1e6>
 8009c88:	f845 bb04 	str.w	fp, [r5], #4
 8009c8c:	f04f 0b00 	mov.w	fp, #0
 8009c90:	465b      	mov	r3, fp
 8009c92:	7830      	ldrb	r0, [r6, #0]
 8009c94:	9303      	str	r3, [sp, #12]
 8009c96:	f7ff fef3 	bl	8009a80 <__hexdig_fun>
 8009c9a:	9b03      	ldr	r3, [sp, #12]
 8009c9c:	f000 000f 	and.w	r0, r0, #15
 8009ca0:	4098      	lsls	r0, r3
 8009ca2:	ea4b 0b00 	orr.w	fp, fp, r0
 8009ca6:	3304      	adds	r3, #4
 8009ca8:	e7ae      	b.n	8009c08 <__gethex+0x15c>
 8009caa:	45b1      	cmp	r9, r6
 8009cac:	d8ea      	bhi.n	8009c84 <__gethex+0x1d8>
 8009cae:	492b      	ldr	r1, [pc, #172]	@ (8009d5c <__gethex+0x2b0>)
 8009cb0:	9303      	str	r3, [sp, #12]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f7fe feba 	bl	8008a2e <strncmp>
 8009cba:	9b03      	ldr	r3, [sp, #12]
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d1e1      	bne.n	8009c84 <__gethex+0x1d8>
 8009cc0:	e7a2      	b.n	8009c08 <__gethex+0x15c>
 8009cc2:	1ea9      	subs	r1, r5, #2
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	f000 ff14 	bl	800aaf2 <__any_on>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d0c2      	beq.n	8009c54 <__gethex+0x1a8>
 8009cce:	f04f 0903 	mov.w	r9, #3
 8009cd2:	e7c1      	b.n	8009c58 <__gethex+0x1ac>
 8009cd4:	da09      	bge.n	8009cea <__gethex+0x23e>
 8009cd6:	1b75      	subs	r5, r6, r5
 8009cd8:	4621      	mov	r1, r4
 8009cda:	9801      	ldr	r0, [sp, #4]
 8009cdc:	462a      	mov	r2, r5
 8009cde:	f000 fccf 	bl	800a680 <__lshift>
 8009ce2:	1b7f      	subs	r7, r7, r5
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	f100 0a14 	add.w	sl, r0, #20
 8009cea:	f04f 0900 	mov.w	r9, #0
 8009cee:	e7b8      	b.n	8009c62 <__gethex+0x1b6>
 8009cf0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009cf4:	42bd      	cmp	r5, r7
 8009cf6:	dd6f      	ble.n	8009dd8 <__gethex+0x32c>
 8009cf8:	1bed      	subs	r5, r5, r7
 8009cfa:	42ae      	cmp	r6, r5
 8009cfc:	dc34      	bgt.n	8009d68 <__gethex+0x2bc>
 8009cfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d02:	2b02      	cmp	r3, #2
 8009d04:	d022      	beq.n	8009d4c <__gethex+0x2a0>
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d024      	beq.n	8009d54 <__gethex+0x2a8>
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	d115      	bne.n	8009d3a <__gethex+0x28e>
 8009d0e:	42ae      	cmp	r6, r5
 8009d10:	d113      	bne.n	8009d3a <__gethex+0x28e>
 8009d12:	2e01      	cmp	r6, #1
 8009d14:	d10b      	bne.n	8009d2e <__gethex+0x282>
 8009d16:	9a02      	ldr	r2, [sp, #8]
 8009d18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d1c:	6013      	str	r3, [r2, #0]
 8009d1e:	2301      	movs	r3, #1
 8009d20:	6123      	str	r3, [r4, #16]
 8009d22:	f8ca 3000 	str.w	r3, [sl]
 8009d26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d28:	2562      	movs	r5, #98	@ 0x62
 8009d2a:	601c      	str	r4, [r3, #0]
 8009d2c:	e73a      	b.n	8009ba4 <__gethex+0xf8>
 8009d2e:	1e71      	subs	r1, r6, #1
 8009d30:	4620      	mov	r0, r4
 8009d32:	f000 fede 	bl	800aaf2 <__any_on>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	d1ed      	bne.n	8009d16 <__gethex+0x26a>
 8009d3a:	9801      	ldr	r0, [sp, #4]
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	f000 fa8f 	bl	800a260 <_Bfree>
 8009d42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009d44:	2300      	movs	r3, #0
 8009d46:	6013      	str	r3, [r2, #0]
 8009d48:	2550      	movs	r5, #80	@ 0x50
 8009d4a:	e72b      	b.n	8009ba4 <__gethex+0xf8>
 8009d4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d1f3      	bne.n	8009d3a <__gethex+0x28e>
 8009d52:	e7e0      	b.n	8009d16 <__gethex+0x26a>
 8009d54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1dd      	bne.n	8009d16 <__gethex+0x26a>
 8009d5a:	e7ee      	b.n	8009d3a <__gethex+0x28e>
 8009d5c:	0800b874 	.word	0x0800b874
 8009d60:	0800b9c9 	.word	0x0800b9c9
 8009d64:	0800b9da 	.word	0x0800b9da
 8009d68:	1e6f      	subs	r7, r5, #1
 8009d6a:	f1b9 0f00 	cmp.w	r9, #0
 8009d6e:	d130      	bne.n	8009dd2 <__gethex+0x326>
 8009d70:	b127      	cbz	r7, 8009d7c <__gethex+0x2d0>
 8009d72:	4639      	mov	r1, r7
 8009d74:	4620      	mov	r0, r4
 8009d76:	f000 febc 	bl	800aaf2 <__any_on>
 8009d7a:	4681      	mov	r9, r0
 8009d7c:	117a      	asrs	r2, r7, #5
 8009d7e:	2301      	movs	r3, #1
 8009d80:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009d84:	f007 071f 	and.w	r7, r7, #31
 8009d88:	40bb      	lsls	r3, r7
 8009d8a:	4213      	tst	r3, r2
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	4620      	mov	r0, r4
 8009d90:	bf18      	it	ne
 8009d92:	f049 0902 	orrne.w	r9, r9, #2
 8009d96:	f7ff fe21 	bl	80099dc <rshift>
 8009d9a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009d9e:	1b76      	subs	r6, r6, r5
 8009da0:	2502      	movs	r5, #2
 8009da2:	f1b9 0f00 	cmp.w	r9, #0
 8009da6:	d047      	beq.n	8009e38 <__gethex+0x38c>
 8009da8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d015      	beq.n	8009ddc <__gethex+0x330>
 8009db0:	2b03      	cmp	r3, #3
 8009db2:	d017      	beq.n	8009de4 <__gethex+0x338>
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d109      	bne.n	8009dcc <__gethex+0x320>
 8009db8:	f019 0f02 	tst.w	r9, #2
 8009dbc:	d006      	beq.n	8009dcc <__gethex+0x320>
 8009dbe:	f8da 3000 	ldr.w	r3, [sl]
 8009dc2:	ea49 0903 	orr.w	r9, r9, r3
 8009dc6:	f019 0f01 	tst.w	r9, #1
 8009dca:	d10e      	bne.n	8009dea <__gethex+0x33e>
 8009dcc:	f045 0510 	orr.w	r5, r5, #16
 8009dd0:	e032      	b.n	8009e38 <__gethex+0x38c>
 8009dd2:	f04f 0901 	mov.w	r9, #1
 8009dd6:	e7d1      	b.n	8009d7c <__gethex+0x2d0>
 8009dd8:	2501      	movs	r5, #1
 8009dda:	e7e2      	b.n	8009da2 <__gethex+0x2f6>
 8009ddc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009dde:	f1c3 0301 	rsb	r3, r3, #1
 8009de2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009de4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0f0      	beq.n	8009dcc <__gethex+0x320>
 8009dea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009dee:	f104 0314 	add.w	r3, r4, #20
 8009df2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009df6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009dfa:	f04f 0c00 	mov.w	ip, #0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e04:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e08:	d01b      	beq.n	8009e42 <__gethex+0x396>
 8009e0a:	3201      	adds	r2, #1
 8009e0c:	6002      	str	r2, [r0, #0]
 8009e0e:	2d02      	cmp	r5, #2
 8009e10:	f104 0314 	add.w	r3, r4, #20
 8009e14:	d13c      	bne.n	8009e90 <__gethex+0x3e4>
 8009e16:	f8d8 2000 	ldr.w	r2, [r8]
 8009e1a:	3a01      	subs	r2, #1
 8009e1c:	42b2      	cmp	r2, r6
 8009e1e:	d109      	bne.n	8009e34 <__gethex+0x388>
 8009e20:	1171      	asrs	r1, r6, #5
 8009e22:	2201      	movs	r2, #1
 8009e24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e28:	f006 061f 	and.w	r6, r6, #31
 8009e2c:	fa02 f606 	lsl.w	r6, r2, r6
 8009e30:	421e      	tst	r6, r3
 8009e32:	d13a      	bne.n	8009eaa <__gethex+0x3fe>
 8009e34:	f045 0520 	orr.w	r5, r5, #32
 8009e38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e3a:	601c      	str	r4, [r3, #0]
 8009e3c:	9b02      	ldr	r3, [sp, #8]
 8009e3e:	601f      	str	r7, [r3, #0]
 8009e40:	e6b0      	b.n	8009ba4 <__gethex+0xf8>
 8009e42:	4299      	cmp	r1, r3
 8009e44:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e48:	d8d9      	bhi.n	8009dfe <__gethex+0x352>
 8009e4a:	68a3      	ldr	r3, [r4, #8]
 8009e4c:	459b      	cmp	fp, r3
 8009e4e:	db17      	blt.n	8009e80 <__gethex+0x3d4>
 8009e50:	6861      	ldr	r1, [r4, #4]
 8009e52:	9801      	ldr	r0, [sp, #4]
 8009e54:	3101      	adds	r1, #1
 8009e56:	f000 f9c3 	bl	800a1e0 <_Balloc>
 8009e5a:	4681      	mov	r9, r0
 8009e5c:	b918      	cbnz	r0, 8009e66 <__gethex+0x3ba>
 8009e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ec8 <__gethex+0x41c>)
 8009e60:	4602      	mov	r2, r0
 8009e62:	2184      	movs	r1, #132	@ 0x84
 8009e64:	e6c5      	b.n	8009bf2 <__gethex+0x146>
 8009e66:	6922      	ldr	r2, [r4, #16]
 8009e68:	3202      	adds	r2, #2
 8009e6a:	f104 010c 	add.w	r1, r4, #12
 8009e6e:	0092      	lsls	r2, r2, #2
 8009e70:	300c      	adds	r0, #12
 8009e72:	f7fe fed4 	bl	8008c1e <memcpy>
 8009e76:	4621      	mov	r1, r4
 8009e78:	9801      	ldr	r0, [sp, #4]
 8009e7a:	f000 f9f1 	bl	800a260 <_Bfree>
 8009e7e:	464c      	mov	r4, r9
 8009e80:	6923      	ldr	r3, [r4, #16]
 8009e82:	1c5a      	adds	r2, r3, #1
 8009e84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e88:	6122      	str	r2, [r4, #16]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	615a      	str	r2, [r3, #20]
 8009e8e:	e7be      	b.n	8009e0e <__gethex+0x362>
 8009e90:	6922      	ldr	r2, [r4, #16]
 8009e92:	455a      	cmp	r2, fp
 8009e94:	dd0b      	ble.n	8009eae <__gethex+0x402>
 8009e96:	2101      	movs	r1, #1
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f7ff fd9f 	bl	80099dc <rshift>
 8009e9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ea2:	3701      	adds	r7, #1
 8009ea4:	42bb      	cmp	r3, r7
 8009ea6:	f6ff aee0 	blt.w	8009c6a <__gethex+0x1be>
 8009eaa:	2501      	movs	r5, #1
 8009eac:	e7c2      	b.n	8009e34 <__gethex+0x388>
 8009eae:	f016 061f 	ands.w	r6, r6, #31
 8009eb2:	d0fa      	beq.n	8009eaa <__gethex+0x3fe>
 8009eb4:	4453      	add	r3, sl
 8009eb6:	f1c6 0620 	rsb	r6, r6, #32
 8009eba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009ebe:	f000 fa81 	bl	800a3c4 <__hi0bits>
 8009ec2:	42b0      	cmp	r0, r6
 8009ec4:	dbe7      	blt.n	8009e96 <__gethex+0x3ea>
 8009ec6:	e7f0      	b.n	8009eaa <__gethex+0x3fe>
 8009ec8:	0800b9c9 	.word	0x0800b9c9

08009ecc <L_shift>:
 8009ecc:	f1c2 0208 	rsb	r2, r2, #8
 8009ed0:	0092      	lsls	r2, r2, #2
 8009ed2:	b570      	push	{r4, r5, r6, lr}
 8009ed4:	f1c2 0620 	rsb	r6, r2, #32
 8009ed8:	6843      	ldr	r3, [r0, #4]
 8009eda:	6804      	ldr	r4, [r0, #0]
 8009edc:	fa03 f506 	lsl.w	r5, r3, r6
 8009ee0:	432c      	orrs	r4, r5
 8009ee2:	40d3      	lsrs	r3, r2
 8009ee4:	6004      	str	r4, [r0, #0]
 8009ee6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009eea:	4288      	cmp	r0, r1
 8009eec:	d3f4      	bcc.n	8009ed8 <L_shift+0xc>
 8009eee:	bd70      	pop	{r4, r5, r6, pc}

08009ef0 <__match>:
 8009ef0:	b530      	push	{r4, r5, lr}
 8009ef2:	6803      	ldr	r3, [r0, #0]
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009efa:	b914      	cbnz	r4, 8009f02 <__match+0x12>
 8009efc:	6003      	str	r3, [r0, #0]
 8009efe:	2001      	movs	r0, #1
 8009f00:	bd30      	pop	{r4, r5, pc}
 8009f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f06:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009f0a:	2d19      	cmp	r5, #25
 8009f0c:	bf98      	it	ls
 8009f0e:	3220      	addls	r2, #32
 8009f10:	42a2      	cmp	r2, r4
 8009f12:	d0f0      	beq.n	8009ef6 <__match+0x6>
 8009f14:	2000      	movs	r0, #0
 8009f16:	e7f3      	b.n	8009f00 <__match+0x10>

08009f18 <__hexnan>:
 8009f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1c:	680b      	ldr	r3, [r1, #0]
 8009f1e:	6801      	ldr	r1, [r0, #0]
 8009f20:	115e      	asrs	r6, r3, #5
 8009f22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f26:	f013 031f 	ands.w	r3, r3, #31
 8009f2a:	b087      	sub	sp, #28
 8009f2c:	bf18      	it	ne
 8009f2e:	3604      	addne	r6, #4
 8009f30:	2500      	movs	r5, #0
 8009f32:	1f37      	subs	r7, r6, #4
 8009f34:	4682      	mov	sl, r0
 8009f36:	4690      	mov	r8, r2
 8009f38:	9301      	str	r3, [sp, #4]
 8009f3a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009f3e:	46b9      	mov	r9, r7
 8009f40:	463c      	mov	r4, r7
 8009f42:	9502      	str	r5, [sp, #8]
 8009f44:	46ab      	mov	fp, r5
 8009f46:	784a      	ldrb	r2, [r1, #1]
 8009f48:	1c4b      	adds	r3, r1, #1
 8009f4a:	9303      	str	r3, [sp, #12]
 8009f4c:	b342      	cbz	r2, 8009fa0 <__hexnan+0x88>
 8009f4e:	4610      	mov	r0, r2
 8009f50:	9105      	str	r1, [sp, #20]
 8009f52:	9204      	str	r2, [sp, #16]
 8009f54:	f7ff fd94 	bl	8009a80 <__hexdig_fun>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d151      	bne.n	800a000 <__hexnan+0xe8>
 8009f5c:	9a04      	ldr	r2, [sp, #16]
 8009f5e:	9905      	ldr	r1, [sp, #20]
 8009f60:	2a20      	cmp	r2, #32
 8009f62:	d818      	bhi.n	8009f96 <__hexnan+0x7e>
 8009f64:	9b02      	ldr	r3, [sp, #8]
 8009f66:	459b      	cmp	fp, r3
 8009f68:	dd13      	ble.n	8009f92 <__hexnan+0x7a>
 8009f6a:	454c      	cmp	r4, r9
 8009f6c:	d206      	bcs.n	8009f7c <__hexnan+0x64>
 8009f6e:	2d07      	cmp	r5, #7
 8009f70:	dc04      	bgt.n	8009f7c <__hexnan+0x64>
 8009f72:	462a      	mov	r2, r5
 8009f74:	4649      	mov	r1, r9
 8009f76:	4620      	mov	r0, r4
 8009f78:	f7ff ffa8 	bl	8009ecc <L_shift>
 8009f7c:	4544      	cmp	r4, r8
 8009f7e:	d952      	bls.n	800a026 <__hexnan+0x10e>
 8009f80:	2300      	movs	r3, #0
 8009f82:	f1a4 0904 	sub.w	r9, r4, #4
 8009f86:	f844 3c04 	str.w	r3, [r4, #-4]
 8009f8a:	f8cd b008 	str.w	fp, [sp, #8]
 8009f8e:	464c      	mov	r4, r9
 8009f90:	461d      	mov	r5, r3
 8009f92:	9903      	ldr	r1, [sp, #12]
 8009f94:	e7d7      	b.n	8009f46 <__hexnan+0x2e>
 8009f96:	2a29      	cmp	r2, #41	@ 0x29
 8009f98:	d157      	bne.n	800a04a <__hexnan+0x132>
 8009f9a:	3102      	adds	r1, #2
 8009f9c:	f8ca 1000 	str.w	r1, [sl]
 8009fa0:	f1bb 0f00 	cmp.w	fp, #0
 8009fa4:	d051      	beq.n	800a04a <__hexnan+0x132>
 8009fa6:	454c      	cmp	r4, r9
 8009fa8:	d206      	bcs.n	8009fb8 <__hexnan+0xa0>
 8009faa:	2d07      	cmp	r5, #7
 8009fac:	dc04      	bgt.n	8009fb8 <__hexnan+0xa0>
 8009fae:	462a      	mov	r2, r5
 8009fb0:	4649      	mov	r1, r9
 8009fb2:	4620      	mov	r0, r4
 8009fb4:	f7ff ff8a 	bl	8009ecc <L_shift>
 8009fb8:	4544      	cmp	r4, r8
 8009fba:	d936      	bls.n	800a02a <__hexnan+0x112>
 8009fbc:	f1a8 0204 	sub.w	r2, r8, #4
 8009fc0:	4623      	mov	r3, r4
 8009fc2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009fc6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009fca:	429f      	cmp	r7, r3
 8009fcc:	d2f9      	bcs.n	8009fc2 <__hexnan+0xaa>
 8009fce:	1b3b      	subs	r3, r7, r4
 8009fd0:	f023 0303 	bic.w	r3, r3, #3
 8009fd4:	3304      	adds	r3, #4
 8009fd6:	3401      	adds	r4, #1
 8009fd8:	3e03      	subs	r6, #3
 8009fda:	42b4      	cmp	r4, r6
 8009fdc:	bf88      	it	hi
 8009fde:	2304      	movhi	r3, #4
 8009fe0:	4443      	add	r3, r8
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f843 2b04 	str.w	r2, [r3], #4
 8009fe8:	429f      	cmp	r7, r3
 8009fea:	d2fb      	bcs.n	8009fe4 <__hexnan+0xcc>
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	b91b      	cbnz	r3, 8009ff8 <__hexnan+0xe0>
 8009ff0:	4547      	cmp	r7, r8
 8009ff2:	d128      	bne.n	800a046 <__hexnan+0x12e>
 8009ff4:	2301      	movs	r3, #1
 8009ff6:	603b      	str	r3, [r7, #0]
 8009ff8:	2005      	movs	r0, #5
 8009ffa:	b007      	add	sp, #28
 8009ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a000:	3501      	adds	r5, #1
 800a002:	2d08      	cmp	r5, #8
 800a004:	f10b 0b01 	add.w	fp, fp, #1
 800a008:	dd06      	ble.n	800a018 <__hexnan+0x100>
 800a00a:	4544      	cmp	r4, r8
 800a00c:	d9c1      	bls.n	8009f92 <__hexnan+0x7a>
 800a00e:	2300      	movs	r3, #0
 800a010:	f844 3c04 	str.w	r3, [r4, #-4]
 800a014:	2501      	movs	r5, #1
 800a016:	3c04      	subs	r4, #4
 800a018:	6822      	ldr	r2, [r4, #0]
 800a01a:	f000 000f 	and.w	r0, r0, #15
 800a01e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a022:	6020      	str	r0, [r4, #0]
 800a024:	e7b5      	b.n	8009f92 <__hexnan+0x7a>
 800a026:	2508      	movs	r5, #8
 800a028:	e7b3      	b.n	8009f92 <__hexnan+0x7a>
 800a02a:	9b01      	ldr	r3, [sp, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d0dd      	beq.n	8009fec <__hexnan+0xd4>
 800a030:	f1c3 0320 	rsb	r3, r3, #32
 800a034:	f04f 32ff 	mov.w	r2, #4294967295
 800a038:	40da      	lsrs	r2, r3
 800a03a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a03e:	4013      	ands	r3, r2
 800a040:	f846 3c04 	str.w	r3, [r6, #-4]
 800a044:	e7d2      	b.n	8009fec <__hexnan+0xd4>
 800a046:	3f04      	subs	r7, #4
 800a048:	e7d0      	b.n	8009fec <__hexnan+0xd4>
 800a04a:	2004      	movs	r0, #4
 800a04c:	e7d5      	b.n	8009ffa <__hexnan+0xe2>
	...

0800a050 <malloc>:
 800a050:	4b02      	ldr	r3, [pc, #8]	@ (800a05c <malloc+0xc>)
 800a052:	4601      	mov	r1, r0
 800a054:	6818      	ldr	r0, [r3, #0]
 800a056:	f000 b825 	b.w	800a0a4 <_malloc_r>
 800a05a:	bf00      	nop
 800a05c:	200001ec 	.word	0x200001ec

0800a060 <sbrk_aligned>:
 800a060:	b570      	push	{r4, r5, r6, lr}
 800a062:	4e0f      	ldr	r6, [pc, #60]	@ (800a0a0 <sbrk_aligned+0x40>)
 800a064:	460c      	mov	r4, r1
 800a066:	6831      	ldr	r1, [r6, #0]
 800a068:	4605      	mov	r5, r0
 800a06a:	b911      	cbnz	r1, 800a072 <sbrk_aligned+0x12>
 800a06c:	f001 f964 	bl	800b338 <_sbrk_r>
 800a070:	6030      	str	r0, [r6, #0]
 800a072:	4621      	mov	r1, r4
 800a074:	4628      	mov	r0, r5
 800a076:	f001 f95f 	bl	800b338 <_sbrk_r>
 800a07a:	1c43      	adds	r3, r0, #1
 800a07c:	d103      	bne.n	800a086 <sbrk_aligned+0x26>
 800a07e:	f04f 34ff 	mov.w	r4, #4294967295
 800a082:	4620      	mov	r0, r4
 800a084:	bd70      	pop	{r4, r5, r6, pc}
 800a086:	1cc4      	adds	r4, r0, #3
 800a088:	f024 0403 	bic.w	r4, r4, #3
 800a08c:	42a0      	cmp	r0, r4
 800a08e:	d0f8      	beq.n	800a082 <sbrk_aligned+0x22>
 800a090:	1a21      	subs	r1, r4, r0
 800a092:	4628      	mov	r0, r5
 800a094:	f001 f950 	bl	800b338 <_sbrk_r>
 800a098:	3001      	adds	r0, #1
 800a09a:	d1f2      	bne.n	800a082 <sbrk_aligned+0x22>
 800a09c:	e7ef      	b.n	800a07e <sbrk_aligned+0x1e>
 800a09e:	bf00      	nop
 800a0a0:	20001df4 	.word	0x20001df4

0800a0a4 <_malloc_r>:
 800a0a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0a8:	1ccd      	adds	r5, r1, #3
 800a0aa:	f025 0503 	bic.w	r5, r5, #3
 800a0ae:	3508      	adds	r5, #8
 800a0b0:	2d0c      	cmp	r5, #12
 800a0b2:	bf38      	it	cc
 800a0b4:	250c      	movcc	r5, #12
 800a0b6:	2d00      	cmp	r5, #0
 800a0b8:	4606      	mov	r6, r0
 800a0ba:	db01      	blt.n	800a0c0 <_malloc_r+0x1c>
 800a0bc:	42a9      	cmp	r1, r5
 800a0be:	d904      	bls.n	800a0ca <_malloc_r+0x26>
 800a0c0:	230c      	movs	r3, #12
 800a0c2:	6033      	str	r3, [r6, #0]
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a1a0 <_malloc_r+0xfc>
 800a0ce:	f000 f87b 	bl	800a1c8 <__malloc_lock>
 800a0d2:	f8d8 3000 	ldr.w	r3, [r8]
 800a0d6:	461c      	mov	r4, r3
 800a0d8:	bb44      	cbnz	r4, 800a12c <_malloc_r+0x88>
 800a0da:	4629      	mov	r1, r5
 800a0dc:	4630      	mov	r0, r6
 800a0de:	f7ff ffbf 	bl	800a060 <sbrk_aligned>
 800a0e2:	1c43      	adds	r3, r0, #1
 800a0e4:	4604      	mov	r4, r0
 800a0e6:	d158      	bne.n	800a19a <_malloc_r+0xf6>
 800a0e8:	f8d8 4000 	ldr.w	r4, [r8]
 800a0ec:	4627      	mov	r7, r4
 800a0ee:	2f00      	cmp	r7, #0
 800a0f0:	d143      	bne.n	800a17a <_malloc_r+0xd6>
 800a0f2:	2c00      	cmp	r4, #0
 800a0f4:	d04b      	beq.n	800a18e <_malloc_r+0xea>
 800a0f6:	6823      	ldr	r3, [r4, #0]
 800a0f8:	4639      	mov	r1, r7
 800a0fa:	4630      	mov	r0, r6
 800a0fc:	eb04 0903 	add.w	r9, r4, r3
 800a100:	f001 f91a 	bl	800b338 <_sbrk_r>
 800a104:	4581      	cmp	r9, r0
 800a106:	d142      	bne.n	800a18e <_malloc_r+0xea>
 800a108:	6821      	ldr	r1, [r4, #0]
 800a10a:	1a6d      	subs	r5, r5, r1
 800a10c:	4629      	mov	r1, r5
 800a10e:	4630      	mov	r0, r6
 800a110:	f7ff ffa6 	bl	800a060 <sbrk_aligned>
 800a114:	3001      	adds	r0, #1
 800a116:	d03a      	beq.n	800a18e <_malloc_r+0xea>
 800a118:	6823      	ldr	r3, [r4, #0]
 800a11a:	442b      	add	r3, r5
 800a11c:	6023      	str	r3, [r4, #0]
 800a11e:	f8d8 3000 	ldr.w	r3, [r8]
 800a122:	685a      	ldr	r2, [r3, #4]
 800a124:	bb62      	cbnz	r2, 800a180 <_malloc_r+0xdc>
 800a126:	f8c8 7000 	str.w	r7, [r8]
 800a12a:	e00f      	b.n	800a14c <_malloc_r+0xa8>
 800a12c:	6822      	ldr	r2, [r4, #0]
 800a12e:	1b52      	subs	r2, r2, r5
 800a130:	d420      	bmi.n	800a174 <_malloc_r+0xd0>
 800a132:	2a0b      	cmp	r2, #11
 800a134:	d917      	bls.n	800a166 <_malloc_r+0xc2>
 800a136:	1961      	adds	r1, r4, r5
 800a138:	42a3      	cmp	r3, r4
 800a13a:	6025      	str	r5, [r4, #0]
 800a13c:	bf18      	it	ne
 800a13e:	6059      	strne	r1, [r3, #4]
 800a140:	6863      	ldr	r3, [r4, #4]
 800a142:	bf08      	it	eq
 800a144:	f8c8 1000 	streq.w	r1, [r8]
 800a148:	5162      	str	r2, [r4, r5]
 800a14a:	604b      	str	r3, [r1, #4]
 800a14c:	4630      	mov	r0, r6
 800a14e:	f000 f841 	bl	800a1d4 <__malloc_unlock>
 800a152:	f104 000b 	add.w	r0, r4, #11
 800a156:	1d23      	adds	r3, r4, #4
 800a158:	f020 0007 	bic.w	r0, r0, #7
 800a15c:	1ac2      	subs	r2, r0, r3
 800a15e:	bf1c      	itt	ne
 800a160:	1a1b      	subne	r3, r3, r0
 800a162:	50a3      	strne	r3, [r4, r2]
 800a164:	e7af      	b.n	800a0c6 <_malloc_r+0x22>
 800a166:	6862      	ldr	r2, [r4, #4]
 800a168:	42a3      	cmp	r3, r4
 800a16a:	bf0c      	ite	eq
 800a16c:	f8c8 2000 	streq.w	r2, [r8]
 800a170:	605a      	strne	r2, [r3, #4]
 800a172:	e7eb      	b.n	800a14c <_malloc_r+0xa8>
 800a174:	4623      	mov	r3, r4
 800a176:	6864      	ldr	r4, [r4, #4]
 800a178:	e7ae      	b.n	800a0d8 <_malloc_r+0x34>
 800a17a:	463c      	mov	r4, r7
 800a17c:	687f      	ldr	r7, [r7, #4]
 800a17e:	e7b6      	b.n	800a0ee <_malloc_r+0x4a>
 800a180:	461a      	mov	r2, r3
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	42a3      	cmp	r3, r4
 800a186:	d1fb      	bne.n	800a180 <_malloc_r+0xdc>
 800a188:	2300      	movs	r3, #0
 800a18a:	6053      	str	r3, [r2, #4]
 800a18c:	e7de      	b.n	800a14c <_malloc_r+0xa8>
 800a18e:	230c      	movs	r3, #12
 800a190:	6033      	str	r3, [r6, #0]
 800a192:	4630      	mov	r0, r6
 800a194:	f000 f81e 	bl	800a1d4 <__malloc_unlock>
 800a198:	e794      	b.n	800a0c4 <_malloc_r+0x20>
 800a19a:	6005      	str	r5, [r0, #0]
 800a19c:	e7d6      	b.n	800a14c <_malloc_r+0xa8>
 800a19e:	bf00      	nop
 800a1a0:	20001df8 	.word	0x20001df8

0800a1a4 <__ascii_mbtowc>:
 800a1a4:	b082      	sub	sp, #8
 800a1a6:	b901      	cbnz	r1, 800a1aa <__ascii_mbtowc+0x6>
 800a1a8:	a901      	add	r1, sp, #4
 800a1aa:	b142      	cbz	r2, 800a1be <__ascii_mbtowc+0x1a>
 800a1ac:	b14b      	cbz	r3, 800a1c2 <__ascii_mbtowc+0x1e>
 800a1ae:	7813      	ldrb	r3, [r2, #0]
 800a1b0:	600b      	str	r3, [r1, #0]
 800a1b2:	7812      	ldrb	r2, [r2, #0]
 800a1b4:	1e10      	subs	r0, r2, #0
 800a1b6:	bf18      	it	ne
 800a1b8:	2001      	movne	r0, #1
 800a1ba:	b002      	add	sp, #8
 800a1bc:	4770      	bx	lr
 800a1be:	4610      	mov	r0, r2
 800a1c0:	e7fb      	b.n	800a1ba <__ascii_mbtowc+0x16>
 800a1c2:	f06f 0001 	mvn.w	r0, #1
 800a1c6:	e7f8      	b.n	800a1ba <__ascii_mbtowc+0x16>

0800a1c8 <__malloc_lock>:
 800a1c8:	4801      	ldr	r0, [pc, #4]	@ (800a1d0 <__malloc_lock+0x8>)
 800a1ca:	f7fe bd26 	b.w	8008c1a <__retarget_lock_acquire_recursive>
 800a1ce:	bf00      	nop
 800a1d0:	20001df0 	.word	0x20001df0

0800a1d4 <__malloc_unlock>:
 800a1d4:	4801      	ldr	r0, [pc, #4]	@ (800a1dc <__malloc_unlock+0x8>)
 800a1d6:	f7fe bd21 	b.w	8008c1c <__retarget_lock_release_recursive>
 800a1da:	bf00      	nop
 800a1dc:	20001df0 	.word	0x20001df0

0800a1e0 <_Balloc>:
 800a1e0:	b570      	push	{r4, r5, r6, lr}
 800a1e2:	69c6      	ldr	r6, [r0, #28]
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	460d      	mov	r5, r1
 800a1e8:	b976      	cbnz	r6, 800a208 <_Balloc+0x28>
 800a1ea:	2010      	movs	r0, #16
 800a1ec:	f7ff ff30 	bl	800a050 <malloc>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	61e0      	str	r0, [r4, #28]
 800a1f4:	b920      	cbnz	r0, 800a200 <_Balloc+0x20>
 800a1f6:	4b18      	ldr	r3, [pc, #96]	@ (800a258 <_Balloc+0x78>)
 800a1f8:	4818      	ldr	r0, [pc, #96]	@ (800a25c <_Balloc+0x7c>)
 800a1fa:	216b      	movs	r1, #107	@ 0x6b
 800a1fc:	f7fe fd2e 	bl	8008c5c <__assert_func>
 800a200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a204:	6006      	str	r6, [r0, #0]
 800a206:	60c6      	str	r6, [r0, #12]
 800a208:	69e6      	ldr	r6, [r4, #28]
 800a20a:	68f3      	ldr	r3, [r6, #12]
 800a20c:	b183      	cbz	r3, 800a230 <_Balloc+0x50>
 800a20e:	69e3      	ldr	r3, [r4, #28]
 800a210:	68db      	ldr	r3, [r3, #12]
 800a212:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a216:	b9b8      	cbnz	r0, 800a248 <_Balloc+0x68>
 800a218:	2101      	movs	r1, #1
 800a21a:	fa01 f605 	lsl.w	r6, r1, r5
 800a21e:	1d72      	adds	r2, r6, #5
 800a220:	0092      	lsls	r2, r2, #2
 800a222:	4620      	mov	r0, r4
 800a224:	f001 f89f 	bl	800b366 <_calloc_r>
 800a228:	b160      	cbz	r0, 800a244 <_Balloc+0x64>
 800a22a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a22e:	e00e      	b.n	800a24e <_Balloc+0x6e>
 800a230:	2221      	movs	r2, #33	@ 0x21
 800a232:	2104      	movs	r1, #4
 800a234:	4620      	mov	r0, r4
 800a236:	f001 f896 	bl	800b366 <_calloc_r>
 800a23a:	69e3      	ldr	r3, [r4, #28]
 800a23c:	60f0      	str	r0, [r6, #12]
 800a23e:	68db      	ldr	r3, [r3, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1e4      	bne.n	800a20e <_Balloc+0x2e>
 800a244:	2000      	movs	r0, #0
 800a246:	bd70      	pop	{r4, r5, r6, pc}
 800a248:	6802      	ldr	r2, [r0, #0]
 800a24a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a24e:	2300      	movs	r3, #0
 800a250:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a254:	e7f7      	b.n	800a246 <_Balloc+0x66>
 800a256:	bf00      	nop
 800a258:	0800b8af 	.word	0x0800b8af
 800a25c:	0800ba3a 	.word	0x0800ba3a

0800a260 <_Bfree>:
 800a260:	b570      	push	{r4, r5, r6, lr}
 800a262:	69c6      	ldr	r6, [r0, #28]
 800a264:	4605      	mov	r5, r0
 800a266:	460c      	mov	r4, r1
 800a268:	b976      	cbnz	r6, 800a288 <_Bfree+0x28>
 800a26a:	2010      	movs	r0, #16
 800a26c:	f7ff fef0 	bl	800a050 <malloc>
 800a270:	4602      	mov	r2, r0
 800a272:	61e8      	str	r0, [r5, #28]
 800a274:	b920      	cbnz	r0, 800a280 <_Bfree+0x20>
 800a276:	4b09      	ldr	r3, [pc, #36]	@ (800a29c <_Bfree+0x3c>)
 800a278:	4809      	ldr	r0, [pc, #36]	@ (800a2a0 <_Bfree+0x40>)
 800a27a:	218f      	movs	r1, #143	@ 0x8f
 800a27c:	f7fe fcee 	bl	8008c5c <__assert_func>
 800a280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a284:	6006      	str	r6, [r0, #0]
 800a286:	60c6      	str	r6, [r0, #12]
 800a288:	b13c      	cbz	r4, 800a29a <_Bfree+0x3a>
 800a28a:	69eb      	ldr	r3, [r5, #28]
 800a28c:	6862      	ldr	r2, [r4, #4]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a294:	6021      	str	r1, [r4, #0]
 800a296:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a29a:	bd70      	pop	{r4, r5, r6, pc}
 800a29c:	0800b8af 	.word	0x0800b8af
 800a2a0:	0800ba3a 	.word	0x0800ba3a

0800a2a4 <__multadd>:
 800a2a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2a8:	690d      	ldr	r5, [r1, #16]
 800a2aa:	4607      	mov	r7, r0
 800a2ac:	460c      	mov	r4, r1
 800a2ae:	461e      	mov	r6, r3
 800a2b0:	f101 0c14 	add.w	ip, r1, #20
 800a2b4:	2000      	movs	r0, #0
 800a2b6:	f8dc 3000 	ldr.w	r3, [ip]
 800a2ba:	b299      	uxth	r1, r3
 800a2bc:	fb02 6101 	mla	r1, r2, r1, r6
 800a2c0:	0c1e      	lsrs	r6, r3, #16
 800a2c2:	0c0b      	lsrs	r3, r1, #16
 800a2c4:	fb02 3306 	mla	r3, r2, r6, r3
 800a2c8:	b289      	uxth	r1, r1
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2d0:	4285      	cmp	r5, r0
 800a2d2:	f84c 1b04 	str.w	r1, [ip], #4
 800a2d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2da:	dcec      	bgt.n	800a2b6 <__multadd+0x12>
 800a2dc:	b30e      	cbz	r6, 800a322 <__multadd+0x7e>
 800a2de:	68a3      	ldr	r3, [r4, #8]
 800a2e0:	42ab      	cmp	r3, r5
 800a2e2:	dc19      	bgt.n	800a318 <__multadd+0x74>
 800a2e4:	6861      	ldr	r1, [r4, #4]
 800a2e6:	4638      	mov	r0, r7
 800a2e8:	3101      	adds	r1, #1
 800a2ea:	f7ff ff79 	bl	800a1e0 <_Balloc>
 800a2ee:	4680      	mov	r8, r0
 800a2f0:	b928      	cbnz	r0, 800a2fe <__multadd+0x5a>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	4b0c      	ldr	r3, [pc, #48]	@ (800a328 <__multadd+0x84>)
 800a2f6:	480d      	ldr	r0, [pc, #52]	@ (800a32c <__multadd+0x88>)
 800a2f8:	21ba      	movs	r1, #186	@ 0xba
 800a2fa:	f7fe fcaf 	bl	8008c5c <__assert_func>
 800a2fe:	6922      	ldr	r2, [r4, #16]
 800a300:	3202      	adds	r2, #2
 800a302:	f104 010c 	add.w	r1, r4, #12
 800a306:	0092      	lsls	r2, r2, #2
 800a308:	300c      	adds	r0, #12
 800a30a:	f7fe fc88 	bl	8008c1e <memcpy>
 800a30e:	4621      	mov	r1, r4
 800a310:	4638      	mov	r0, r7
 800a312:	f7ff ffa5 	bl	800a260 <_Bfree>
 800a316:	4644      	mov	r4, r8
 800a318:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a31c:	3501      	adds	r5, #1
 800a31e:	615e      	str	r6, [r3, #20]
 800a320:	6125      	str	r5, [r4, #16]
 800a322:	4620      	mov	r0, r4
 800a324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a328:	0800b9c9 	.word	0x0800b9c9
 800a32c:	0800ba3a 	.word	0x0800ba3a

0800a330 <__s2b>:
 800a330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a334:	460c      	mov	r4, r1
 800a336:	4615      	mov	r5, r2
 800a338:	461f      	mov	r7, r3
 800a33a:	2209      	movs	r2, #9
 800a33c:	3308      	adds	r3, #8
 800a33e:	4606      	mov	r6, r0
 800a340:	fb93 f3f2 	sdiv	r3, r3, r2
 800a344:	2100      	movs	r1, #0
 800a346:	2201      	movs	r2, #1
 800a348:	429a      	cmp	r2, r3
 800a34a:	db09      	blt.n	800a360 <__s2b+0x30>
 800a34c:	4630      	mov	r0, r6
 800a34e:	f7ff ff47 	bl	800a1e0 <_Balloc>
 800a352:	b940      	cbnz	r0, 800a366 <__s2b+0x36>
 800a354:	4602      	mov	r2, r0
 800a356:	4b19      	ldr	r3, [pc, #100]	@ (800a3bc <__s2b+0x8c>)
 800a358:	4819      	ldr	r0, [pc, #100]	@ (800a3c0 <__s2b+0x90>)
 800a35a:	21d3      	movs	r1, #211	@ 0xd3
 800a35c:	f7fe fc7e 	bl	8008c5c <__assert_func>
 800a360:	0052      	lsls	r2, r2, #1
 800a362:	3101      	adds	r1, #1
 800a364:	e7f0      	b.n	800a348 <__s2b+0x18>
 800a366:	9b08      	ldr	r3, [sp, #32]
 800a368:	6143      	str	r3, [r0, #20]
 800a36a:	2d09      	cmp	r5, #9
 800a36c:	f04f 0301 	mov.w	r3, #1
 800a370:	6103      	str	r3, [r0, #16]
 800a372:	dd16      	ble.n	800a3a2 <__s2b+0x72>
 800a374:	f104 0909 	add.w	r9, r4, #9
 800a378:	46c8      	mov	r8, r9
 800a37a:	442c      	add	r4, r5
 800a37c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a380:	4601      	mov	r1, r0
 800a382:	3b30      	subs	r3, #48	@ 0x30
 800a384:	220a      	movs	r2, #10
 800a386:	4630      	mov	r0, r6
 800a388:	f7ff ff8c 	bl	800a2a4 <__multadd>
 800a38c:	45a0      	cmp	r8, r4
 800a38e:	d1f5      	bne.n	800a37c <__s2b+0x4c>
 800a390:	f1a5 0408 	sub.w	r4, r5, #8
 800a394:	444c      	add	r4, r9
 800a396:	1b2d      	subs	r5, r5, r4
 800a398:	1963      	adds	r3, r4, r5
 800a39a:	42bb      	cmp	r3, r7
 800a39c:	db04      	blt.n	800a3a8 <__s2b+0x78>
 800a39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3a2:	340a      	adds	r4, #10
 800a3a4:	2509      	movs	r5, #9
 800a3a6:	e7f6      	b.n	800a396 <__s2b+0x66>
 800a3a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3ac:	4601      	mov	r1, r0
 800a3ae:	3b30      	subs	r3, #48	@ 0x30
 800a3b0:	220a      	movs	r2, #10
 800a3b2:	4630      	mov	r0, r6
 800a3b4:	f7ff ff76 	bl	800a2a4 <__multadd>
 800a3b8:	e7ee      	b.n	800a398 <__s2b+0x68>
 800a3ba:	bf00      	nop
 800a3bc:	0800b9c9 	.word	0x0800b9c9
 800a3c0:	0800ba3a 	.word	0x0800ba3a

0800a3c4 <__hi0bits>:
 800a3c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	bf36      	itet	cc
 800a3cc:	0403      	lslcc	r3, r0, #16
 800a3ce:	2000      	movcs	r0, #0
 800a3d0:	2010      	movcc	r0, #16
 800a3d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a3d6:	bf3c      	itt	cc
 800a3d8:	021b      	lslcc	r3, r3, #8
 800a3da:	3008      	addcc	r0, #8
 800a3dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3e0:	bf3c      	itt	cc
 800a3e2:	011b      	lslcc	r3, r3, #4
 800a3e4:	3004      	addcc	r0, #4
 800a3e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a3ea:	bf3c      	itt	cc
 800a3ec:	009b      	lslcc	r3, r3, #2
 800a3ee:	3002      	addcc	r0, #2
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	db05      	blt.n	800a400 <__hi0bits+0x3c>
 800a3f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a3f8:	f100 0001 	add.w	r0, r0, #1
 800a3fc:	bf08      	it	eq
 800a3fe:	2020      	moveq	r0, #32
 800a400:	4770      	bx	lr

0800a402 <__lo0bits>:
 800a402:	6803      	ldr	r3, [r0, #0]
 800a404:	4602      	mov	r2, r0
 800a406:	f013 0007 	ands.w	r0, r3, #7
 800a40a:	d00b      	beq.n	800a424 <__lo0bits+0x22>
 800a40c:	07d9      	lsls	r1, r3, #31
 800a40e:	d421      	bmi.n	800a454 <__lo0bits+0x52>
 800a410:	0798      	lsls	r0, r3, #30
 800a412:	bf49      	itett	mi
 800a414:	085b      	lsrmi	r3, r3, #1
 800a416:	089b      	lsrpl	r3, r3, #2
 800a418:	2001      	movmi	r0, #1
 800a41a:	6013      	strmi	r3, [r2, #0]
 800a41c:	bf5c      	itt	pl
 800a41e:	6013      	strpl	r3, [r2, #0]
 800a420:	2002      	movpl	r0, #2
 800a422:	4770      	bx	lr
 800a424:	b299      	uxth	r1, r3
 800a426:	b909      	cbnz	r1, 800a42c <__lo0bits+0x2a>
 800a428:	0c1b      	lsrs	r3, r3, #16
 800a42a:	2010      	movs	r0, #16
 800a42c:	b2d9      	uxtb	r1, r3
 800a42e:	b909      	cbnz	r1, 800a434 <__lo0bits+0x32>
 800a430:	3008      	adds	r0, #8
 800a432:	0a1b      	lsrs	r3, r3, #8
 800a434:	0719      	lsls	r1, r3, #28
 800a436:	bf04      	itt	eq
 800a438:	091b      	lsreq	r3, r3, #4
 800a43a:	3004      	addeq	r0, #4
 800a43c:	0799      	lsls	r1, r3, #30
 800a43e:	bf04      	itt	eq
 800a440:	089b      	lsreq	r3, r3, #2
 800a442:	3002      	addeq	r0, #2
 800a444:	07d9      	lsls	r1, r3, #31
 800a446:	d403      	bmi.n	800a450 <__lo0bits+0x4e>
 800a448:	085b      	lsrs	r3, r3, #1
 800a44a:	f100 0001 	add.w	r0, r0, #1
 800a44e:	d003      	beq.n	800a458 <__lo0bits+0x56>
 800a450:	6013      	str	r3, [r2, #0]
 800a452:	4770      	bx	lr
 800a454:	2000      	movs	r0, #0
 800a456:	4770      	bx	lr
 800a458:	2020      	movs	r0, #32
 800a45a:	4770      	bx	lr

0800a45c <__i2b>:
 800a45c:	b510      	push	{r4, lr}
 800a45e:	460c      	mov	r4, r1
 800a460:	2101      	movs	r1, #1
 800a462:	f7ff febd 	bl	800a1e0 <_Balloc>
 800a466:	4602      	mov	r2, r0
 800a468:	b928      	cbnz	r0, 800a476 <__i2b+0x1a>
 800a46a:	4b05      	ldr	r3, [pc, #20]	@ (800a480 <__i2b+0x24>)
 800a46c:	4805      	ldr	r0, [pc, #20]	@ (800a484 <__i2b+0x28>)
 800a46e:	f240 1145 	movw	r1, #325	@ 0x145
 800a472:	f7fe fbf3 	bl	8008c5c <__assert_func>
 800a476:	2301      	movs	r3, #1
 800a478:	6144      	str	r4, [r0, #20]
 800a47a:	6103      	str	r3, [r0, #16]
 800a47c:	bd10      	pop	{r4, pc}
 800a47e:	bf00      	nop
 800a480:	0800b9c9 	.word	0x0800b9c9
 800a484:	0800ba3a 	.word	0x0800ba3a

0800a488 <__multiply>:
 800a488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a48c:	4617      	mov	r7, r2
 800a48e:	690a      	ldr	r2, [r1, #16]
 800a490:	693b      	ldr	r3, [r7, #16]
 800a492:	429a      	cmp	r2, r3
 800a494:	bfa8      	it	ge
 800a496:	463b      	movge	r3, r7
 800a498:	4689      	mov	r9, r1
 800a49a:	bfa4      	itt	ge
 800a49c:	460f      	movge	r7, r1
 800a49e:	4699      	movge	r9, r3
 800a4a0:	693d      	ldr	r5, [r7, #16]
 800a4a2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	6879      	ldr	r1, [r7, #4]
 800a4aa:	eb05 060a 	add.w	r6, r5, sl
 800a4ae:	42b3      	cmp	r3, r6
 800a4b0:	b085      	sub	sp, #20
 800a4b2:	bfb8      	it	lt
 800a4b4:	3101      	addlt	r1, #1
 800a4b6:	f7ff fe93 	bl	800a1e0 <_Balloc>
 800a4ba:	b930      	cbnz	r0, 800a4ca <__multiply+0x42>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	4b41      	ldr	r3, [pc, #260]	@ (800a5c4 <__multiply+0x13c>)
 800a4c0:	4841      	ldr	r0, [pc, #260]	@ (800a5c8 <__multiply+0x140>)
 800a4c2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a4c6:	f7fe fbc9 	bl	8008c5c <__assert_func>
 800a4ca:	f100 0414 	add.w	r4, r0, #20
 800a4ce:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a4d2:	4623      	mov	r3, r4
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	4573      	cmp	r3, lr
 800a4d8:	d320      	bcc.n	800a51c <__multiply+0x94>
 800a4da:	f107 0814 	add.w	r8, r7, #20
 800a4de:	f109 0114 	add.w	r1, r9, #20
 800a4e2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a4e6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a4ea:	9302      	str	r3, [sp, #8]
 800a4ec:	1beb      	subs	r3, r5, r7
 800a4ee:	3b15      	subs	r3, #21
 800a4f0:	f023 0303 	bic.w	r3, r3, #3
 800a4f4:	3304      	adds	r3, #4
 800a4f6:	3715      	adds	r7, #21
 800a4f8:	42bd      	cmp	r5, r7
 800a4fa:	bf38      	it	cc
 800a4fc:	2304      	movcc	r3, #4
 800a4fe:	9301      	str	r3, [sp, #4]
 800a500:	9b02      	ldr	r3, [sp, #8]
 800a502:	9103      	str	r1, [sp, #12]
 800a504:	428b      	cmp	r3, r1
 800a506:	d80c      	bhi.n	800a522 <__multiply+0x9a>
 800a508:	2e00      	cmp	r6, #0
 800a50a:	dd03      	ble.n	800a514 <__multiply+0x8c>
 800a50c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a510:	2b00      	cmp	r3, #0
 800a512:	d055      	beq.n	800a5c0 <__multiply+0x138>
 800a514:	6106      	str	r6, [r0, #16]
 800a516:	b005      	add	sp, #20
 800a518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a51c:	f843 2b04 	str.w	r2, [r3], #4
 800a520:	e7d9      	b.n	800a4d6 <__multiply+0x4e>
 800a522:	f8b1 a000 	ldrh.w	sl, [r1]
 800a526:	f1ba 0f00 	cmp.w	sl, #0
 800a52a:	d01f      	beq.n	800a56c <__multiply+0xe4>
 800a52c:	46c4      	mov	ip, r8
 800a52e:	46a1      	mov	r9, r4
 800a530:	2700      	movs	r7, #0
 800a532:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a536:	f8d9 3000 	ldr.w	r3, [r9]
 800a53a:	fa1f fb82 	uxth.w	fp, r2
 800a53e:	b29b      	uxth	r3, r3
 800a540:	fb0a 330b 	mla	r3, sl, fp, r3
 800a544:	443b      	add	r3, r7
 800a546:	f8d9 7000 	ldr.w	r7, [r9]
 800a54a:	0c12      	lsrs	r2, r2, #16
 800a54c:	0c3f      	lsrs	r7, r7, #16
 800a54e:	fb0a 7202 	mla	r2, sl, r2, r7
 800a552:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a556:	b29b      	uxth	r3, r3
 800a558:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a55c:	4565      	cmp	r5, ip
 800a55e:	f849 3b04 	str.w	r3, [r9], #4
 800a562:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a566:	d8e4      	bhi.n	800a532 <__multiply+0xaa>
 800a568:	9b01      	ldr	r3, [sp, #4]
 800a56a:	50e7      	str	r7, [r4, r3]
 800a56c:	9b03      	ldr	r3, [sp, #12]
 800a56e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a572:	3104      	adds	r1, #4
 800a574:	f1b9 0f00 	cmp.w	r9, #0
 800a578:	d020      	beq.n	800a5bc <__multiply+0x134>
 800a57a:	6823      	ldr	r3, [r4, #0]
 800a57c:	4647      	mov	r7, r8
 800a57e:	46a4      	mov	ip, r4
 800a580:	f04f 0a00 	mov.w	sl, #0
 800a584:	f8b7 b000 	ldrh.w	fp, [r7]
 800a588:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a58c:	fb09 220b 	mla	r2, r9, fp, r2
 800a590:	4452      	add	r2, sl
 800a592:	b29b      	uxth	r3, r3
 800a594:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a598:	f84c 3b04 	str.w	r3, [ip], #4
 800a59c:	f857 3b04 	ldr.w	r3, [r7], #4
 800a5a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5a4:	f8bc 3000 	ldrh.w	r3, [ip]
 800a5a8:	fb09 330a 	mla	r3, r9, sl, r3
 800a5ac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a5b0:	42bd      	cmp	r5, r7
 800a5b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5b6:	d8e5      	bhi.n	800a584 <__multiply+0xfc>
 800a5b8:	9a01      	ldr	r2, [sp, #4]
 800a5ba:	50a3      	str	r3, [r4, r2]
 800a5bc:	3404      	adds	r4, #4
 800a5be:	e79f      	b.n	800a500 <__multiply+0x78>
 800a5c0:	3e01      	subs	r6, #1
 800a5c2:	e7a1      	b.n	800a508 <__multiply+0x80>
 800a5c4:	0800b9c9 	.word	0x0800b9c9
 800a5c8:	0800ba3a 	.word	0x0800ba3a

0800a5cc <__pow5mult>:
 800a5cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5d0:	4615      	mov	r5, r2
 800a5d2:	f012 0203 	ands.w	r2, r2, #3
 800a5d6:	4607      	mov	r7, r0
 800a5d8:	460e      	mov	r6, r1
 800a5da:	d007      	beq.n	800a5ec <__pow5mult+0x20>
 800a5dc:	4c25      	ldr	r4, [pc, #148]	@ (800a674 <__pow5mult+0xa8>)
 800a5de:	3a01      	subs	r2, #1
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a5e6:	f7ff fe5d 	bl	800a2a4 <__multadd>
 800a5ea:	4606      	mov	r6, r0
 800a5ec:	10ad      	asrs	r5, r5, #2
 800a5ee:	d03d      	beq.n	800a66c <__pow5mult+0xa0>
 800a5f0:	69fc      	ldr	r4, [r7, #28]
 800a5f2:	b97c      	cbnz	r4, 800a614 <__pow5mult+0x48>
 800a5f4:	2010      	movs	r0, #16
 800a5f6:	f7ff fd2b 	bl	800a050 <malloc>
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	61f8      	str	r0, [r7, #28]
 800a5fe:	b928      	cbnz	r0, 800a60c <__pow5mult+0x40>
 800a600:	4b1d      	ldr	r3, [pc, #116]	@ (800a678 <__pow5mult+0xac>)
 800a602:	481e      	ldr	r0, [pc, #120]	@ (800a67c <__pow5mult+0xb0>)
 800a604:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a608:	f7fe fb28 	bl	8008c5c <__assert_func>
 800a60c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a610:	6004      	str	r4, [r0, #0]
 800a612:	60c4      	str	r4, [r0, #12]
 800a614:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a618:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a61c:	b94c      	cbnz	r4, 800a632 <__pow5mult+0x66>
 800a61e:	f240 2171 	movw	r1, #625	@ 0x271
 800a622:	4638      	mov	r0, r7
 800a624:	f7ff ff1a 	bl	800a45c <__i2b>
 800a628:	2300      	movs	r3, #0
 800a62a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a62e:	4604      	mov	r4, r0
 800a630:	6003      	str	r3, [r0, #0]
 800a632:	f04f 0900 	mov.w	r9, #0
 800a636:	07eb      	lsls	r3, r5, #31
 800a638:	d50a      	bpl.n	800a650 <__pow5mult+0x84>
 800a63a:	4631      	mov	r1, r6
 800a63c:	4622      	mov	r2, r4
 800a63e:	4638      	mov	r0, r7
 800a640:	f7ff ff22 	bl	800a488 <__multiply>
 800a644:	4631      	mov	r1, r6
 800a646:	4680      	mov	r8, r0
 800a648:	4638      	mov	r0, r7
 800a64a:	f7ff fe09 	bl	800a260 <_Bfree>
 800a64e:	4646      	mov	r6, r8
 800a650:	106d      	asrs	r5, r5, #1
 800a652:	d00b      	beq.n	800a66c <__pow5mult+0xa0>
 800a654:	6820      	ldr	r0, [r4, #0]
 800a656:	b938      	cbnz	r0, 800a668 <__pow5mult+0x9c>
 800a658:	4622      	mov	r2, r4
 800a65a:	4621      	mov	r1, r4
 800a65c:	4638      	mov	r0, r7
 800a65e:	f7ff ff13 	bl	800a488 <__multiply>
 800a662:	6020      	str	r0, [r4, #0]
 800a664:	f8c0 9000 	str.w	r9, [r0]
 800a668:	4604      	mov	r4, r0
 800a66a:	e7e4      	b.n	800a636 <__pow5mult+0x6a>
 800a66c:	4630      	mov	r0, r6
 800a66e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a672:	bf00      	nop
 800a674:	0800bbfc 	.word	0x0800bbfc
 800a678:	0800b8af 	.word	0x0800b8af
 800a67c:	0800ba3a 	.word	0x0800ba3a

0800a680 <__lshift>:
 800a680:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a684:	460c      	mov	r4, r1
 800a686:	6849      	ldr	r1, [r1, #4]
 800a688:	6923      	ldr	r3, [r4, #16]
 800a68a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a68e:	68a3      	ldr	r3, [r4, #8]
 800a690:	4607      	mov	r7, r0
 800a692:	4691      	mov	r9, r2
 800a694:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a698:	f108 0601 	add.w	r6, r8, #1
 800a69c:	42b3      	cmp	r3, r6
 800a69e:	db0b      	blt.n	800a6b8 <__lshift+0x38>
 800a6a0:	4638      	mov	r0, r7
 800a6a2:	f7ff fd9d 	bl	800a1e0 <_Balloc>
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	b948      	cbnz	r0, 800a6be <__lshift+0x3e>
 800a6aa:	4602      	mov	r2, r0
 800a6ac:	4b28      	ldr	r3, [pc, #160]	@ (800a750 <__lshift+0xd0>)
 800a6ae:	4829      	ldr	r0, [pc, #164]	@ (800a754 <__lshift+0xd4>)
 800a6b0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a6b4:	f7fe fad2 	bl	8008c5c <__assert_func>
 800a6b8:	3101      	adds	r1, #1
 800a6ba:	005b      	lsls	r3, r3, #1
 800a6bc:	e7ee      	b.n	800a69c <__lshift+0x1c>
 800a6be:	2300      	movs	r3, #0
 800a6c0:	f100 0114 	add.w	r1, r0, #20
 800a6c4:	f100 0210 	add.w	r2, r0, #16
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	4553      	cmp	r3, sl
 800a6cc:	db33      	blt.n	800a736 <__lshift+0xb6>
 800a6ce:	6920      	ldr	r0, [r4, #16]
 800a6d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6d4:	f104 0314 	add.w	r3, r4, #20
 800a6d8:	f019 091f 	ands.w	r9, r9, #31
 800a6dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a6e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a6e4:	d02b      	beq.n	800a73e <__lshift+0xbe>
 800a6e6:	f1c9 0e20 	rsb	lr, r9, #32
 800a6ea:	468a      	mov	sl, r1
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	6818      	ldr	r0, [r3, #0]
 800a6f0:	fa00 f009 	lsl.w	r0, r0, r9
 800a6f4:	4310      	orrs	r0, r2
 800a6f6:	f84a 0b04 	str.w	r0, [sl], #4
 800a6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6fe:	459c      	cmp	ip, r3
 800a700:	fa22 f20e 	lsr.w	r2, r2, lr
 800a704:	d8f3      	bhi.n	800a6ee <__lshift+0x6e>
 800a706:	ebac 0304 	sub.w	r3, ip, r4
 800a70a:	3b15      	subs	r3, #21
 800a70c:	f023 0303 	bic.w	r3, r3, #3
 800a710:	3304      	adds	r3, #4
 800a712:	f104 0015 	add.w	r0, r4, #21
 800a716:	4560      	cmp	r0, ip
 800a718:	bf88      	it	hi
 800a71a:	2304      	movhi	r3, #4
 800a71c:	50ca      	str	r2, [r1, r3]
 800a71e:	b10a      	cbz	r2, 800a724 <__lshift+0xa4>
 800a720:	f108 0602 	add.w	r6, r8, #2
 800a724:	3e01      	subs	r6, #1
 800a726:	4638      	mov	r0, r7
 800a728:	612e      	str	r6, [r5, #16]
 800a72a:	4621      	mov	r1, r4
 800a72c:	f7ff fd98 	bl	800a260 <_Bfree>
 800a730:	4628      	mov	r0, r5
 800a732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a736:	f842 0f04 	str.w	r0, [r2, #4]!
 800a73a:	3301      	adds	r3, #1
 800a73c:	e7c5      	b.n	800a6ca <__lshift+0x4a>
 800a73e:	3904      	subs	r1, #4
 800a740:	f853 2b04 	ldr.w	r2, [r3], #4
 800a744:	f841 2f04 	str.w	r2, [r1, #4]!
 800a748:	459c      	cmp	ip, r3
 800a74a:	d8f9      	bhi.n	800a740 <__lshift+0xc0>
 800a74c:	e7ea      	b.n	800a724 <__lshift+0xa4>
 800a74e:	bf00      	nop
 800a750:	0800b9c9 	.word	0x0800b9c9
 800a754:	0800ba3a 	.word	0x0800ba3a

0800a758 <__mcmp>:
 800a758:	690a      	ldr	r2, [r1, #16]
 800a75a:	4603      	mov	r3, r0
 800a75c:	6900      	ldr	r0, [r0, #16]
 800a75e:	1a80      	subs	r0, r0, r2
 800a760:	b530      	push	{r4, r5, lr}
 800a762:	d10e      	bne.n	800a782 <__mcmp+0x2a>
 800a764:	3314      	adds	r3, #20
 800a766:	3114      	adds	r1, #20
 800a768:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a76c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a770:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a774:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a778:	4295      	cmp	r5, r2
 800a77a:	d003      	beq.n	800a784 <__mcmp+0x2c>
 800a77c:	d205      	bcs.n	800a78a <__mcmp+0x32>
 800a77e:	f04f 30ff 	mov.w	r0, #4294967295
 800a782:	bd30      	pop	{r4, r5, pc}
 800a784:	42a3      	cmp	r3, r4
 800a786:	d3f3      	bcc.n	800a770 <__mcmp+0x18>
 800a788:	e7fb      	b.n	800a782 <__mcmp+0x2a>
 800a78a:	2001      	movs	r0, #1
 800a78c:	e7f9      	b.n	800a782 <__mcmp+0x2a>
	...

0800a790 <__mdiff>:
 800a790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a794:	4689      	mov	r9, r1
 800a796:	4606      	mov	r6, r0
 800a798:	4611      	mov	r1, r2
 800a79a:	4648      	mov	r0, r9
 800a79c:	4614      	mov	r4, r2
 800a79e:	f7ff ffdb 	bl	800a758 <__mcmp>
 800a7a2:	1e05      	subs	r5, r0, #0
 800a7a4:	d112      	bne.n	800a7cc <__mdiff+0x3c>
 800a7a6:	4629      	mov	r1, r5
 800a7a8:	4630      	mov	r0, r6
 800a7aa:	f7ff fd19 	bl	800a1e0 <_Balloc>
 800a7ae:	4602      	mov	r2, r0
 800a7b0:	b928      	cbnz	r0, 800a7be <__mdiff+0x2e>
 800a7b2:	4b3f      	ldr	r3, [pc, #252]	@ (800a8b0 <__mdiff+0x120>)
 800a7b4:	f240 2137 	movw	r1, #567	@ 0x237
 800a7b8:	483e      	ldr	r0, [pc, #248]	@ (800a8b4 <__mdiff+0x124>)
 800a7ba:	f7fe fa4f 	bl	8008c5c <__assert_func>
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7c4:	4610      	mov	r0, r2
 800a7c6:	b003      	add	sp, #12
 800a7c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7cc:	bfbc      	itt	lt
 800a7ce:	464b      	movlt	r3, r9
 800a7d0:	46a1      	movlt	r9, r4
 800a7d2:	4630      	mov	r0, r6
 800a7d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a7d8:	bfba      	itte	lt
 800a7da:	461c      	movlt	r4, r3
 800a7dc:	2501      	movlt	r5, #1
 800a7de:	2500      	movge	r5, #0
 800a7e0:	f7ff fcfe 	bl	800a1e0 <_Balloc>
 800a7e4:	4602      	mov	r2, r0
 800a7e6:	b918      	cbnz	r0, 800a7f0 <__mdiff+0x60>
 800a7e8:	4b31      	ldr	r3, [pc, #196]	@ (800a8b0 <__mdiff+0x120>)
 800a7ea:	f240 2145 	movw	r1, #581	@ 0x245
 800a7ee:	e7e3      	b.n	800a7b8 <__mdiff+0x28>
 800a7f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a7f4:	6926      	ldr	r6, [r4, #16]
 800a7f6:	60c5      	str	r5, [r0, #12]
 800a7f8:	f109 0310 	add.w	r3, r9, #16
 800a7fc:	f109 0514 	add.w	r5, r9, #20
 800a800:	f104 0e14 	add.w	lr, r4, #20
 800a804:	f100 0b14 	add.w	fp, r0, #20
 800a808:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a80c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a810:	9301      	str	r3, [sp, #4]
 800a812:	46d9      	mov	r9, fp
 800a814:	f04f 0c00 	mov.w	ip, #0
 800a818:	9b01      	ldr	r3, [sp, #4]
 800a81a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a81e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a822:	9301      	str	r3, [sp, #4]
 800a824:	fa1f f38a 	uxth.w	r3, sl
 800a828:	4619      	mov	r1, r3
 800a82a:	b283      	uxth	r3, r0
 800a82c:	1acb      	subs	r3, r1, r3
 800a82e:	0c00      	lsrs	r0, r0, #16
 800a830:	4463      	add	r3, ip
 800a832:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a836:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a840:	4576      	cmp	r6, lr
 800a842:	f849 3b04 	str.w	r3, [r9], #4
 800a846:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a84a:	d8e5      	bhi.n	800a818 <__mdiff+0x88>
 800a84c:	1b33      	subs	r3, r6, r4
 800a84e:	3b15      	subs	r3, #21
 800a850:	f023 0303 	bic.w	r3, r3, #3
 800a854:	3415      	adds	r4, #21
 800a856:	3304      	adds	r3, #4
 800a858:	42a6      	cmp	r6, r4
 800a85a:	bf38      	it	cc
 800a85c:	2304      	movcc	r3, #4
 800a85e:	441d      	add	r5, r3
 800a860:	445b      	add	r3, fp
 800a862:	461e      	mov	r6, r3
 800a864:	462c      	mov	r4, r5
 800a866:	4544      	cmp	r4, r8
 800a868:	d30e      	bcc.n	800a888 <__mdiff+0xf8>
 800a86a:	f108 0103 	add.w	r1, r8, #3
 800a86e:	1b49      	subs	r1, r1, r5
 800a870:	f021 0103 	bic.w	r1, r1, #3
 800a874:	3d03      	subs	r5, #3
 800a876:	45a8      	cmp	r8, r5
 800a878:	bf38      	it	cc
 800a87a:	2100      	movcc	r1, #0
 800a87c:	440b      	add	r3, r1
 800a87e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a882:	b191      	cbz	r1, 800a8aa <__mdiff+0x11a>
 800a884:	6117      	str	r7, [r2, #16]
 800a886:	e79d      	b.n	800a7c4 <__mdiff+0x34>
 800a888:	f854 1b04 	ldr.w	r1, [r4], #4
 800a88c:	46e6      	mov	lr, ip
 800a88e:	0c08      	lsrs	r0, r1, #16
 800a890:	fa1c fc81 	uxtah	ip, ip, r1
 800a894:	4471      	add	r1, lr
 800a896:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a89a:	b289      	uxth	r1, r1
 800a89c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a8a0:	f846 1b04 	str.w	r1, [r6], #4
 800a8a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a8a8:	e7dd      	b.n	800a866 <__mdiff+0xd6>
 800a8aa:	3f01      	subs	r7, #1
 800a8ac:	e7e7      	b.n	800a87e <__mdiff+0xee>
 800a8ae:	bf00      	nop
 800a8b0:	0800b9c9 	.word	0x0800b9c9
 800a8b4:	0800ba3a 	.word	0x0800ba3a

0800a8b8 <__ulp>:
 800a8b8:	b082      	sub	sp, #8
 800a8ba:	ed8d 0b00 	vstr	d0, [sp]
 800a8be:	9a01      	ldr	r2, [sp, #4]
 800a8c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a900 <__ulp+0x48>)
 800a8c2:	4013      	ands	r3, r2
 800a8c4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	dc08      	bgt.n	800a8de <__ulp+0x26>
 800a8cc:	425b      	negs	r3, r3
 800a8ce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a8d2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a8d6:	da04      	bge.n	800a8e2 <__ulp+0x2a>
 800a8d8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a8dc:	4113      	asrs	r3, r2
 800a8de:	2200      	movs	r2, #0
 800a8e0:	e008      	b.n	800a8f4 <__ulp+0x3c>
 800a8e2:	f1a2 0314 	sub.w	r3, r2, #20
 800a8e6:	2b1e      	cmp	r3, #30
 800a8e8:	bfda      	itte	le
 800a8ea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a8ee:	40da      	lsrle	r2, r3
 800a8f0:	2201      	movgt	r2, #1
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	4619      	mov	r1, r3
 800a8f6:	4610      	mov	r0, r2
 800a8f8:	ec41 0b10 	vmov	d0, r0, r1
 800a8fc:	b002      	add	sp, #8
 800a8fe:	4770      	bx	lr
 800a900:	7ff00000 	.word	0x7ff00000

0800a904 <__b2d>:
 800a904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a908:	6906      	ldr	r6, [r0, #16]
 800a90a:	f100 0814 	add.w	r8, r0, #20
 800a90e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a912:	1f37      	subs	r7, r6, #4
 800a914:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a918:	4610      	mov	r0, r2
 800a91a:	f7ff fd53 	bl	800a3c4 <__hi0bits>
 800a91e:	f1c0 0320 	rsb	r3, r0, #32
 800a922:	280a      	cmp	r0, #10
 800a924:	600b      	str	r3, [r1, #0]
 800a926:	491b      	ldr	r1, [pc, #108]	@ (800a994 <__b2d+0x90>)
 800a928:	dc15      	bgt.n	800a956 <__b2d+0x52>
 800a92a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a92e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a932:	45b8      	cmp	r8, r7
 800a934:	ea43 0501 	orr.w	r5, r3, r1
 800a938:	bf34      	ite	cc
 800a93a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a93e:	2300      	movcs	r3, #0
 800a940:	3015      	adds	r0, #21
 800a942:	fa02 f000 	lsl.w	r0, r2, r0
 800a946:	fa23 f30c 	lsr.w	r3, r3, ip
 800a94a:	4303      	orrs	r3, r0
 800a94c:	461c      	mov	r4, r3
 800a94e:	ec45 4b10 	vmov	d0, r4, r5
 800a952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a956:	45b8      	cmp	r8, r7
 800a958:	bf3a      	itte	cc
 800a95a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a95e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a962:	2300      	movcs	r3, #0
 800a964:	380b      	subs	r0, #11
 800a966:	d012      	beq.n	800a98e <__b2d+0x8a>
 800a968:	f1c0 0120 	rsb	r1, r0, #32
 800a96c:	fa23 f401 	lsr.w	r4, r3, r1
 800a970:	4082      	lsls	r2, r0
 800a972:	4322      	orrs	r2, r4
 800a974:	4547      	cmp	r7, r8
 800a976:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a97a:	bf8c      	ite	hi
 800a97c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a980:	2200      	movls	r2, #0
 800a982:	4083      	lsls	r3, r0
 800a984:	40ca      	lsrs	r2, r1
 800a986:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a98a:	4313      	orrs	r3, r2
 800a98c:	e7de      	b.n	800a94c <__b2d+0x48>
 800a98e:	ea42 0501 	orr.w	r5, r2, r1
 800a992:	e7db      	b.n	800a94c <__b2d+0x48>
 800a994:	3ff00000 	.word	0x3ff00000

0800a998 <__d2b>:
 800a998:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a99c:	460f      	mov	r7, r1
 800a99e:	2101      	movs	r1, #1
 800a9a0:	ec59 8b10 	vmov	r8, r9, d0
 800a9a4:	4616      	mov	r6, r2
 800a9a6:	f7ff fc1b 	bl	800a1e0 <_Balloc>
 800a9aa:	4604      	mov	r4, r0
 800a9ac:	b930      	cbnz	r0, 800a9bc <__d2b+0x24>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	4b23      	ldr	r3, [pc, #140]	@ (800aa40 <__d2b+0xa8>)
 800a9b2:	4824      	ldr	r0, [pc, #144]	@ (800aa44 <__d2b+0xac>)
 800a9b4:	f240 310f 	movw	r1, #783	@ 0x30f
 800a9b8:	f7fe f950 	bl	8008c5c <__assert_func>
 800a9bc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a9c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a9c4:	b10d      	cbz	r5, 800a9ca <__d2b+0x32>
 800a9c6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9ca:	9301      	str	r3, [sp, #4]
 800a9cc:	f1b8 0300 	subs.w	r3, r8, #0
 800a9d0:	d023      	beq.n	800aa1a <__d2b+0x82>
 800a9d2:	4668      	mov	r0, sp
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	f7ff fd14 	bl	800a402 <__lo0bits>
 800a9da:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a9de:	b1d0      	cbz	r0, 800aa16 <__d2b+0x7e>
 800a9e0:	f1c0 0320 	rsb	r3, r0, #32
 800a9e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e8:	430b      	orrs	r3, r1
 800a9ea:	40c2      	lsrs	r2, r0
 800a9ec:	6163      	str	r3, [r4, #20]
 800a9ee:	9201      	str	r2, [sp, #4]
 800a9f0:	9b01      	ldr	r3, [sp, #4]
 800a9f2:	61a3      	str	r3, [r4, #24]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	bf0c      	ite	eq
 800a9f8:	2201      	moveq	r2, #1
 800a9fa:	2202      	movne	r2, #2
 800a9fc:	6122      	str	r2, [r4, #16]
 800a9fe:	b1a5      	cbz	r5, 800aa2a <__d2b+0x92>
 800aa00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa04:	4405      	add	r5, r0
 800aa06:	603d      	str	r5, [r7, #0]
 800aa08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa0c:	6030      	str	r0, [r6, #0]
 800aa0e:	4620      	mov	r0, r4
 800aa10:	b003      	add	sp, #12
 800aa12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa16:	6161      	str	r1, [r4, #20]
 800aa18:	e7ea      	b.n	800a9f0 <__d2b+0x58>
 800aa1a:	a801      	add	r0, sp, #4
 800aa1c:	f7ff fcf1 	bl	800a402 <__lo0bits>
 800aa20:	9b01      	ldr	r3, [sp, #4]
 800aa22:	6163      	str	r3, [r4, #20]
 800aa24:	3020      	adds	r0, #32
 800aa26:	2201      	movs	r2, #1
 800aa28:	e7e8      	b.n	800a9fc <__d2b+0x64>
 800aa2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aa32:	6038      	str	r0, [r7, #0]
 800aa34:	6918      	ldr	r0, [r3, #16]
 800aa36:	f7ff fcc5 	bl	800a3c4 <__hi0bits>
 800aa3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa3e:	e7e5      	b.n	800aa0c <__d2b+0x74>
 800aa40:	0800b9c9 	.word	0x0800b9c9
 800aa44:	0800ba3a 	.word	0x0800ba3a

0800aa48 <__ratio>:
 800aa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	b085      	sub	sp, #20
 800aa4e:	e9cd 1000 	strd	r1, r0, [sp]
 800aa52:	a902      	add	r1, sp, #8
 800aa54:	f7ff ff56 	bl	800a904 <__b2d>
 800aa58:	9800      	ldr	r0, [sp, #0]
 800aa5a:	a903      	add	r1, sp, #12
 800aa5c:	ec55 4b10 	vmov	r4, r5, d0
 800aa60:	f7ff ff50 	bl	800a904 <__b2d>
 800aa64:	9b01      	ldr	r3, [sp, #4]
 800aa66:	6919      	ldr	r1, [r3, #16]
 800aa68:	9b00      	ldr	r3, [sp, #0]
 800aa6a:	691b      	ldr	r3, [r3, #16]
 800aa6c:	1ac9      	subs	r1, r1, r3
 800aa6e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800aa72:	1a9b      	subs	r3, r3, r2
 800aa74:	ec5b ab10 	vmov	sl, fp, d0
 800aa78:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	bfce      	itee	gt
 800aa80:	462a      	movgt	r2, r5
 800aa82:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aa86:	465a      	movle	r2, fp
 800aa88:	462f      	mov	r7, r5
 800aa8a:	46d9      	mov	r9, fp
 800aa8c:	bfcc      	ite	gt
 800aa8e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aa92:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800aa96:	464b      	mov	r3, r9
 800aa98:	4652      	mov	r2, sl
 800aa9a:	4620      	mov	r0, r4
 800aa9c:	4639      	mov	r1, r7
 800aa9e:	f7f5 fee5 	bl	800086c <__aeabi_ddiv>
 800aaa2:	ec41 0b10 	vmov	d0, r0, r1
 800aaa6:	b005      	add	sp, #20
 800aaa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aaac <__copybits>:
 800aaac:	3901      	subs	r1, #1
 800aaae:	b570      	push	{r4, r5, r6, lr}
 800aab0:	1149      	asrs	r1, r1, #5
 800aab2:	6914      	ldr	r4, [r2, #16]
 800aab4:	3101      	adds	r1, #1
 800aab6:	f102 0314 	add.w	r3, r2, #20
 800aaba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aabe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aac2:	1f05      	subs	r5, r0, #4
 800aac4:	42a3      	cmp	r3, r4
 800aac6:	d30c      	bcc.n	800aae2 <__copybits+0x36>
 800aac8:	1aa3      	subs	r3, r4, r2
 800aaca:	3b11      	subs	r3, #17
 800aacc:	f023 0303 	bic.w	r3, r3, #3
 800aad0:	3211      	adds	r2, #17
 800aad2:	42a2      	cmp	r2, r4
 800aad4:	bf88      	it	hi
 800aad6:	2300      	movhi	r3, #0
 800aad8:	4418      	add	r0, r3
 800aada:	2300      	movs	r3, #0
 800aadc:	4288      	cmp	r0, r1
 800aade:	d305      	bcc.n	800aaec <__copybits+0x40>
 800aae0:	bd70      	pop	{r4, r5, r6, pc}
 800aae2:	f853 6b04 	ldr.w	r6, [r3], #4
 800aae6:	f845 6f04 	str.w	r6, [r5, #4]!
 800aaea:	e7eb      	b.n	800aac4 <__copybits+0x18>
 800aaec:	f840 3b04 	str.w	r3, [r0], #4
 800aaf0:	e7f4      	b.n	800aadc <__copybits+0x30>

0800aaf2 <__any_on>:
 800aaf2:	f100 0214 	add.w	r2, r0, #20
 800aaf6:	6900      	ldr	r0, [r0, #16]
 800aaf8:	114b      	asrs	r3, r1, #5
 800aafa:	4298      	cmp	r0, r3
 800aafc:	b510      	push	{r4, lr}
 800aafe:	db11      	blt.n	800ab24 <__any_on+0x32>
 800ab00:	dd0a      	ble.n	800ab18 <__any_on+0x26>
 800ab02:	f011 011f 	ands.w	r1, r1, #31
 800ab06:	d007      	beq.n	800ab18 <__any_on+0x26>
 800ab08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab0c:	fa24 f001 	lsr.w	r0, r4, r1
 800ab10:	fa00 f101 	lsl.w	r1, r0, r1
 800ab14:	428c      	cmp	r4, r1
 800ab16:	d10b      	bne.n	800ab30 <__any_on+0x3e>
 800ab18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d803      	bhi.n	800ab28 <__any_on+0x36>
 800ab20:	2000      	movs	r0, #0
 800ab22:	bd10      	pop	{r4, pc}
 800ab24:	4603      	mov	r3, r0
 800ab26:	e7f7      	b.n	800ab18 <__any_on+0x26>
 800ab28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab2c:	2900      	cmp	r1, #0
 800ab2e:	d0f5      	beq.n	800ab1c <__any_on+0x2a>
 800ab30:	2001      	movs	r0, #1
 800ab32:	e7f6      	b.n	800ab22 <__any_on+0x30>

0800ab34 <__ascii_wctomb>:
 800ab34:	4603      	mov	r3, r0
 800ab36:	4608      	mov	r0, r1
 800ab38:	b141      	cbz	r1, 800ab4c <__ascii_wctomb+0x18>
 800ab3a:	2aff      	cmp	r2, #255	@ 0xff
 800ab3c:	d904      	bls.n	800ab48 <__ascii_wctomb+0x14>
 800ab3e:	228a      	movs	r2, #138	@ 0x8a
 800ab40:	601a      	str	r2, [r3, #0]
 800ab42:	f04f 30ff 	mov.w	r0, #4294967295
 800ab46:	4770      	bx	lr
 800ab48:	700a      	strb	r2, [r1, #0]
 800ab4a:	2001      	movs	r0, #1
 800ab4c:	4770      	bx	lr

0800ab4e <__ssputs_r>:
 800ab4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab52:	688e      	ldr	r6, [r1, #8]
 800ab54:	461f      	mov	r7, r3
 800ab56:	42be      	cmp	r6, r7
 800ab58:	680b      	ldr	r3, [r1, #0]
 800ab5a:	4682      	mov	sl, r0
 800ab5c:	460c      	mov	r4, r1
 800ab5e:	4690      	mov	r8, r2
 800ab60:	d82d      	bhi.n	800abbe <__ssputs_r+0x70>
 800ab62:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab66:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ab6a:	d026      	beq.n	800abba <__ssputs_r+0x6c>
 800ab6c:	6965      	ldr	r5, [r4, #20]
 800ab6e:	6909      	ldr	r1, [r1, #16]
 800ab70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab74:	eba3 0901 	sub.w	r9, r3, r1
 800ab78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab7c:	1c7b      	adds	r3, r7, #1
 800ab7e:	444b      	add	r3, r9
 800ab80:	106d      	asrs	r5, r5, #1
 800ab82:	429d      	cmp	r5, r3
 800ab84:	bf38      	it	cc
 800ab86:	461d      	movcc	r5, r3
 800ab88:	0553      	lsls	r3, r2, #21
 800ab8a:	d527      	bpl.n	800abdc <__ssputs_r+0x8e>
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	f7ff fa89 	bl	800a0a4 <_malloc_r>
 800ab92:	4606      	mov	r6, r0
 800ab94:	b360      	cbz	r0, 800abf0 <__ssputs_r+0xa2>
 800ab96:	6921      	ldr	r1, [r4, #16]
 800ab98:	464a      	mov	r2, r9
 800ab9a:	f7fe f840 	bl	8008c1e <memcpy>
 800ab9e:	89a3      	ldrh	r3, [r4, #12]
 800aba0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800aba4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aba8:	81a3      	strh	r3, [r4, #12]
 800abaa:	6126      	str	r6, [r4, #16]
 800abac:	6165      	str	r5, [r4, #20]
 800abae:	444e      	add	r6, r9
 800abb0:	eba5 0509 	sub.w	r5, r5, r9
 800abb4:	6026      	str	r6, [r4, #0]
 800abb6:	60a5      	str	r5, [r4, #8]
 800abb8:	463e      	mov	r6, r7
 800abba:	42be      	cmp	r6, r7
 800abbc:	d900      	bls.n	800abc0 <__ssputs_r+0x72>
 800abbe:	463e      	mov	r6, r7
 800abc0:	6820      	ldr	r0, [r4, #0]
 800abc2:	4632      	mov	r2, r6
 800abc4:	4641      	mov	r1, r8
 800abc6:	f000 fb7b 	bl	800b2c0 <memmove>
 800abca:	68a3      	ldr	r3, [r4, #8]
 800abcc:	1b9b      	subs	r3, r3, r6
 800abce:	60a3      	str	r3, [r4, #8]
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	4433      	add	r3, r6
 800abd4:	6023      	str	r3, [r4, #0]
 800abd6:	2000      	movs	r0, #0
 800abd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abdc:	462a      	mov	r2, r5
 800abde:	f000 fbd6 	bl	800b38e <_realloc_r>
 800abe2:	4606      	mov	r6, r0
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d1e0      	bne.n	800abaa <__ssputs_r+0x5c>
 800abe8:	6921      	ldr	r1, [r4, #16]
 800abea:	4650      	mov	r0, sl
 800abec:	f7fe feac 	bl	8009948 <_free_r>
 800abf0:	230c      	movs	r3, #12
 800abf2:	f8ca 3000 	str.w	r3, [sl]
 800abf6:	89a3      	ldrh	r3, [r4, #12]
 800abf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abfc:	81a3      	strh	r3, [r4, #12]
 800abfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ac02:	e7e9      	b.n	800abd8 <__ssputs_r+0x8a>

0800ac04 <_svfiprintf_r>:
 800ac04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac08:	4698      	mov	r8, r3
 800ac0a:	898b      	ldrh	r3, [r1, #12]
 800ac0c:	061b      	lsls	r3, r3, #24
 800ac0e:	b09d      	sub	sp, #116	@ 0x74
 800ac10:	4607      	mov	r7, r0
 800ac12:	460d      	mov	r5, r1
 800ac14:	4614      	mov	r4, r2
 800ac16:	d510      	bpl.n	800ac3a <_svfiprintf_r+0x36>
 800ac18:	690b      	ldr	r3, [r1, #16]
 800ac1a:	b973      	cbnz	r3, 800ac3a <_svfiprintf_r+0x36>
 800ac1c:	2140      	movs	r1, #64	@ 0x40
 800ac1e:	f7ff fa41 	bl	800a0a4 <_malloc_r>
 800ac22:	6028      	str	r0, [r5, #0]
 800ac24:	6128      	str	r0, [r5, #16]
 800ac26:	b930      	cbnz	r0, 800ac36 <_svfiprintf_r+0x32>
 800ac28:	230c      	movs	r3, #12
 800ac2a:	603b      	str	r3, [r7, #0]
 800ac2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac30:	b01d      	add	sp, #116	@ 0x74
 800ac32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac36:	2340      	movs	r3, #64	@ 0x40
 800ac38:	616b      	str	r3, [r5, #20]
 800ac3a:	2300      	movs	r3, #0
 800ac3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac3e:	2320      	movs	r3, #32
 800ac40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac44:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac48:	2330      	movs	r3, #48	@ 0x30
 800ac4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ade8 <_svfiprintf_r+0x1e4>
 800ac4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac52:	f04f 0901 	mov.w	r9, #1
 800ac56:	4623      	mov	r3, r4
 800ac58:	469a      	mov	sl, r3
 800ac5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac5e:	b10a      	cbz	r2, 800ac64 <_svfiprintf_r+0x60>
 800ac60:	2a25      	cmp	r2, #37	@ 0x25
 800ac62:	d1f9      	bne.n	800ac58 <_svfiprintf_r+0x54>
 800ac64:	ebba 0b04 	subs.w	fp, sl, r4
 800ac68:	d00b      	beq.n	800ac82 <_svfiprintf_r+0x7e>
 800ac6a:	465b      	mov	r3, fp
 800ac6c:	4622      	mov	r2, r4
 800ac6e:	4629      	mov	r1, r5
 800ac70:	4638      	mov	r0, r7
 800ac72:	f7ff ff6c 	bl	800ab4e <__ssputs_r>
 800ac76:	3001      	adds	r0, #1
 800ac78:	f000 80a7 	beq.w	800adca <_svfiprintf_r+0x1c6>
 800ac7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac7e:	445a      	add	r2, fp
 800ac80:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac82:	f89a 3000 	ldrb.w	r3, [sl]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	f000 809f 	beq.w	800adca <_svfiprintf_r+0x1c6>
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac96:	f10a 0a01 	add.w	sl, sl, #1
 800ac9a:	9304      	str	r3, [sp, #16]
 800ac9c:	9307      	str	r3, [sp, #28]
 800ac9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aca2:	931a      	str	r3, [sp, #104]	@ 0x68
 800aca4:	4654      	mov	r4, sl
 800aca6:	2205      	movs	r2, #5
 800aca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acac:	484e      	ldr	r0, [pc, #312]	@ (800ade8 <_svfiprintf_r+0x1e4>)
 800acae:	f7f5 fa9f 	bl	80001f0 <memchr>
 800acb2:	9a04      	ldr	r2, [sp, #16]
 800acb4:	b9d8      	cbnz	r0, 800acee <_svfiprintf_r+0xea>
 800acb6:	06d0      	lsls	r0, r2, #27
 800acb8:	bf44      	itt	mi
 800acba:	2320      	movmi	r3, #32
 800acbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acc0:	0711      	lsls	r1, r2, #28
 800acc2:	bf44      	itt	mi
 800acc4:	232b      	movmi	r3, #43	@ 0x2b
 800acc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acca:	f89a 3000 	ldrb.w	r3, [sl]
 800acce:	2b2a      	cmp	r3, #42	@ 0x2a
 800acd0:	d015      	beq.n	800acfe <_svfiprintf_r+0xfa>
 800acd2:	9a07      	ldr	r2, [sp, #28]
 800acd4:	4654      	mov	r4, sl
 800acd6:	2000      	movs	r0, #0
 800acd8:	f04f 0c0a 	mov.w	ip, #10
 800acdc:	4621      	mov	r1, r4
 800acde:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ace2:	3b30      	subs	r3, #48	@ 0x30
 800ace4:	2b09      	cmp	r3, #9
 800ace6:	d94b      	bls.n	800ad80 <_svfiprintf_r+0x17c>
 800ace8:	b1b0      	cbz	r0, 800ad18 <_svfiprintf_r+0x114>
 800acea:	9207      	str	r2, [sp, #28]
 800acec:	e014      	b.n	800ad18 <_svfiprintf_r+0x114>
 800acee:	eba0 0308 	sub.w	r3, r0, r8
 800acf2:	fa09 f303 	lsl.w	r3, r9, r3
 800acf6:	4313      	orrs	r3, r2
 800acf8:	9304      	str	r3, [sp, #16]
 800acfa:	46a2      	mov	sl, r4
 800acfc:	e7d2      	b.n	800aca4 <_svfiprintf_r+0xa0>
 800acfe:	9b03      	ldr	r3, [sp, #12]
 800ad00:	1d19      	adds	r1, r3, #4
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	9103      	str	r1, [sp, #12]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	bfbb      	ittet	lt
 800ad0a:	425b      	neglt	r3, r3
 800ad0c:	f042 0202 	orrlt.w	r2, r2, #2
 800ad10:	9307      	strge	r3, [sp, #28]
 800ad12:	9307      	strlt	r3, [sp, #28]
 800ad14:	bfb8      	it	lt
 800ad16:	9204      	strlt	r2, [sp, #16]
 800ad18:	7823      	ldrb	r3, [r4, #0]
 800ad1a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad1c:	d10a      	bne.n	800ad34 <_svfiprintf_r+0x130>
 800ad1e:	7863      	ldrb	r3, [r4, #1]
 800ad20:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad22:	d132      	bne.n	800ad8a <_svfiprintf_r+0x186>
 800ad24:	9b03      	ldr	r3, [sp, #12]
 800ad26:	1d1a      	adds	r2, r3, #4
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	9203      	str	r2, [sp, #12]
 800ad2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad30:	3402      	adds	r4, #2
 800ad32:	9305      	str	r3, [sp, #20]
 800ad34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800adf8 <_svfiprintf_r+0x1f4>
 800ad38:	7821      	ldrb	r1, [r4, #0]
 800ad3a:	2203      	movs	r2, #3
 800ad3c:	4650      	mov	r0, sl
 800ad3e:	f7f5 fa57 	bl	80001f0 <memchr>
 800ad42:	b138      	cbz	r0, 800ad54 <_svfiprintf_r+0x150>
 800ad44:	9b04      	ldr	r3, [sp, #16]
 800ad46:	eba0 000a 	sub.w	r0, r0, sl
 800ad4a:	2240      	movs	r2, #64	@ 0x40
 800ad4c:	4082      	lsls	r2, r0
 800ad4e:	4313      	orrs	r3, r2
 800ad50:	3401      	adds	r4, #1
 800ad52:	9304      	str	r3, [sp, #16]
 800ad54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad58:	4824      	ldr	r0, [pc, #144]	@ (800adec <_svfiprintf_r+0x1e8>)
 800ad5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad5e:	2206      	movs	r2, #6
 800ad60:	f7f5 fa46 	bl	80001f0 <memchr>
 800ad64:	2800      	cmp	r0, #0
 800ad66:	d036      	beq.n	800add6 <_svfiprintf_r+0x1d2>
 800ad68:	4b21      	ldr	r3, [pc, #132]	@ (800adf0 <_svfiprintf_r+0x1ec>)
 800ad6a:	bb1b      	cbnz	r3, 800adb4 <_svfiprintf_r+0x1b0>
 800ad6c:	9b03      	ldr	r3, [sp, #12]
 800ad6e:	3307      	adds	r3, #7
 800ad70:	f023 0307 	bic.w	r3, r3, #7
 800ad74:	3308      	adds	r3, #8
 800ad76:	9303      	str	r3, [sp, #12]
 800ad78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad7a:	4433      	add	r3, r6
 800ad7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad7e:	e76a      	b.n	800ac56 <_svfiprintf_r+0x52>
 800ad80:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad84:	460c      	mov	r4, r1
 800ad86:	2001      	movs	r0, #1
 800ad88:	e7a8      	b.n	800acdc <_svfiprintf_r+0xd8>
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	3401      	adds	r4, #1
 800ad8e:	9305      	str	r3, [sp, #20]
 800ad90:	4619      	mov	r1, r3
 800ad92:	f04f 0c0a 	mov.w	ip, #10
 800ad96:	4620      	mov	r0, r4
 800ad98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad9c:	3a30      	subs	r2, #48	@ 0x30
 800ad9e:	2a09      	cmp	r2, #9
 800ada0:	d903      	bls.n	800adaa <_svfiprintf_r+0x1a6>
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d0c6      	beq.n	800ad34 <_svfiprintf_r+0x130>
 800ada6:	9105      	str	r1, [sp, #20]
 800ada8:	e7c4      	b.n	800ad34 <_svfiprintf_r+0x130>
 800adaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800adae:	4604      	mov	r4, r0
 800adb0:	2301      	movs	r3, #1
 800adb2:	e7f0      	b.n	800ad96 <_svfiprintf_r+0x192>
 800adb4:	ab03      	add	r3, sp, #12
 800adb6:	9300      	str	r3, [sp, #0]
 800adb8:	462a      	mov	r2, r5
 800adba:	4b0e      	ldr	r3, [pc, #56]	@ (800adf4 <_svfiprintf_r+0x1f0>)
 800adbc:	a904      	add	r1, sp, #16
 800adbe:	4638      	mov	r0, r7
 800adc0:	f7fc fdbe 	bl	8007940 <_printf_float>
 800adc4:	1c42      	adds	r2, r0, #1
 800adc6:	4606      	mov	r6, r0
 800adc8:	d1d6      	bne.n	800ad78 <_svfiprintf_r+0x174>
 800adca:	89ab      	ldrh	r3, [r5, #12]
 800adcc:	065b      	lsls	r3, r3, #25
 800adce:	f53f af2d 	bmi.w	800ac2c <_svfiprintf_r+0x28>
 800add2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800add4:	e72c      	b.n	800ac30 <_svfiprintf_r+0x2c>
 800add6:	ab03      	add	r3, sp, #12
 800add8:	9300      	str	r3, [sp, #0]
 800adda:	462a      	mov	r2, r5
 800addc:	4b05      	ldr	r3, [pc, #20]	@ (800adf4 <_svfiprintf_r+0x1f0>)
 800adde:	a904      	add	r1, sp, #16
 800ade0:	4638      	mov	r0, r7
 800ade2:	f7fd f845 	bl	8007e70 <_printf_i>
 800ade6:	e7ed      	b.n	800adc4 <_svfiprintf_r+0x1c0>
 800ade8:	0800ba93 	.word	0x0800ba93
 800adec:	0800ba9d 	.word	0x0800ba9d
 800adf0:	08007941 	.word	0x08007941
 800adf4:	0800ab4f 	.word	0x0800ab4f
 800adf8:	0800ba99 	.word	0x0800ba99

0800adfc <__sfputc_r>:
 800adfc:	6893      	ldr	r3, [r2, #8]
 800adfe:	3b01      	subs	r3, #1
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	b410      	push	{r4}
 800ae04:	6093      	str	r3, [r2, #8]
 800ae06:	da08      	bge.n	800ae1a <__sfputc_r+0x1e>
 800ae08:	6994      	ldr	r4, [r2, #24]
 800ae0a:	42a3      	cmp	r3, r4
 800ae0c:	db01      	blt.n	800ae12 <__sfputc_r+0x16>
 800ae0e:	290a      	cmp	r1, #10
 800ae10:	d103      	bne.n	800ae1a <__sfputc_r+0x1e>
 800ae12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae16:	f7fd bd61 	b.w	80088dc <__swbuf_r>
 800ae1a:	6813      	ldr	r3, [r2, #0]
 800ae1c:	1c58      	adds	r0, r3, #1
 800ae1e:	6010      	str	r0, [r2, #0]
 800ae20:	7019      	strb	r1, [r3, #0]
 800ae22:	4608      	mov	r0, r1
 800ae24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae28:	4770      	bx	lr

0800ae2a <__sfputs_r>:
 800ae2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae2c:	4606      	mov	r6, r0
 800ae2e:	460f      	mov	r7, r1
 800ae30:	4614      	mov	r4, r2
 800ae32:	18d5      	adds	r5, r2, r3
 800ae34:	42ac      	cmp	r4, r5
 800ae36:	d101      	bne.n	800ae3c <__sfputs_r+0x12>
 800ae38:	2000      	movs	r0, #0
 800ae3a:	e007      	b.n	800ae4c <__sfputs_r+0x22>
 800ae3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae40:	463a      	mov	r2, r7
 800ae42:	4630      	mov	r0, r6
 800ae44:	f7ff ffda 	bl	800adfc <__sfputc_r>
 800ae48:	1c43      	adds	r3, r0, #1
 800ae4a:	d1f3      	bne.n	800ae34 <__sfputs_r+0xa>
 800ae4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae50 <_vfiprintf_r>:
 800ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae54:	460d      	mov	r5, r1
 800ae56:	b09d      	sub	sp, #116	@ 0x74
 800ae58:	4614      	mov	r4, r2
 800ae5a:	4698      	mov	r8, r3
 800ae5c:	4606      	mov	r6, r0
 800ae5e:	b118      	cbz	r0, 800ae68 <_vfiprintf_r+0x18>
 800ae60:	6a03      	ldr	r3, [r0, #32]
 800ae62:	b90b      	cbnz	r3, 800ae68 <_vfiprintf_r+0x18>
 800ae64:	f7fd fbbc 	bl	80085e0 <__sinit>
 800ae68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae6a:	07d9      	lsls	r1, r3, #31
 800ae6c:	d405      	bmi.n	800ae7a <_vfiprintf_r+0x2a>
 800ae6e:	89ab      	ldrh	r3, [r5, #12]
 800ae70:	059a      	lsls	r2, r3, #22
 800ae72:	d402      	bmi.n	800ae7a <_vfiprintf_r+0x2a>
 800ae74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ae76:	f7fd fed0 	bl	8008c1a <__retarget_lock_acquire_recursive>
 800ae7a:	89ab      	ldrh	r3, [r5, #12]
 800ae7c:	071b      	lsls	r3, r3, #28
 800ae7e:	d501      	bpl.n	800ae84 <_vfiprintf_r+0x34>
 800ae80:	692b      	ldr	r3, [r5, #16]
 800ae82:	b99b      	cbnz	r3, 800aeac <_vfiprintf_r+0x5c>
 800ae84:	4629      	mov	r1, r5
 800ae86:	4630      	mov	r0, r6
 800ae88:	f7fd fd66 	bl	8008958 <__swsetup_r>
 800ae8c:	b170      	cbz	r0, 800aeac <_vfiprintf_r+0x5c>
 800ae8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ae90:	07dc      	lsls	r4, r3, #31
 800ae92:	d504      	bpl.n	800ae9e <_vfiprintf_r+0x4e>
 800ae94:	f04f 30ff 	mov.w	r0, #4294967295
 800ae98:	b01d      	add	sp, #116	@ 0x74
 800ae9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae9e:	89ab      	ldrh	r3, [r5, #12]
 800aea0:	0598      	lsls	r0, r3, #22
 800aea2:	d4f7      	bmi.n	800ae94 <_vfiprintf_r+0x44>
 800aea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aea6:	f7fd feb9 	bl	8008c1c <__retarget_lock_release_recursive>
 800aeaa:	e7f3      	b.n	800ae94 <_vfiprintf_r+0x44>
 800aeac:	2300      	movs	r3, #0
 800aeae:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeb0:	2320      	movs	r3, #32
 800aeb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aeb6:	f8cd 800c 	str.w	r8, [sp, #12]
 800aeba:	2330      	movs	r3, #48	@ 0x30
 800aebc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b06c <_vfiprintf_r+0x21c>
 800aec0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aec4:	f04f 0901 	mov.w	r9, #1
 800aec8:	4623      	mov	r3, r4
 800aeca:	469a      	mov	sl, r3
 800aecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aed0:	b10a      	cbz	r2, 800aed6 <_vfiprintf_r+0x86>
 800aed2:	2a25      	cmp	r2, #37	@ 0x25
 800aed4:	d1f9      	bne.n	800aeca <_vfiprintf_r+0x7a>
 800aed6:	ebba 0b04 	subs.w	fp, sl, r4
 800aeda:	d00b      	beq.n	800aef4 <_vfiprintf_r+0xa4>
 800aedc:	465b      	mov	r3, fp
 800aede:	4622      	mov	r2, r4
 800aee0:	4629      	mov	r1, r5
 800aee2:	4630      	mov	r0, r6
 800aee4:	f7ff ffa1 	bl	800ae2a <__sfputs_r>
 800aee8:	3001      	adds	r0, #1
 800aeea:	f000 80a7 	beq.w	800b03c <_vfiprintf_r+0x1ec>
 800aeee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aef0:	445a      	add	r2, fp
 800aef2:	9209      	str	r2, [sp, #36]	@ 0x24
 800aef4:	f89a 3000 	ldrb.w	r3, [sl]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 809f 	beq.w	800b03c <_vfiprintf_r+0x1ec>
 800aefe:	2300      	movs	r3, #0
 800af00:	f04f 32ff 	mov.w	r2, #4294967295
 800af04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af08:	f10a 0a01 	add.w	sl, sl, #1
 800af0c:	9304      	str	r3, [sp, #16]
 800af0e:	9307      	str	r3, [sp, #28]
 800af10:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af14:	931a      	str	r3, [sp, #104]	@ 0x68
 800af16:	4654      	mov	r4, sl
 800af18:	2205      	movs	r2, #5
 800af1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af1e:	4853      	ldr	r0, [pc, #332]	@ (800b06c <_vfiprintf_r+0x21c>)
 800af20:	f7f5 f966 	bl	80001f0 <memchr>
 800af24:	9a04      	ldr	r2, [sp, #16]
 800af26:	b9d8      	cbnz	r0, 800af60 <_vfiprintf_r+0x110>
 800af28:	06d1      	lsls	r1, r2, #27
 800af2a:	bf44      	itt	mi
 800af2c:	2320      	movmi	r3, #32
 800af2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af32:	0713      	lsls	r3, r2, #28
 800af34:	bf44      	itt	mi
 800af36:	232b      	movmi	r3, #43	@ 0x2b
 800af38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af3c:	f89a 3000 	ldrb.w	r3, [sl]
 800af40:	2b2a      	cmp	r3, #42	@ 0x2a
 800af42:	d015      	beq.n	800af70 <_vfiprintf_r+0x120>
 800af44:	9a07      	ldr	r2, [sp, #28]
 800af46:	4654      	mov	r4, sl
 800af48:	2000      	movs	r0, #0
 800af4a:	f04f 0c0a 	mov.w	ip, #10
 800af4e:	4621      	mov	r1, r4
 800af50:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af54:	3b30      	subs	r3, #48	@ 0x30
 800af56:	2b09      	cmp	r3, #9
 800af58:	d94b      	bls.n	800aff2 <_vfiprintf_r+0x1a2>
 800af5a:	b1b0      	cbz	r0, 800af8a <_vfiprintf_r+0x13a>
 800af5c:	9207      	str	r2, [sp, #28]
 800af5e:	e014      	b.n	800af8a <_vfiprintf_r+0x13a>
 800af60:	eba0 0308 	sub.w	r3, r0, r8
 800af64:	fa09 f303 	lsl.w	r3, r9, r3
 800af68:	4313      	orrs	r3, r2
 800af6a:	9304      	str	r3, [sp, #16]
 800af6c:	46a2      	mov	sl, r4
 800af6e:	e7d2      	b.n	800af16 <_vfiprintf_r+0xc6>
 800af70:	9b03      	ldr	r3, [sp, #12]
 800af72:	1d19      	adds	r1, r3, #4
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	9103      	str	r1, [sp, #12]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	bfbb      	ittet	lt
 800af7c:	425b      	neglt	r3, r3
 800af7e:	f042 0202 	orrlt.w	r2, r2, #2
 800af82:	9307      	strge	r3, [sp, #28]
 800af84:	9307      	strlt	r3, [sp, #28]
 800af86:	bfb8      	it	lt
 800af88:	9204      	strlt	r2, [sp, #16]
 800af8a:	7823      	ldrb	r3, [r4, #0]
 800af8c:	2b2e      	cmp	r3, #46	@ 0x2e
 800af8e:	d10a      	bne.n	800afa6 <_vfiprintf_r+0x156>
 800af90:	7863      	ldrb	r3, [r4, #1]
 800af92:	2b2a      	cmp	r3, #42	@ 0x2a
 800af94:	d132      	bne.n	800affc <_vfiprintf_r+0x1ac>
 800af96:	9b03      	ldr	r3, [sp, #12]
 800af98:	1d1a      	adds	r2, r3, #4
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	9203      	str	r2, [sp, #12]
 800af9e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800afa2:	3402      	adds	r4, #2
 800afa4:	9305      	str	r3, [sp, #20]
 800afa6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b07c <_vfiprintf_r+0x22c>
 800afaa:	7821      	ldrb	r1, [r4, #0]
 800afac:	2203      	movs	r2, #3
 800afae:	4650      	mov	r0, sl
 800afb0:	f7f5 f91e 	bl	80001f0 <memchr>
 800afb4:	b138      	cbz	r0, 800afc6 <_vfiprintf_r+0x176>
 800afb6:	9b04      	ldr	r3, [sp, #16]
 800afb8:	eba0 000a 	sub.w	r0, r0, sl
 800afbc:	2240      	movs	r2, #64	@ 0x40
 800afbe:	4082      	lsls	r2, r0
 800afc0:	4313      	orrs	r3, r2
 800afc2:	3401      	adds	r4, #1
 800afc4:	9304      	str	r3, [sp, #16]
 800afc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afca:	4829      	ldr	r0, [pc, #164]	@ (800b070 <_vfiprintf_r+0x220>)
 800afcc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800afd0:	2206      	movs	r2, #6
 800afd2:	f7f5 f90d 	bl	80001f0 <memchr>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d03f      	beq.n	800b05a <_vfiprintf_r+0x20a>
 800afda:	4b26      	ldr	r3, [pc, #152]	@ (800b074 <_vfiprintf_r+0x224>)
 800afdc:	bb1b      	cbnz	r3, 800b026 <_vfiprintf_r+0x1d6>
 800afde:	9b03      	ldr	r3, [sp, #12]
 800afe0:	3307      	adds	r3, #7
 800afe2:	f023 0307 	bic.w	r3, r3, #7
 800afe6:	3308      	adds	r3, #8
 800afe8:	9303      	str	r3, [sp, #12]
 800afea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afec:	443b      	add	r3, r7
 800afee:	9309      	str	r3, [sp, #36]	@ 0x24
 800aff0:	e76a      	b.n	800aec8 <_vfiprintf_r+0x78>
 800aff2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aff6:	460c      	mov	r4, r1
 800aff8:	2001      	movs	r0, #1
 800affa:	e7a8      	b.n	800af4e <_vfiprintf_r+0xfe>
 800affc:	2300      	movs	r3, #0
 800affe:	3401      	adds	r4, #1
 800b000:	9305      	str	r3, [sp, #20]
 800b002:	4619      	mov	r1, r3
 800b004:	f04f 0c0a 	mov.w	ip, #10
 800b008:	4620      	mov	r0, r4
 800b00a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b00e:	3a30      	subs	r2, #48	@ 0x30
 800b010:	2a09      	cmp	r2, #9
 800b012:	d903      	bls.n	800b01c <_vfiprintf_r+0x1cc>
 800b014:	2b00      	cmp	r3, #0
 800b016:	d0c6      	beq.n	800afa6 <_vfiprintf_r+0x156>
 800b018:	9105      	str	r1, [sp, #20]
 800b01a:	e7c4      	b.n	800afa6 <_vfiprintf_r+0x156>
 800b01c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b020:	4604      	mov	r4, r0
 800b022:	2301      	movs	r3, #1
 800b024:	e7f0      	b.n	800b008 <_vfiprintf_r+0x1b8>
 800b026:	ab03      	add	r3, sp, #12
 800b028:	9300      	str	r3, [sp, #0]
 800b02a:	462a      	mov	r2, r5
 800b02c:	4b12      	ldr	r3, [pc, #72]	@ (800b078 <_vfiprintf_r+0x228>)
 800b02e:	a904      	add	r1, sp, #16
 800b030:	4630      	mov	r0, r6
 800b032:	f7fc fc85 	bl	8007940 <_printf_float>
 800b036:	4607      	mov	r7, r0
 800b038:	1c78      	adds	r0, r7, #1
 800b03a:	d1d6      	bne.n	800afea <_vfiprintf_r+0x19a>
 800b03c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b03e:	07d9      	lsls	r1, r3, #31
 800b040:	d405      	bmi.n	800b04e <_vfiprintf_r+0x1fe>
 800b042:	89ab      	ldrh	r3, [r5, #12]
 800b044:	059a      	lsls	r2, r3, #22
 800b046:	d402      	bmi.n	800b04e <_vfiprintf_r+0x1fe>
 800b048:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b04a:	f7fd fde7 	bl	8008c1c <__retarget_lock_release_recursive>
 800b04e:	89ab      	ldrh	r3, [r5, #12]
 800b050:	065b      	lsls	r3, r3, #25
 800b052:	f53f af1f 	bmi.w	800ae94 <_vfiprintf_r+0x44>
 800b056:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b058:	e71e      	b.n	800ae98 <_vfiprintf_r+0x48>
 800b05a:	ab03      	add	r3, sp, #12
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	462a      	mov	r2, r5
 800b060:	4b05      	ldr	r3, [pc, #20]	@ (800b078 <_vfiprintf_r+0x228>)
 800b062:	a904      	add	r1, sp, #16
 800b064:	4630      	mov	r0, r6
 800b066:	f7fc ff03 	bl	8007e70 <_printf_i>
 800b06a:	e7e4      	b.n	800b036 <_vfiprintf_r+0x1e6>
 800b06c:	0800ba93 	.word	0x0800ba93
 800b070:	0800ba9d 	.word	0x0800ba9d
 800b074:	08007941 	.word	0x08007941
 800b078:	0800ae2b 	.word	0x0800ae2b
 800b07c:	0800ba99 	.word	0x0800ba99

0800b080 <__sflush_r>:
 800b080:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b088:	0716      	lsls	r6, r2, #28
 800b08a:	4605      	mov	r5, r0
 800b08c:	460c      	mov	r4, r1
 800b08e:	d454      	bmi.n	800b13a <__sflush_r+0xba>
 800b090:	684b      	ldr	r3, [r1, #4]
 800b092:	2b00      	cmp	r3, #0
 800b094:	dc02      	bgt.n	800b09c <__sflush_r+0x1c>
 800b096:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b098:	2b00      	cmp	r3, #0
 800b09a:	dd48      	ble.n	800b12e <__sflush_r+0xae>
 800b09c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b09e:	2e00      	cmp	r6, #0
 800b0a0:	d045      	beq.n	800b12e <__sflush_r+0xae>
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b0a8:	682f      	ldr	r7, [r5, #0]
 800b0aa:	6a21      	ldr	r1, [r4, #32]
 800b0ac:	602b      	str	r3, [r5, #0]
 800b0ae:	d030      	beq.n	800b112 <__sflush_r+0x92>
 800b0b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b0b2:	89a3      	ldrh	r3, [r4, #12]
 800b0b4:	0759      	lsls	r1, r3, #29
 800b0b6:	d505      	bpl.n	800b0c4 <__sflush_r+0x44>
 800b0b8:	6863      	ldr	r3, [r4, #4]
 800b0ba:	1ad2      	subs	r2, r2, r3
 800b0bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b0be:	b10b      	cbz	r3, 800b0c4 <__sflush_r+0x44>
 800b0c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b0c2:	1ad2      	subs	r2, r2, r3
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b0c8:	6a21      	ldr	r1, [r4, #32]
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	47b0      	blx	r6
 800b0ce:	1c43      	adds	r3, r0, #1
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	d106      	bne.n	800b0e2 <__sflush_r+0x62>
 800b0d4:	6829      	ldr	r1, [r5, #0]
 800b0d6:	291d      	cmp	r1, #29
 800b0d8:	d82b      	bhi.n	800b132 <__sflush_r+0xb2>
 800b0da:	4a2a      	ldr	r2, [pc, #168]	@ (800b184 <__sflush_r+0x104>)
 800b0dc:	40ca      	lsrs	r2, r1
 800b0de:	07d6      	lsls	r6, r2, #31
 800b0e0:	d527      	bpl.n	800b132 <__sflush_r+0xb2>
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	6062      	str	r2, [r4, #4]
 800b0e6:	04d9      	lsls	r1, r3, #19
 800b0e8:	6922      	ldr	r2, [r4, #16]
 800b0ea:	6022      	str	r2, [r4, #0]
 800b0ec:	d504      	bpl.n	800b0f8 <__sflush_r+0x78>
 800b0ee:	1c42      	adds	r2, r0, #1
 800b0f0:	d101      	bne.n	800b0f6 <__sflush_r+0x76>
 800b0f2:	682b      	ldr	r3, [r5, #0]
 800b0f4:	b903      	cbnz	r3, 800b0f8 <__sflush_r+0x78>
 800b0f6:	6560      	str	r0, [r4, #84]	@ 0x54
 800b0f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b0fa:	602f      	str	r7, [r5, #0]
 800b0fc:	b1b9      	cbz	r1, 800b12e <__sflush_r+0xae>
 800b0fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b102:	4299      	cmp	r1, r3
 800b104:	d002      	beq.n	800b10c <__sflush_r+0x8c>
 800b106:	4628      	mov	r0, r5
 800b108:	f7fe fc1e 	bl	8009948 <_free_r>
 800b10c:	2300      	movs	r3, #0
 800b10e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b110:	e00d      	b.n	800b12e <__sflush_r+0xae>
 800b112:	2301      	movs	r3, #1
 800b114:	4628      	mov	r0, r5
 800b116:	47b0      	blx	r6
 800b118:	4602      	mov	r2, r0
 800b11a:	1c50      	adds	r0, r2, #1
 800b11c:	d1c9      	bne.n	800b0b2 <__sflush_r+0x32>
 800b11e:	682b      	ldr	r3, [r5, #0]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d0c6      	beq.n	800b0b2 <__sflush_r+0x32>
 800b124:	2b1d      	cmp	r3, #29
 800b126:	d001      	beq.n	800b12c <__sflush_r+0xac>
 800b128:	2b16      	cmp	r3, #22
 800b12a:	d11e      	bne.n	800b16a <__sflush_r+0xea>
 800b12c:	602f      	str	r7, [r5, #0]
 800b12e:	2000      	movs	r0, #0
 800b130:	e022      	b.n	800b178 <__sflush_r+0xf8>
 800b132:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b136:	b21b      	sxth	r3, r3
 800b138:	e01b      	b.n	800b172 <__sflush_r+0xf2>
 800b13a:	690f      	ldr	r7, [r1, #16]
 800b13c:	2f00      	cmp	r7, #0
 800b13e:	d0f6      	beq.n	800b12e <__sflush_r+0xae>
 800b140:	0793      	lsls	r3, r2, #30
 800b142:	680e      	ldr	r6, [r1, #0]
 800b144:	bf08      	it	eq
 800b146:	694b      	ldreq	r3, [r1, #20]
 800b148:	600f      	str	r7, [r1, #0]
 800b14a:	bf18      	it	ne
 800b14c:	2300      	movne	r3, #0
 800b14e:	eba6 0807 	sub.w	r8, r6, r7
 800b152:	608b      	str	r3, [r1, #8]
 800b154:	f1b8 0f00 	cmp.w	r8, #0
 800b158:	dde9      	ble.n	800b12e <__sflush_r+0xae>
 800b15a:	6a21      	ldr	r1, [r4, #32]
 800b15c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b15e:	4643      	mov	r3, r8
 800b160:	463a      	mov	r2, r7
 800b162:	4628      	mov	r0, r5
 800b164:	47b0      	blx	r6
 800b166:	2800      	cmp	r0, #0
 800b168:	dc08      	bgt.n	800b17c <__sflush_r+0xfc>
 800b16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b16e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b172:	81a3      	strh	r3, [r4, #12]
 800b174:	f04f 30ff 	mov.w	r0, #4294967295
 800b178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b17c:	4407      	add	r7, r0
 800b17e:	eba8 0800 	sub.w	r8, r8, r0
 800b182:	e7e7      	b.n	800b154 <__sflush_r+0xd4>
 800b184:	20400001 	.word	0x20400001

0800b188 <_fflush_r>:
 800b188:	b538      	push	{r3, r4, r5, lr}
 800b18a:	690b      	ldr	r3, [r1, #16]
 800b18c:	4605      	mov	r5, r0
 800b18e:	460c      	mov	r4, r1
 800b190:	b913      	cbnz	r3, 800b198 <_fflush_r+0x10>
 800b192:	2500      	movs	r5, #0
 800b194:	4628      	mov	r0, r5
 800b196:	bd38      	pop	{r3, r4, r5, pc}
 800b198:	b118      	cbz	r0, 800b1a2 <_fflush_r+0x1a>
 800b19a:	6a03      	ldr	r3, [r0, #32]
 800b19c:	b90b      	cbnz	r3, 800b1a2 <_fflush_r+0x1a>
 800b19e:	f7fd fa1f 	bl	80085e0 <__sinit>
 800b1a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d0f3      	beq.n	800b192 <_fflush_r+0xa>
 800b1aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b1ac:	07d0      	lsls	r0, r2, #31
 800b1ae:	d404      	bmi.n	800b1ba <_fflush_r+0x32>
 800b1b0:	0599      	lsls	r1, r3, #22
 800b1b2:	d402      	bmi.n	800b1ba <_fflush_r+0x32>
 800b1b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1b6:	f7fd fd30 	bl	8008c1a <__retarget_lock_acquire_recursive>
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	4621      	mov	r1, r4
 800b1be:	f7ff ff5f 	bl	800b080 <__sflush_r>
 800b1c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b1c4:	07da      	lsls	r2, r3, #31
 800b1c6:	4605      	mov	r5, r0
 800b1c8:	d4e4      	bmi.n	800b194 <_fflush_r+0xc>
 800b1ca:	89a3      	ldrh	r3, [r4, #12]
 800b1cc:	059b      	lsls	r3, r3, #22
 800b1ce:	d4e1      	bmi.n	800b194 <_fflush_r+0xc>
 800b1d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b1d2:	f7fd fd23 	bl	8008c1c <__retarget_lock_release_recursive>
 800b1d6:	e7dd      	b.n	800b194 <_fflush_r+0xc>

0800b1d8 <fiprintf>:
 800b1d8:	b40e      	push	{r1, r2, r3}
 800b1da:	b503      	push	{r0, r1, lr}
 800b1dc:	4601      	mov	r1, r0
 800b1de:	ab03      	add	r3, sp, #12
 800b1e0:	4805      	ldr	r0, [pc, #20]	@ (800b1f8 <fiprintf+0x20>)
 800b1e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1e6:	6800      	ldr	r0, [r0, #0]
 800b1e8:	9301      	str	r3, [sp, #4]
 800b1ea:	f7ff fe31 	bl	800ae50 <_vfiprintf_r>
 800b1ee:	b002      	add	sp, #8
 800b1f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1f4:	b003      	add	sp, #12
 800b1f6:	4770      	bx	lr
 800b1f8:	200001ec 	.word	0x200001ec

0800b1fc <__swhatbuf_r>:
 800b1fc:	b570      	push	{r4, r5, r6, lr}
 800b1fe:	460c      	mov	r4, r1
 800b200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b204:	2900      	cmp	r1, #0
 800b206:	b096      	sub	sp, #88	@ 0x58
 800b208:	4615      	mov	r5, r2
 800b20a:	461e      	mov	r6, r3
 800b20c:	da0d      	bge.n	800b22a <__swhatbuf_r+0x2e>
 800b20e:	89a3      	ldrh	r3, [r4, #12]
 800b210:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b214:	f04f 0100 	mov.w	r1, #0
 800b218:	bf14      	ite	ne
 800b21a:	2340      	movne	r3, #64	@ 0x40
 800b21c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b220:	2000      	movs	r0, #0
 800b222:	6031      	str	r1, [r6, #0]
 800b224:	602b      	str	r3, [r5, #0]
 800b226:	b016      	add	sp, #88	@ 0x58
 800b228:	bd70      	pop	{r4, r5, r6, pc}
 800b22a:	466a      	mov	r2, sp
 800b22c:	f000 f862 	bl	800b2f4 <_fstat_r>
 800b230:	2800      	cmp	r0, #0
 800b232:	dbec      	blt.n	800b20e <__swhatbuf_r+0x12>
 800b234:	9901      	ldr	r1, [sp, #4]
 800b236:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b23a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b23e:	4259      	negs	r1, r3
 800b240:	4159      	adcs	r1, r3
 800b242:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b246:	e7eb      	b.n	800b220 <__swhatbuf_r+0x24>

0800b248 <__smakebuf_r>:
 800b248:	898b      	ldrh	r3, [r1, #12]
 800b24a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b24c:	079d      	lsls	r5, r3, #30
 800b24e:	4606      	mov	r6, r0
 800b250:	460c      	mov	r4, r1
 800b252:	d507      	bpl.n	800b264 <__smakebuf_r+0x1c>
 800b254:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b258:	6023      	str	r3, [r4, #0]
 800b25a:	6123      	str	r3, [r4, #16]
 800b25c:	2301      	movs	r3, #1
 800b25e:	6163      	str	r3, [r4, #20]
 800b260:	b003      	add	sp, #12
 800b262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b264:	ab01      	add	r3, sp, #4
 800b266:	466a      	mov	r2, sp
 800b268:	f7ff ffc8 	bl	800b1fc <__swhatbuf_r>
 800b26c:	9f00      	ldr	r7, [sp, #0]
 800b26e:	4605      	mov	r5, r0
 800b270:	4639      	mov	r1, r7
 800b272:	4630      	mov	r0, r6
 800b274:	f7fe ff16 	bl	800a0a4 <_malloc_r>
 800b278:	b948      	cbnz	r0, 800b28e <__smakebuf_r+0x46>
 800b27a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b27e:	059a      	lsls	r2, r3, #22
 800b280:	d4ee      	bmi.n	800b260 <__smakebuf_r+0x18>
 800b282:	f023 0303 	bic.w	r3, r3, #3
 800b286:	f043 0302 	orr.w	r3, r3, #2
 800b28a:	81a3      	strh	r3, [r4, #12]
 800b28c:	e7e2      	b.n	800b254 <__smakebuf_r+0xc>
 800b28e:	89a3      	ldrh	r3, [r4, #12]
 800b290:	6020      	str	r0, [r4, #0]
 800b292:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b296:	81a3      	strh	r3, [r4, #12]
 800b298:	9b01      	ldr	r3, [sp, #4]
 800b29a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b29e:	b15b      	cbz	r3, 800b2b8 <__smakebuf_r+0x70>
 800b2a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	f000 f837 	bl	800b318 <_isatty_r>
 800b2aa:	b128      	cbz	r0, 800b2b8 <__smakebuf_r+0x70>
 800b2ac:	89a3      	ldrh	r3, [r4, #12]
 800b2ae:	f023 0303 	bic.w	r3, r3, #3
 800b2b2:	f043 0301 	orr.w	r3, r3, #1
 800b2b6:	81a3      	strh	r3, [r4, #12]
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	431d      	orrs	r5, r3
 800b2bc:	81a5      	strh	r5, [r4, #12]
 800b2be:	e7cf      	b.n	800b260 <__smakebuf_r+0x18>

0800b2c0 <memmove>:
 800b2c0:	4288      	cmp	r0, r1
 800b2c2:	b510      	push	{r4, lr}
 800b2c4:	eb01 0402 	add.w	r4, r1, r2
 800b2c8:	d902      	bls.n	800b2d0 <memmove+0x10>
 800b2ca:	4284      	cmp	r4, r0
 800b2cc:	4623      	mov	r3, r4
 800b2ce:	d807      	bhi.n	800b2e0 <memmove+0x20>
 800b2d0:	1e43      	subs	r3, r0, #1
 800b2d2:	42a1      	cmp	r1, r4
 800b2d4:	d008      	beq.n	800b2e8 <memmove+0x28>
 800b2d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b2da:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b2de:	e7f8      	b.n	800b2d2 <memmove+0x12>
 800b2e0:	4402      	add	r2, r0
 800b2e2:	4601      	mov	r1, r0
 800b2e4:	428a      	cmp	r2, r1
 800b2e6:	d100      	bne.n	800b2ea <memmove+0x2a>
 800b2e8:	bd10      	pop	{r4, pc}
 800b2ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b2ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b2f2:	e7f7      	b.n	800b2e4 <memmove+0x24>

0800b2f4 <_fstat_r>:
 800b2f4:	b538      	push	{r3, r4, r5, lr}
 800b2f6:	4d07      	ldr	r5, [pc, #28]	@ (800b314 <_fstat_r+0x20>)
 800b2f8:	2300      	movs	r3, #0
 800b2fa:	4604      	mov	r4, r0
 800b2fc:	4608      	mov	r0, r1
 800b2fe:	4611      	mov	r1, r2
 800b300:	602b      	str	r3, [r5, #0]
 800b302:	f7f6 f8e1 	bl	80014c8 <_fstat>
 800b306:	1c43      	adds	r3, r0, #1
 800b308:	d102      	bne.n	800b310 <_fstat_r+0x1c>
 800b30a:	682b      	ldr	r3, [r5, #0]
 800b30c:	b103      	cbz	r3, 800b310 <_fstat_r+0x1c>
 800b30e:	6023      	str	r3, [r4, #0]
 800b310:	bd38      	pop	{r3, r4, r5, pc}
 800b312:	bf00      	nop
 800b314:	20001dec 	.word	0x20001dec

0800b318 <_isatty_r>:
 800b318:	b538      	push	{r3, r4, r5, lr}
 800b31a:	4d06      	ldr	r5, [pc, #24]	@ (800b334 <_isatty_r+0x1c>)
 800b31c:	2300      	movs	r3, #0
 800b31e:	4604      	mov	r4, r0
 800b320:	4608      	mov	r0, r1
 800b322:	602b      	str	r3, [r5, #0]
 800b324:	f7f6 f8e0 	bl	80014e8 <_isatty>
 800b328:	1c43      	adds	r3, r0, #1
 800b32a:	d102      	bne.n	800b332 <_isatty_r+0x1a>
 800b32c:	682b      	ldr	r3, [r5, #0]
 800b32e:	b103      	cbz	r3, 800b332 <_isatty_r+0x1a>
 800b330:	6023      	str	r3, [r4, #0]
 800b332:	bd38      	pop	{r3, r4, r5, pc}
 800b334:	20001dec 	.word	0x20001dec

0800b338 <_sbrk_r>:
 800b338:	b538      	push	{r3, r4, r5, lr}
 800b33a:	4d06      	ldr	r5, [pc, #24]	@ (800b354 <_sbrk_r+0x1c>)
 800b33c:	2300      	movs	r3, #0
 800b33e:	4604      	mov	r4, r0
 800b340:	4608      	mov	r0, r1
 800b342:	602b      	str	r3, [r5, #0]
 800b344:	f7f6 f8e8 	bl	8001518 <_sbrk>
 800b348:	1c43      	adds	r3, r0, #1
 800b34a:	d102      	bne.n	800b352 <_sbrk_r+0x1a>
 800b34c:	682b      	ldr	r3, [r5, #0]
 800b34e:	b103      	cbz	r3, 800b352 <_sbrk_r+0x1a>
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	bd38      	pop	{r3, r4, r5, pc}
 800b354:	20001dec 	.word	0x20001dec

0800b358 <abort>:
 800b358:	b508      	push	{r3, lr}
 800b35a:	2006      	movs	r0, #6
 800b35c:	f000 f86e 	bl	800b43c <raise>
 800b360:	2001      	movs	r0, #1
 800b362:	f7f6 f861 	bl	8001428 <_exit>

0800b366 <_calloc_r>:
 800b366:	b570      	push	{r4, r5, r6, lr}
 800b368:	fba1 5402 	umull	r5, r4, r1, r2
 800b36c:	b934      	cbnz	r4, 800b37c <_calloc_r+0x16>
 800b36e:	4629      	mov	r1, r5
 800b370:	f7fe fe98 	bl	800a0a4 <_malloc_r>
 800b374:	4606      	mov	r6, r0
 800b376:	b928      	cbnz	r0, 800b384 <_calloc_r+0x1e>
 800b378:	4630      	mov	r0, r6
 800b37a:	bd70      	pop	{r4, r5, r6, pc}
 800b37c:	220c      	movs	r2, #12
 800b37e:	6002      	str	r2, [r0, #0]
 800b380:	2600      	movs	r6, #0
 800b382:	e7f9      	b.n	800b378 <_calloc_r+0x12>
 800b384:	462a      	mov	r2, r5
 800b386:	4621      	mov	r1, r4
 800b388:	f7fd fb3c 	bl	8008a04 <memset>
 800b38c:	e7f4      	b.n	800b378 <_calloc_r+0x12>

0800b38e <_realloc_r>:
 800b38e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b392:	4607      	mov	r7, r0
 800b394:	4614      	mov	r4, r2
 800b396:	460d      	mov	r5, r1
 800b398:	b921      	cbnz	r1, 800b3a4 <_realloc_r+0x16>
 800b39a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b39e:	4611      	mov	r1, r2
 800b3a0:	f7fe be80 	b.w	800a0a4 <_malloc_r>
 800b3a4:	b92a      	cbnz	r2, 800b3b2 <_realloc_r+0x24>
 800b3a6:	f7fe facf 	bl	8009948 <_free_r>
 800b3aa:	4625      	mov	r5, r4
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3b2:	f000 f85f 	bl	800b474 <_malloc_usable_size_r>
 800b3b6:	4284      	cmp	r4, r0
 800b3b8:	4606      	mov	r6, r0
 800b3ba:	d802      	bhi.n	800b3c2 <_realloc_r+0x34>
 800b3bc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b3c0:	d8f4      	bhi.n	800b3ac <_realloc_r+0x1e>
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	4638      	mov	r0, r7
 800b3c6:	f7fe fe6d 	bl	800a0a4 <_malloc_r>
 800b3ca:	4680      	mov	r8, r0
 800b3cc:	b908      	cbnz	r0, 800b3d2 <_realloc_r+0x44>
 800b3ce:	4645      	mov	r5, r8
 800b3d0:	e7ec      	b.n	800b3ac <_realloc_r+0x1e>
 800b3d2:	42b4      	cmp	r4, r6
 800b3d4:	4622      	mov	r2, r4
 800b3d6:	4629      	mov	r1, r5
 800b3d8:	bf28      	it	cs
 800b3da:	4632      	movcs	r2, r6
 800b3dc:	f7fd fc1f 	bl	8008c1e <memcpy>
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	4638      	mov	r0, r7
 800b3e4:	f7fe fab0 	bl	8009948 <_free_r>
 800b3e8:	e7f1      	b.n	800b3ce <_realloc_r+0x40>

0800b3ea <_raise_r>:
 800b3ea:	291f      	cmp	r1, #31
 800b3ec:	b538      	push	{r3, r4, r5, lr}
 800b3ee:	4605      	mov	r5, r0
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	d904      	bls.n	800b3fe <_raise_r+0x14>
 800b3f4:	2316      	movs	r3, #22
 800b3f6:	6003      	str	r3, [r0, #0]
 800b3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b3fc:	bd38      	pop	{r3, r4, r5, pc}
 800b3fe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b400:	b112      	cbz	r2, 800b408 <_raise_r+0x1e>
 800b402:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b406:	b94b      	cbnz	r3, 800b41c <_raise_r+0x32>
 800b408:	4628      	mov	r0, r5
 800b40a:	f000 f831 	bl	800b470 <_getpid_r>
 800b40e:	4622      	mov	r2, r4
 800b410:	4601      	mov	r1, r0
 800b412:	4628      	mov	r0, r5
 800b414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b418:	f000 b818 	b.w	800b44c <_kill_r>
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	d00a      	beq.n	800b436 <_raise_r+0x4c>
 800b420:	1c59      	adds	r1, r3, #1
 800b422:	d103      	bne.n	800b42c <_raise_r+0x42>
 800b424:	2316      	movs	r3, #22
 800b426:	6003      	str	r3, [r0, #0]
 800b428:	2001      	movs	r0, #1
 800b42a:	e7e7      	b.n	800b3fc <_raise_r+0x12>
 800b42c:	2100      	movs	r1, #0
 800b42e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b432:	4620      	mov	r0, r4
 800b434:	4798      	blx	r3
 800b436:	2000      	movs	r0, #0
 800b438:	e7e0      	b.n	800b3fc <_raise_r+0x12>
	...

0800b43c <raise>:
 800b43c:	4b02      	ldr	r3, [pc, #8]	@ (800b448 <raise+0xc>)
 800b43e:	4601      	mov	r1, r0
 800b440:	6818      	ldr	r0, [r3, #0]
 800b442:	f7ff bfd2 	b.w	800b3ea <_raise_r>
 800b446:	bf00      	nop
 800b448:	200001ec 	.word	0x200001ec

0800b44c <_kill_r>:
 800b44c:	b538      	push	{r3, r4, r5, lr}
 800b44e:	4d07      	ldr	r5, [pc, #28]	@ (800b46c <_kill_r+0x20>)
 800b450:	2300      	movs	r3, #0
 800b452:	4604      	mov	r4, r0
 800b454:	4608      	mov	r0, r1
 800b456:	4611      	mov	r1, r2
 800b458:	602b      	str	r3, [r5, #0]
 800b45a:	f7f5 ffd5 	bl	8001408 <_kill>
 800b45e:	1c43      	adds	r3, r0, #1
 800b460:	d102      	bne.n	800b468 <_kill_r+0x1c>
 800b462:	682b      	ldr	r3, [r5, #0]
 800b464:	b103      	cbz	r3, 800b468 <_kill_r+0x1c>
 800b466:	6023      	str	r3, [r4, #0]
 800b468:	bd38      	pop	{r3, r4, r5, pc}
 800b46a:	bf00      	nop
 800b46c:	20001dec 	.word	0x20001dec

0800b470 <_getpid_r>:
 800b470:	f7f5 bfc2 	b.w	80013f8 <_getpid>

0800b474 <_malloc_usable_size_r>:
 800b474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b478:	1f18      	subs	r0, r3, #4
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	bfbc      	itt	lt
 800b47e:	580b      	ldrlt	r3, [r1, r0]
 800b480:	18c0      	addlt	r0, r0, r3
 800b482:	4770      	bx	lr

0800b484 <_init>:
 800b484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b486:	bf00      	nop
 800b488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b48a:	bc08      	pop	{r3}
 800b48c:	469e      	mov	lr, r3
 800b48e:	4770      	bx	lr

0800b490 <_fini>:
 800b490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b492:	bf00      	nop
 800b494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b496:	bc08      	pop	{r3}
 800b498:	469e      	mov	lr, r3
 800b49a:	4770      	bx	lr
